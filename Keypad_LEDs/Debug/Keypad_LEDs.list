
Keypad_LEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080028e8  080028e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800294c  0800294c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800294c  0800294c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800294c  0800294c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  2000000c  08002960  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08002960  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b0f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001245  00000000  00000000  00023b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000460  00000000  00000000  00024d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000388  00000000  00000000  000251f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f70  00000000  00000000  00025578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bb5  00000000  00000000  0003b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b778  00000000  00000000  0004209d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bd815  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e40  00000000  00000000  000bd890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028d0 	.word	0x080028d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028d0 	.word	0x080028d0

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f907 	bl	8000370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fafc 	bl	8002764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f911 	bl	80003be <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f8e7 	bl	8000386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000040 	.word	0x20000040

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000040 	.word	0x20000040

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	db0a      	blt.n	800029e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	490c      	ldr	r1, [pc, #48]	; (80002c0 <__NVIC_SetPriority+0x4c>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	0112      	lsls	r2, r2, #4
 8000294:	b2d2      	uxtb	r2, r2
 8000296:	440b      	add	r3, r1
 8000298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800029c:	e00a      	b.n	80002b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4908      	ldr	r1, [pc, #32]	; (80002c4 <__NVIC_SetPriority+0x50>)
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f003 030f 	and.w	r3, r3, #15
 80002aa:	3b04      	subs	r3, #4
 80002ac:	0112      	lsls	r2, r2, #4
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	440b      	add	r3, r1
 80002b2:	761a      	strb	r2, [r3, #24]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e100 	.word	0xe000e100
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b089      	sub	sp, #36	; 0x24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002dc:	69fb      	ldr	r3, [r7, #28]
 80002de:	f1c3 0307 	rsb	r3, r3, #7
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	bf28      	it	cs
 80002e6:	2304      	movcs	r3, #4
 80002e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	3304      	adds	r3, #4
 80002ee:	2b06      	cmp	r3, #6
 80002f0:	d902      	bls.n	80002f8 <NVIC_EncodePriority+0x30>
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	3b03      	subs	r3, #3
 80002f6:	e000      	b.n	80002fa <NVIC_EncodePriority+0x32>
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000300:	69bb      	ldr	r3, [r7, #24]
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	43da      	mvns	r2, r3
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	401a      	ands	r2, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000310:	f04f 31ff 	mov.w	r1, #4294967295
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
 800031a:	43d9      	mvns	r1, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000320:	4313      	orrs	r3, r2
         );
}
 8000322:	4618      	mov	r0, r3
 8000324:	3724      	adds	r7, #36	; 0x24
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3b01      	subs	r3, #1
 8000338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800033c:	d301      	bcc.n	8000342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800033e:	2301      	movs	r3, #1
 8000340:	e00f      	b.n	8000362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <SysTick_Config+0x40>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3b01      	subs	r3, #1
 8000348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800034a:	210f      	movs	r1, #15
 800034c:	f04f 30ff 	mov.w	r0, #4294967295
 8000350:	f7ff ff90 	bl	8000274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <SysTick_Config+0x40>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035a:	4b04      	ldr	r3, [pc, #16]	; (800036c <SysTick_Config+0x40>)
 800035c:	2207      	movs	r2, #7
 800035e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000360:	2300      	movs	r3, #0
}
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	e000e010 	.word	0xe000e010

08000370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f7ff ff49 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000386:	b580      	push	{r7, lr}
 8000388:	b086      	sub	sp, #24
 800038a:	af00      	add	r7, sp, #0
 800038c:	4603      	mov	r3, r0
 800038e:	60b9      	str	r1, [r7, #8]
 8000390:	607a      	str	r2, [r7, #4]
 8000392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000398:	f7ff ff5e 	bl	8000258 <__NVIC_GetPriorityGrouping>
 800039c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	68b9      	ldr	r1, [r7, #8]
 80003a2:	6978      	ldr	r0, [r7, #20]
 80003a4:	f7ff ff90 	bl	80002c8 <NVIC_EncodePriority>
 80003a8:	4602      	mov	r2, r0
 80003aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ae:	4611      	mov	r1, r2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff5f 	bl	8000274 <__NVIC_SetPriority>
}
 80003b6:	bf00      	nop
 80003b8:	3718      	adds	r7, #24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f7ff ffb0 	bl	800032c <SysTick_Config>
 80003cc:	4603      	mov	r3, r0
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003d8:	b480      	push	{r7}
 80003da:	b08b      	sub	sp, #44	; 0x2c
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80003e2:	2300      	movs	r3, #0
 80003e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80003e6:	2300      	movs	r3, #0
 80003e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003ea:	e127      	b.n	800063c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80003ec:	2201      	movs	r2, #1
 80003ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	69fa      	ldr	r2, [r7, #28]
 80003fc:	4013      	ands	r3, r2
 80003fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000400:	69ba      	ldr	r2, [r7, #24]
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	429a      	cmp	r2, r3
 8000406:	f040 8116 	bne.w	8000636 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	2b12      	cmp	r3, #18
 8000410:	d034      	beq.n	800047c <HAL_GPIO_Init+0xa4>
 8000412:	2b12      	cmp	r3, #18
 8000414:	d80d      	bhi.n	8000432 <HAL_GPIO_Init+0x5a>
 8000416:	2b02      	cmp	r3, #2
 8000418:	d02b      	beq.n	8000472 <HAL_GPIO_Init+0x9a>
 800041a:	2b02      	cmp	r3, #2
 800041c:	d804      	bhi.n	8000428 <HAL_GPIO_Init+0x50>
 800041e:	2b00      	cmp	r3, #0
 8000420:	d031      	beq.n	8000486 <HAL_GPIO_Init+0xae>
 8000422:	2b01      	cmp	r3, #1
 8000424:	d01c      	beq.n	8000460 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000426:	e048      	b.n	80004ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000428:	2b03      	cmp	r3, #3
 800042a:	d043      	beq.n	80004b4 <HAL_GPIO_Init+0xdc>
 800042c:	2b11      	cmp	r3, #17
 800042e:	d01b      	beq.n	8000468 <HAL_GPIO_Init+0x90>
          break;
 8000430:	e043      	b.n	80004ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000432:	4a89      	ldr	r2, [pc, #548]	; (8000658 <HAL_GPIO_Init+0x280>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d026      	beq.n	8000486 <HAL_GPIO_Init+0xae>
 8000438:	4a87      	ldr	r2, [pc, #540]	; (8000658 <HAL_GPIO_Init+0x280>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d806      	bhi.n	800044c <HAL_GPIO_Init+0x74>
 800043e:	4a87      	ldr	r2, [pc, #540]	; (800065c <HAL_GPIO_Init+0x284>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d020      	beq.n	8000486 <HAL_GPIO_Init+0xae>
 8000444:	4a86      	ldr	r2, [pc, #536]	; (8000660 <HAL_GPIO_Init+0x288>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d01d      	beq.n	8000486 <HAL_GPIO_Init+0xae>
          break;
 800044a:	e036      	b.n	80004ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800044c:	4a85      	ldr	r2, [pc, #532]	; (8000664 <HAL_GPIO_Init+0x28c>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d019      	beq.n	8000486 <HAL_GPIO_Init+0xae>
 8000452:	4a85      	ldr	r2, [pc, #532]	; (8000668 <HAL_GPIO_Init+0x290>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d016      	beq.n	8000486 <HAL_GPIO_Init+0xae>
 8000458:	4a84      	ldr	r2, [pc, #528]	; (800066c <HAL_GPIO_Init+0x294>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d013      	beq.n	8000486 <HAL_GPIO_Init+0xae>
          break;
 800045e:	e02c      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	623b      	str	r3, [r7, #32]
          break;
 8000466:	e028      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	3304      	adds	r3, #4
 800046e:	623b      	str	r3, [r7, #32]
          break;
 8000470:	e023      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	3308      	adds	r3, #8
 8000478:	623b      	str	r3, [r7, #32]
          break;
 800047a:	e01e      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	330c      	adds	r3, #12
 8000482:	623b      	str	r3, [r7, #32]
          break;
 8000484:	e019      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d102      	bne.n	8000494 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800048e:	2304      	movs	r3, #4
 8000490:	623b      	str	r3, [r7, #32]
          break;
 8000492:	e012      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d105      	bne.n	80004a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800049c:	2308      	movs	r3, #8
 800049e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	69fa      	ldr	r2, [r7, #28]
 80004a4:	611a      	str	r2, [r3, #16]
          break;
 80004a6:	e008      	b.n	80004ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004a8:	2308      	movs	r3, #8
 80004aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	69fa      	ldr	r2, [r7, #28]
 80004b0:	615a      	str	r2, [r3, #20]
          break;
 80004b2:	e002      	b.n	80004ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004b4:	2300      	movs	r3, #0
 80004b6:	623b      	str	r3, [r7, #32]
          break;
 80004b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004ba:	69bb      	ldr	r3, [r7, #24]
 80004bc:	2bff      	cmp	r3, #255	; 0xff
 80004be:	d801      	bhi.n	80004c4 <HAL_GPIO_Init+0xec>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	e001      	b.n	80004c8 <HAL_GPIO_Init+0xf0>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	3304      	adds	r3, #4
 80004c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80004ca:	69bb      	ldr	r3, [r7, #24]
 80004cc:	2bff      	cmp	r3, #255	; 0xff
 80004ce:	d802      	bhi.n	80004d6 <HAL_GPIO_Init+0xfe>
 80004d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	e002      	b.n	80004dc <HAL_GPIO_Init+0x104>
 80004d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d8:	3b08      	subs	r3, #8
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	210f      	movs	r1, #15
 80004e4:	693b      	ldr	r3, [r7, #16]
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	43db      	mvns	r3, r3
 80004ec:	401a      	ands	r2, r3
 80004ee:	6a39      	ldr	r1, [r7, #32]
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	431a      	orrs	r2, r3
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000504:	2b00      	cmp	r3, #0
 8000506:	f000 8096 	beq.w	8000636 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800050a:	4b59      	ldr	r3, [pc, #356]	; (8000670 <HAL_GPIO_Init+0x298>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a58      	ldr	r2, [pc, #352]	; (8000670 <HAL_GPIO_Init+0x298>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4b56      	ldr	r3, [pc, #344]	; (8000670 <HAL_GPIO_Init+0x298>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000522:	4a54      	ldr	r2, [pc, #336]	; (8000674 <HAL_GPIO_Init+0x29c>)
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	089b      	lsrs	r3, r3, #2
 8000528:	3302      	adds	r3, #2
 800052a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000532:	f003 0303 	and.w	r3, r3, #3
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	220f      	movs	r2, #15
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	4013      	ands	r3, r2
 8000544:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a4b      	ldr	r2, [pc, #300]	; (8000678 <HAL_GPIO_Init+0x2a0>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d013      	beq.n	8000576 <HAL_GPIO_Init+0x19e>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a4a      	ldr	r2, [pc, #296]	; (800067c <HAL_GPIO_Init+0x2a4>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d00d      	beq.n	8000572 <HAL_GPIO_Init+0x19a>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a49      	ldr	r2, [pc, #292]	; (8000680 <HAL_GPIO_Init+0x2a8>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d007      	beq.n	800056e <HAL_GPIO_Init+0x196>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a48      	ldr	r2, [pc, #288]	; (8000684 <HAL_GPIO_Init+0x2ac>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d101      	bne.n	800056a <HAL_GPIO_Init+0x192>
 8000566:	2303      	movs	r3, #3
 8000568:	e006      	b.n	8000578 <HAL_GPIO_Init+0x1a0>
 800056a:	2304      	movs	r3, #4
 800056c:	e004      	b.n	8000578 <HAL_GPIO_Init+0x1a0>
 800056e:	2302      	movs	r3, #2
 8000570:	e002      	b.n	8000578 <HAL_GPIO_Init+0x1a0>
 8000572:	2301      	movs	r3, #1
 8000574:	e000      	b.n	8000578 <HAL_GPIO_Init+0x1a0>
 8000576:	2300      	movs	r3, #0
 8000578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800057a:	f002 0203 	and.w	r2, r2, #3
 800057e:	0092      	lsls	r2, r2, #2
 8000580:	4093      	lsls	r3, r2
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	4313      	orrs	r3, r2
 8000586:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000588:	493a      	ldr	r1, [pc, #232]	; (8000674 <HAL_GPIO_Init+0x29c>)
 800058a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	3302      	adds	r3, #2
 8000590:	68fa      	ldr	r2, [r7, #12]
 8000592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005a2:	4b39      	ldr	r3, [pc, #228]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4938      	ldr	r1, [pc, #224]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	600b      	str	r3, [r1, #0]
 80005ae:	e006      	b.n	80005be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005b0:	4b35      	ldr	r3, [pc, #212]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	43db      	mvns	r3, r3
 80005b8:	4933      	ldr	r1, [pc, #204]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005ba:	4013      	ands	r3, r2
 80005bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d006      	beq.n	80005d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	492e      	ldr	r1, [pc, #184]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	604b      	str	r3, [r1, #4]
 80005d6:	e006      	b.n	80005e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005d8:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	69bb      	ldr	r3, [r7, #24]
 80005de:	43db      	mvns	r3, r3
 80005e0:	4929      	ldr	r1, [pc, #164]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005e2:	4013      	ands	r3, r2
 80005e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d006      	beq.n	8000600 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	4924      	ldr	r1, [pc, #144]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	608b      	str	r3, [r1, #8]
 80005fe:	e006      	b.n	800060e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	69bb      	ldr	r3, [r7, #24]
 8000606:	43db      	mvns	r3, r3
 8000608:	491f      	ldr	r1, [pc, #124]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 800060a:	4013      	ands	r3, r2
 800060c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800061a:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 800061c:	68da      	ldr	r2, [r3, #12]
 800061e:	491a      	ldr	r1, [pc, #104]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	4313      	orrs	r3, r2
 8000624:	60cb      	str	r3, [r1, #12]
 8000626:	e006      	b.n	8000636 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 800062a:	68da      	ldr	r2, [r3, #12]
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	43db      	mvns	r3, r3
 8000630:	4915      	ldr	r1, [pc, #84]	; (8000688 <HAL_GPIO_Init+0x2b0>)
 8000632:	4013      	ands	r3, r2
 8000634:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000638:	3301      	adds	r3, #1
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000642:	fa22 f303 	lsr.w	r3, r2, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	f47f aed0 	bne.w	80003ec <HAL_GPIO_Init+0x14>
  }
}
 800064c:	bf00      	nop
 800064e:	372c      	adds	r7, #44	; 0x2c
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	10210000 	.word	0x10210000
 800065c:	10110000 	.word	0x10110000
 8000660:	10120000 	.word	0x10120000
 8000664:	10310000 	.word	0x10310000
 8000668:	10320000 	.word	0x10320000
 800066c:	10220000 	.word	0x10220000
 8000670:	40021000 	.word	0x40021000
 8000674:	40010000 	.word	0x40010000
 8000678:	40010800 	.word	0x40010800
 800067c:	40010c00 	.word	0x40010c00
 8000680:	40011000 	.word	0x40011000
 8000684:	40011400 	.word	0x40011400
 8000688:	40010400 	.word	0x40010400

0800068c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	887b      	ldrh	r3, [r7, #2]
 800069e:	4013      	ands	r3, r2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d002      	beq.n	80006aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80006a4:	2301      	movs	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	e001      	b.n	80006ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80006aa:	2300      	movs	r3, #0
 80006ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr

080006ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	460b      	mov	r3, r1
 80006c4:	807b      	strh	r3, [r7, #2]
 80006c6:	4613      	mov	r3, r2
 80006c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006ca:	787b      	ldrb	r3, [r7, #1]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d003      	beq.n	80006d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006d0:	887a      	ldrh	r2, [r7, #2]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80006d6:	e003      	b.n	80006e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80006d8:	887b      	ldrh	r3, [r7, #2]
 80006da:	041a      	lsls	r2, r3, #16
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	611a      	str	r2, [r3, #16]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
	...

080006ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d101      	bne.n	80006fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e26c      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	2b00      	cmp	r3, #0
 8000708:	f000 8087 	beq.w	800081a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800070c:	4b92      	ldr	r3, [pc, #584]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	f003 030c 	and.w	r3, r3, #12
 8000714:	2b04      	cmp	r3, #4
 8000716:	d00c      	beq.n	8000732 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000718:	4b8f      	ldr	r3, [pc, #572]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	f003 030c 	and.w	r3, r3, #12
 8000720:	2b08      	cmp	r3, #8
 8000722:	d112      	bne.n	800074a <HAL_RCC_OscConfig+0x5e>
 8000724:	4b8c      	ldr	r3, [pc, #560]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800072c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000730:	d10b      	bne.n	800074a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000732:	4b89      	ldr	r3, [pc, #548]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073a:	2b00      	cmp	r3, #0
 800073c:	d06c      	beq.n	8000818 <HAL_RCC_OscConfig+0x12c>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d168      	bne.n	8000818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e246      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000752:	d106      	bne.n	8000762 <HAL_RCC_OscConfig+0x76>
 8000754:	4b80      	ldr	r3, [pc, #512]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a7f      	ldr	r2, [pc, #508]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 800075a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	e02e      	b.n	80007c0 <HAL_RCC_OscConfig+0xd4>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d10c      	bne.n	8000784 <HAL_RCC_OscConfig+0x98>
 800076a:	4b7b      	ldr	r3, [pc, #492]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a7a      	ldr	r2, [pc, #488]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	4b78      	ldr	r3, [pc, #480]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a77      	ldr	r2, [pc, #476]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 800077c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000780:	6013      	str	r3, [r2, #0]
 8000782:	e01d      	b.n	80007c0 <HAL_RCC_OscConfig+0xd4>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800078c:	d10c      	bne.n	80007a8 <HAL_RCC_OscConfig+0xbc>
 800078e:	4b72      	ldr	r3, [pc, #456]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a71      	ldr	r2, [pc, #452]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	4b6f      	ldr	r3, [pc, #444]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a6e      	ldr	r2, [pc, #440]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 80007a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	e00b      	b.n	80007c0 <HAL_RCC_OscConfig+0xd4>
 80007a8:	4b6b      	ldr	r3, [pc, #428]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a6a      	ldr	r2, [pc, #424]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 80007ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b68      	ldr	r3, [pc, #416]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a67      	ldr	r2, [pc, #412]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 80007ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d013      	beq.n	80007f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007c8:	f7ff fd18 	bl	80001fc <HAL_GetTick>
 80007cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007ce:	e008      	b.n	80007e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007d0:	f7ff fd14 	bl	80001fc <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	2b64      	cmp	r3, #100	; 0x64
 80007dc:	d901      	bls.n	80007e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80007de:	2303      	movs	r3, #3
 80007e0:	e1fa      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007e2:	4b5d      	ldr	r3, [pc, #372]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f0      	beq.n	80007d0 <HAL_RCC_OscConfig+0xe4>
 80007ee:	e014      	b.n	800081a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007f0:	f7ff fd04 	bl	80001fc <HAL_GetTick>
 80007f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007f6:	e008      	b.n	800080a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007f8:	f7ff fd00 	bl	80001fc <HAL_GetTick>
 80007fc:	4602      	mov	r2, r0
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	2b64      	cmp	r3, #100	; 0x64
 8000804:	d901      	bls.n	800080a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000806:	2303      	movs	r3, #3
 8000808:	e1e6      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800080a:	4b53      	ldr	r3, [pc, #332]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1f0      	bne.n	80007f8 <HAL_RCC_OscConfig+0x10c>
 8000816:	e000      	b.n	800081a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	2b00      	cmp	r3, #0
 8000824:	d063      	beq.n	80008ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000826:	4b4c      	ldr	r3, [pc, #304]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f003 030c 	and.w	r3, r3, #12
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00b      	beq.n	800084a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000832:	4b49      	ldr	r3, [pc, #292]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	f003 030c 	and.w	r3, r3, #12
 800083a:	2b08      	cmp	r3, #8
 800083c:	d11c      	bne.n	8000878 <HAL_RCC_OscConfig+0x18c>
 800083e:	4b46      	ldr	r3, [pc, #280]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d116      	bne.n	8000878 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800084a:	4b43      	ldr	r3, [pc, #268]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	2b00      	cmp	r3, #0
 8000854:	d005      	beq.n	8000862 <HAL_RCC_OscConfig+0x176>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	691b      	ldr	r3, [r3, #16]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d001      	beq.n	8000862 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e1ba      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000862:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	4939      	ldr	r1, [pc, #228]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000872:	4313      	orrs	r3, r2
 8000874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000876:	e03a      	b.n	80008ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	691b      	ldr	r3, [r3, #16]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d020      	beq.n	80008c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <HAL_RCC_OscConfig+0x270>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000886:	f7ff fcb9 	bl	80001fc <HAL_GetTick>
 800088a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800088c:	e008      	b.n	80008a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800088e:	f7ff fcb5 	bl	80001fc <HAL_GetTick>
 8000892:	4602      	mov	r2, r0
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	2b02      	cmp	r3, #2
 800089a:	d901      	bls.n	80008a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800089c:	2303      	movs	r3, #3
 800089e:	e19b      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008a0:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f003 0302 	and.w	r3, r3, #2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0f0      	beq.n	800088e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ac:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	4927      	ldr	r1, [pc, #156]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 80008bc:	4313      	orrs	r3, r2
 80008be:	600b      	str	r3, [r1, #0]
 80008c0:	e015      	b.n	80008ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <HAL_RCC_OscConfig+0x270>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008c8:	f7ff fc98 	bl	80001fc <HAL_GetTick>
 80008cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008ce:	e008      	b.n	80008e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008d0:	f7ff fc94 	bl	80001fc <HAL_GetTick>
 80008d4:	4602      	mov	r2, r0
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d901      	bls.n	80008e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80008de:	2303      	movs	r3, #3
 80008e0:	e17a      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1f0      	bne.n	80008d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d03a      	beq.n	8000970 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d019      	beq.n	8000936 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <HAL_RCC_OscConfig+0x274>)
 8000904:	2201      	movs	r2, #1
 8000906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000908:	f7ff fc78 	bl	80001fc <HAL_GetTick>
 800090c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800090e:	e008      	b.n	8000922 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000910:	f7ff fc74 	bl	80001fc <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	2b02      	cmp	r3, #2
 800091c:	d901      	bls.n	8000922 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800091e:	2303      	movs	r3, #3
 8000920:	e15a      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <HAL_RCC_OscConfig+0x26c>)
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	2b00      	cmp	r3, #0
 800092c:	d0f0      	beq.n	8000910 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f000 faa8 	bl	8000e84 <RCC_Delay>
 8000934:	e01c      	b.n	8000970 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_RCC_OscConfig+0x274>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800093c:	f7ff fc5e 	bl	80001fc <HAL_GetTick>
 8000940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000942:	e00f      	b.n	8000964 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000944:	f7ff fc5a 	bl	80001fc <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	2b02      	cmp	r3, #2
 8000950:	d908      	bls.n	8000964 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000952:	2303      	movs	r3, #3
 8000954:	e140      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000
 800095c:	42420000 	.word	0x42420000
 8000960:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000964:	4b9e      	ldr	r3, [pc, #632]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000968:	f003 0302 	and.w	r3, r3, #2
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1e9      	bne.n	8000944 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 80a6 	beq.w	8000aca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000982:	4b97      	ldr	r3, [pc, #604]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10d      	bne.n	80009aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b94      	ldr	r3, [pc, #592]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	4a93      	ldr	r2, [pc, #588]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	61d3      	str	r3, [r2, #28]
 800099a:	4b91      	ldr	r3, [pc, #580]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80009a6:	2301      	movs	r3, #1
 80009a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009aa:	4b8e      	ldr	r3, [pc, #568]	; (8000be4 <HAL_RCC_OscConfig+0x4f8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d118      	bne.n	80009e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009b6:	4b8b      	ldr	r3, [pc, #556]	; (8000be4 <HAL_RCC_OscConfig+0x4f8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a8a      	ldr	r2, [pc, #552]	; (8000be4 <HAL_RCC_OscConfig+0x4f8>)
 80009bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009c2:	f7ff fc1b 	bl	80001fc <HAL_GetTick>
 80009c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c8:	e008      	b.n	80009dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009ca:	f7ff fc17 	bl	80001fc <HAL_GetTick>
 80009ce:	4602      	mov	r2, r0
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	2b64      	cmp	r3, #100	; 0x64
 80009d6:	d901      	bls.n	80009dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80009d8:	2303      	movs	r3, #3
 80009da:	e0fd      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009dc:	4b81      	ldr	r3, [pc, #516]	; (8000be4 <HAL_RCC_OscConfig+0x4f8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d0f0      	beq.n	80009ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d106      	bne.n	80009fe <HAL_RCC_OscConfig+0x312>
 80009f0:	4b7b      	ldr	r3, [pc, #492]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 80009f2:	6a1b      	ldr	r3, [r3, #32]
 80009f4:	4a7a      	ldr	r2, [pc, #488]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6213      	str	r3, [r2, #32]
 80009fc:	e02d      	b.n	8000a5a <HAL_RCC_OscConfig+0x36e>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10c      	bne.n	8000a20 <HAL_RCC_OscConfig+0x334>
 8000a06:	4b76      	ldr	r3, [pc, #472]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a08:	6a1b      	ldr	r3, [r3, #32]
 8000a0a:	4a75      	ldr	r2, [pc, #468]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a0c:	f023 0301 	bic.w	r3, r3, #1
 8000a10:	6213      	str	r3, [r2, #32]
 8000a12:	4b73      	ldr	r3, [pc, #460]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a14:	6a1b      	ldr	r3, [r3, #32]
 8000a16:	4a72      	ldr	r2, [pc, #456]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a18:	f023 0304 	bic.w	r3, r3, #4
 8000a1c:	6213      	str	r3, [r2, #32]
 8000a1e:	e01c      	b.n	8000a5a <HAL_RCC_OscConfig+0x36e>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	2b05      	cmp	r3, #5
 8000a26:	d10c      	bne.n	8000a42 <HAL_RCC_OscConfig+0x356>
 8000a28:	4b6d      	ldr	r3, [pc, #436]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a2a:	6a1b      	ldr	r3, [r3, #32]
 8000a2c:	4a6c      	ldr	r2, [pc, #432]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	6213      	str	r3, [r2, #32]
 8000a34:	4b6a      	ldr	r3, [pc, #424]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a36:	6a1b      	ldr	r3, [r3, #32]
 8000a38:	4a69      	ldr	r2, [pc, #420]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6213      	str	r3, [r2, #32]
 8000a40:	e00b      	b.n	8000a5a <HAL_RCC_OscConfig+0x36e>
 8000a42:	4b67      	ldr	r3, [pc, #412]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a44:	6a1b      	ldr	r3, [r3, #32]
 8000a46:	4a66      	ldr	r2, [pc, #408]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a48:	f023 0301 	bic.w	r3, r3, #1
 8000a4c:	6213      	str	r3, [r2, #32]
 8000a4e:	4b64      	ldr	r3, [pc, #400]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a50:	6a1b      	ldr	r3, [r3, #32]
 8000a52:	4a63      	ldr	r2, [pc, #396]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a54:	f023 0304 	bic.w	r3, r3, #4
 8000a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d015      	beq.n	8000a8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a62:	f7ff fbcb 	bl	80001fc <HAL_GetTick>
 8000a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a68:	e00a      	b.n	8000a80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a6a:	f7ff fbc7 	bl	80001fc <HAL_GetTick>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d901      	bls.n	8000a80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e0ab      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a80:	4b57      	ldr	r3, [pc, #348]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000a82:	6a1b      	ldr	r3, [r3, #32]
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0ee      	beq.n	8000a6a <HAL_RCC_OscConfig+0x37e>
 8000a8c:	e014      	b.n	8000ab8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a8e:	f7ff fbb5 	bl	80001fc <HAL_GetTick>
 8000a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a94:	e00a      	b.n	8000aac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a96:	f7ff fbb1 	bl	80001fc <HAL_GetTick>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d901      	bls.n	8000aac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	e095      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aac:	4b4c      	ldr	r3, [pc, #304]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1ee      	bne.n	8000a96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d105      	bne.n	8000aca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a47      	ldr	r2, [pc, #284]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f000 8081 	beq.w	8000bd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ad4:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f003 030c 	and.w	r3, r3, #12
 8000adc:	2b08      	cmp	r3, #8
 8000ade:	d061      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d146      	bne.n	8000b76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ae8:	4b3f      	ldr	r3, [pc, #252]	; (8000be8 <HAL_RCC_OscConfig+0x4fc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aee:	f7ff fb85 	bl	80001fc <HAL_GetTick>
 8000af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000af4:	e008      	b.n	8000b08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000af6:	f7ff fb81 	bl	80001fc <HAL_GetTick>
 8000afa:	4602      	mov	r2, r0
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d901      	bls.n	8000b08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b04:	2303      	movs	r3, #3
 8000b06:	e067      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b08:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1f0      	bne.n	8000af6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b1c:	d108      	bne.n	8000b30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b1e:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	492d      	ldr	r1, [pc, #180]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b30:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a19      	ldr	r1, [r3, #32]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b40:	430b      	orrs	r3, r1
 8000b42:	4927      	ldr	r1, [pc, #156]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000b44:	4313      	orrs	r3, r2
 8000b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b48:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <HAL_RCC_OscConfig+0x4fc>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b4e:	f7ff fb55 	bl	80001fc <HAL_GetTick>
 8000b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b54:	e008      	b.n	8000b68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b56:	f7ff fb51 	bl	80001fc <HAL_GetTick>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d901      	bls.n	8000b68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000b64:	2303      	movs	r3, #3
 8000b66:	e037      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0f0      	beq.n	8000b56 <HAL_RCC_OscConfig+0x46a>
 8000b74:	e02f      	b.n	8000bd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_RCC_OscConfig+0x4fc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fb3e 	bl	80001fc <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b84:	f7ff fb3a 	bl	80001fc <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e020      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f0      	bne.n	8000b84 <HAL_RCC_OscConfig+0x498>
 8000ba2:	e018      	b.n	8000bd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d101      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e013      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_RCC_OscConfig+0x4f4>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a1b      	ldr	r3, [r3, #32]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d106      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d001      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40007000 	.word	0x40007000
 8000be8:	42420060 	.word	0x42420060

08000bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d101      	bne.n	8000c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e0d0      	b.n	8000da2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c00:	4b6a      	ldr	r3, [pc, #424]	; (8000dac <HAL_RCC_ClockConfig+0x1c0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 0307 	and.w	r3, r3, #7
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d910      	bls.n	8000c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c0e:	4b67      	ldr	r3, [pc, #412]	; (8000dac <HAL_RCC_ClockConfig+0x1c0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f023 0207 	bic.w	r2, r3, #7
 8000c16:	4965      	ldr	r1, [pc, #404]	; (8000dac <HAL_RCC_ClockConfig+0x1c0>)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c1e:	4b63      	ldr	r3, [pc, #396]	; (8000dac <HAL_RCC_ClockConfig+0x1c0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d001      	beq.n	8000c30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e0b8      	b.n	8000da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d020      	beq.n	8000c7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d005      	beq.n	8000c54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c48:	4b59      	ldr	r3, [pc, #356]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	4a58      	ldr	r2, [pc, #352]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d005      	beq.n	8000c6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c60:	4b53      	ldr	r3, [pc, #332]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	4a52      	ldr	r2, [pc, #328]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c6c:	4b50      	ldr	r3, [pc, #320]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	494d      	ldr	r1, [pc, #308]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d040      	beq.n	8000d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d107      	bne.n	8000ca2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c92:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d115      	bne.n	8000cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e07f      	b.n	8000da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d107      	bne.n	8000cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000caa:	4b41      	ldr	r3, [pc, #260]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d109      	bne.n	8000cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e073      	b.n	8000da2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cba:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e06b      	b.n	8000da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cca:	4b39      	ldr	r3, [pc, #228]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f023 0203 	bic.w	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	4936      	ldr	r1, [pc, #216]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cdc:	f7ff fa8e 	bl	80001fc <HAL_GetTick>
 8000ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ce2:	e00a      	b.n	8000cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce4:	f7ff fa8a 	bl	80001fc <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e053      	b.n	8000da2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 020c 	and.w	r2, r3, #12
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d1eb      	bne.n	8000ce4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d0c:	4b27      	ldr	r3, [pc, #156]	; (8000dac <HAL_RCC_ClockConfig+0x1c0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d210      	bcs.n	8000d3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d1a:	4b24      	ldr	r3, [pc, #144]	; (8000dac <HAL_RCC_ClockConfig+0x1c0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f023 0207 	bic.w	r2, r3, #7
 8000d22:	4922      	ldr	r1, [pc, #136]	; (8000dac <HAL_RCC_ClockConfig+0x1c0>)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <HAL_RCC_ClockConfig+0x1c0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d001      	beq.n	8000d3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e032      	b.n	8000da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d008      	beq.n	8000d5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	4916      	ldr	r1, [pc, #88]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d009      	beq.n	8000d7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	490e      	ldr	r1, [pc, #56]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d7a:	f000 f821 	bl	8000dc0 <HAL_RCC_GetSysClockFreq>
 8000d7e:	4601      	mov	r1, r0
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <HAL_RCC_ClockConfig+0x1c4>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_RCC_ClockConfig+0x1c8>)
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <HAL_RCC_ClockConfig+0x1cc>)
 8000d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_RCC_ClockConfig+0x1d0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff f9ec 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40022000 	.word	0x40022000
 8000db0:	40021000 	.word	0x40021000
 8000db4:	0800293c 	.word	0x0800293c
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000dc0:	b490      	push	{r4, r7}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000dc8:	1d3c      	adds	r4, r7, #4
 8000dca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d002      	beq.n	8000e00 <HAL_RCC_GetSysClockFreq+0x40>
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d003      	beq.n	8000e06 <HAL_RCC_GetSysClockFreq+0x46>
 8000dfe:	e02d      	b.n	8000e5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e02:	623b      	str	r3, [r7, #32]
      break;
 8000e04:	e02d      	b.n	8000e62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	0c9b      	lsrs	r3, r3, #18
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e12:	4413      	add	r3, r2
 8000e14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d013      	beq.n	8000e4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	0c5b      	lsrs	r3, r3, #17
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e32:	4413      	add	r3, r2
 8000e34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e3e:	fb02 f203 	mul.w	r2, r2, r3
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4a:	e004      	b.n	8000e56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	623b      	str	r3, [r7, #32]
      break;
 8000e5a:	e002      	b.n	8000e62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e5e:	623b      	str	r3, [r7, #32]
      break;
 8000e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e62:	6a3b      	ldr	r3, [r7, #32]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc90      	pop	{r4, r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	080028e8 	.word	0x080028e8
 8000e74:	080028f8 	.word	0x080028f8
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	007a1200 	.word	0x007a1200
 8000e80:	003d0900 	.word	0x003d0900

08000e84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <RCC_Delay+0x34>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <RCC_Delay+0x38>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	0a5b      	lsrs	r3, r3, #9
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	fb02 f303 	mul.w	r3, r2, r3
 8000e9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000ea0:	bf00      	nop
  }
  while (Delay --);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	1e5a      	subs	r2, r3, #1
 8000ea6:	60fa      	str	r2, [r7, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f9      	bne.n	8000ea0 <RCC_Delay+0x1c>
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	10624dd3 	.word	0x10624dd3

08000ec0 <KEYPAD_Init>:
static KEYPAD_info gs_KEYPAD_info[KEYPAD_UNITS] = {0};



void KEYPAD_Init(uint16_t au16_Instance, uint8_t* au8_KeyStates)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b092      	sub	sp, #72	; 0x48
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]

	if(au8_KeyStates != NULL)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8189 	beq.w	80011fa <KEYPAD_Init+0x33a>
	{
		gs_KEYPAD_info[au16_Instance].KEY_States = au8_KeyStates;
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	4997      	ldr	r1, [pc, #604]	; (8001148 <KEYPAD_Init+0x288>)
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	{
		/* Potentially Should Return An Error */
		return;
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000ef8:	e0ac      	b.n	8001054 <KEYPAD_Init+0x194>
	{
		if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOA)
 8000efa:	88fa      	ldrh	r2, [r7, #6]
 8000efc:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8000f00:	4892      	ldr	r0, [pc, #584]	; (800114c <KEYPAD_Init+0x28c>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000f10:	4a8f      	ldr	r2, [pc, #572]	; (8001150 <KEYPAD_Init+0x290>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d10c      	bne.n	8000f30 <KEYPAD_Init+0x70>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b8f      	ldr	r3, [pc, #572]	; (8001154 <KEYPAD_Init+0x294>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	4a8e      	ldr	r2, [pc, #568]	; (8001154 <KEYPAD_Init+0x294>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6193      	str	r3, [r2, #24]
 8000f22:	4b8c      	ldr	r3, [pc, #560]	; (8001154 <KEYPAD_Init+0x294>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8000f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f2e:	e06a      	b.n	8001006 <KEYPAD_Init+0x146>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOB)
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8000f36:	4885      	ldr	r0, [pc, #532]	; (800114c <KEYPAD_Init+0x28c>)
 8000f38:	4613      	mov	r3, r2
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	4413      	add	r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000f46:	4a84      	ldr	r2, [pc, #528]	; (8001158 <KEYPAD_Init+0x298>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d10c      	bne.n	8000f66 <KEYPAD_Init+0xa6>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4c:	4b81      	ldr	r3, [pc, #516]	; (8001154 <KEYPAD_Init+0x294>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a80      	ldr	r2, [pc, #512]	; (8001154 <KEYPAD_Init+0x294>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b7e      	ldr	r3, [pc, #504]	; (8001154 <KEYPAD_Init+0x294>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	e04f      	b.n	8001006 <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOC)
 8000f66:	88fa      	ldrh	r2, [r7, #6]
 8000f68:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8000f6c:	4877      	ldr	r0, [pc, #476]	; (800114c <KEYPAD_Init+0x28c>)
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	440b      	add	r3, r1
 8000f78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000f7c:	4a77      	ldr	r2, [pc, #476]	; (800115c <KEYPAD_Init+0x29c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d10c      	bne.n	8000f9c <KEYPAD_Init+0xdc>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b74      	ldr	r3, [pc, #464]	; (8001154 <KEYPAD_Init+0x294>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	4a73      	ldr	r2, [pc, #460]	; (8001154 <KEYPAD_Init+0x294>)
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	6193      	str	r3, [r2, #24]
 8000f8e:	4b71      	ldr	r3, [pc, #452]	; (8001154 <KEYPAD_Init+0x294>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9a:	e034      	b.n	8001006 <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOD)
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8000fa2:	486a      	ldr	r0, [pc, #424]	; (800114c <KEYPAD_Init+0x28c>)
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000fb2:	4a6b      	ldr	r2, [pc, #428]	; (8001160 <KEYPAD_Init+0x2a0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d10c      	bne.n	8000fd2 <KEYPAD_Init+0x112>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb8:	4b66      	ldr	r3, [pc, #408]	; (8001154 <KEYPAD_Init+0x294>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a65      	ldr	r2, [pc, #404]	; (8001154 <KEYPAD_Init+0x294>)
 8000fbe:	f043 0320 	orr.w	r3, r3, #32
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b63      	ldr	r3, [pc, #396]	; (8001154 <KEYPAD_Init+0x294>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0320 	and.w	r3, r3, #32
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	e019      	b.n	8001006 <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOE)
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8000fd8:	485c      	ldr	r0, [pc, #368]	; (800114c <KEYPAD_Init+0x28c>)
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000fe8:	4a5e      	ldr	r2, [pc, #376]	; (8001164 <KEYPAD_Init+0x2a4>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10b      	bne.n	8001006 <KEYPAD_Init+0x146>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 8000fee:	4b59      	ldr	r3, [pc, #356]	; (8001154 <KEYPAD_Init+0x294>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a58      	ldr	r2, [pc, #352]	; (8001154 <KEYPAD_Init+0x294>)
 8000ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b56      	ldr	r3, [pc, #344]	; (8001154 <KEYPAD_Init+0x294>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001002:	623b      	str	r3, [r7, #32]
 8001004:	6a3b      	ldr	r3, [r7, #32]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].ROW_PIN[i];
 8001006:	88fa      	ldrh	r2, [r7, #6]
 8001008:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800100c:	484f      	ldr	r0, [pc, #316]	; (800114c <KEYPAD_Init+0x28c>)
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	440b      	add	r3, r1
 8001018:	3308      	adds	r3, #8
 800101a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001024:	2302      	movs	r3, #2
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], &GPIO_InitStruct);
 8001028:	88fa      	ldrh	r2, [r7, #6]
 800102a:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800102e:	4847      	ldr	r0, [pc, #284]	; (800114c <KEYPAD_Init+0x28c>)
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	440b      	add	r3, r1
 800103a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800103e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f9c7 	bl	80003d8 <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 800104a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800104e:	3301      	adds	r3, #1
 8001050:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001054:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001058:	2b03      	cmp	r3, #3
 800105a:	f67f af4e 	bls.w	8000efa <KEYPAD_Init+0x3a>
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001064:	e0c3      	b.n	80011ee <KEYPAD_Init+0x32e>
	{
		if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOA)
 8001066:	88fa      	ldrh	r2, [r7, #6]
 8001068:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800106c:	4837      	ldr	r0, [pc, #220]	; (800114c <KEYPAD_Init+0x28c>)
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	3306      	adds	r3, #6
 800107a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800107e:	4a34      	ldr	r2, [pc, #208]	; (8001150 <KEYPAD_Init+0x290>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d10c      	bne.n	800109e <KEYPAD_Init+0x1de>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b33      	ldr	r3, [pc, #204]	; (8001154 <KEYPAD_Init+0x294>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a32      	ldr	r2, [pc, #200]	; (8001154 <KEYPAD_Init+0x294>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b30      	ldr	r3, [pc, #192]	; (8001154 <KEYPAD_Init+0x294>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	e07f      	b.n	800119e <KEYPAD_Init+0x2de>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOB)
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80010a4:	4829      	ldr	r0, [pc, #164]	; (800114c <KEYPAD_Init+0x28c>)
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	3306      	adds	r3, #6
 80010b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80010b6:	4a28      	ldr	r2, [pc, #160]	; (8001158 <KEYPAD_Init+0x298>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d10c      	bne.n	80010d6 <KEYPAD_Init+0x216>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <KEYPAD_Init+0x294>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a24      	ldr	r2, [pc, #144]	; (8001154 <KEYPAD_Init+0x294>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <KEYPAD_Init+0x294>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	e063      	b.n	800119e <KEYPAD_Init+0x2de>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOC)
 80010d6:	88fa      	ldrh	r2, [r7, #6]
 80010d8:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80010dc:	481b      	ldr	r0, [pc, #108]	; (800114c <KEYPAD_Init+0x28c>)
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	3306      	adds	r3, #6
 80010ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80010ee:	4a1b      	ldr	r2, [pc, #108]	; (800115c <KEYPAD_Init+0x29c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d10c      	bne.n	800110e <KEYPAD_Init+0x24e>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <KEYPAD_Init+0x294>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a16      	ldr	r2, [pc, #88]	; (8001154 <KEYPAD_Init+0x294>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <KEYPAD_Init+0x294>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	e047      	b.n	800119e <KEYPAD_Init+0x2de>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOD)
 800110e:	88fa      	ldrh	r2, [r7, #6]
 8001110:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <KEYPAD_Init+0x28c>)
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	3306      	adds	r3, #6
 8001122:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <KEYPAD_Init+0x2a0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d11d      	bne.n	8001168 <KEYPAD_Init+0x2a8>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <KEYPAD_Init+0x294>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a08      	ldr	r2, [pc, #32]	; (8001154 <KEYPAD_Init+0x294>)
 8001132:	f043 0320 	orr.w	r3, r3, #32
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <KEYPAD_Init+0x294>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0320 	and.w	r3, r3, #32
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	e02b      	b.n	800119e <KEYPAD_Init+0x2de>
 8001146:	bf00      	nop
 8001148:	20000028 	.word	0x20000028
 800114c:	080028fc 	.word	0x080028fc
 8001150:	40010800 	.word	0x40010800
 8001154:	40021000 	.word	0x40021000
 8001158:	40010c00 	.word	0x40010c00
 800115c:	40011000 	.word	0x40011000
 8001160:	40011400 	.word	0x40011400
 8001164:	40011800 	.word	0x40011800
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOE)
 8001168:	88fa      	ldrh	r2, [r7, #6]
 800116a:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800116e:	4825      	ldr	r0, [pc, #148]	; (8001204 <KEYPAD_Init+0x344>)
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	3306      	adds	r3, #6
 800117c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <KEYPAD_Init+0x348>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d10b      	bne.n	800119e <KEYPAD_Init+0x2de>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <KEYPAD_Init+0x34c>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a20      	ldr	r2, [pc, #128]	; (800120c <KEYPAD_Init+0x34c>)
 800118c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001190:	6193      	str	r3, [r2, #24]
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <KEYPAD_Init+0x34c>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].COL_PIN[i];
 800119e:	88fa      	ldrh	r2, [r7, #6]
 80011a0:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80011a4:	4817      	ldr	r0, [pc, #92]	; (8001204 <KEYPAD_Init+0x344>)
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	3314      	adds	r3, #20
 80011b2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011bc:	2301      	movs	r3, #1
 80011be:	643b      	str	r3, [r7, #64]	; 0x40
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], &GPIO_InitStruct);
 80011c0:	88fa      	ldrh	r2, [r7, #6]
 80011c2:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80011c6:	480f      	ldr	r0, [pc, #60]	; (8001204 <KEYPAD_Init+0x344>)
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	3306      	adds	r3, #6
 80011d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f8fa 	bl	80003d8 <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 80011e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011e8:	3301      	adds	r3, #1
 80011ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80011ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	f67f af37 	bls.w	8001066 <KEYPAD_Init+0x1a6>
 80011f8:	e000      	b.n	80011fc <KEYPAD_Init+0x33c>
		return;
 80011fa:	bf00      	nop
	}
}
 80011fc:	3748      	adds	r7, #72	; 0x48
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	080028fc 	.word	0x080028fc
 8001208:	40011800 	.word	0x40011800
 800120c:	40021000 	.word	0x40021000

08001210 <KEYPAD_Scan>:



void KEYPAD_Scan(uint16_t au16_Instance)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	80fb      	strh	r3, [r7, #6]
	uint8_t au8_ReadState[ROWS] = {0};
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
	uint8_t au8_ReadSt;
	uint8_t i=0;
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]

	/* Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e01d      	b.n	8001264 <KEYPAD_Scan+0x54>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 8001228:	88fa      	ldrh	r2, [r7, #6]
 800122a:	7bf9      	ldrb	r1, [r7, #15]
 800122c:	48a8      	ldr	r0, [pc, #672]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	3306      	adds	r3, #6
 800123a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	7bf9      	ldrb	r1, [r7, #15]
 8001242:	48a3      	ldr	r0, [pc, #652]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	440b      	add	r3, r1
 800124e:	3314      	adds	r3, #20
 8001250:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001254:	2201      	movs	r2, #1
 8001256:	4619      	mov	r1, r3
 8001258:	4620      	mov	r0, r4
 800125a:	f7ff fa2e 	bl	80006ba <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	3301      	adds	r3, #1
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	2b03      	cmp	r3, #3
 8001268:	d9de      	bls.n	8001228 <KEYPAD_Scan+0x18>
	}
	/* Steady State: Read The ROW Pins To Know If Any Key Is Pressed At All or Not */
	for(i=0; i<ROWS; i++)
 800126a:	2300      	movs	r3, #0
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	e023      	b.n	80012b8 <KEYPAD_Scan+0xa8>
	{
		au8_ReadState[i] = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], KEYPAD_CfgParam[au16_Instance].ROW_PIN[i]);
 8001270:	88fa      	ldrh	r2, [r7, #6]
 8001272:	7bf9      	ldrb	r1, [r7, #15]
 8001274:	4896      	ldr	r0, [pc, #600]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8001284:	88fa      	ldrh	r2, [r7, #6]
 8001286:	7bf9      	ldrb	r1, [r7, #15]
 8001288:	4891      	ldr	r0, [pc, #580]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	440b      	add	r3, r1
 8001294:	3308      	adds	r3, #8
 8001296:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800129a:	7bfc      	ldrb	r4, [r7, #15]
 800129c:	4619      	mov	r1, r3
 800129e:	4628      	mov	r0, r5
 80012a0:	f7ff f9f4 	bl	800068c <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4423      	add	r3, r4
 80012ae:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<ROWS; i++)
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	3301      	adds	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d9d8      	bls.n	8001270 <KEYPAD_Scan+0x60>
	}
	/* If Any member in array au8_ReadState is 1, we know that a key is pressed */
	/* And we'll keep changing the COL pins output pattern until we find the pressed key or keys */
	/* Else: We'll end the scan procedure at this point */
	if(au8_ReadState[0] | au8_ReadState[1] | au8_ReadState[2] | au8_ReadState[3])
 80012be:	7a3a      	ldrb	r2, [r7, #8]
 80012c0:	7a7b      	ldrb	r3, [r7, #9]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	7abb      	ldrb	r3, [r7, #10]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f001 808d 	beq.w	80023f2 <KEYPAD_Scan+0x11e2>
	{
		/*--[ First Row Check ]--*/
		if(au8_ReadState[0])
 80012d8:	7a3b      	ldrb	r3, [r7, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8200 	beq.w	80016e0 <KEYPAD_Scan+0x4d0>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	497b      	ldr	r1, [pc, #492]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	440b      	add	r3, r1
 80012ee:	3318      	adds	r3, #24
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	88fa      	ldrh	r2, [r7, #6]
 80012f4:	4976      	ldr	r1, [pc, #472]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	440b      	add	r3, r1
 8001300:	3328      	adds	r3, #40	; 0x28
 8001302:	881b      	ldrh	r3, [r3, #0]
 8001304:	2201      	movs	r2, #1
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff f9d7 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 800130c:	88fa      	ldrh	r2, [r7, #6]
 800130e:	4970      	ldr	r1, [pc, #448]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	440b      	add	r3, r1
 800131a:	331c      	adds	r3, #28
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	88fa      	ldrh	r2, [r7, #6]
 8001320:	496b      	ldr	r1, [pc, #428]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	440b      	add	r3, r1
 800132c:	332a      	adds	r3, #42	; 0x2a
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff f9c1 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001338:	88fa      	ldrh	r2, [r7, #6]
 800133a:	4965      	ldr	r1, [pc, #404]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	440b      	add	r3, r1
 8001346:	3320      	adds	r3, #32
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	88fa      	ldrh	r2, [r7, #6]
 800134c:	4960      	ldr	r1, [pc, #384]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	440b      	add	r3, r1
 8001358:	332c      	adds	r3, #44	; 0x2c
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff f9ab 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001364:	88fa      	ldrh	r2, [r7, #6]
 8001366:	495a      	ldr	r1, [pc, #360]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	440b      	add	r3, r1
 8001372:	3324      	adds	r3, #36	; 0x24
 8001374:	6818      	ldr	r0, [r3, #0]
 8001376:	88fa      	ldrh	r2, [r7, #6]
 8001378:	4955      	ldr	r1, [pc, #340]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	440b      	add	r3, r1
 8001384:	332e      	adds	r3, #46	; 0x2e
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	2200      	movs	r2, #0
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff f995 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW0-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8001390:	88fa      	ldrh	r2, [r7, #6]
 8001392:	494f      	ldr	r1, [pc, #316]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	440b      	add	r3, r1
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	494b      	ldr	r1, [pc, #300]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	440b      	add	r3, r1
 80013ae:	3310      	adds	r3, #16
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff f96a 	bl	800068c <HAL_GPIO_ReadPin>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <KEYPAD_Scan+0x1c0>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 1;
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	4a43      	ldr	r2, [pc, #268]	; (80014d4 <KEYPAD_Scan+0x2c4>)
 80013c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	e005      	b.n	80013dc <KEYPAD_Scan+0x1cc>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	4a40      	ldr	r2, [pc, #256]	; (80014d4 <KEYPAD_Scan+0x2c4>)
 80013d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80013dc:	88fa      	ldrh	r2, [r7, #6]
 80013de:	493c      	ldr	r1, [pc, #240]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 80013e0:	4613      	mov	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	011b      	lsls	r3, r3, #4
 80013e8:	440b      	add	r3, r1
 80013ea:	3318      	adds	r3, #24
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	88fa      	ldrh	r2, [r7, #6]
 80013f0:	4937      	ldr	r1, [pc, #220]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	440b      	add	r3, r1
 80013fc:	3328      	adds	r3, #40	; 0x28
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff f959 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8001408:	88fa      	ldrh	r2, [r7, #6]
 800140a:	4931      	ldr	r1, [pc, #196]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	440b      	add	r3, r1
 8001416:	331c      	adds	r3, #28
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	492c      	ldr	r1, [pc, #176]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	440b      	add	r3, r1
 8001428:	332a      	adds	r3, #42	; 0x2a
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	2201      	movs	r2, #1
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff f943 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001434:	88fa      	ldrh	r2, [r7, #6]
 8001436:	4926      	ldr	r1, [pc, #152]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	011b      	lsls	r3, r3, #4
 8001440:	440b      	add	r3, r1
 8001442:	3320      	adds	r3, #32
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	4921      	ldr	r1, [pc, #132]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	440b      	add	r3, r1
 8001454:	332c      	adds	r3, #44	; 0x2c
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff f92d 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001460:	88fa      	ldrh	r2, [r7, #6]
 8001462:	491b      	ldr	r1, [pc, #108]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	440b      	add	r3, r1
 800146e:	3324      	adds	r3, #36	; 0x24
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	88fa      	ldrh	r2, [r7, #6]
 8001474:	4916      	ldr	r1, [pc, #88]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	440b      	add	r3, r1
 8001480:	332e      	adds	r3, #46	; 0x2e
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff f917 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW0-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 800148c:	88fa      	ldrh	r2, [r7, #6]
 800148e:	4910      	ldr	r1, [pc, #64]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	440b      	add	r3, r1
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	88fa      	ldrh	r2, [r7, #6]
 800149e:	490c      	ldr	r1, [pc, #48]	; (80014d0 <KEYPAD_Scan+0x2c0>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	440b      	add	r3, r1
 80014aa:	3310      	adds	r3, #16
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff f8ec 	bl	800068c <HAL_GPIO_ReadPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00c      	beq.n	80014d8 <KEYPAD_Scan+0x2c8>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 1;
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <KEYPAD_Scan+0x2c4>)
 80014c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c6:	3301      	adds	r3, #1
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	e00b      	b.n	80014e6 <KEYPAD_Scan+0x2d6>
 80014ce:	bf00      	nop
 80014d0:	080028fc 	.word	0x080028fc
 80014d4:	20000028 	.word	0x20000028
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	4a7f      	ldr	r2, [pc, #508]	; (80016d8 <KEYPAD_Scan+0x4c8>)
 80014dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e0:	3301      	adds	r3, #1
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80014e6:	88fa      	ldrh	r2, [r7, #6]
 80014e8:	497c      	ldr	r1, [pc, #496]	; (80016dc <KEYPAD_Scan+0x4cc>)
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	440b      	add	r3, r1
 80014f4:	3318      	adds	r3, #24
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	88fa      	ldrh	r2, [r7, #6]
 80014fa:	4978      	ldr	r1, [pc, #480]	; (80016dc <KEYPAD_Scan+0x4cc>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	440b      	add	r3, r1
 8001506:	3328      	adds	r3, #40	; 0x28
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	2200      	movs	r2, #0
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff f8d4 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001512:	88fa      	ldrh	r2, [r7, #6]
 8001514:	4971      	ldr	r1, [pc, #452]	; (80016dc <KEYPAD_Scan+0x4cc>)
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	440b      	add	r3, r1
 8001520:	331c      	adds	r3, #28
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	88fa      	ldrh	r2, [r7, #6]
 8001526:	496d      	ldr	r1, [pc, #436]	; (80016dc <KEYPAD_Scan+0x4cc>)
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	440b      	add	r3, r1
 8001532:	332a      	adds	r3, #42	; 0x2a
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff f8be 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 800153e:	88fa      	ldrh	r2, [r7, #6]
 8001540:	4966      	ldr	r1, [pc, #408]	; (80016dc <KEYPAD_Scan+0x4cc>)
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	440b      	add	r3, r1
 800154c:	3320      	adds	r3, #32
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	88fa      	ldrh	r2, [r7, #6]
 8001552:	4962      	ldr	r1, [pc, #392]	; (80016dc <KEYPAD_Scan+0x4cc>)
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	440b      	add	r3, r1
 800155e:	332c      	adds	r3, #44	; 0x2c
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	2201      	movs	r2, #1
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff f8a8 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800156a:	88fa      	ldrh	r2, [r7, #6]
 800156c:	495b      	ldr	r1, [pc, #364]	; (80016dc <KEYPAD_Scan+0x4cc>)
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	440b      	add	r3, r1
 8001578:	3324      	adds	r3, #36	; 0x24
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	88fa      	ldrh	r2, [r7, #6]
 800157e:	4957      	ldr	r1, [pc, #348]	; (80016dc <KEYPAD_Scan+0x4cc>)
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	440b      	add	r3, r1
 800158a:	332e      	adds	r3, #46	; 0x2e
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	2200      	movs	r2, #0
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff f892 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW0-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8001596:	88fa      	ldrh	r2, [r7, #6]
 8001598:	4950      	ldr	r1, [pc, #320]	; (80016dc <KEYPAD_Scan+0x4cc>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	440b      	add	r3, r1
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	88fa      	ldrh	r2, [r7, #6]
 80015a8:	494c      	ldr	r1, [pc, #304]	; (80016dc <KEYPAD_Scan+0x4cc>)
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	440b      	add	r3, r1
 80015b4:	3310      	adds	r3, #16
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff f867 	bl	800068c <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80015c2:	7bbb      	ldrb	r3, [r7, #14]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d007      	beq.n	80015d8 <KEYPAD_Scan+0x3c8>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 1;
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	4a43      	ldr	r2, [pc, #268]	; (80016d8 <KEYPAD_Scan+0x4c8>)
 80015cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d0:	3302      	adds	r3, #2
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	e006      	b.n	80015e6 <KEYPAD_Scan+0x3d6>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	4a3f      	ldr	r2, [pc, #252]	; (80016d8 <KEYPAD_Scan+0x4c8>)
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	3302      	adds	r3, #2
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	493c      	ldr	r1, [pc, #240]	; (80016dc <KEYPAD_Scan+0x4cc>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	440b      	add	r3, r1
 80015f4:	3318      	adds	r3, #24
 80015f6:	6818      	ldr	r0, [r3, #0]
 80015f8:	88fa      	ldrh	r2, [r7, #6]
 80015fa:	4938      	ldr	r1, [pc, #224]	; (80016dc <KEYPAD_Scan+0x4cc>)
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	440b      	add	r3, r1
 8001606:	3328      	adds	r3, #40	; 0x28
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff f854 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001612:	88fa      	ldrh	r2, [r7, #6]
 8001614:	4931      	ldr	r1, [pc, #196]	; (80016dc <KEYPAD_Scan+0x4cc>)
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	440b      	add	r3, r1
 8001620:	331c      	adds	r3, #28
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	88fa      	ldrh	r2, [r7, #6]
 8001626:	492d      	ldr	r1, [pc, #180]	; (80016dc <KEYPAD_Scan+0x4cc>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	440b      	add	r3, r1
 8001632:	332a      	adds	r3, #42	; 0x2a
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff f83e 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800163e:	88fa      	ldrh	r2, [r7, #6]
 8001640:	4926      	ldr	r1, [pc, #152]	; (80016dc <KEYPAD_Scan+0x4cc>)
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	440b      	add	r3, r1
 800164c:	3320      	adds	r3, #32
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	88fa      	ldrh	r2, [r7, #6]
 8001652:	4922      	ldr	r1, [pc, #136]	; (80016dc <KEYPAD_Scan+0x4cc>)
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	440b      	add	r3, r1
 800165e:	332c      	adds	r3, #44	; 0x2c
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff f828 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 800166a:	88fa      	ldrh	r2, [r7, #6]
 800166c:	491b      	ldr	r1, [pc, #108]	; (80016dc <KEYPAD_Scan+0x4cc>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	440b      	add	r3, r1
 8001678:	3324      	adds	r3, #36	; 0x24
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	88fa      	ldrh	r2, [r7, #6]
 800167e:	4917      	ldr	r1, [pc, #92]	; (80016dc <KEYPAD_Scan+0x4cc>)
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	440b      	add	r3, r1
 800168a:	332e      	adds	r3, #46	; 0x2e
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	2201      	movs	r2, #1
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff f812 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW0-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 8001696:	88fa      	ldrh	r2, [r7, #6]
 8001698:	4910      	ldr	r1, [pc, #64]	; (80016dc <KEYPAD_Scan+0x4cc>)
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	440b      	add	r3, r1
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	88fa      	ldrh	r2, [r7, #6]
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <KEYPAD_Scan+0x4cc>)
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	440b      	add	r3, r1
 80016b4:	3310      	adds	r3, #16
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7fe ffe7 	bl	800068c <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d026      	beq.n	8001716 <KEYPAD_Scan+0x506>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[3] = 1;
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <KEYPAD_Scan+0x4c8>)
 80016cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d0:	3303      	adds	r3, #3
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	e01e      	b.n	8001716 <KEYPAD_Scan+0x506>
 80016d8:	20000028 	.word	0x20000028
 80016dc:	080028fc 	.word	0x080028fc
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	4a8c      	ldr	r2, [pc, #560]	; (8001914 <KEYPAD_Scan+0x704>)
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	4a89      	ldr	r2, [pc, #548]	; (8001914 <KEYPAD_Scan+0x704>)
 80016f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f4:	3301      	adds	r3, #1
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	4a85      	ldr	r2, [pc, #532]	; (8001914 <KEYPAD_Scan+0x704>)
 80016fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001702:	3302      	adds	r3, #2
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[3] = 0;
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	4a82      	ldr	r2, [pc, #520]	; (8001914 <KEYPAD_Scan+0x704>)
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	3303      	adds	r3, #3
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 1st ROW Check ]--------------------*/
		/*--[ Second Row Check ]--*/
		if(au8_ReadState[1])
 8001716:	7a7b      	ldrb	r3, [r7, #9]
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8205 	beq.w	8001b28 <KEYPAD_Scan+0x918>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 800171e:	88fa      	ldrh	r2, [r7, #6]
 8001720:	497d      	ldr	r1, [pc, #500]	; (8001918 <KEYPAD_Scan+0x708>)
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	440b      	add	r3, r1
 800172c:	3318      	adds	r3, #24
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	88fa      	ldrh	r2, [r7, #6]
 8001732:	4979      	ldr	r1, [pc, #484]	; (8001918 <KEYPAD_Scan+0x708>)
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	440b      	add	r3, r1
 800173e:	3328      	adds	r3, #40	; 0x28
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	2201      	movs	r2, #1
 8001744:	4619      	mov	r1, r3
 8001746:	f7fe ffb8 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 800174a:	88fa      	ldrh	r2, [r7, #6]
 800174c:	4972      	ldr	r1, [pc, #456]	; (8001918 <KEYPAD_Scan+0x708>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	011b      	lsls	r3, r3, #4
 8001756:	440b      	add	r3, r1
 8001758:	331c      	adds	r3, #28
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	88fa      	ldrh	r2, [r7, #6]
 800175e:	496e      	ldr	r1, [pc, #440]	; (8001918 <KEYPAD_Scan+0x708>)
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	440b      	add	r3, r1
 800176a:	332a      	adds	r3, #42	; 0x2a
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	4619      	mov	r1, r3
 8001772:	f7fe ffa2 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001776:	88fa      	ldrh	r2, [r7, #6]
 8001778:	4967      	ldr	r1, [pc, #412]	; (8001918 <KEYPAD_Scan+0x708>)
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	440b      	add	r3, r1
 8001784:	3320      	adds	r3, #32
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	88fa      	ldrh	r2, [r7, #6]
 800178a:	4963      	ldr	r1, [pc, #396]	; (8001918 <KEYPAD_Scan+0x708>)
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	440b      	add	r3, r1
 8001796:	332c      	adds	r3, #44	; 0x2c
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	4619      	mov	r1, r3
 800179e:	f7fe ff8c 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	495c      	ldr	r1, [pc, #368]	; (8001918 <KEYPAD_Scan+0x708>)
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	440b      	add	r3, r1
 80017b0:	3324      	adds	r3, #36	; 0x24
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	88fa      	ldrh	r2, [r7, #6]
 80017b6:	4958      	ldr	r1, [pc, #352]	; (8001918 <KEYPAD_Scan+0x708>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	440b      	add	r3, r1
 80017c2:	332e      	adds	r3, #46	; 0x2e
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	2200      	movs	r2, #0
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7fe ff76 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW1-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 80017ce:	88fa      	ldrh	r2, [r7, #6]
 80017d0:	4951      	ldr	r1, [pc, #324]	; (8001918 <KEYPAD_Scan+0x708>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	440b      	add	r3, r1
 80017dc:	3304      	adds	r3, #4
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	88fa      	ldrh	r2, [r7, #6]
 80017e2:	494d      	ldr	r1, [pc, #308]	; (8001918 <KEYPAD_Scan+0x708>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	440b      	add	r3, r1
 80017ee:	3312      	adds	r3, #18
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7fe ff4a 	bl	800068c <HAL_GPIO_ReadPin>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80017fc:	7bbb      	ldrb	r3, [r7, #14]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <KEYPAD_Scan+0x602>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 1;
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	4a43      	ldr	r2, [pc, #268]	; (8001914 <KEYPAD_Scan+0x704>)
 8001806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180a:	3304      	adds	r3, #4
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	e006      	b.n	8001820 <KEYPAD_Scan+0x610>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	4a3f      	ldr	r2, [pc, #252]	; (8001914 <KEYPAD_Scan+0x704>)
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	3304      	adds	r3, #4
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001820:	88fa      	ldrh	r2, [r7, #6]
 8001822:	493d      	ldr	r1, [pc, #244]	; (8001918 <KEYPAD_Scan+0x708>)
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	440b      	add	r3, r1
 800182e:	3318      	adds	r3, #24
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	88fa      	ldrh	r2, [r7, #6]
 8001834:	4938      	ldr	r1, [pc, #224]	; (8001918 <KEYPAD_Scan+0x708>)
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	440b      	add	r3, r1
 8001840:	3328      	adds	r3, #40	; 0x28
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	2200      	movs	r2, #0
 8001846:	4619      	mov	r1, r3
 8001848:	f7fe ff37 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 800184c:	88fa      	ldrh	r2, [r7, #6]
 800184e:	4932      	ldr	r1, [pc, #200]	; (8001918 <KEYPAD_Scan+0x708>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	440b      	add	r3, r1
 800185a:	331c      	adds	r3, #28
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	88fa      	ldrh	r2, [r7, #6]
 8001860:	492d      	ldr	r1, [pc, #180]	; (8001918 <KEYPAD_Scan+0x708>)
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	440b      	add	r3, r1
 800186c:	332a      	adds	r3, #42	; 0x2a
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4619      	mov	r1, r3
 8001874:	f7fe ff21 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001878:	88fa      	ldrh	r2, [r7, #6]
 800187a:	4927      	ldr	r1, [pc, #156]	; (8001918 <KEYPAD_Scan+0x708>)
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	440b      	add	r3, r1
 8001886:	3320      	adds	r3, #32
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	88fa      	ldrh	r2, [r7, #6]
 800188c:	4922      	ldr	r1, [pc, #136]	; (8001918 <KEYPAD_Scan+0x708>)
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	440b      	add	r3, r1
 8001898:	332c      	adds	r3, #44	; 0x2c
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	2200      	movs	r2, #0
 800189e:	4619      	mov	r1, r3
 80018a0:	f7fe ff0b 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80018a4:	88fa      	ldrh	r2, [r7, #6]
 80018a6:	491c      	ldr	r1, [pc, #112]	; (8001918 <KEYPAD_Scan+0x708>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	440b      	add	r3, r1
 80018b2:	3324      	adds	r3, #36	; 0x24
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	88fa      	ldrh	r2, [r7, #6]
 80018b8:	4917      	ldr	r1, [pc, #92]	; (8001918 <KEYPAD_Scan+0x708>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	440b      	add	r3, r1
 80018c4:	332e      	adds	r3, #46	; 0x2e
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7fe fef5 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW1-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 80018d0:	88fa      	ldrh	r2, [r7, #6]
 80018d2:	4911      	ldr	r1, [pc, #68]	; (8001918 <KEYPAD_Scan+0x708>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	440b      	add	r3, r1
 80018de:	3304      	adds	r3, #4
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <KEYPAD_Scan+0x708>)
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	440b      	add	r3, r1
 80018f0:	3312      	adds	r3, #18
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7fe fec9 	bl	800068c <HAL_GPIO_ReadPin>
 80018fa:	4603      	mov	r3, r0
 80018fc:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80018fe:	7bbb      	ldrb	r3, [r7, #14]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00b      	beq.n	800191c <KEYPAD_Scan+0x70c>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 1;
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	4a03      	ldr	r2, [pc, #12]	; (8001914 <KEYPAD_Scan+0x704>)
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	3305      	adds	r3, #5
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	e00a      	b.n	800192a <KEYPAD_Scan+0x71a>
 8001914:	20000028 	.word	0x20000028
 8001918:	080028fc 	.word	0x080028fc
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	4a80      	ldr	r2, [pc, #512]	; (8001b20 <KEYPAD_Scan+0x910>)
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	3305      	adds	r3, #5
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	497d      	ldr	r1, [pc, #500]	; (8001b24 <KEYPAD_Scan+0x914>)
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	440b      	add	r3, r1
 8001938:	3318      	adds	r3, #24
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	4979      	ldr	r1, [pc, #484]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	440b      	add	r3, r1
 800194a:	3328      	adds	r3, #40	; 0x28
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	4619      	mov	r1, r3
 8001952:	f7fe feb2 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001956:	88fa      	ldrh	r2, [r7, #6]
 8001958:	4972      	ldr	r1, [pc, #456]	; (8001b24 <KEYPAD_Scan+0x914>)
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	440b      	add	r3, r1
 8001964:	331c      	adds	r3, #28
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	88fa      	ldrh	r2, [r7, #6]
 800196a:	496e      	ldr	r1, [pc, #440]	; (8001b24 <KEYPAD_Scan+0x914>)
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	440b      	add	r3, r1
 8001976:	332a      	adds	r3, #42	; 0x2a
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	2200      	movs	r2, #0
 800197c:	4619      	mov	r1, r3
 800197e:	f7fe fe9c 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001982:	88fa      	ldrh	r2, [r7, #6]
 8001984:	4967      	ldr	r1, [pc, #412]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	440b      	add	r3, r1
 8001990:	3320      	adds	r3, #32
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	88fa      	ldrh	r2, [r7, #6]
 8001996:	4963      	ldr	r1, [pc, #396]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	440b      	add	r3, r1
 80019a2:	332c      	adds	r3, #44	; 0x2c
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	2201      	movs	r2, #1
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7fe fe86 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80019ae:	88fa      	ldrh	r2, [r7, #6]
 80019b0:	495c      	ldr	r1, [pc, #368]	; (8001b24 <KEYPAD_Scan+0x914>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	440b      	add	r3, r1
 80019bc:	3324      	adds	r3, #36	; 0x24
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	88fa      	ldrh	r2, [r7, #6]
 80019c2:	4958      	ldr	r1, [pc, #352]	; (8001b24 <KEYPAD_Scan+0x914>)
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	440b      	add	r3, r1
 80019ce:	332e      	adds	r3, #46	; 0x2e
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7fe fe70 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW1-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 80019da:	88fa      	ldrh	r2, [r7, #6]
 80019dc:	4951      	ldr	r1, [pc, #324]	; (8001b24 <KEYPAD_Scan+0x914>)
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	440b      	add	r3, r1
 80019e8:	3304      	adds	r3, #4
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	88fa      	ldrh	r2, [r7, #6]
 80019ee:	494d      	ldr	r1, [pc, #308]	; (8001b24 <KEYPAD_Scan+0x914>)
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	440b      	add	r3, r1
 80019fa:	3312      	adds	r3, #18
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7fe fe44 	bl	800068c <HAL_GPIO_ReadPin>
 8001a04:	4603      	mov	r3, r0
 8001a06:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <KEYPAD_Scan+0x80e>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 1;
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	4a43      	ldr	r2, [pc, #268]	; (8001b20 <KEYPAD_Scan+0x910>)
 8001a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a16:	3306      	adds	r3, #6
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e006      	b.n	8001a2c <KEYPAD_Scan+0x81c>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	4a3f      	ldr	r2, [pc, #252]	; (8001b20 <KEYPAD_Scan+0x910>)
 8001a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a26:	3306      	adds	r3, #6
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001a2c:	88fa      	ldrh	r2, [r7, #6]
 8001a2e:	493d      	ldr	r1, [pc, #244]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	440b      	add	r3, r1
 8001a3a:	3318      	adds	r3, #24
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	4938      	ldr	r1, [pc, #224]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3328      	adds	r3, #40	; 0x28
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	2200      	movs	r2, #0
 8001a52:	4619      	mov	r1, r3
 8001a54:	f7fe fe31 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001a58:	88fa      	ldrh	r2, [r7, #6]
 8001a5a:	4932      	ldr	r1, [pc, #200]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	440b      	add	r3, r1
 8001a66:	331c      	adds	r3, #28
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	88fa      	ldrh	r2, [r7, #6]
 8001a6c:	492d      	ldr	r1, [pc, #180]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	440b      	add	r3, r1
 8001a78:	332a      	adds	r3, #42	; 0x2a
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7fe fe1b 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	4927      	ldr	r1, [pc, #156]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	440b      	add	r3, r1
 8001a92:	3320      	adds	r3, #32
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	88fa      	ldrh	r2, [r7, #6]
 8001a98:	4922      	ldr	r1, [pc, #136]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	440b      	add	r3, r1
 8001aa4:	332c      	adds	r3, #44	; 0x2c
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7fe fe05 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	491c      	ldr	r1, [pc, #112]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	440b      	add	r3, r1
 8001abe:	3324      	adds	r3, #36	; 0x24
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	88fa      	ldrh	r2, [r7, #6]
 8001ac4:	4917      	ldr	r1, [pc, #92]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	440b      	add	r3, r1
 8001ad0:	332e      	adds	r3, #46	; 0x2e
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7fe fdef 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW1-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001adc:	88fa      	ldrh	r2, [r7, #6]
 8001ade:	4911      	ldr	r1, [pc, #68]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	440b      	add	r3, r1
 8001aea:	3304      	adds	r3, #4
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	88fa      	ldrh	r2, [r7, #6]
 8001af0:	490c      	ldr	r1, [pc, #48]	; (8001b24 <KEYPAD_Scan+0x914>)
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	440b      	add	r3, r1
 8001afc:	3312      	adds	r3, #18
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7fe fdc3 	bl	800068c <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001b0a:	7bbb      	ldrb	r3, [r7, #14]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d027      	beq.n	8001b60 <KEYPAD_Scan+0x950>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[7] = 1;
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	4a03      	ldr	r2, [pc, #12]	; (8001b20 <KEYPAD_Scan+0x910>)
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	3307      	adds	r3, #7
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e01f      	b.n	8001b60 <KEYPAD_Scan+0x950>
 8001b20:	20000028 	.word	0x20000028
 8001b24:	080028fc 	.word	0x080028fc
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	4a8d      	ldr	r2, [pc, #564]	; (8001d60 <KEYPAD_Scan+0xb50>)
 8001b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b30:	3304      	adds	r3, #4
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	4a89      	ldr	r2, [pc, #548]	; (8001d60 <KEYPAD_Scan+0xb50>)
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	3305      	adds	r3, #5
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	4a86      	ldr	r2, [pc, #536]	; (8001d60 <KEYPAD_Scan+0xb50>)
 8001b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4c:	3306      	adds	r3, #6
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[7] = 0;
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	4a82      	ldr	r2, [pc, #520]	; (8001d60 <KEYPAD_Scan+0xb50>)
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	3307      	adds	r3, #7
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 2nd ROW Check ]--------------------*/
		/*--[ Third Row Check ]--*/
		if(au8_ReadState[2])
 8001b60:	7abb      	ldrb	r3, [r7, #10]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8206 	beq.w	8001f74 <KEYPAD_Scan+0xd64>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	497e      	ldr	r1, [pc, #504]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	440b      	add	r3, r1
 8001b76:	3318      	adds	r3, #24
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	88fa      	ldrh	r2, [r7, #6]
 8001b7c:	4979      	ldr	r1, [pc, #484]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	440b      	add	r3, r1
 8001b88:	3328      	adds	r3, #40	; 0x28
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7fe fd93 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001b94:	88fa      	ldrh	r2, [r7, #6]
 8001b96:	4973      	ldr	r1, [pc, #460]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	440b      	add	r3, r1
 8001ba2:	331c      	adds	r3, #28
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	88fa      	ldrh	r2, [r7, #6]
 8001ba8:	496e      	ldr	r1, [pc, #440]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	440b      	add	r3, r1
 8001bb4:	332a      	adds	r3, #42	; 0x2a
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f7fe fd7d 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001bc0:	88fa      	ldrh	r2, [r7, #6]
 8001bc2:	4968      	ldr	r1, [pc, #416]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	440b      	add	r3, r1
 8001bce:	3320      	adds	r3, #32
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	88fa      	ldrh	r2, [r7, #6]
 8001bd4:	4963      	ldr	r1, [pc, #396]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	440b      	add	r3, r1
 8001be0:	332c      	adds	r3, #44	; 0x2c
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	2200      	movs	r2, #0
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe fd67 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001bec:	88fa      	ldrh	r2, [r7, #6]
 8001bee:	495d      	ldr	r1, [pc, #372]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3324      	adds	r3, #36	; 0x24
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	88fa      	ldrh	r2, [r7, #6]
 8001c00:	4958      	ldr	r1, [pc, #352]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	440b      	add	r3, r1
 8001c0c:	332e      	adds	r3, #46	; 0x2e
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7fe fd51 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW2-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001c18:	88fa      	ldrh	r2, [r7, #6]
 8001c1a:	4952      	ldr	r1, [pc, #328]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	440b      	add	r3, r1
 8001c26:	3308      	adds	r3, #8
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	88fa      	ldrh	r2, [r7, #6]
 8001c2c:	494d      	ldr	r1, [pc, #308]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	440b      	add	r3, r1
 8001c38:	3314      	adds	r3, #20
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7fe fd25 	bl	800068c <HAL_GPIO_ReadPin>
 8001c42:	4603      	mov	r3, r0
 8001c44:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001c46:	7bbb      	ldrb	r3, [r7, #14]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <KEYPAD_Scan+0xa4c>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 1;
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	4a44      	ldr	r2, [pc, #272]	; (8001d60 <KEYPAD_Scan+0xb50>)
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	3308      	adds	r3, #8
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e006      	b.n	8001c6a <KEYPAD_Scan+0xa5a>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4a40      	ldr	r2, [pc, #256]	; (8001d60 <KEYPAD_Scan+0xb50>)
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	3308      	adds	r3, #8
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	493d      	ldr	r1, [pc, #244]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	440b      	add	r3, r1
 8001c78:	3318      	adds	r3, #24
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	88fa      	ldrh	r2, [r7, #6]
 8001c7e:	4939      	ldr	r1, [pc, #228]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	440b      	add	r3, r1
 8001c8a:	3328      	adds	r3, #40	; 0x28
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe fd12 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	4932      	ldr	r1, [pc, #200]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	440b      	add	r3, r1
 8001ca4:	331c      	adds	r3, #28
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	88fa      	ldrh	r2, [r7, #6]
 8001caa:	492e      	ldr	r1, [pc, #184]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	440b      	add	r3, r1
 8001cb6:	332a      	adds	r3, #42	; 0x2a
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7fe fcfc 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001cc2:	88fa      	ldrh	r2, [r7, #6]
 8001cc4:	4927      	ldr	r1, [pc, #156]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	440b      	add	r3, r1
 8001cd0:	3320      	adds	r3, #32
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	88fa      	ldrh	r2, [r7, #6]
 8001cd6:	4923      	ldr	r1, [pc, #140]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	440b      	add	r3, r1
 8001ce2:	332c      	adds	r3, #44	; 0x2c
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7fe fce6 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001cee:	88fa      	ldrh	r2, [r7, #6]
 8001cf0:	491c      	ldr	r1, [pc, #112]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3324      	adds	r3, #36	; 0x24
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	88fa      	ldrh	r2, [r7, #6]
 8001d02:	4918      	ldr	r1, [pc, #96]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	440b      	add	r3, r1
 8001d0e:	332e      	adds	r3, #46	; 0x2e
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	2200      	movs	r2, #0
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe fcd0 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW2-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001d1a:	88fa      	ldrh	r2, [r7, #6]
 8001d1c:	4911      	ldr	r1, [pc, #68]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	440b      	add	r3, r1
 8001d28:	3308      	adds	r3, #8
 8001d2a:	6818      	ldr	r0, [r3, #0]
 8001d2c:	88fa      	ldrh	r2, [r7, #6]
 8001d2e:	490d      	ldr	r1, [pc, #52]	; (8001d64 <KEYPAD_Scan+0xb54>)
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	440b      	add	r3, r1
 8001d3a:	3314      	adds	r3, #20
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe fca4 	bl	800068c <HAL_GPIO_ReadPin>
 8001d44:	4603      	mov	r3, r0
 8001d46:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001d48:	7bbb      	ldrb	r3, [r7, #14]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00c      	beq.n	8001d68 <KEYPAD_Scan+0xb58>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 1;
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <KEYPAD_Scan+0xb50>)
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	3309      	adds	r3, #9
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	e00b      	b.n	8001d76 <KEYPAD_Scan+0xb66>
 8001d5e:	bf00      	nop
 8001d60:	20000028 	.word	0x20000028
 8001d64:	080028fc 	.word	0x080028fc
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	4a80      	ldr	r2, [pc, #512]	; (8001f6c <KEYPAD_Scan+0xd5c>)
 8001d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d70:	3309      	adds	r3, #9
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001d76:	88fa      	ldrh	r2, [r7, #6]
 8001d78:	497d      	ldr	r1, [pc, #500]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	440b      	add	r3, r1
 8001d84:	3318      	adds	r3, #24
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	88fa      	ldrh	r2, [r7, #6]
 8001d8a:	4979      	ldr	r1, [pc, #484]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	440b      	add	r3, r1
 8001d96:	3328      	adds	r3, #40	; 0x28
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f7fe fc8c 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001da2:	88fa      	ldrh	r2, [r7, #6]
 8001da4:	4972      	ldr	r1, [pc, #456]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	440b      	add	r3, r1
 8001db0:	331c      	adds	r3, #28
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	88fa      	ldrh	r2, [r7, #6]
 8001db6:	496e      	ldr	r1, [pc, #440]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	440b      	add	r3, r1
 8001dc2:	332a      	adds	r3, #42	; 0x2a
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe fc76 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001dce:	88fa      	ldrh	r2, [r7, #6]
 8001dd0:	4967      	ldr	r1, [pc, #412]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	440b      	add	r3, r1
 8001ddc:	3320      	adds	r3, #32
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	88fa      	ldrh	r2, [r7, #6]
 8001de2:	4963      	ldr	r1, [pc, #396]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	440b      	add	r3, r1
 8001dee:	332c      	adds	r3, #44	; 0x2c
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	2201      	movs	r2, #1
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7fe fc60 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001dfa:	88fa      	ldrh	r2, [r7, #6]
 8001dfc:	495c      	ldr	r1, [pc, #368]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	440b      	add	r3, r1
 8001e08:	3324      	adds	r3, #36	; 0x24
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	4958      	ldr	r1, [pc, #352]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	440b      	add	r3, r1
 8001e1a:	332e      	adds	r3, #46	; 0x2e
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7fe fc4a 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW2-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001e26:	88fa      	ldrh	r2, [r7, #6]
 8001e28:	4951      	ldr	r1, [pc, #324]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	440b      	add	r3, r1
 8001e34:	3308      	adds	r3, #8
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	88fa      	ldrh	r2, [r7, #6]
 8001e3a:	494d      	ldr	r1, [pc, #308]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	440b      	add	r3, r1
 8001e46:	3314      	adds	r3, #20
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f7fe fc1e 	bl	800068c <HAL_GPIO_ReadPin>
 8001e50:	4603      	mov	r3, r0
 8001e52:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001e54:	7bbb      	ldrb	r3, [r7, #14]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <KEYPAD_Scan+0xc5a>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 1;
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	4a43      	ldr	r2, [pc, #268]	; (8001f6c <KEYPAD_Scan+0xd5c>)
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e62:	330a      	adds	r3, #10
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	e006      	b.n	8001e78 <KEYPAD_Scan+0xc68>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	4a3f      	ldr	r2, [pc, #252]	; (8001f6c <KEYPAD_Scan+0xd5c>)
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	330a      	adds	r3, #10
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001e78:	88fa      	ldrh	r2, [r7, #6]
 8001e7a:	493d      	ldr	r1, [pc, #244]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	440b      	add	r3, r1
 8001e86:	3318      	adds	r3, #24
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	88fa      	ldrh	r2, [r7, #6]
 8001e8c:	4938      	ldr	r1, [pc, #224]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	440b      	add	r3, r1
 8001e98:	3328      	adds	r3, #40	; 0x28
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f7fe fc0b 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001ea4:	88fa      	ldrh	r2, [r7, #6]
 8001ea6:	4932      	ldr	r1, [pc, #200]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	440b      	add	r3, r1
 8001eb2:	331c      	adds	r3, #28
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	88fa      	ldrh	r2, [r7, #6]
 8001eb8:	492d      	ldr	r1, [pc, #180]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	440b      	add	r3, r1
 8001ec4:	332a      	adds	r3, #42	; 0x2a
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f7fe fbf5 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	4927      	ldr	r1, [pc, #156]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	440b      	add	r3, r1
 8001ede:	3320      	adds	r3, #32
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	88fa      	ldrh	r2, [r7, #6]
 8001ee4:	4922      	ldr	r1, [pc, #136]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	440b      	add	r3, r1
 8001ef0:	332c      	adds	r3, #44	; 0x2c
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7fe fbdf 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8001efc:	88fa      	ldrh	r2, [r7, #6]
 8001efe:	491c      	ldr	r1, [pc, #112]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	440b      	add	r3, r1
 8001f0a:	3324      	adds	r3, #36	; 0x24
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	88fa      	ldrh	r2, [r7, #6]
 8001f10:	4917      	ldr	r1, [pc, #92]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	440b      	add	r3, r1
 8001f1c:	332e      	adds	r3, #46	; 0x2e
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	2201      	movs	r2, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fbc9 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW2-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001f28:	88fa      	ldrh	r2, [r7, #6]
 8001f2a:	4911      	ldr	r1, [pc, #68]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	440b      	add	r3, r1
 8001f36:	3308      	adds	r3, #8
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	88fa      	ldrh	r2, [r7, #6]
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <KEYPAD_Scan+0xd60>)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	440b      	add	r3, r1
 8001f48:	3314      	adds	r3, #20
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fb9d 	bl	800068c <HAL_GPIO_ReadPin>
 8001f52:	4603      	mov	r3, r0
 8001f54:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001f56:	7bbb      	ldrb	r3, [r7, #14]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d027      	beq.n	8001fac <KEYPAD_Scan+0xd9c>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[11] = 1;
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	4a03      	ldr	r2, [pc, #12]	; (8001f6c <KEYPAD_Scan+0xd5c>)
 8001f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f64:	330b      	adds	r3, #11
 8001f66:	2201      	movs	r2, #1
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	e01f      	b.n	8001fac <KEYPAD_Scan+0xd9c>
 8001f6c:	20000028 	.word	0x20000028
 8001f70:	080028fc 	.word	0x080028fc
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	4a8d      	ldr	r2, [pc, #564]	; (80021ac <KEYPAD_Scan+0xf9c>)
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	3308      	adds	r3, #8
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	4a89      	ldr	r2, [pc, #548]	; (80021ac <KEYPAD_Scan+0xf9c>)
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	3309      	adds	r3, #9
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	4a86      	ldr	r2, [pc, #536]	; (80021ac <KEYPAD_Scan+0xf9c>)
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	330a      	adds	r3, #10
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[11] = 0;
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	4a82      	ldr	r2, [pc, #520]	; (80021ac <KEYPAD_Scan+0xf9c>)
 8001fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa6:	330b      	adds	r3, #11
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 3rd ROW Check ]--------------------*/
		/*--[ Fourth Row Check ]--*/
		if(au8_ReadState[3])
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8202 	beq.w	80023b8 <KEYPAD_Scan+0x11a8>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001fb4:	88fa      	ldrh	r2, [r7, #6]
 8001fb6:	497e      	ldr	r1, [pc, #504]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3318      	adds	r3, #24
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	4979      	ldr	r1, [pc, #484]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3328      	adds	r3, #40	; 0x28
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f7fe fb6d 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001fe0:	88fa      	ldrh	r2, [r7, #6]
 8001fe2:	4973      	ldr	r1, [pc, #460]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	440b      	add	r3, r1
 8001fee:	331c      	adds	r3, #28
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	496e      	ldr	r1, [pc, #440]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	440b      	add	r3, r1
 8002000:	332a      	adds	r3, #42	; 0x2a
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	f7fe fb57 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800200c:	88fa      	ldrh	r2, [r7, #6]
 800200e:	4968      	ldr	r1, [pc, #416]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	440b      	add	r3, r1
 800201a:	3320      	adds	r3, #32
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	88fa      	ldrh	r2, [r7, #6]
 8002020:	4963      	ldr	r1, [pc, #396]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	440b      	add	r3, r1
 800202c:	332c      	adds	r3, #44	; 0x2c
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	2200      	movs	r2, #0
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fb41 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8002038:	88fa      	ldrh	r2, [r7, #6]
 800203a:	495d      	ldr	r1, [pc, #372]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	440b      	add	r3, r1
 8002046:	3324      	adds	r3, #36	; 0x24
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	88fa      	ldrh	r2, [r7, #6]
 800204c:	4958      	ldr	r1, [pc, #352]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	440b      	add	r3, r1
 8002058:	332e      	adds	r3, #46	; 0x2e
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	4619      	mov	r1, r3
 8002060:	f7fe fb2b 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW3-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8002064:	88fa      	ldrh	r2, [r7, #6]
 8002066:	4952      	ldr	r1, [pc, #328]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	440b      	add	r3, r1
 8002072:	330c      	adds	r3, #12
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	494d      	ldr	r1, [pc, #308]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	440b      	add	r3, r1
 8002084:	3316      	adds	r3, #22
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	f7fe faff 	bl	800068c <HAL_GPIO_ReadPin>
 800208e:	4603      	mov	r3, r0
 8002090:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002092:	7bbb      	ldrb	r3, [r7, #14]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <KEYPAD_Scan+0xe98>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 1;
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	4a44      	ldr	r2, [pc, #272]	; (80021ac <KEYPAD_Scan+0xf9c>)
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	330c      	adds	r3, #12
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	e006      	b.n	80020b6 <KEYPAD_Scan+0xea6>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4a40      	ldr	r2, [pc, #256]	; (80021ac <KEYPAD_Scan+0xf9c>)
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	330c      	adds	r3, #12
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80020b6:	88fa      	ldrh	r2, [r7, #6]
 80020b8:	493d      	ldr	r1, [pc, #244]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	440b      	add	r3, r1
 80020c4:	3318      	adds	r3, #24
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	88fa      	ldrh	r2, [r7, #6]
 80020ca:	4939      	ldr	r1, [pc, #228]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	440b      	add	r3, r1
 80020d6:	3328      	adds	r3, #40	; 0x28
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	2200      	movs	r2, #0
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe faec 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 80020e2:	88fa      	ldrh	r2, [r7, #6]
 80020e4:	4932      	ldr	r1, [pc, #200]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	440b      	add	r3, r1
 80020f0:	331c      	adds	r3, #28
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	492e      	ldr	r1, [pc, #184]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	440b      	add	r3, r1
 8002102:	332a      	adds	r3, #42	; 0x2a
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	2201      	movs	r2, #1
 8002108:	4619      	mov	r1, r3
 800210a:	f7fe fad6 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	4927      	ldr	r1, [pc, #156]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	440b      	add	r3, r1
 800211c:	3320      	adds	r3, #32
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	88fa      	ldrh	r2, [r7, #6]
 8002122:	4923      	ldr	r1, [pc, #140]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	011b      	lsls	r3, r3, #4
 800212c:	440b      	add	r3, r1
 800212e:	332c      	adds	r3, #44	; 0x2c
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	2200      	movs	r2, #0
 8002134:	4619      	mov	r1, r3
 8002136:	f7fe fac0 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800213a:	88fa      	ldrh	r2, [r7, #6]
 800213c:	491c      	ldr	r1, [pc, #112]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	440b      	add	r3, r1
 8002148:	3324      	adds	r3, #36	; 0x24
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	88fa      	ldrh	r2, [r7, #6]
 800214e:	4918      	ldr	r1, [pc, #96]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	440b      	add	r3, r1
 800215a:	332e      	adds	r3, #46	; 0x2e
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	4619      	mov	r1, r3
 8002162:	f7fe faaa 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW3-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8002166:	88fa      	ldrh	r2, [r7, #6]
 8002168:	4911      	ldr	r1, [pc, #68]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	440b      	add	r3, r1
 8002174:	330c      	adds	r3, #12
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	88fa      	ldrh	r2, [r7, #6]
 800217a:	490d      	ldr	r1, [pc, #52]	; (80021b0 <KEYPAD_Scan+0xfa0>)
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	440b      	add	r3, r1
 8002186:	3316      	adds	r3, #22
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	f7fe fa7e 	bl	800068c <HAL_GPIO_ReadPin>
 8002190:	4603      	mov	r3, r0
 8002192:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00c      	beq.n	80021b4 <KEYPAD_Scan+0xfa4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 1;
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	4a03      	ldr	r2, [pc, #12]	; (80021ac <KEYPAD_Scan+0xf9c>)
 800219e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a2:	330d      	adds	r3, #13
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e00b      	b.n	80021c2 <KEYPAD_Scan+0xfb2>
 80021aa:	bf00      	nop
 80021ac:	20000028 	.word	0x20000028
 80021b0:	080028fc 	.word	0x080028fc
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	4aab      	ldr	r2, [pc, #684]	; (8002464 <KEYPAD_Scan+0x1254>)
 80021b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021bc:	330d      	adds	r3, #13
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	49a8      	ldr	r1, [pc, #672]	; (8002468 <KEYPAD_Scan+0x1258>)
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	440b      	add	r3, r1
 80021d0:	3318      	adds	r3, #24
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	49a4      	ldr	r1, [pc, #656]	; (8002468 <KEYPAD_Scan+0x1258>)
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	440b      	add	r3, r1
 80021e2:	3328      	adds	r3, #40	; 0x28
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7fe fa66 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	499d      	ldr	r1, [pc, #628]	; (8002468 <KEYPAD_Scan+0x1258>)
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	440b      	add	r3, r1
 80021fc:	331c      	adds	r3, #28
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	4999      	ldr	r1, [pc, #612]	; (8002468 <KEYPAD_Scan+0x1258>)
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	440b      	add	r3, r1
 800220e:	332a      	adds	r3, #42	; 0x2a
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	2200      	movs	r2, #0
 8002214:	4619      	mov	r1, r3
 8002216:	f7fe fa50 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 800221a:	88fa      	ldrh	r2, [r7, #6]
 800221c:	4992      	ldr	r1, [pc, #584]	; (8002468 <KEYPAD_Scan+0x1258>)
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	440b      	add	r3, r1
 8002228:	3320      	adds	r3, #32
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	88fa      	ldrh	r2, [r7, #6]
 800222e:	498e      	ldr	r1, [pc, #568]	; (8002468 <KEYPAD_Scan+0x1258>)
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	440b      	add	r3, r1
 800223a:	332c      	adds	r3, #44	; 0x2c
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	2201      	movs	r2, #1
 8002240:	4619      	mov	r1, r3
 8002242:	f7fe fa3a 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8002246:	88fa      	ldrh	r2, [r7, #6]
 8002248:	4987      	ldr	r1, [pc, #540]	; (8002468 <KEYPAD_Scan+0x1258>)
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	440b      	add	r3, r1
 8002254:	3324      	adds	r3, #36	; 0x24
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	88fa      	ldrh	r2, [r7, #6]
 800225a:	4983      	ldr	r1, [pc, #524]	; (8002468 <KEYPAD_Scan+0x1258>)
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	440b      	add	r3, r1
 8002266:	332e      	adds	r3, #46	; 0x2e
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	2200      	movs	r2, #0
 800226c:	4619      	mov	r1, r3
 800226e:	f7fe fa24 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW3-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8002272:	88fa      	ldrh	r2, [r7, #6]
 8002274:	497c      	ldr	r1, [pc, #496]	; (8002468 <KEYPAD_Scan+0x1258>)
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	440b      	add	r3, r1
 8002280:	330c      	adds	r3, #12
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	88fa      	ldrh	r2, [r7, #6]
 8002286:	4978      	ldr	r1, [pc, #480]	; (8002468 <KEYPAD_Scan+0x1258>)
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	440b      	add	r3, r1
 8002292:	3316      	adds	r3, #22
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	4619      	mov	r1, r3
 8002298:	f7fe f9f8 	bl	800068c <HAL_GPIO_ReadPin>
 800229c:	4603      	mov	r3, r0
 800229e:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80022a0:	7bbb      	ldrb	r3, [r7, #14]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d007      	beq.n	80022b6 <KEYPAD_Scan+0x10a6>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 1;
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	4a6e      	ldr	r2, [pc, #440]	; (8002464 <KEYPAD_Scan+0x1254>)
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	330e      	adds	r3, #14
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	e006      	b.n	80022c4 <KEYPAD_Scan+0x10b4>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	4a6a      	ldr	r2, [pc, #424]	; (8002464 <KEYPAD_Scan+0x1254>)
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	330e      	adds	r3, #14
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80022c4:	88fa      	ldrh	r2, [r7, #6]
 80022c6:	4968      	ldr	r1, [pc, #416]	; (8002468 <KEYPAD_Scan+0x1258>)
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	440b      	add	r3, r1
 80022d2:	3318      	adds	r3, #24
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	88fa      	ldrh	r2, [r7, #6]
 80022d8:	4963      	ldr	r1, [pc, #396]	; (8002468 <KEYPAD_Scan+0x1258>)
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	440b      	add	r3, r1
 80022e4:	3328      	adds	r3, #40	; 0x28
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7fe f9e5 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80022f0:	88fa      	ldrh	r2, [r7, #6]
 80022f2:	495d      	ldr	r1, [pc, #372]	; (8002468 <KEYPAD_Scan+0x1258>)
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	440b      	add	r3, r1
 80022fe:	331c      	adds	r3, #28
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	4958      	ldr	r1, [pc, #352]	; (8002468 <KEYPAD_Scan+0x1258>)
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	440b      	add	r3, r1
 8002310:	332a      	adds	r3, #42	; 0x2a
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	2200      	movs	r2, #0
 8002316:	4619      	mov	r1, r3
 8002318:	f7fe f9cf 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800231c:	88fa      	ldrh	r2, [r7, #6]
 800231e:	4952      	ldr	r1, [pc, #328]	; (8002468 <KEYPAD_Scan+0x1258>)
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	440b      	add	r3, r1
 800232a:	3320      	adds	r3, #32
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	494d      	ldr	r1, [pc, #308]	; (8002468 <KEYPAD_Scan+0x1258>)
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	440b      	add	r3, r1
 800233c:	332c      	adds	r3, #44	; 0x2c
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe f9b9 	bl	80006ba <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8002348:	88fa      	ldrh	r2, [r7, #6]
 800234a:	4947      	ldr	r1, [pc, #284]	; (8002468 <KEYPAD_Scan+0x1258>)
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	440b      	add	r3, r1
 8002356:	3324      	adds	r3, #36	; 0x24
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	4942      	ldr	r1, [pc, #264]	; (8002468 <KEYPAD_Scan+0x1258>)
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	440b      	add	r3, r1
 8002368:	332e      	adds	r3, #46	; 0x2e
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	2201      	movs	r2, #1
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe f9a3 	bl	80006ba <HAL_GPIO_WritePin>
			/* Read ROW3-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	493c      	ldr	r1, [pc, #240]	; (8002468 <KEYPAD_Scan+0x1258>)
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	440b      	add	r3, r1
 8002382:	330c      	adds	r3, #12
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	88fa      	ldrh	r2, [r7, #6]
 8002388:	4937      	ldr	r1, [pc, #220]	; (8002468 <KEYPAD_Scan+0x1258>)
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	440b      	add	r3, r1
 8002394:	3316      	adds	r3, #22
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	f7fe f977 	bl	800068c <HAL_GPIO_ReadPin>
 800239e:	4603      	mov	r3, r0
 80023a0:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80023a2:	7bbb      	ldrb	r3, [r7, #14]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d035      	beq.n	8002414 <KEYPAD_Scan+0x1204>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[15] = 1;
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	4a2e      	ldr	r2, [pc, #184]	; (8002464 <KEYPAD_Scan+0x1254>)
 80023ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b0:	330f      	adds	r3, #15
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
 80023b6:	e02d      	b.n	8002414 <KEYPAD_Scan+0x1204>
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	4a2a      	ldr	r2, [pc, #168]	; (8002464 <KEYPAD_Scan+0x1254>)
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	330c      	adds	r3, #12
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	4a26      	ldr	r2, [pc, #152]	; (8002464 <KEYPAD_Scan+0x1254>)
 80023ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ce:	330d      	adds	r3, #13
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	4a23      	ldr	r2, [pc, #140]	; (8002464 <KEYPAD_Scan+0x1254>)
 80023d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023dc:	330e      	adds	r3, #14
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[15] = 0;
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <KEYPAD_Scan+0x1254>)
 80023e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ea:	330f      	adds	r3, #15
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e010      	b.n	8002414 <KEYPAD_Scan+0x1204>
	}
	/* Else If No Key Is Pressed */
	else
	{
		/* Fill The Keys States With 0s */
		for(i=0; i<KEYS; i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	e00a      	b.n	800240e <KEYPAD_Scan+0x11fe>
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[i] = 0;
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <KEYPAD_Scan+0x1254>)
 80023fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	4413      	add	r3, r2
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
		for(i=0; i<KEYS; i++)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	3301      	adds	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	7bfb      	ldrb	r3, [r7, #15]
 8002410:	2b0f      	cmp	r3, #15
 8002412:	d9f1      	bls.n	80023f8 <KEYPAD_Scan+0x11e8>
		}
	}
	/* Back To Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	e01d      	b.n	8002456 <KEYPAD_Scan+0x1246>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	7bf9      	ldrb	r1, [r7, #15]
 800241e:	4812      	ldr	r0, [pc, #72]	; (8002468 <KEYPAD_Scan+0x1258>)
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	3306      	adds	r3, #6
 800242c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	7bf9      	ldrb	r1, [r7, #15]
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <KEYPAD_Scan+0x1258>)
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	3314      	adds	r3, #20
 8002442:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8002446:	2201      	movs	r2, #1
 8002448:	4619      	mov	r1, r3
 800244a:	4620      	mov	r0, r4
 800244c:	f7fe f935 	bl	80006ba <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	3301      	adds	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d9de      	bls.n	800241a <KEYPAD_Scan+0x120a>
	}
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bdb0      	pop	{r4, r5, r7, pc}
 8002464:	20000028 	.word	0x20000028
 8002468:	080028fc 	.word	0x080028fc

0800246c <LEDs_Init>:
#include "LEDS_cfg.h"



void LEDs_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
	uint8_t i = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	for(i=0; i<LED_UNITS; i++)
 8002486:	2300      	movs	r3, #0
 8002488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800248c:	e082      	b.n	8002594 <LEDs_Init+0x128>
	{
		/*--------[ Configure The LED GPIO Pin ]-------*/
		if(LED_CfgParam[i].LED_GPIO == GPIOA)
 800248e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002492:	4a45      	ldr	r2, [pc, #276]	; (80025a8 <LEDs_Init+0x13c>)
 8002494:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002498:	4a44      	ldr	r2, [pc, #272]	; (80025ac <LEDs_Init+0x140>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d10c      	bne.n	80024b8 <LEDs_Init+0x4c>
	   {
		    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	4b44      	ldr	r3, [pc, #272]	; (80025b0 <LEDs_Init+0x144>)
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	4a43      	ldr	r2, [pc, #268]	; (80025b0 <LEDs_Init+0x144>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	6193      	str	r3, [r2, #24]
 80024aa:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <LEDs_Init+0x144>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	e052      	b.n	800255e <LEDs_Init+0xf2>
		}
		else if(LED_CfgParam[i].LED_GPIO == GPIOB)
 80024b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024bc:	4a3a      	ldr	r2, [pc, #232]	; (80025a8 <LEDs_Init+0x13c>)
 80024be:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024c2:	4a3c      	ldr	r2, [pc, #240]	; (80025b4 <LEDs_Init+0x148>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d10c      	bne.n	80024e2 <LEDs_Init+0x76>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 80024c8:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <LEDs_Init+0x144>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4a38      	ldr	r2, [pc, #224]	; (80025b0 <LEDs_Init+0x144>)
 80024ce:	f043 0308 	orr.w	r3, r3, #8
 80024d2:	6193      	str	r3, [r2, #24]
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <LEDs_Init+0x144>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	e03d      	b.n	800255e <LEDs_Init+0xf2>
		}
		else if(LED_CfgParam[i].LED_GPIO == GPIOC)
 80024e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024e6:	4a30      	ldr	r2, [pc, #192]	; (80025a8 <LEDs_Init+0x13c>)
 80024e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024ec:	4a32      	ldr	r2, [pc, #200]	; (80025b8 <LEDs_Init+0x14c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d10c      	bne.n	800250c <LEDs_Init+0xa0>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 80024f2:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <LEDs_Init+0x144>)
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	4a2e      	ldr	r2, [pc, #184]	; (80025b0 <LEDs_Init+0x144>)
 80024f8:	f043 0310 	orr.w	r3, r3, #16
 80024fc:	6193      	str	r3, [r2, #24]
 80024fe:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <LEDs_Init+0x144>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	e028      	b.n	800255e <LEDs_Init+0xf2>
		}
		else if(LED_CfgParam[i].LED_GPIO == GPIOD)
 800250c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002510:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <LEDs_Init+0x13c>)
 8002512:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002516:	4a29      	ldr	r2, [pc, #164]	; (80025bc <LEDs_Init+0x150>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d10c      	bne.n	8002536 <LEDs_Init+0xca>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <LEDs_Init+0x144>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <LEDs_Init+0x144>)
 8002522:	f043 0320 	orr.w	r3, r3, #32
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <LEDs_Init+0x144>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	e013      	b.n	800255e <LEDs_Init+0xf2>
		}
		else if(LED_CfgParam[i].LED_GPIO == GPIOE)
 8002536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800253a:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <LEDs_Init+0x13c>)
 800253c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002540:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <LEDs_Init+0x154>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10b      	bne.n	800255e <LEDs_Init+0xf2>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <LEDs_Init+0x144>)
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <LEDs_Init+0x144>)
 800254c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002550:	6193      	str	r3, [r2, #24]
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <LEDs_Init+0x144>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
		}
		GPIO_InitStruct.Pin = LED_CfgParam[i].LED_PIN;
 800255e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002562:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <LEDs_Init+0x13c>)
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	889b      	ldrh	r3, [r3, #4]
 800256a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256c:	2301      	movs	r3, #1
 800256e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002570:	2301      	movs	r3, #1
 8002572:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(LED_CfgParam[i].LED_GPIO, &GPIO_InitStruct);
 8002574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002578:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <LEDs_Init+0x13c>)
 800257a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800257e:	f107 0214 	add.w	r2, r7, #20
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ff27 	bl	80003d8 <HAL_GPIO_Init>
	for(i=0; i<LED_UNITS; i++)
 800258a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800258e:	3301      	adds	r3, #1
 8002590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002598:	2b01      	cmp	r3, #1
 800259a:	f67f af78 	bls.w	800248e <LEDs_Init+0x22>
	}
}
 800259e:	bf00      	nop
 80025a0:	3728      	adds	r7, #40	; 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	0800292c 	.word	0x0800292c
 80025ac:	40010800 	.word	0x40010800
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40010c00 	.word	0x40010c00
 80025b8:	40011000 	.word	0x40011000
 80025bc:	40011400 	.word	0x40011400
 80025c0:	40011800 	.word	0x40011800

080025c4 <LED_ON>:

void LED_ON(uint16_t au16_Instance)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LED_CfgParam[au16_Instance].LED_GPIO, LED_CfgParam[au16_Instance].LED_PIN, 1);
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <LED_ON+0x2c>)
 80025d2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <LED_ON+0x2c>)
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	889b      	ldrh	r3, [r3, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	4619      	mov	r1, r3
 80025e4:	f7fe f869 	bl	80006ba <HAL_GPIO_WritePin>
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	0800292c 	.word	0x0800292c

080025f4 <LED_OFF>:

void LED_OFF(uint16_t au16_Instance)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(LED_CfgParam[au16_Instance].LED_GPIO, LED_CfgParam[au16_Instance].LED_PIN, 0);
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <LED_OFF+0x2c>)
 8002602:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	4a05      	ldr	r2, [pc, #20]	; (8002620 <LED_OFF+0x2c>)
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	889b      	ldrh	r3, [r3, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	4619      	mov	r1, r3
 8002614:	f7fe f851 	bl	80006ba <HAL_GPIO_WritePin>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	0800292c 	.word	0x0800292c

08002624 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void SysTick_CallBack(void);

int main(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
    HAL_Init();
 8002628:	f7fd fd90 	bl	800014c <HAL_Init>
    SystemClock_Config();
 800262c:	f000 f838 	bl	80026a0 <SystemClock_Config>
    MX_GPIO_Init();
 8002630:	f000 f87c 	bl	800272c <MX_GPIO_Init>
    LEDs_Init();
 8002634:	f7ff ff1a 	bl	800246c <LEDs_Init>
    KEYPAD_Init(0, gu8_KeyStatesArr);
 8002638:	490d      	ldr	r1, [pc, #52]	; (8002670 <main+0x4c>)
 800263a:	2000      	movs	r0, #0
 800263c:	f7fe fc40 	bl	8000ec0 <KEYPAD_Init>

    while (1)
    {
    	if(gu8_KeyStatesArr[KEY_1] == KEY_PRESSED)
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <main+0x4c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d103      	bne.n	8002650 <main+0x2c>
    	{
    	    LED_ON(LED_YELLOW);
 8002648:	2001      	movs	r0, #1
 800264a:	f7ff ffbb 	bl	80025c4 <LED_ON>
 800264e:	e002      	b.n	8002656 <main+0x32>
    	}
    	else
    	{
    	    LED_OFF(LED_YELLOW);
 8002650:	2001      	movs	r0, #1
 8002652:	f7ff ffcf 	bl	80025f4 <LED_OFF>
    	}
    	if(gu8_KeyStatesArr[KEY_2] == KEY_PRESSED)
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <main+0x4c>)
 8002658:	785b      	ldrb	r3, [r3, #1]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d103      	bne.n	8002666 <main+0x42>
    	{
    	    LED_ON(LED_BLUE);
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff ffb0 	bl	80025c4 <LED_ON>
 8002664:	e7ec      	b.n	8002640 <main+0x1c>
    	}
    	else
    	{
    	    LED_OFF(LED_BLUE);
 8002666:	2000      	movs	r0, #0
 8002668:	f7ff ffc4 	bl	80025f4 <LED_OFF>
    	if(gu8_KeyStatesArr[KEY_1] == KEY_PRESSED)
 800266c:	e7e8      	b.n	8002640 <main+0x1c>
 800266e:	bf00      	nop
 8002670:	2000002c 	.word	0x2000002c

08002674 <SysTick_CallBack>:
    }
}


void SysTick_CallBack(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
    SysTicks++;
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <SysTick_CallBack+0x28>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	b2da      	uxtb	r2, r3
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <SysTick_CallBack+0x28>)
 8002682:	701a      	strb	r2, [r3, #0]
    if(SysTicks == 5) // Each 5msec
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <SysTick_CallBack+0x28>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d105      	bne.n	8002698 <SysTick_CallBack+0x24>
    {
	KEYPAD_Scan(0);
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe fdbf 	bl	8001210 <KEYPAD_Scan>
	SysTicks = 0;
 8002692:	4b02      	ldr	r3, [pc, #8]	; (800269c <SysTick_CallBack+0x28>)
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
    }
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	2000003c 	.word	0x2000003c

080026a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b090      	sub	sp, #64	; 0x40
 80026a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026a6:	f107 0318 	add.w	r3, r7, #24
 80026aa:	2228      	movs	r2, #40	; 0x28
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f906 	bl	80028c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026d0:	2301      	movs	r3, #1
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d4:	2302      	movs	r3, #2
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80026e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026e4:	f107 0318 	add.w	r3, r7, #24
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd ffff 	bl	80006ec <HAL_RCC_OscConfig>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80026f4:	f000 f830 	bl	8002758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026f8:	230f      	movs	r3, #15
 80026fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026fc:	2302      	movs	r3, #2
 80026fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	2102      	movs	r1, #2
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fa6a 	bl	8000bec <HAL_RCC_ClockConfig>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800271e:	f000 f81b 	bl	8002758 <Error_Handler>
  }
}
 8002722:	bf00      	nop
 8002724:	3740      	adds	r7, #64	; 0x40
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <MX_GPIO_Init+0x28>)
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	4a07      	ldr	r2, [pc, #28]	; (8002754 <MX_GPIO_Init+0x28>)
 8002738:	f043 0320 	orr.w	r3, r3, #32
 800273c:	6193      	str	r3, [r2, #24]
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <MX_GPIO_Init+0x28>)
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]

}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	40021000 	.word	0x40021000

08002758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_MspInit+0x5c>)
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <HAL_MspInit+0x5c>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6193      	str	r3, [r2, #24]
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_MspInit+0x5c>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <HAL_MspInit+0x5c>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <HAL_MspInit+0x5c>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278c:	61d3      	str	r3, [r2, #28]
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_MspInit+0x5c>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_MspInit+0x60>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <HAL_MspInit+0x60>)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010000 	.word	0x40010000

080027c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <HardFault_Handler+0x4>

080027da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027de:	e7fe      	b.n	80027de <MemManage_Handler+0x4>

080027e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <BusFault_Handler+0x4>

080027e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <UsageFault_Handler+0x4>

080027ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8002814:	f7fd fce0 	bl	80001d8 <HAL_IncTick>
    SysTick_CallBack();
 8002818:	f7ff ff2c 	bl	8002674 <SysTick_CallBack>
}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}

08002820 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800282c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800282e:	e003      	b.n	8002838 <LoopCopyDataInit>

08002830 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002832:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002834:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002836:	3104      	adds	r1, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002838:	480a      	ldr	r0, [pc, #40]	; (8002864 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800283c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800283e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002840:	d3f6      	bcc.n	8002830 <CopyDataInit>
  ldr r2, =_sbss
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002844:	e002      	b.n	800284c <LoopFillZerobss>

08002846 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002848:	f842 3b04 	str.w	r3, [r2], #4

0800284c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800284e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002850:	d3f9      	bcc.n	8002846 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002852:	f7ff ffe5 	bl	8002820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002856:	f000 f80f 	bl	8002878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800285a:	f7ff fee3 	bl	8002624 <main>
  bx lr
 800285e:	4770      	bx	lr
  ldr r3, =_sidata
 8002860:	08002954 	.word	0x08002954
  ldr r0, =_sdata
 8002864:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002868:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800286c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002870:	20000044 	.word	0x20000044

08002874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002874:	e7fe      	b.n	8002874 <ADC1_2_IRQHandler>
	...

08002878 <__libc_init_array>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	2500      	movs	r5, #0
 800287c:	4e0c      	ldr	r6, [pc, #48]	; (80028b0 <__libc_init_array+0x38>)
 800287e:	4c0d      	ldr	r4, [pc, #52]	; (80028b4 <__libc_init_array+0x3c>)
 8002880:	1ba4      	subs	r4, r4, r6
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	42a5      	cmp	r5, r4
 8002886:	d109      	bne.n	800289c <__libc_init_array+0x24>
 8002888:	f000 f822 	bl	80028d0 <_init>
 800288c:	2500      	movs	r5, #0
 800288e:	4e0a      	ldr	r6, [pc, #40]	; (80028b8 <__libc_init_array+0x40>)
 8002890:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <__libc_init_array+0x44>)
 8002892:	1ba4      	subs	r4, r4, r6
 8002894:	10a4      	asrs	r4, r4, #2
 8002896:	42a5      	cmp	r5, r4
 8002898:	d105      	bne.n	80028a6 <__libc_init_array+0x2e>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028a0:	4798      	blx	r3
 80028a2:	3501      	adds	r5, #1
 80028a4:	e7ee      	b.n	8002884 <__libc_init_array+0xc>
 80028a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028aa:	4798      	blx	r3
 80028ac:	3501      	adds	r5, #1
 80028ae:	e7f2      	b.n	8002896 <__libc_init_array+0x1e>
 80028b0:	0800294c 	.word	0x0800294c
 80028b4:	0800294c 	.word	0x0800294c
 80028b8:	0800294c 	.word	0x0800294c
 80028bc:	08002950 	.word	0x08002950

080028c0 <memset>:
 80028c0:	4603      	mov	r3, r0
 80028c2:	4402      	add	r2, r0
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d100      	bne.n	80028ca <memset+0xa>
 80028c8:	4770      	bx	lr
 80028ca:	f803 1b01 	strb.w	r1, [r3], #1
 80028ce:	e7f9      	b.n	80028c4 <memset+0x4>

080028d0 <_init>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	bf00      	nop
 80028d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d6:	bc08      	pop	{r3}
 80028d8:	469e      	mov	lr, r3
 80028da:	4770      	bx	lr

080028dc <_fini>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	bf00      	nop
 80028e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e2:	bc08      	pop	{r3}
 80028e4:	469e      	mov	lr, r3
 80028e6:	4770      	bx	lr
