
prueba_adc_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08009bfc  08009bfc  00019bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dc8  08009dc8  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08009dc8  08009dc8  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009dc8  08009dc8  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dc8  08009dc8  00019dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dcc  08009dcc  00019dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08009dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001450  200001cc  08009f9c  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000161c  08009f9c  0002161c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000139d2  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037bc  00000000  00000000  00033c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  000373c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db6  00000000  00000000  000385d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af08  00000000  00000000  0003938e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e6f  00000000  00000000  00054296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092276  00000000  00000000  0006b105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f8c  00000000  00000000  000fd37c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00102308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08009be4 	.word	0x08009be4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08009be4 	.word	0x08009be4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b095      	sub	sp, #84	; 0x54
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fc59 	bl	8000a18 <HAL_Init>
  //sumas_adc[0]=0;
 // sumas_adc[1]=0;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8fb 	bl	8000360 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 fa2b 	bl	80005c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 fa0b 	bl	8000588 <MX_DMA_Init>
  MX_ADC1_Init();
 8000172:	f000 f953 	bl	800041c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000176:	f000 f9bb 	bl	80004f0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800017a:	f008 fb43 	bl	8008804 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800017e:	4870      	ldr	r0, [pc, #448]	; (8000340 <main+0x1e4>)
 8000180:	f004 f886 	bl	8004290 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, adc_in, 4);
 8000184:	2204      	movs	r2, #4
 8000186:	496f      	ldr	r1, [pc, #444]	; (8000344 <main+0x1e8>)
 8000188:	486f      	ldr	r0, [pc, #444]	; (8000348 <main+0x1ec>)
 800018a:	f000 fda3 	bl	8000cd4 <HAL_ADC_Start_DMA>
  //char *str = "Test\n";
  char str[30]="";
 800018e:	2300      	movs	r3, #0
 8000190:	623b      	str	r3, [r7, #32]
 8000192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]
 80001a0:	611a      	str	r2, [r3, #16]
 80001a2:	615a      	str	r2, [r3, #20]
 80001a4:	831a      	strh	r2, [r3, #24]
  char str_aux[30]="";
 80001a6:	2300      	movs	r3, #0
 80001a8:	603b      	str	r3, [r7, #0]
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]
 80001b6:	611a      	str	r2, [r3, #16]
 80001b8:	615a      	str	r2, [r3, #20]
 80001ba:	831a      	strh	r2, [r3, #24]

  char mode = 'C';
 80001bc:	2343      	movs	r3, #67	; 0x43
 80001be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  int valor = 0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	643b      	str	r3, [r7, #64]	; 0x40
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==GPIO_PIN_SET){
 80001c6:	2108      	movs	r1, #8
 80001c8:	4860      	ldr	r0, [pc, #384]	; (800034c <main+0x1f0>)
 80001ca:	f001 fdc7 	bl	8001d5c <HAL_GPIO_ReadPin>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b01      	cmp	r3, #1
 80001d2:	d1f8      	bne.n	80001c6 <main+0x6a>
		  HAL_Delay(300);
 80001d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80001d8:	f000 fc80 	bl	8000adc <HAL_Delay>
		  sprintf(str, "$USB#\n");//manda la solicitud de conexion
 80001dc:	f107 0320 	add.w	r3, r7, #32
 80001e0:	495b      	ldr	r1, [pc, #364]	; (8000350 <main+0x1f4>)
 80001e2:	4618      	mov	r0, r3
 80001e4:	f009 f84c 	bl	8009280 <siprintf>
		  memset(buffer, '\0',64);
 80001e8:	2240      	movs	r2, #64	; 0x40
 80001ea:	2100      	movs	r1, #0
 80001ec:	4859      	ldr	r0, [pc, #356]	; (8000354 <main+0x1f8>)
 80001ee:	f009 f867 	bl	80092c0 <memset>
		  CDC_Transmit_FS((uint8_t*) str, strlen(str));
 80001f2:	f107 0320 	add.w	r3, r7, #32
 80001f6:	4618      	mov	r0, r3
 80001f8:	f7ff ffa8 	bl	800014c <strlen>
 80001fc:	4603      	mov	r3, r0
 80001fe:	b29a      	uxth	r2, r3
 8000200:	f107 0320 	add.w	r3, r7, #32
 8000204:	4611      	mov	r1, r2
 8000206:	4618      	mov	r0, r3
 8000208:	f008 fbd0 	bl	80089ac <CDC_Transmit_FS>
		  HAL_Delay(300);
 800020c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000210:	f000 fc64 	bl	8000adc <HAL_Delay>
		  if(buffer[0]=='$' && buffer[1]=='O' && buffer[2]=='K' && buffer[3]=='#'){//si responde la pc, entra al bucle
 8000214:	4b4f      	ldr	r3, [pc, #316]	; (8000354 <main+0x1f8>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b24      	cmp	r3, #36	; 0x24
 800021a:	d1d4      	bne.n	80001c6 <main+0x6a>
 800021c:	4b4d      	ldr	r3, [pc, #308]	; (8000354 <main+0x1f8>)
 800021e:	785b      	ldrb	r3, [r3, #1]
 8000220:	2b4f      	cmp	r3, #79	; 0x4f
 8000222:	d1d0      	bne.n	80001c6 <main+0x6a>
 8000224:	4b4b      	ldr	r3, [pc, #300]	; (8000354 <main+0x1f8>)
 8000226:	789b      	ldrb	r3, [r3, #2]
 8000228:	2b4b      	cmp	r3, #75	; 0x4b
 800022a:	d1cc      	bne.n	80001c6 <main+0x6a>
 800022c:	4b49      	ldr	r3, [pc, #292]	; (8000354 <main+0x1f8>)
 800022e:	78db      	ldrb	r3, [r3, #3]
 8000230:	2b23      	cmp	r3, #35	; 0x23
 8000232:	d1c8      	bne.n	80001c6 <main+0x6a>
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==GPIO_PIN_SET){//mientras no se apreta el boton no se sale del modo
 8000234:	e07a      	b.n	800032c <main+0x1d0>

				if (buffer[0]=='$' && buffer[1]=='C' && buffer[9]=='#') {//comando config
 8000236:	4b47      	ldr	r3, [pc, #284]	; (8000354 <main+0x1f8>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b24      	cmp	r3, #36	; 0x24
 800023c:	d145      	bne.n	80002ca <main+0x16e>
 800023e:	4b45      	ldr	r3, [pc, #276]	; (8000354 <main+0x1f8>)
 8000240:	785b      	ldrb	r3, [r3, #1]
 8000242:	2b43      	cmp	r3, #67	; 0x43
 8000244:	d141      	bne.n	80002ca <main+0x16e>
 8000246:	4b43      	ldr	r3, [pc, #268]	; (8000354 <main+0x1f8>)
 8000248:	7a5b      	ldrb	r3, [r3, #9]
 800024a:	2b23      	cmp	r3, #35	; 0x23
 800024c:	d13d      	bne.n	80002ca <main+0x16e>
					sprintf(str, "$D,%c,%04d,%04d,%04d", mode,valor,(int)adc_in[0],(int)adc_in[1]);
 800024e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000252:	4b3c      	ldr	r3, [pc, #240]	; (8000344 <main+0x1e8>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4619      	mov	r1, r3
 8000258:	4b3a      	ldr	r3, [pc, #232]	; (8000344 <main+0x1e8>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	f107 0020 	add.w	r0, r7, #32
 8000260:	9301      	str	r3, [sp, #4]
 8000262:	9100      	str	r1, [sp, #0]
 8000264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000266:	493c      	ldr	r1, [pc, #240]	; (8000358 <main+0x1fc>)
 8000268:	f009 f80a 	bl	8009280 <siprintf>
					mode=buffer[3];
 800026c:	4b39      	ldr	r3, [pc, #228]	; (8000354 <main+0x1f8>)
 800026e:	78db      	ldrb	r3, [r3, #3]
 8000270:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					sprintf(str_aux, "%c%c%c%c",buffer[5],buffer[6],buffer[7],buffer[8]);
 8000274:	4b37      	ldr	r3, [pc, #220]	; (8000354 <main+0x1f8>)
 8000276:	795b      	ldrb	r3, [r3, #5]
 8000278:	4619      	mov	r1, r3
 800027a:	4b36      	ldr	r3, [pc, #216]	; (8000354 <main+0x1f8>)
 800027c:	799b      	ldrb	r3, [r3, #6]
 800027e:	461c      	mov	r4, r3
 8000280:	4b34      	ldr	r3, [pc, #208]	; (8000354 <main+0x1f8>)
 8000282:	79db      	ldrb	r3, [r3, #7]
 8000284:	461a      	mov	r2, r3
 8000286:	4b33      	ldr	r3, [pc, #204]	; (8000354 <main+0x1f8>)
 8000288:	7a1b      	ldrb	r3, [r3, #8]
 800028a:	4638      	mov	r0, r7
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	9200      	str	r2, [sp, #0]
 8000290:	4623      	mov	r3, r4
 8000292:	460a      	mov	r2, r1
 8000294:	4931      	ldr	r1, [pc, #196]	; (800035c <main+0x200>)
 8000296:	f008 fff3 	bl	8009280 <siprintf>
					valor=atoi(str_aux);
 800029a:	463b      	mov	r3, r7
 800029c:	4618      	mov	r0, r3
 800029e:	f008 ff63 	bl	8009168 <atoi>
 80002a2:	6438      	str	r0, [r7, #64]	; 0x40
					CDC_Transmit_FS((uint8_t*) str, strlen(str));
 80002a4:	f107 0320 	add.w	r3, r7, #32
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff4f 	bl	800014c <strlen>
 80002ae:	4603      	mov	r3, r0
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	f107 0320 	add.w	r3, r7, #32
 80002b6:	4611      	mov	r1, r2
 80002b8:	4618      	mov	r0, r3
 80002ba:	f008 fb77 	bl	80089ac <CDC_Transmit_FS>
					memset(buffer, '\0',64);
 80002be:	2240      	movs	r2, #64	; 0x40
 80002c0:	2100      	movs	r1, #0
 80002c2:	4824      	ldr	r0, [pc, #144]	; (8000354 <main+0x1f8>)
 80002c4:	f008 fffc 	bl	80092c0 <memset>
 80002c8:	e030      	b.n	800032c <main+0x1d0>

				}else if(buffer[0]=='$' && buffer[1]=='R' && buffer[2]=='e' && buffer[3]=='q'){//comando request
 80002ca:	4b22      	ldr	r3, [pc, #136]	; (8000354 <main+0x1f8>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b24      	cmp	r3, #36	; 0x24
 80002d0:	d12c      	bne.n	800032c <main+0x1d0>
 80002d2:	4b20      	ldr	r3, [pc, #128]	; (8000354 <main+0x1f8>)
 80002d4:	785b      	ldrb	r3, [r3, #1]
 80002d6:	2b52      	cmp	r3, #82	; 0x52
 80002d8:	d128      	bne.n	800032c <main+0x1d0>
 80002da:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <main+0x1f8>)
 80002dc:	789b      	ldrb	r3, [r3, #2]
 80002de:	2b65      	cmp	r3, #101	; 0x65
 80002e0:	d124      	bne.n	800032c <main+0x1d0>
 80002e2:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <main+0x1f8>)
 80002e4:	78db      	ldrb	r3, [r3, #3]
 80002e6:	2b71      	cmp	r3, #113	; 0x71
 80002e8:	d120      	bne.n	800032c <main+0x1d0>
					//sprintf(str, "$D,%04d,%04d#\n", (int)adc_in[0],(int)adc_in[1]);
					sprintf(str, "$D,%c,%04d,%04d,%04d", mode,valor,(int)adc_in[0],(int)adc_in[1]);
 80002ea:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <main+0x1e8>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4619      	mov	r1, r3
 80002f4:	4b13      	ldr	r3, [pc, #76]	; (8000344 <main+0x1e8>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	f107 0020 	add.w	r0, r7, #32
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	9100      	str	r1, [sp, #0]
 8000300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <main+0x1fc>)
 8000304:	f008 ffbc 	bl	8009280 <siprintf>
					CDC_Transmit_FS((uint8_t*) str, strlen(str));
 8000308:	f107 0320 	add.w	r3, r7, #32
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff1d 	bl	800014c <strlen>
 8000312:	4603      	mov	r3, r0
 8000314:	b29a      	uxth	r2, r3
 8000316:	f107 0320 	add.w	r3, r7, #32
 800031a:	4611      	mov	r1, r2
 800031c:	4618      	mov	r0, r3
 800031e:	f008 fb45 	bl	80089ac <CDC_Transmit_FS>
					memset(buffer, '\0',64);
 8000322:	2240      	movs	r2, #64	; 0x40
 8000324:	2100      	movs	r1, #0
 8000326:	480b      	ldr	r0, [pc, #44]	; (8000354 <main+0x1f8>)
 8000328:	f008 ffca 	bl	80092c0 <memset>
			while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==GPIO_PIN_SET){//mientras no se apreta el boton no se sale del modo
 800032c:	2108      	movs	r1, #8
 800032e:	4807      	ldr	r0, [pc, #28]	; (800034c <main+0x1f0>)
 8000330:	f001 fd14 	bl	8001d5c <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b01      	cmp	r3, #1
 8000338:	f43f af7d 	beq.w	8000236 <main+0xda>
	  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3)==GPIO_PIN_SET){
 800033c:	e743      	b.n	80001c6 <main+0x6a>
 800033e:	bf00      	nop
 8000340:	2000025c 	.word	0x2000025c
 8000344:	200002a4 	.word	0x200002a4
 8000348:	200001e8 	.word	0x200001e8
 800034c:	40010c00 	.word	0x40010c00
 8000350:	08009bfc 	.word	0x08009bfc
 8000354:	200002b4 	.word	0x200002b4
 8000358:	08009c04 	.word	0x08009c04
 800035c:	08009c1c 	.word	0x08009c1c

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b094      	sub	sp, #80	; 0x50
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036a:	2228      	movs	r2, #40	; 0x28
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f008 ffa6 	bl	80092c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	f107 0314 	add.w	r3, r7, #20
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000390:	2301      	movs	r3, #1
 8000392:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039e:	2301      	movs	r3, #1
 80003a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a2:	2302      	movs	r3, #2
 80003a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b6:	4618      	mov	r0, r3
 80003b8:	f003 fa86 	bl	80038c8 <HAL_RCC_OscConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003c2:	f000 f9ab 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c6:	230f      	movs	r3, #15
 80003c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	2102      	movs	r1, #2
 80003e2:	4618      	mov	r0, r3
 80003e4:	f003 fcf2 	bl	8003dcc <HAL_RCC_ClockConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003ee:	f000 f995 	bl	800071c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80003f2:	2312      	movs	r3, #18
 80003f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80003f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80003fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003fc:	2300      	movs	r3, #0
 80003fe:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	4618      	mov	r0, r3
 8000404:	f003 fe3e 	bl	8004084 <HAL_RCCEx_PeriphCLKConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800040e:	f000 f985 	bl	800071c <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3750      	adds	r7, #80	; 0x50
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800042c:	4b2e      	ldr	r3, [pc, #184]	; (80004e8 <MX_ADC1_Init+0xcc>)
 800042e:	4a2f      	ldr	r2, [pc, #188]	; (80004ec <MX_ADC1_Init+0xd0>)
 8000430:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <MX_ADC1_Init+0xcc>)
 8000434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000438:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800043a:	4b2b      	ldr	r3, [pc, #172]	; (80004e8 <MX_ADC1_Init+0xcc>)
 800043c:	2201      	movs	r2, #1
 800043e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000440:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <MX_ADC1_Init+0xcc>)
 8000442:	2200      	movs	r2, #0
 8000444:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000446:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <MX_ADC1_Init+0xcc>)
 8000448:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800044c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044e:	4b26      	ldr	r3, [pc, #152]	; (80004e8 <MX_ADC1_Init+0xcc>)
 8000450:	2200      	movs	r2, #0
 8000452:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000454:	4b24      	ldr	r3, [pc, #144]	; (80004e8 <MX_ADC1_Init+0xcc>)
 8000456:	2204      	movs	r2, #4
 8000458:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800045a:	4823      	ldr	r0, [pc, #140]	; (80004e8 <MX_ADC1_Init+0xcc>)
 800045c:	f000 fb62 	bl	8000b24 <HAL_ADC_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000466:	f000 f959 	bl	800071c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800046a:	2301      	movs	r3, #1
 800046c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046e:	2301      	movs	r3, #1
 8000470:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4619      	mov	r1, r3
 800047a:	481b      	ldr	r0, [pc, #108]	; (80004e8 <MX_ADC1_Init+0xcc>)
 800047c:	f000 fdec 	bl	8001058 <HAL_ADC_ConfigChannel>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000486:	f000 f949 	bl	800071c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800048a:	2302      	movs	r3, #2
 800048c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800048e:	2302      	movs	r3, #2
 8000490:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4619      	mov	r1, r3
 8000496:	4814      	ldr	r0, [pc, #80]	; (80004e8 <MX_ADC1_Init+0xcc>)
 8000498:	f000 fdde 	bl	8001058 <HAL_ADC_ConfigChannel>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80004a2:	f000 f93b 	bl	800071c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004a6:	2303      	movs	r3, #3
 80004a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004aa:	2303      	movs	r3, #3
 80004ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	4619      	mov	r1, r3
 80004b2:	480d      	ldr	r0, [pc, #52]	; (80004e8 <MX_ADC1_Init+0xcc>)
 80004b4:	f000 fdd0 	bl	8001058 <HAL_ADC_ConfigChannel>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004be:	f000 f92d 	bl	800071c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80004c2:	2304      	movs	r3, #4
 80004c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004c6:	2304      	movs	r3, #4
 80004c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4619      	mov	r1, r3
 80004ce:	4806      	ldr	r0, [pc, #24]	; (80004e8 <MX_ADC1_Init+0xcc>)
 80004d0:	f000 fdc2 	bl	8001058 <HAL_ADC_ConfigChannel>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80004da:	f000 f91f 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	200001e8 	.word	0x200001e8
 80004ec:	40012400 	.word	0x40012400

080004f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f6:	f107 0308 	add.w	r3, r7, #8
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000504:	463b      	mov	r3, r7
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800050c:	4b1d      	ldr	r3, [pc, #116]	; (8000584 <MX_TIM2_Init+0x94>)
 800050e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000512:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_TIM2_Init+0x94>)
 8000516:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800051a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_TIM2_Init+0x94>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_TIM2_Init+0x94>)
 8000524:	2209      	movs	r2, #9
 8000526:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <MX_TIM2_Init+0x94>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <MX_TIM2_Init+0x94>)
 8000530:	2280      	movs	r2, #128	; 0x80
 8000532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000534:	4813      	ldr	r0, [pc, #76]	; (8000584 <MX_TIM2_Init+0x94>)
 8000536:	f003 fe5b 	bl	80041f0 <HAL_TIM_Base_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000540:	f000 f8ec 	bl	800071c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800054a:	f107 0308 	add.w	r3, r7, #8
 800054e:	4619      	mov	r1, r3
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <MX_TIM2_Init+0x94>)
 8000552:	f003 fff7 	bl	8004544 <HAL_TIM_ConfigClockSource>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800055c:	f000 f8de 	bl	800071c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	4619      	mov	r1, r3
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_TIM2_Init+0x94>)
 800056e:	f004 f9cd 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000578:	f000 f8d0 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800057c:	bf00      	nop
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000025c 	.word	0x2000025c

08000588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_DMA_Init+0x38>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <MX_DMA_Init+0x38>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_DMA_Init+0x38>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	200b      	movs	r0, #11
 80005ac:	f001 f82d 	bl	800160a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005b0:	200b      	movs	r0, #11
 80005b2:	f001 f846 	bl	8001642 <HAL_NVIC_EnableIRQ>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d8:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <MX_GPIO_Init+0xe4>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a32      	ldr	r2, [pc, #200]	; (80006a8 <MX_GPIO_Init+0xe4>)
 80005de:	f043 0310 	orr.w	r3, r3, #16
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <MX_GPIO_Init+0xe4>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0310 	and.w	r3, r3, #16
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f0:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <MX_GPIO_Init+0xe4>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a2c      	ldr	r2, [pc, #176]	; (80006a8 <MX_GPIO_Init+0xe4>)
 80005f6:	f043 0320 	orr.w	r3, r3, #32
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <MX_GPIO_Init+0xe4>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0320 	and.w	r3, r3, #32
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <MX_GPIO_Init+0xe4>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a26      	ldr	r2, [pc, #152]	; (80006a8 <MX_GPIO_Init+0xe4>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MX_GPIO_Init+0xe4>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000620:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MX_GPIO_Init+0xe4>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <MX_GPIO_Init+0xe4>)
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_GPIO_Init+0xe4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0308 	and.w	r3, r3, #8
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063e:	481b      	ldr	r0, [pc, #108]	; (80006ac <MX_GPIO_Init+0xe8>)
 8000640:	f001 fba3 	bl	8001d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2160      	movs	r1, #96	; 0x60
 8000648:	4819      	ldr	r0, [pc, #100]	; (80006b0 <MX_GPIO_Init+0xec>)
 800064a:	f001 fb9e 	bl	8001d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800064e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2302      	movs	r3, #2
 800065e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	4811      	ldr	r0, [pc, #68]	; (80006ac <MX_GPIO_Init+0xe8>)
 8000668:	f001 f9f4 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800066c:	2308      	movs	r3, #8
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4619      	mov	r1, r3
 800067e:	480c      	ldr	r0, [pc, #48]	; (80006b0 <MX_GPIO_Init+0xec>)
 8000680:	f001 f9e8 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000684:	2360      	movs	r3, #96	; 0x60
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_GPIO_Init+0xec>)
 800069c:	f001 f9da 	bl	8001a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40011000 	.word	0x40011000
 80006b0:	40010c00 	.word	0x40010c00

080006b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
if(htim->Instance == TIM2){
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006c4:	d11f      	bne.n	8000706 <HAL_TIM_PeriodElapsedCallback+0x52>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ca:	4811      	ldr	r0, [pc, #68]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80006cc:	f001 fb75 	bl	8001dba <HAL_GPIO_TogglePin>
	 if(adc_in[0]>=adc_in[1]){
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d30a      	bcc.n	80006f2 <HAL_TIM_PeriodElapsedCallback+0x3e>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2120      	movs	r1, #32
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006e2:	f001 fb52 	bl	8001d8a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2140      	movs	r1, #64	; 0x40
 80006ea:	480b      	ldr	r0, [pc, #44]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006ec:	f001 fb4d 	bl	8001d8a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
	 }
	 //contador_adc=0;

 }
}
 80006f0:	e009      	b.n	8000706 <HAL_TIM_PeriodElapsedCallback+0x52>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	4808      	ldr	r0, [pc, #32]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006f8:	f001 fb47 	bl	8001d8a <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2120      	movs	r1, #32
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000702:	f001 fb42 	bl	8001d8a <HAL_GPIO_WritePin>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40011000 	.word	0x40011000
 8000714:	200002a4 	.word	0x200002a4
 8000718:	40010c00 	.word	0x40010c00

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1){
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_MspInit+0x5c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <HAL_MspInit+0x5c>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_MspInit+0x5c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x5c>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_MspInit+0x5c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x5c>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_MspInit+0x60>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_MspInit+0x60>)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000
 8000788:	40010000 	.word	0x40010000

0800078c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a2c      	ldr	r2, [pc, #176]	; (8000858 <HAL_ADC_MspInit+0xcc>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d151      	bne.n	8000850 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <HAL_ADC_MspInit+0xd0>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a2a      	ldr	r2, [pc, #168]	; (800085c <HAL_ADC_MspInit+0xd0>)
 80007b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <HAL_ADC_MspInit+0xd0>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <HAL_ADC_MspInit+0xd0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a24      	ldr	r2, [pc, #144]	; (800085c <HAL_ADC_MspInit+0xd0>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <HAL_ADC_MspInit+0xd0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80007dc:	231e      	movs	r3, #30
 80007de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e0:	2303      	movs	r3, #3
 80007e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4619      	mov	r1, r3
 80007ea:	481d      	ldr	r0, [pc, #116]	; (8000860 <HAL_ADC_MspInit+0xd4>)
 80007ec:	f001 f932 	bl	8001a54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_ADC_MspInit+0xd8>)
 80007f2:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <HAL_ADC_MspInit+0xdc>)
 80007f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_ADC_MspInit+0xd8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_ADC_MspInit+0xd8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_ADC_MspInit+0xd8>)
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <HAL_ADC_MspInit+0xd8>)
 800080a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_ADC_MspInit+0xd8>)
 8000812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000816:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_ADC_MspInit+0xd8>)
 800081a:	2220      	movs	r2, #32
 800081c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_ADC_MspInit+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000824:	480f      	ldr	r0, [pc, #60]	; (8000864 <HAL_ADC_MspInit+0xd8>)
 8000826:	f000 ff27 	bl	8001678 <HAL_DMA_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000830:	f7ff ff74 	bl	800071c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <HAL_ADC_MspInit+0xd8>)
 8000838:	621a      	str	r2, [r3, #32]
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_ADC_MspInit+0xd8>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	2012      	movs	r0, #18
 8000846:	f000 fee0 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800084a:	2012      	movs	r0, #18
 800084c:	f000 fef9 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40012400 	.word	0x40012400
 800085c:	40021000 	.word	0x40021000
 8000860:	40010800 	.word	0x40010800
 8000864:	20000218 	.word	0x20000218
 8000868:	40020008 	.word	0x40020008

0800086c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800087c:	d113      	bne.n	80008a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_TIM_Base_MspInit+0x44>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <HAL_TIM_Base_MspInit+0x44>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_TIM_Base_MspInit+0x44>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	201c      	movs	r0, #28
 800089c:	f000 feb5 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008a0:	201c      	movs	r0, #28
 80008a2:	f000 fece 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <NMI_Handler+0x4>

080008ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <MemManage_Handler+0x4>

080008c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fa:	f000 f8d3 	bl	8000aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <DMA1_Channel1_IRQHandler+0x10>)
 800090a:	f000 ff6f 	bl	80017ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000218 	.word	0x20000218

08000918 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <ADC1_2_IRQHandler+0x10>)
 800091e:	f000 fab7 	bl	8000e90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200001e8 	.word	0x200001e8

0800092c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000932:	f001 fb80 	bl	8002036 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000fc4 	.word	0x20000fc4

08000940 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <TIM2_IRQHandler+0x10>)
 8000946:	f003 fcf5 	bl	8004334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000025c 	.word	0x2000025c

08000954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <_sbrk+0x5c>)
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <_sbrk+0x60>)
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d102      	bne.n	8000976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <_sbrk+0x64>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <_sbrk+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	429a      	cmp	r2, r3
 8000982:	d207      	bcs.n	8000994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000984:	f008 fca4 	bl	80092d0 <__errno>
 8000988:	4603      	mov	r3, r0
 800098a:	220c      	movs	r2, #12
 800098c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	e009      	b.n	80009a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <_sbrk+0x64>)
 80009a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20005000 	.word	0x20005000
 80009b4:	00000400 	.word	0x00000400
 80009b8:	200002f4 	.word	0x200002f4
 80009bc:	20001620 	.word	0x20001620

080009c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009cc:	f7ff fff8 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009d2:	490c      	ldr	r1, [pc, #48]	; (8000a04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009d4:	4a0c      	ldr	r2, [pc, #48]	; (8000a08 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009e8:	4c09      	ldr	r4, [pc, #36]	; (8000a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f6:	f008 fc71 	bl	80092dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fa:	f7ff fbaf 	bl	800015c <main>
  bx lr
 80009fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000a08:	08009dd0 	.word	0x08009dd0
  ldr r2, =_sbss
 8000a0c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000a10:	2000161c 	.word	0x2000161c

08000a14 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <CAN1_RX1_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_Init+0x28>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_Init+0x28>)
 8000a22:	f043 0310 	orr.w	r3, r3, #16
 8000a26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 fde3 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f000 f808 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff fe78 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40022000 	.word	0x40022000

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x54>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_InitTick+0x58>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fdfb 	bl	800165e <HAL_SYSTICK_Config>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00e      	b.n	8000a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d80a      	bhi.n	8000a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f000 fdc3 	bl	800160a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <HAL_InitTick+0x5c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x1c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x20>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a03      	ldr	r2, [pc, #12]	; (8000ac4 <HAL_IncTick+0x20>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	200002f8 	.word	0x200002f8

08000ac8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b02      	ldr	r3, [pc, #8]	; (8000ad8 <HAL_GetTick+0x10>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	200002f8 	.word	0x200002f8

08000adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae4:	f7ff fff0 	bl	8000ac8 <HAL_GetTick>
 8000ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af4:	d005      	beq.n	8000b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_Delay+0x44>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b02:	bf00      	nop
 8000b04:	f7ff ffe0 	bl	8000ac8 <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d8f7      	bhi.n	8000b04 <HAL_Delay+0x28>
  {
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008

08000b24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d101      	bne.n	8000b46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e0be      	b.n	8000cc4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d109      	bne.n	8000b68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff fe12 	bl	800078c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 fbc7 	bl	80012fc <ADC_ConversionStop_Disable>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b76:	f003 0310 	and.w	r3, r3, #16
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8099 	bne.w	8000cb2 <HAL_ADC_Init+0x18e>
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f040 8095 	bne.w	8000cb2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b90:	f023 0302 	bic.w	r3, r3, #2
 8000b94:	f043 0202 	orr.w	r2, r3, #2
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ba4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7b1b      	ldrb	r3, [r3, #12]
 8000baa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bbc:	d003      	beq.n	8000bc6 <HAL_ADC_Init+0xa2>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d102      	bne.n	8000bcc <HAL_ADC_Init+0xa8>
 8000bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bca:	e000      	b.n	8000bce <HAL_ADC_Init+0xaa>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7d1b      	ldrb	r3, [r3, #20]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d119      	bne.n	8000c10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7b1b      	ldrb	r3, [r3, #12]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d109      	bne.n	8000bf8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	035a      	lsls	r2, r3, #13
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	e00b      	b.n	8000c10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfc:	f043 0220 	orr.w	r2, r3, #32
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c08:	f043 0201 	orr.w	r2, r3, #1
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <HAL_ADC_Init+0x1a8>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	68b9      	ldr	r1, [r7, #8]
 8000c34:	430b      	orrs	r3, r1
 8000c36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c40:	d003      	beq.n	8000c4a <HAL_ADC_Init+0x126>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d104      	bne.n	8000c54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	051b      	lsls	r3, r3, #20
 8000c52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_ADC_Init+0x1ac>)
 8000c70:	4013      	ands	r3, r2
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d10b      	bne.n	8000c90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c82:	f023 0303 	bic.w	r3, r3, #3
 8000c86:	f043 0201 	orr.w	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c8e:	e018      	b.n	8000cc2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c94:	f023 0312 	bic.w	r3, r3, #18
 8000c98:	f043 0210 	orr.w	r2, r3, #16
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca4:	f043 0201 	orr.w	r2, r3, #1
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb0:	e007      	b.n	8000cc2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	f043 0210 	orr.w	r2, r3, #16
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	ffe1f7fd 	.word	0xffe1f7fd
 8000cd0:	ff1f0efe 	.word	0xff1f0efe

08000cd4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a64      	ldr	r2, [pc, #400]	; (8000e7c <HAL_ADC_Start_DMA+0x1a8>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d004      	beq.n	8000cf8 <HAL_ADC_Start_DMA+0x24>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a63      	ldr	r2, [pc, #396]	; (8000e80 <HAL_ADC_Start_DMA+0x1ac>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d106      	bne.n	8000d06 <HAL_ADC_Start_DMA+0x32>
 8000cf8:	4b60      	ldr	r3, [pc, #384]	; (8000e7c <HAL_ADC_Start_DMA+0x1a8>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f040 80b3 	bne.w	8000e6c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <HAL_ADC_Start_DMA+0x40>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e0ae      	b.n	8000e72 <HAL_ADC_Start_DMA+0x19e>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f000 fa93 	bl	8001248 <ADC_Enable>
 8000d22:	4603      	mov	r3, r0
 8000d24:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f040 809a 	bne.w	8000e62 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d36:	f023 0301 	bic.w	r3, r3, #1
 8000d3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a4e      	ldr	r2, [pc, #312]	; (8000e80 <HAL_ADC_Start_DMA+0x1ac>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d105      	bne.n	8000d58 <HAL_ADC_Start_DMA+0x84>
 8000d4c:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <HAL_ADC_Start_DMA+0x1a8>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d115      	bne.n	8000d84 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d026      	beq.n	8000dc0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d82:	e01d      	b.n	8000dc0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a39      	ldr	r2, [pc, #228]	; (8000e7c <HAL_ADC_Start_DMA+0x1a8>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d004      	beq.n	8000da4 <HAL_ADC_Start_DMA+0xd0>
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a38      	ldr	r2, [pc, #224]	; (8000e80 <HAL_ADC_Start_DMA+0x1ac>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d10d      	bne.n	8000dc0 <HAL_ADC_Start_DMA+0xec>
 8000da4:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <HAL_ADC_Start_DMA+0x1a8>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d007      	beq.n	8000dc0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d006      	beq.n	8000dda <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd0:	f023 0206 	bic.w	r2, r3, #6
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd8:	e002      	b.n	8000de0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_ADC_Start_DMA+0x1b0>)
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	4a24      	ldr	r2, [pc, #144]	; (8000e88 <HAL_ADC_Start_DMA+0x1b4>)
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <HAL_ADC_Start_DMA+0x1b8>)
 8000dfe:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f06f 0202 	mvn.w	r2, #2
 8000e08:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e18:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6a18      	ldr	r0, [r3, #32]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	334c      	adds	r3, #76	; 0x4c
 8000e24:	4619      	mov	r1, r3
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f000 fc7f 	bl	800172c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e38:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e3c:	d108      	bne.n	8000e50 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e4c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e4e:	e00f      	b.n	8000e70 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e5e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000e60:	e006      	b.n	8000e70 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000e6a:	e001      	b.n	8000e70 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40012400 	.word	0x40012400
 8000e80:	40012800 	.word	0x40012800
 8000e84:	0800137f 	.word	0x0800137f
 8000e88:	080013fb 	.word	0x080013fb
 8000e8c:	08001417 	.word	0x08001417

08000e90 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	f003 0320 	and.w	r3, r3, #32
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d03e      	beq.n	8000f30 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d039      	beq.n	8000f30 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d105      	bne.n	8000ed4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ede:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ee2:	d11d      	bne.n	8000f20 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d119      	bne.n	8000f20 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0220 	bic.w	r2, r2, #32
 8000efa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d105      	bne.n	8000f20 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f18:	f043 0201 	orr.w	r2, r3, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f874 	bl	800100e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f06f 0212 	mvn.w	r2, #18
 8000f2e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d04d      	beq.n	8000fd6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d048      	beq.n	8000fd6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d105      	bne.n	8000f5c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000f66:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000f6a:	d012      	beq.n	8000f92 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d125      	bne.n	8000fc6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f84:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f88:	d11d      	bne.n	8000fc6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d119      	bne.n	8000fc6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fa0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d105      	bne.n	8000fc6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 fa3f 	bl	800144a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f06f 020c 	mvn.w	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d012      	beq.n	8001006 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00d      	beq.n	8001006 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f81b 	bl	8001032 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f06f 0201 	mvn.w	r2, #1
 8001004:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr

08001032 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
	...

08001058 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x20>
 8001074:	2302      	movs	r3, #2
 8001076:	e0dc      	b.n	8001232 <HAL_ADC_ConfigChannel+0x1da>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b06      	cmp	r3, #6
 8001086:	d81c      	bhi.n	80010c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b05      	subs	r3, #5
 800109a:	221f      	movs	r2, #31
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4019      	ands	r1, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	3b05      	subs	r3, #5
 80010b4:	fa00 f203 	lsl.w	r2, r0, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	635a      	str	r2, [r3, #52]	; 0x34
 80010c0:	e03c      	b.n	800113c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b0c      	cmp	r3, #12
 80010c8:	d81c      	bhi.n	8001104 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	3b23      	subs	r3, #35	; 0x23
 80010dc:	221f      	movs	r2, #31
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	4019      	ands	r1, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	3b23      	subs	r3, #35	; 0x23
 80010f6:	fa00 f203 	lsl.w	r2, r0, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	631a      	str	r2, [r3, #48]	; 0x30
 8001102:	e01b      	b.n	800113c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	3b41      	subs	r3, #65	; 0x41
 8001116:	221f      	movs	r2, #31
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	4019      	ands	r1, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	3b41      	subs	r3, #65	; 0x41
 8001130:	fa00 f203 	lsl.w	r2, r0, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	430a      	orrs	r2, r1
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b09      	cmp	r3, #9
 8001142:	d91c      	bls.n	800117e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68d9      	ldr	r1, [r3, #12]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4613      	mov	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	3b1e      	subs	r3, #30
 8001156:	2207      	movs	r2, #7
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	4019      	ands	r1, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6898      	ldr	r0, [r3, #8]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	3b1e      	subs	r3, #30
 8001170:	fa00 f203 	lsl.w	r2, r0, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	e019      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6919      	ldr	r1, [r3, #16]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	2207      	movs	r2, #7
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	4019      	ands	r1, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6898      	ldr	r0, [r3, #8]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	fa00 f203 	lsl.w	r2, r0, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b10      	cmp	r3, #16
 80011b8:	d003      	beq.n	80011c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011be:	2b11      	cmp	r3, #17
 80011c0:	d132      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_ADC_ConfigChannel+0x1e4>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d125      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d126      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d11a      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_ADC_ConfigChannel+0x1e8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a13      	ldr	r2, [pc, #76]	; (8001244 <HAL_ADC_ConfigChannel+0x1ec>)
 80011f8:	fba2 2303 	umull	r2, r3, r2, r3
 80011fc:	0c9a      	lsrs	r2, r3, #18
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001208:	e002      	b.n	8001210 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	3b01      	subs	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f9      	bne.n	800120a <HAL_ADC_ConfigChannel+0x1b2>
 8001216:	e007      	b.n	8001228 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	f043 0220 	orr.w	r2, r3, #32
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40012400 	.word	0x40012400
 8001240:	20000000 	.word	0x20000000
 8001244:	431bde83 	.word	0x431bde83

08001248 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b01      	cmp	r3, #1
 8001264:	d040      	beq.n	80012e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 0201 	orr.w	r2, r2, #1
 8001274:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <ADC_Enable+0xac>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <ADC_Enable+0xb0>)
 800127c:	fba2 2303 	umull	r2, r3, r2, r3
 8001280:	0c9b      	lsrs	r3, r3, #18
 8001282:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001284:	e002      	b.n	800128c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3b01      	subs	r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f9      	bne.n	8001286 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001292:	f7ff fc19 	bl	8000ac8 <HAL_GetTick>
 8001296:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001298:	e01f      	b.n	80012da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800129a:	f7ff fc15 	bl	8000ac8 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d918      	bls.n	80012da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d011      	beq.n	80012da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	f043 0210 	orr.w	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e007      	b.n	80012ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d1d8      	bne.n	800129a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000000 	.word	0x20000000
 80012f8:	431bde83 	.word	0x431bde83

080012fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b01      	cmp	r3, #1
 8001314:	d12e      	bne.n	8001374 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0201 	bic.w	r2, r2, #1
 8001324:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001326:	f7ff fbcf 	bl	8000ac8 <HAL_GetTick>
 800132a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800132c:	e01b      	b.n	8001366 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800132e:	f7ff fbcb 	bl	8000ac8 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d914      	bls.n	8001366 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b01      	cmp	r3, #1
 8001348:	d10d      	bne.n	8001366 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	f043 0210 	orr.w	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135a:	f043 0201 	orr.w	r2, r3, #1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e007      	b.n	8001376 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b01      	cmp	r3, #1
 8001372:	d0dc      	beq.n	800132e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001394:	2b00      	cmp	r3, #0
 8001396:	d127      	bne.n	80013e8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013b2:	d115      	bne.n	80013e0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d111      	bne.n	80013e0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d105      	bne.n	80013e0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	f043 0201 	orr.w	r2, r3, #1
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7ff fe14 	bl	800100e <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80013e6:	e004      	b.n	80013f2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	4798      	blx	r3
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f7ff fe09 	bl	8001020 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001428:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	f043 0204 	orr.w	r2, r3, #4
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff fe01 	bl	8001044 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db0b      	blt.n	80014ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	4906      	ldr	r1, [pc, #24]	; (80014f4 <__NVIC_EnableIRQ+0x34>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	; (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	; (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
         );
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015c0:	d301      	bcc.n	80015c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00f      	b.n	80015e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <SysTick_Config+0x40>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ce:	210f      	movs	r1, #15
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f7ff ff90 	bl	80014f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <SysTick_Config+0x40>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <SysTick_Config+0x40>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff2d 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800161c:	f7ff ff42 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 8001620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ff90 	bl	800154c <NVIC_EncodePriority>
 800162c:	4602      	mov	r2, r0
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff5f 	bl	80014f8 <__NVIC_SetPriority>
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff35 	bl	80014c0 <__NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ffa2 	bl	80015b0 <SysTick_Config>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e043      	b.n	8001716 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_DMA_Init+0xa8>)
 8001696:	4413      	add	r3, r2
 8001698:	4a22      	ldr	r2, [pc, #136]	; (8001724 <HAL_DMA_Init+0xac>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	009a      	lsls	r2, r3, #2
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <HAL_DMA_Init+0xb0>)
 80016aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	bffdfff8 	.word	0xbffdfff8
 8001724:	cccccccd 	.word	0xcccccccd
 8001728:	40020000 	.word	0x40020000

0800172c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_DMA_Start_IT+0x20>
 8001748:	2302      	movs	r3, #2
 800174a:	e04b      	b.n	80017e4 <HAL_DMA_Start_IT+0xb8>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b01      	cmp	r3, #1
 800175e:	d13a      	bne.n	80017d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 f937 	bl	80019f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 020e 	orr.w	r2, r2, #14
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e00f      	b.n	80017c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0204 	bic.w	r2, r2, #4
 80017b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 020a 	orr.w	r2, r2, #10
 80017c2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e005      	b.n	80017e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017de:	2302      	movs	r3, #2
 80017e0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	2204      	movs	r2, #4
 800180a:	409a      	lsls	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d04f      	beq.n	80018b4 <HAL_DMA_IRQHandler+0xc8>
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b00      	cmp	r3, #0
 800181c:	d04a      	beq.n	80018b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	2b00      	cmp	r3, #0
 800182a:	d107      	bne.n	800183c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0204 	bic.w	r2, r2, #4
 800183a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a66      	ldr	r2, [pc, #408]	; (80019dc <HAL_DMA_IRQHandler+0x1f0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d029      	beq.n	800189a <HAL_DMA_IRQHandler+0xae>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a65      	ldr	r2, [pc, #404]	; (80019e0 <HAL_DMA_IRQHandler+0x1f4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d022      	beq.n	8001896 <HAL_DMA_IRQHandler+0xaa>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a63      	ldr	r2, [pc, #396]	; (80019e4 <HAL_DMA_IRQHandler+0x1f8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01a      	beq.n	8001890 <HAL_DMA_IRQHandler+0xa4>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a62      	ldr	r2, [pc, #392]	; (80019e8 <HAL_DMA_IRQHandler+0x1fc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d012      	beq.n	800188a <HAL_DMA_IRQHandler+0x9e>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a60      	ldr	r2, [pc, #384]	; (80019ec <HAL_DMA_IRQHandler+0x200>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00a      	beq.n	8001884 <HAL_DMA_IRQHandler+0x98>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a5f      	ldr	r2, [pc, #380]	; (80019f0 <HAL_DMA_IRQHandler+0x204>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d102      	bne.n	800187e <HAL_DMA_IRQHandler+0x92>
 8001878:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800187c:	e00e      	b.n	800189c <HAL_DMA_IRQHandler+0xb0>
 800187e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001882:	e00b      	b.n	800189c <HAL_DMA_IRQHandler+0xb0>
 8001884:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001888:	e008      	b.n	800189c <HAL_DMA_IRQHandler+0xb0>
 800188a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800188e:	e005      	b.n	800189c <HAL_DMA_IRQHandler+0xb0>
 8001890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001894:	e002      	b.n	800189c <HAL_DMA_IRQHandler+0xb0>
 8001896:	2340      	movs	r3, #64	; 0x40
 8001898:	e000      	b.n	800189c <HAL_DMA_IRQHandler+0xb0>
 800189a:	2304      	movs	r3, #4
 800189c:	4a55      	ldr	r2, [pc, #340]	; (80019f4 <HAL_DMA_IRQHandler+0x208>)
 800189e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 8094 	beq.w	80019d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018b2:	e08e      	b.n	80019d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	2202      	movs	r2, #2
 80018ba:	409a      	lsls	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d056      	beq.n	8001972 <HAL_DMA_IRQHandler+0x186>
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d051      	beq.n	8001972 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10b      	bne.n	80018f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 020a 	bic.w	r2, r2, #10
 80018ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a38      	ldr	r2, [pc, #224]	; (80019dc <HAL_DMA_IRQHandler+0x1f0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d029      	beq.n	8001952 <HAL_DMA_IRQHandler+0x166>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a37      	ldr	r2, [pc, #220]	; (80019e0 <HAL_DMA_IRQHandler+0x1f4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d022      	beq.n	800194e <HAL_DMA_IRQHandler+0x162>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a35      	ldr	r2, [pc, #212]	; (80019e4 <HAL_DMA_IRQHandler+0x1f8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01a      	beq.n	8001948 <HAL_DMA_IRQHandler+0x15c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a34      	ldr	r2, [pc, #208]	; (80019e8 <HAL_DMA_IRQHandler+0x1fc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d012      	beq.n	8001942 <HAL_DMA_IRQHandler+0x156>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a32      	ldr	r2, [pc, #200]	; (80019ec <HAL_DMA_IRQHandler+0x200>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d00a      	beq.n	800193c <HAL_DMA_IRQHandler+0x150>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <HAL_DMA_IRQHandler+0x204>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d102      	bne.n	8001936 <HAL_DMA_IRQHandler+0x14a>
 8001930:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001934:	e00e      	b.n	8001954 <HAL_DMA_IRQHandler+0x168>
 8001936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800193a:	e00b      	b.n	8001954 <HAL_DMA_IRQHandler+0x168>
 800193c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001940:	e008      	b.n	8001954 <HAL_DMA_IRQHandler+0x168>
 8001942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001946:	e005      	b.n	8001954 <HAL_DMA_IRQHandler+0x168>
 8001948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800194c:	e002      	b.n	8001954 <HAL_DMA_IRQHandler+0x168>
 800194e:	2320      	movs	r3, #32
 8001950:	e000      	b.n	8001954 <HAL_DMA_IRQHandler+0x168>
 8001952:	2302      	movs	r3, #2
 8001954:	4a27      	ldr	r2, [pc, #156]	; (80019f4 <HAL_DMA_IRQHandler+0x208>)
 8001956:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	2b00      	cmp	r3, #0
 8001966:	d034      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001970:	e02f      	b.n	80019d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	2208      	movs	r2, #8
 8001978:	409a      	lsls	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d028      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x1e8>
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d023      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 020e 	bic.w	r2, r2, #14
 800199a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a4:	2101      	movs	r1, #1
 80019a6:	fa01 f202 	lsl.w	r2, r1, r2
 80019aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4798      	blx	r3
    }
  }
  return;
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
}
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40020008 	.word	0x40020008
 80019e0:	4002001c 	.word	0x4002001c
 80019e4:	40020030 	.word	0x40020030
 80019e8:	40020044 	.word	0x40020044
 80019ec:	40020058 	.word	0x40020058
 80019f0:	4002006c 	.word	0x4002006c
 80019f4:	40020000 	.word	0x40020000

080019f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0e:	2101      	movs	r1, #1
 8001a10:	fa01 f202 	lsl.w	r2, r1, r2
 8001a14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b10      	cmp	r3, #16
 8001a24:	d108      	bne.n	8001a38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a36:	e007      	b.n	8001a48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68ba      	ldr	r2, [r7, #8]
 8001a3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	60da      	str	r2, [r3, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b08b      	sub	sp, #44	; 0x2c
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	e169      	b.n	8001d3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	f040 8158 	bne.w	8001d36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a9a      	ldr	r2, [pc, #616]	; (8001cf4 <HAL_GPIO_Init+0x2a0>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d05e      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001a90:	4a98      	ldr	r2, [pc, #608]	; (8001cf4 <HAL_GPIO_Init+0x2a0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d875      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001a96:	4a98      	ldr	r2, [pc, #608]	; (8001cf8 <HAL_GPIO_Init+0x2a4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d058      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001a9c:	4a96      	ldr	r2, [pc, #600]	; (8001cf8 <HAL_GPIO_Init+0x2a4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d86f      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001aa2:	4a96      	ldr	r2, [pc, #600]	; (8001cfc <HAL_GPIO_Init+0x2a8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d052      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001aa8:	4a94      	ldr	r2, [pc, #592]	; (8001cfc <HAL_GPIO_Init+0x2a8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d869      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001aae:	4a94      	ldr	r2, [pc, #592]	; (8001d00 <HAL_GPIO_Init+0x2ac>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d04c      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001ab4:	4a92      	ldr	r2, [pc, #584]	; (8001d00 <HAL_GPIO_Init+0x2ac>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d863      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001aba:	4a92      	ldr	r2, [pc, #584]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d046      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
 8001ac0:	4a90      	ldr	r2, [pc, #576]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d85d      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001ac6:	2b12      	cmp	r3, #18
 8001ac8:	d82a      	bhi.n	8001b20 <HAL_GPIO_Init+0xcc>
 8001aca:	2b12      	cmp	r3, #18
 8001acc:	d859      	bhi.n	8001b82 <HAL_GPIO_Init+0x12e>
 8001ace:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <HAL_GPIO_Init+0x80>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001b4f 	.word	0x08001b4f
 8001ad8:	08001b29 	.word	0x08001b29
 8001adc:	08001b3b 	.word	0x08001b3b
 8001ae0:	08001b7d 	.word	0x08001b7d
 8001ae4:	08001b83 	.word	0x08001b83
 8001ae8:	08001b83 	.word	0x08001b83
 8001aec:	08001b83 	.word	0x08001b83
 8001af0:	08001b83 	.word	0x08001b83
 8001af4:	08001b83 	.word	0x08001b83
 8001af8:	08001b83 	.word	0x08001b83
 8001afc:	08001b83 	.word	0x08001b83
 8001b00:	08001b83 	.word	0x08001b83
 8001b04:	08001b83 	.word	0x08001b83
 8001b08:	08001b83 	.word	0x08001b83
 8001b0c:	08001b83 	.word	0x08001b83
 8001b10:	08001b83 	.word	0x08001b83
 8001b14:	08001b83 	.word	0x08001b83
 8001b18:	08001b31 	.word	0x08001b31
 8001b1c:	08001b45 	.word	0x08001b45
 8001b20:	4a79      	ldr	r2, [pc, #484]	; (8001d08 <HAL_GPIO_Init+0x2b4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b26:	e02c      	b.n	8001b82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	623b      	str	r3, [r7, #32]
          break;
 8001b2e:	e029      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	3304      	adds	r3, #4
 8001b36:	623b      	str	r3, [r7, #32]
          break;
 8001b38:	e024      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	3308      	adds	r3, #8
 8001b40:	623b      	str	r3, [r7, #32]
          break;
 8001b42:	e01f      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	330c      	adds	r3, #12
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	e01a      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b56:	2304      	movs	r3, #4
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e013      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b64:	2308      	movs	r3, #8
 8001b66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	611a      	str	r2, [r3, #16]
          break;
 8001b6e:	e009      	b.n	8001b84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b70:	2308      	movs	r3, #8
 8001b72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	615a      	str	r2, [r3, #20]
          break;
 8001b7a:	e003      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
          break;
 8001b80:	e000      	b.n	8001b84 <HAL_GPIO_Init+0x130>
          break;
 8001b82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2bff      	cmp	r3, #255	; 0xff
 8001b88:	d801      	bhi.n	8001b8e <HAL_GPIO_Init+0x13a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	e001      	b.n	8001b92 <HAL_GPIO_Init+0x13e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3304      	adds	r3, #4
 8001b92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	d802      	bhi.n	8001ba0 <HAL_GPIO_Init+0x14c>
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	e002      	b.n	8001ba6 <HAL_GPIO_Init+0x152>
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	3b08      	subs	r3, #8
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	210f      	movs	r1, #15
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	6a39      	ldr	r1, [r7, #32]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80b1 	beq.w	8001d36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd4:	4b4d      	ldr	r3, [pc, #308]	; (8001d0c <HAL_GPIO_Init+0x2b8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a4c      	ldr	r2, [pc, #304]	; (8001d0c <HAL_GPIO_Init+0x2b8>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <HAL_GPIO_Init+0x2b8>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bec:	4a48      	ldr	r2, [pc, #288]	; (8001d10 <HAL_GPIO_Init+0x2bc>)
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	220f      	movs	r2, #15
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a40      	ldr	r2, [pc, #256]	; (8001d14 <HAL_GPIO_Init+0x2c0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d013      	beq.n	8001c40 <HAL_GPIO_Init+0x1ec>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a3f      	ldr	r2, [pc, #252]	; (8001d18 <HAL_GPIO_Init+0x2c4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d00d      	beq.n	8001c3c <HAL_GPIO_Init+0x1e8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a3e      	ldr	r2, [pc, #248]	; (8001d1c <HAL_GPIO_Init+0x2c8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d007      	beq.n	8001c38 <HAL_GPIO_Init+0x1e4>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a3d      	ldr	r2, [pc, #244]	; (8001d20 <HAL_GPIO_Init+0x2cc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d101      	bne.n	8001c34 <HAL_GPIO_Init+0x1e0>
 8001c30:	2303      	movs	r3, #3
 8001c32:	e006      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c34:	2304      	movs	r3, #4
 8001c36:	e004      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e002      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_GPIO_Init+0x1ee>
 8001c40:	2300      	movs	r3, #0
 8001c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c44:	f002 0203 	and.w	r2, r2, #3
 8001c48:	0092      	lsls	r2, r2, #2
 8001c4a:	4093      	lsls	r3, r2
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c52:	492f      	ldr	r1, [pc, #188]	; (8001d10 <HAL_GPIO_Init+0x2bc>)
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d006      	beq.n	8001c7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	492c      	ldr	r1, [pc, #176]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	4928      	ldr	r1, [pc, #160]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c94:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	4922      	ldr	r1, [pc, #136]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60cb      	str	r3, [r1, #12]
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	491e      	ldr	r1, [pc, #120]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4918      	ldr	r1, [pc, #96]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	4914      	ldr	r1, [pc, #80]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d021      	beq.n	8001d28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	490e      	ldr	r1, [pc, #56]	; (8001d24 <HAL_GPIO_Init+0x2d0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
 8001cf0:	e021      	b.n	8001d36 <HAL_GPIO_Init+0x2e2>
 8001cf2:	bf00      	nop
 8001cf4:	10320000 	.word	0x10320000
 8001cf8:	10310000 	.word	0x10310000
 8001cfc:	10220000 	.word	0x10220000
 8001d00:	10210000 	.word	0x10210000
 8001d04:	10120000 	.word	0x10120000
 8001d08:	10110000 	.word	0x10110000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40010800 	.word	0x40010800
 8001d18:	40010c00 	.word	0x40010c00
 8001d1c:	40011000 	.word	0x40011000
 8001d20:	40011400 	.word	0x40011400
 8001d24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_GPIO_Init+0x304>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	4909      	ldr	r1, [pc, #36]	; (8001d58 <HAL_GPIO_Init+0x304>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	3301      	adds	r3, #1
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	fa22 f303 	lsr.w	r3, r2, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f47f ae8e 	bne.w	8001a68 <HAL_GPIO_Init+0x14>
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	372c      	adds	r7, #44	; 0x2c
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	40010400 	.word	0x40010400

08001d5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	e001      	b.n	8001d7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	807b      	strh	r3, [r7, #2]
 8001d96:	4613      	mov	r3, r2
 8001d98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d9a:	787b      	ldrb	r3, [r7, #1]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da0:	887a      	ldrh	r2, [r7, #2]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001da6:	e003      	b.n	8001db0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	041a      	lsls	r2, r3, #16
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	611a      	str	r2, [r3, #16]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b085      	sub	sp, #20
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dcc:	887a      	ldrh	r2, [r7, #2]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	041a      	lsls	r2, r3, #16
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	887b      	ldrh	r3, [r7, #2]
 8001dda:	400b      	ands	r3, r1
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dee:	b08b      	sub	sp, #44	; 0x2c
 8001df0:	af06      	add	r7, sp, #24
 8001df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0f1      	b.n	8001fe2 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f006 fefe 	bl	8008c14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 fe07 	bl	8004a38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	687e      	ldr	r6, [r7, #4]
 8001e32:	466d      	mov	r5, sp
 8001e34:	f106 0410 	add.w	r4, r6, #16
 8001e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	602b      	str	r3, [r5, #0]
 8001e40:	1d33      	adds	r3, r6, #4
 8001e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e44:	6838      	ldr	r0, [r7, #0]
 8001e46:	f002 fdd1 	bl	80049ec <USB_CoreInit>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0c2      	b.n	8001fe2 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 fe02 	bl	8004a6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	e040      	b.n	8001ef0 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3301      	adds	r3, #1
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3303      	adds	r3, #3
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	3338      	adds	r3, #56	; 0x38
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	333c      	adds	r3, #60	; 0x3c
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3340      	adds	r3, #64	; 0x40
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	3301      	adds	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3b9      	bcc.n	8001e6e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	e044      	b.n	8001f8a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	3301      	adds	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3b5      	bcc.n	8001f00 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	687e      	ldr	r6, [r7, #4]
 8001f9c:	466d      	mov	r5, sp
 8001f9e:	f106 0410 	add.w	r4, r6, #16
 8001fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	602b      	str	r3, [r5, #0]
 8001faa:	1d33      	adds	r3, r6, #4
 8001fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fae:	6838      	ldr	r0, [r7, #0]
 8001fb0:	f002 fd68 	bl	8004a84 <USB_DevInit>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00d      	b.n	8001fe2 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f004 ffe9 	bl	8006fb2 <USB_DevDisconnect>

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_PCD_Start+0x16>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e016      	b.n	800202e <HAL_PCD_Start+0x44>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f002 fcfd 	bl	8004a0c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002012:	2101      	movs	r1, #1
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f007 f870 	bl	80090fa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f004 ffbd 	bl	8006f9e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b088      	sub	sp, #32
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f004 ffbf 	bl	8006fc6 <USB_ReadInterrupts>
 8002048:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fb1b 	bl	8002690 <PCD_EP_ISR_Handler>

    return;
 800205a:	e119      	b.n	8002290 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002062:	2b00      	cmp	r3, #0
 8002064:	d013      	beq.n	800208e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800206e:	b29a      	uxth	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002078:	b292      	uxth	r2, r2
 800207a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f006 fe43 	bl	8008d0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002084:	2100      	movs	r1, #0
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f905 	bl	8002296 <HAL_PCD_SetAddress>

    return;
 800208c:	e100      	b.n	8002290 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00c      	beq.n	80020b2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020aa:	b292      	uxth	r2, r2
 80020ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020b0:	e0ee      	b.n	8002290 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00c      	beq.n	80020d6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ce:	b292      	uxth	r2, r2
 80020d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020d4:	e0dc      	b.n	8002290 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d027      	beq.n	8002130 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0204 	bic.w	r2, r2, #4
 80020f2:	b292      	uxth	r2, r2
 80020f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002100:	b29a      	uxth	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0208 	bic.w	r2, r2, #8
 800210a:	b292      	uxth	r2, r2
 800210c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f006 fe33 	bl	8008d7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800211e:	b29a      	uxth	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002128:	b292      	uxth	r2, r2
 800212a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800212e:	e0af      	b.n	8002290 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8083 	beq.w	8002242 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800213c:	2300      	movs	r3, #0
 800213e:	77fb      	strb	r3, [r7, #31]
 8002140:	e010      	b.n	8002164 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	7ffb      	ldrb	r3, [r7, #31]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	441a      	add	r2, r3
 800214e:	7ffb      	ldrb	r3, [r7, #31]
 8002150:	8812      	ldrh	r2, [r2, #0]
 8002152:	b292      	uxth	r2, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	3320      	adds	r3, #32
 8002158:	443b      	add	r3, r7
 800215a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800215e:	7ffb      	ldrb	r3, [r7, #31]
 8002160:	3301      	adds	r3, #1
 8002162:	77fb      	strb	r3, [r7, #31]
 8002164:	7ffb      	ldrb	r3, [r7, #31]
 8002166:	2b07      	cmp	r3, #7
 8002168:	d9eb      	bls.n	8002142 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	b292      	uxth	r2, r2
 800217e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800218a:	b29a      	uxth	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	b292      	uxth	r2, r2
 8002196:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800219a:	bf00      	nop
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f6      	beq.n	800219c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c0:	b292      	uxth	r2, r2
 80021c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	77fb      	strb	r3, [r7, #31]
 80021ca:	e00f      	b.n	80021ec <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80021cc:	7ffb      	ldrb	r3, [r7, #31]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	4611      	mov	r1, r2
 80021d4:	7ffa      	ldrb	r2, [r7, #31]
 80021d6:	0092      	lsls	r2, r2, #2
 80021d8:	440a      	add	r2, r1
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	3320      	adds	r3, #32
 80021de:	443b      	add	r3, r7
 80021e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80021e4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80021e6:	7ffb      	ldrb	r3, [r7, #31]
 80021e8:	3301      	adds	r3, #1
 80021ea:	77fb      	strb	r3, [r7, #31]
 80021ec:	7ffb      	ldrb	r3, [r7, #31]
 80021ee:	2b07      	cmp	r3, #7
 80021f0:	d9ec      	bls.n	80021cc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0208 	orr.w	r2, r2, #8
 8002204:	b292      	uxth	r2, r2
 8002206:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002212:	b29a      	uxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800221c:	b292      	uxth	r2, r2
 800221e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800222a:	b29a      	uxth	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0204 	orr.w	r2, r2, #4
 8002234:	b292      	uxth	r2, r2
 8002236:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f006 fd84 	bl	8008d48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002240:	e026      	b.n	8002290 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00f      	beq.n	800226c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800225e:	b292      	uxth	r2, r2
 8002260:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f006 fd42 	bl	8008cee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800226a:	e011      	b.n	8002290 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00c      	beq.n	8002290 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800227e:	b29a      	uxth	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002288:	b292      	uxth	r2, r2
 800228a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800228e:	bf00      	nop
  }
}
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	460b      	mov	r3, r1
 80022a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_PCD_SetAddress+0x1a>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e013      	b.n	80022d8 <HAL_PCD_SetAddress+0x42>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f004 fe55 	bl	8006f78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	70fb      	strb	r3, [r7, #3]
 80022f2:	460b      	mov	r3, r1
 80022f4:	803b      	strh	r3, [r7, #0]
 80022f6:	4613      	mov	r3, r2
 80022f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002302:	2b00      	cmp	r3, #0
 8002304:	da0e      	bge.n	8002324 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	705a      	strb	r2, [r3, #1]
 8002322:	e00e      	b.n	8002342 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f003 0207 	and.w	r2, r3, #7
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	b2da      	uxtb	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800234e:	883a      	ldrh	r2, [r7, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	78ba      	ldrb	r2, [r7, #2]
 8002358:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800235a:	78bb      	ldrb	r3, [r7, #2]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d102      	bne.n	8002366 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_PCD_EP_Open+0x94>
 8002370:	2302      	movs	r3, #2
 8002372:	e00e      	b.n	8002392 <HAL_PCD_EP_Open+0xb2>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68f9      	ldr	r1, [r7, #12]
 8002382:	4618      	mov	r0, r3
 8002384:	f002 fb9e 	bl	8004ac4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002390:	7afb      	ldrb	r3, [r7, #11]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	da0e      	bge.n	80023cc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	705a      	strb	r2, [r3, #1]
 80023ca:	e00e      	b.n	80023ea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 0207 	and.w	r2, r3, #7
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_PCD_EP_Close+0x6a>
 8002400:	2302      	movs	r3, #2
 8002402:	e00e      	b.n	8002422 <HAL_PCD_EP_Close+0x88>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	4618      	mov	r0, r3
 8002414:	f002 ff16 	bl	8005244 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	460b      	mov	r3, r1
 8002438:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800243a:	7afb      	ldrb	r3, [r7, #11]
 800243c:	f003 0207 	and.w	r2, r3, #7
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2200      	movs	r2, #0
 8002462:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2200      	movs	r2, #0
 8002468:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800246a:	7afb      	ldrb	r3, [r7, #11]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	b2da      	uxtb	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6979      	ldr	r1, [r7, #20]
 800247c:	4618      	mov	r0, r3
 800247e:	f003 f8cd 	bl	800561c <USB_EPStartXfer>

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	f003 0207 	and.w	r2, r3, #7
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	440b      	add	r3, r1
 80024aa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	460b      	mov	r3, r1
 80024c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ca:	7afb      	ldrb	r3, [r7, #11]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4413      	add	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2201      	movs	r2, #1
 8002504:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002506:	7afb      	ldrb	r3, [r7, #11]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	b2da      	uxtb	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6979      	ldr	r1, [r7, #20]
 8002518:	4618      	mov	r0, r3
 800251a:	f003 f87f 	bl	800561c <USB_EPStartXfer>

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	f003 0207 	and.w	r2, r3, #7
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	d901      	bls.n	8002546 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e04c      	b.n	80025e0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002546:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800254a:	2b00      	cmp	r3, #0
 800254c:	da0e      	bge.n	800256c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	705a      	strb	r2, [r3, #1]
 800256a:	e00c      	b.n	8002586 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	b2da      	uxtb	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_PCD_EP_SetStall+0x7e>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e01c      	b.n	80025e0 <HAL_PCD_EP_SetStall+0xb8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68f9      	ldr	r1, [r7, #12]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f004 fbe2 	bl	8006d7e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d108      	bne.n	80025d6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f004 fd07 	bl	8006fe4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	f003 020f 	and.w	r2, r3, #15
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d901      	bls.n	8002606 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e040      	b.n	8002688 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800260a:	2b00      	cmp	r3, #0
 800260c:	da0e      	bge.n	800262c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	705a      	strb	r2, [r3, #1]
 800262a:	e00e      	b.n	800264a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	f003 0207 	and.w	r2, r3, #7
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	b2da      	uxtb	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_PCD_EP_ClrStall+0x82>
 8002666:	2302      	movs	r3, #2
 8002668:	e00e      	b.n	8002688 <HAL_PCD_EP_ClrStall+0xa0>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68f9      	ldr	r1, [r7, #12]
 8002678:	4618      	mov	r0, r3
 800267a:	f004 fbd0 	bl	8006e1e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b096      	sub	sp, #88	; 0x58
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002698:	e3bf      	b.n	8002e1a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80026a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80026b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f040 8179 	bne.w	80029b0 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80026be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d152      	bne.n	8002770 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	81fb      	strh	r3, [r7, #14]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	89fb      	ldrh	r3, [r7, #14]
 80026e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3328      	adds	r3, #40	; 0x28
 80026f2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	3302      	adds	r3, #2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800271c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	441a      	add	r2, r3
 800272a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800272e:	2100      	movs	r1, #0
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f006 fac2 	bl	8008cba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 836b 	beq.w	8002e1a <PCD_EP_ISR_Handler+0x78a>
 8002744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f040 8366 	bne.w	8002e1a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800275a:	b2da      	uxtb	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	b292      	uxth	r2, r2
 8002762:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800276e:	e354      	b.n	8002e1a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002776:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002782:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278a:	2b00      	cmp	r3, #0
 800278c:	d034      	beq.n	80027f8 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002796:	b29b      	uxth	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	3306      	adds	r3, #6
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80027c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80027c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f004 fc59 	bl	8007084 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027de:	4013      	ands	r3, r2
 80027e0:	823b      	strh	r3, [r7, #16]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	8a3a      	ldrh	r2, [r7, #16]
 80027e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027ec:	b292      	uxth	r2, r2
 80027ee:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f006 fa35 	bl	8008c60 <HAL_PCD_SetupStageCallback>
 80027f6:	e310      	b.n	8002e1a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027f8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f280 830c 	bge.w	8002e1a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29a      	uxth	r2, r3
 800280a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800280e:	4013      	ands	r3, r2
 8002810:	83fb      	strh	r3, [r7, #30]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	8bfa      	ldrh	r2, [r7, #30]
 8002818:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800281c:	b292      	uxth	r2, r2
 800281e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	3306      	adds	r3, #6
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800284c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d019      	beq.n	8002888 <PCD_EP_ISR_Handler+0x1f8>
 8002854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d015      	beq.n	8002888 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002862:	6959      	ldr	r1, [r3, #20]
 8002864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002866:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800286c:	b29b      	uxth	r3, r3
 800286e:	f004 fc09 	bl	8007084 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	441a      	add	r2, r3
 800287c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002880:	2100      	movs	r1, #0
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f006 f9fe 	bl	8008c84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002892:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289a:	2b00      	cmp	r3, #0
 800289c:	f040 82bd 	bne.w	8002e1a <PCD_EP_ISR_Handler+0x78a>
 80028a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80028a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028ac:	f000 82b5 	beq.w	8002e1a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	4413      	add	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028da:	b29a      	uxth	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	801a      	strh	r2, [r3, #0]
 80028e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b3e      	cmp	r3, #62	; 0x3e
 80028e6:	d91d      	bls.n	8002924 <PCD_EP_ISR_Handler+0x294>
 80028e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	647b      	str	r3, [r7, #68]	; 0x44
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <PCD_EP_ISR_Handler+0x272>
 80028fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fe:	3b01      	subs	r3, #1
 8002900:	647b      	str	r3, [r7, #68]	; 0x44
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29a      	uxth	r2, r3
 8002908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800290a:	b29b      	uxth	r3, r3
 800290c:	029b      	lsls	r3, r3, #10
 800290e:	b29b      	uxth	r3, r3
 8002910:	4313      	orrs	r3, r2
 8002912:	b29b      	uxth	r3, r3
 8002914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800291c:	b29a      	uxth	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	801a      	strh	r2, [r3, #0]
 8002922:	e026      	b.n	8002972 <PCD_EP_ISR_Handler+0x2e2>
 8002924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <PCD_EP_ISR_Handler+0x2b2>
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800293a:	b29a      	uxth	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	801a      	strh	r2, [r3, #0]
 8002940:	e017      	b.n	8002972 <PCD_EP_ISR_Handler+0x2e2>
 8002942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	647b      	str	r3, [r7, #68]	; 0x44
 800294a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <PCD_EP_ISR_Handler+0x2cc>
 8002956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002958:	3301      	adds	r3, #1
 800295a:	647b      	str	r3, [r7, #68]	; 0x44
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b29a      	uxth	r2, r3
 8002962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002964:	b29b      	uxth	r3, r3
 8002966:	029b      	lsls	r3, r3, #10
 8002968:	b29b      	uxth	r3, r3
 800296a:	4313      	orrs	r3, r2
 800296c:	b29a      	uxth	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	b29b      	uxth	r3, r3
 800297a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	827b      	strh	r3, [r7, #18]
 8002984:	8a7b      	ldrh	r3, [r7, #18]
 8002986:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800298a:	827b      	strh	r3, [r7, #18]
 800298c:	8a7b      	ldrh	r3, [r7, #18]
 800298e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002992:	827b      	strh	r3, [r7, #18]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	8a7b      	ldrh	r3, [r7, #18]
 800299a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800299e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	8013      	strh	r3, [r2, #0]
 80029ae:	e234      	b.n	8002e1a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029c4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f280 80fc 	bge.w	8002bc6 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029e4:	4013      	ands	r3, r2
 80029e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80029fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a00:	b292      	uxth	r2, r2
 8002a02:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a04:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	4413      	add	r3, r2
 8002a18:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1c:	7b1b      	ldrb	r3, [r3, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d125      	bne.n	8002a6e <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	3306      	adds	r3, #6
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a4a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002a4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8092 	beq.w	8002b7c <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5e:	6959      	ldr	r1, [r3, #20]
 8002a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a62:	88da      	ldrh	r2, [r3, #6]
 8002a64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a68:	f004 fb0c 	bl	8007084 <USB_ReadPMA>
 8002a6c:	e086      	b.n	8002b7c <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a70:	78db      	ldrb	r3, [r3, #3]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d10a      	bne.n	8002a8c <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002a76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f9d9 	bl	8002e36 <HAL_PCD_EP_DB_Receive>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002a8a:	e077      	b.n	8002b7c <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	441a      	add	r2, r3
 8002ab8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d024      	beq.n	8002b34 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	3302      	adds	r3, #2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b12:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002b16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d02e      	beq.n	8002b7c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b24:	6959      	ldr	r1, [r3, #20]
 8002b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b28:	891a      	ldrh	r2, [r3, #8]
 8002b2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b2e:	f004 faa9 	bl	8007084 <USB_ReadPMA>
 8002b32:	e023      	b.n	8002b7c <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	3306      	adds	r3, #6
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b5c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002b60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6e:	6959      	ldr	r1, [r3, #20]
 8002b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b72:	895a      	ldrh	r2, [r3, #10]
 8002b74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b78:	f004 fa84 	bl	8007084 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b84:	441a      	add	r2, r3
 8002b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b88:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b92:	441a      	add	r2, r3
 8002b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b96:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <PCD_EP_ISR_Handler+0x51c>
 8002ba0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d206      	bcs.n	8002bba <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f006 f866 	bl	8008c84 <HAL_PCD_DataOutStageCallback>
 8002bb8:	e005      	b.n	8002bc6 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fd2b 	bl	800561c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002bc6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8123 	beq.w	8002e1a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002bd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	441a      	add	r2, r3
 8002c14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c26:	78db      	ldrb	r3, [r3, #3]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	f040 80a2 	bne.w	8002d72 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c36:	7b1b      	ldrb	r3, [r3, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8093 	beq.w	8002d64 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d046      	beq.n	8002cd8 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4c:	785b      	ldrb	r3, [r3, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d126      	bne.n	8002ca0 <PCD_EP_ISR_Handler+0x610>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	4413      	add	r3, r2
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	011a      	lsls	r2, r3, #4
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	4413      	add	r3, r2
 8002c74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c78:	623b      	str	r3, [r7, #32]
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	801a      	strh	r2, [r3, #0]
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	801a      	strh	r2, [r3, #0]
 8002c9e:	e061      	b.n	8002d64 <PCD_EP_ISR_Handler+0x6d4>
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d15d      	bne.n	8002d64 <PCD_EP_ISR_Handler+0x6d4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	4413      	add	r3, r2
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	011a      	lsls	r2, r3, #4
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	4413      	add	r3, r2
 8002cca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	801a      	strh	r2, [r3, #0]
 8002cd6:	e045      	b.n	8002d64 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce0:	785b      	ldrb	r3, [r3, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d126      	bne.n	8002d34 <PCD_EP_ISR_Handler+0x6a4>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfa:	4413      	add	r3, r2
 8002cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	011a      	lsls	r2, r3, #4
 8002d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d06:	4413      	add	r3, r2
 8002d08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	801a      	strh	r2, [r3, #0]
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	801a      	strh	r2, [r3, #0]
 8002d32:	e017      	b.n	8002d64 <PCD_EP_ISR_Handler+0x6d4>
 8002d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d36:	785b      	ldrb	r3, [r3, #1]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d113      	bne.n	8002d64 <PCD_EP_ISR_Handler+0x6d4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4a:	4413      	add	r3, r2
 8002d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	011a      	lsls	r2, r3, #4
 8002d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d56:	4413      	add	r3, r2
 8002d58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	2200      	movs	r2, #0
 8002d62:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f005 ffa5 	bl	8008cba <HAL_PCD_DataInStageCallback>
 8002d70:	e053      	b.n	8002e1a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002d72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d146      	bne.n	8002e0c <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	3302      	adds	r3, #2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d907      	bls.n	8002dc6 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002dbe:	1ad2      	subs	r2, r2, r3
 8002dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc2:	619a      	str	r2, [r3, #24]
 8002dc4:	e002      	b.n	8002dcc <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d106      	bne.n	8002de2 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f005 ff6d 	bl	8008cba <HAL_PCD_DataInStageCallback>
 8002de0:	e01b      	b.n	8002e1a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002dea:	441a      	add	r2, r3
 8002dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dee:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002df8:	441a      	add	r2, r3
 8002dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dfc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 fc09 	bl	800561c <USB_EPStartXfer>
 8002e0a:	e006      	b.n	8002e1a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e10:	461a      	mov	r2, r3
 8002e12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f91b 	bl	8003050 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f6ff ac37 	blt.w	800269a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3758      	adds	r7, #88	; 0x58
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b088      	sub	sp, #32
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	4613      	mov	r3, r2
 8002e42:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d07e      	beq.n	8002f4c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	3302      	adds	r3, #2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e76:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	699a      	ldr	r2, [r3, #24]
 8002e7c:	8b7b      	ldrh	r3, [r7, #26]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d306      	bcc.n	8002e90 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	8b7b      	ldrh	r3, [r7, #26]
 8002e88:	1ad2      	subs	r2, r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	619a      	str	r2, [r3, #24]
 8002e8e:	e002      	b.n	8002e96 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2200      	movs	r2, #0
 8002e94:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d123      	bne.n	8002ee6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb8:	833b      	strh	r3, [r7, #24]
 8002eba:	8b3b      	ldrh	r3, [r7, #24]
 8002ebc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ec0:	833b      	strh	r3, [r7, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	441a      	add	r2, r3
 8002ed0:	8b3b      	ldrh	r3, [r7, #24]
 8002ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01f      	beq.n	8002f30 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0a:	82fb      	strh	r3, [r7, #22]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	441a      	add	r2, r3
 8002f1a:	8afb      	ldrh	r3, [r7, #22]
 8002f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f30:	8b7b      	ldrh	r3, [r7, #26]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8087 	beq.w	8003046 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	6959      	ldr	r1, [r3, #20]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	891a      	ldrh	r2, [r3, #8]
 8002f44:	8b7b      	ldrh	r3, [r7, #26]
 8002f46:	f004 f89d 	bl	8007084 <USB_ReadPMA>
 8002f4a:	e07c      	b.n	8003046 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	3306      	adds	r3, #6
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f74:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	8b7b      	ldrh	r3, [r7, #26]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d306      	bcc.n	8002f8e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	699a      	ldr	r2, [r3, #24]
 8002f84:	8b7b      	ldrh	r3, [r7, #26]
 8002f86:	1ad2      	subs	r2, r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	619a      	str	r2, [r3, #24]
 8002f8c:	e002      	b.n	8002f94 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d123      	bne.n	8002fe4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	83fb      	strh	r3, [r7, #30]
 8002fb8:	8bfb      	ldrh	r3, [r7, #30]
 8002fba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fbe:	83fb      	strh	r3, [r7, #30]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	441a      	add	r2, r3
 8002fce:	8bfb      	ldrh	r3, [r7, #30]
 8002fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11f      	bne.n	800302e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003008:	83bb      	strh	r3, [r7, #28]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	441a      	add	r2, r3
 8003018:	8bbb      	ldrh	r3, [r7, #28]
 800301a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800301e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003026:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800302a:	b29b      	uxth	r3, r3
 800302c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800302e:	8b7b      	ldrh	r3, [r7, #26]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	6959      	ldr	r1, [r3, #20]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	895a      	ldrh	r2, [r3, #10]
 8003040:	8b7b      	ldrh	r3, [r7, #26]
 8003042:	f004 f81f 	bl	8007084 <USB_ReadPMA>
    }
  }

  return count;
 8003046:	8b7b      	ldrh	r3, [r7, #26]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3720      	adds	r7, #32
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b0a4      	sub	sp, #144	; 0x90
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 81dd 	beq.w	8003424 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003072:	b29b      	uxth	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	3302      	adds	r3, #2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003092:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800309e:	429a      	cmp	r2, r3
 80030a0:	d907      	bls.n	80030b2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030aa:	1ad2      	subs	r2, r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	619a      	str	r2, [r3, #24]
 80030b0:	e002      	b.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2200      	movs	r2, #0
 80030b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f040 80b9 	bne.w	8003234 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	785b      	ldrb	r3, [r3, #1]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d126      	bne.n	8003118 <HAL_PCD_EP_DB_Transmit+0xc8>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d8:	b29b      	uxth	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	4413      	add	r3, r2
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	011a      	lsls	r2, r3, #4
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	4413      	add	r3, r2
 80030ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800310c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003110:	b29a      	uxth	r2, r3
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	801a      	strh	r2, [r3, #0]
 8003116:	e01a      	b.n	800314e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	785b      	ldrb	r3, [r3, #1]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d116      	bne.n	800314e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800312e:	b29b      	uxth	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003134:	4413      	add	r3, r2
 8003136:	637b      	str	r3, [r7, #52]	; 0x34
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	011a      	lsls	r2, r3, #4
 800313e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003140:	4413      	add	r3, r2
 8003142:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003146:	633b      	str	r3, [r7, #48]	; 0x30
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	2200      	movs	r2, #0
 800314c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	785b      	ldrb	r3, [r3, #1]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d126      	bne.n	80031aa <HAL_PCD_EP_DB_Transmit+0x15a>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316a:	b29b      	uxth	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	4413      	add	r3, r2
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	011a      	lsls	r2, r3, #4
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	4413      	add	r3, r2
 800317e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b29b      	uxth	r3, r3
 800318a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800318e:	b29a      	uxth	r2, r3
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	801a      	strh	r2, [r3, #0]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	801a      	strh	r2, [r3, #0]
 80031a8:	e017      	b.n	80031da <HAL_PCD_EP_DB_Transmit+0x18a>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	785b      	ldrb	r3, [r3, #1]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d113      	bne.n	80031da <HAL_PCD_EP_DB_Transmit+0x18a>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	4413      	add	r3, r2
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	011a      	lsls	r2, r3, #4
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	4413      	add	r3, r2
 80031ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031d2:	623b      	str	r3, [r7, #32]
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	2200      	movs	r2, #0
 80031d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	4619      	mov	r1, r3
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f005 fd6a 	bl	8008cba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 82fc 	beq.w	80037ea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320c:	82fb      	strh	r3, [r7, #22]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	441a      	add	r2, r3
 800321c:	8afb      	ldrh	r3, [r7, #22]
 800321e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800322a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322e:	b29b      	uxth	r3, r3
 8003230:	8013      	strh	r3, [r2, #0]
 8003232:	e2da      	b.n	80037ea <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d021      	beq.n	8003282 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	b29b      	uxth	r3, r3
 8003250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003258:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	441a      	add	r2, r3
 800326a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800326e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003276:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800327a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327e:	b29b      	uxth	r3, r3
 8003280:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003288:	2b01      	cmp	r3, #1
 800328a:	f040 82ae 	bne.w	80037ea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003296:	441a      	add	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032a4:	441a      	add	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6a1a      	ldr	r2, [r3, #32]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d30b      	bcc.n	80032ce <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	6a1a      	ldr	r2, [r3, #32]
 80032c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032c6:	1ad2      	subs	r2, r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	621a      	str	r2, [r3, #32]
 80032cc:	e017      	b.n	80032fe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d108      	bne.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80032d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032e6:	e00a      	b.n	80032fe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2200      	movs	r2, #0
 80032fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	785b      	ldrb	r3, [r3, #1]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d165      	bne.n	80033d2 <HAL_PCD_EP_DB_Transmit+0x382>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003314:	b29b      	uxth	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331a:	4413      	add	r3, r2
 800331c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	011a      	lsls	r2, r3, #4
 8003324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003326:	4413      	add	r3, r2
 8003328:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800332c:	63bb      	str	r3, [r7, #56]	; 0x38
 800332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003338:	b29a      	uxth	r2, r3
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	801a      	strh	r2, [r3, #0]
 800333e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003342:	2b3e      	cmp	r3, #62	; 0x3e
 8003344:	d91d      	bls.n	8003382 <HAL_PCD_EP_DB_Transmit+0x332>
 8003346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	64bb      	str	r3, [r7, #72]	; 0x48
 800334e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003352:	f003 031f 	and.w	r3, r3, #31
 8003356:	2b00      	cmp	r3, #0
 8003358:	d102      	bne.n	8003360 <HAL_PCD_EP_DB_Transmit+0x310>
 800335a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800335c:	3b01      	subs	r3, #1
 800335e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	b29a      	uxth	r2, r3
 8003366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003368:	b29b      	uxth	r3, r3
 800336a:	029b      	lsls	r3, r3, #10
 800336c:	b29b      	uxth	r3, r3
 800336e:	4313      	orrs	r3, r2
 8003370:	b29b      	uxth	r3, r3
 8003372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800337a:	b29a      	uxth	r2, r3
 800337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337e:	801a      	strh	r2, [r3, #0]
 8003380:	e044      	b.n	800340c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <HAL_PCD_EP_DB_Transmit+0x350>
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003398:	b29a      	uxth	r2, r3
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	801a      	strh	r2, [r3, #0]
 800339e:	e035      	b.n	800340c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <HAL_PCD_EP_DB_Transmit+0x36a>
 80033b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033b6:	3301      	adds	r3, #1
 80033b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29a      	uxth	r2, r3
 80033c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	029b      	lsls	r3, r3, #10
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	4313      	orrs	r3, r2
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	801a      	strh	r2, [r3, #0]
 80033d0:	e01c      	b.n	800340c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d118      	bne.n	800340c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	647b      	str	r3, [r7, #68]	; 0x44
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ee:	4413      	add	r3, r2
 80033f0:	647b      	str	r3, [r7, #68]	; 0x44
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	011a      	lsls	r2, r3, #4
 80033f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fa:	4413      	add	r3, r2
 80033fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003400:	643b      	str	r3, [r7, #64]	; 0x40
 8003402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003406:	b29a      	uxth	r2, r3
 8003408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	6959      	ldr	r1, [r3, #20]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	891a      	ldrh	r2, [r3, #8]
 8003418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800341c:	b29b      	uxth	r3, r3
 800341e:	f003 fdec 	bl	8006ffa <USB_WritePMA>
 8003422:	e1e2      	b.n	80037ea <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342c:	b29b      	uxth	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	3306      	adds	r3, #6
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800344c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	699a      	ldr	r2, [r3, #24]
 8003454:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003458:	429a      	cmp	r2, r3
 800345a:	d307      	bcc.n	800346c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	699a      	ldr	r2, [r3, #24]
 8003460:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003464:	1ad2      	subs	r2, r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	619a      	str	r2, [r3, #24]
 800346a:	e002      	b.n	8003472 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2200      	movs	r2, #0
 8003470:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 80c0 	bne.w	80035fc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	785b      	ldrb	r3, [r3, #1]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d126      	bne.n	80034d2 <HAL_PCD_EP_DB_Transmit+0x482>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	67fb      	str	r3, [r7, #124]	; 0x7c
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003492:	b29b      	uxth	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003498:	4413      	add	r3, r2
 800349a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	011a      	lsls	r2, r3, #4
 80034a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034a4:	4413      	add	r3, r2
 80034a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80034ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ba:	801a      	strh	r2, [r3, #0]
 80034bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ce:	801a      	strh	r2, [r3, #0]
 80034d0:	e01a      	b.n	8003508 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	785b      	ldrb	r3, [r3, #1]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d116      	bne.n	8003508 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	667b      	str	r3, [r7, #100]	; 0x64
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ee:	4413      	add	r3, r2
 80034f0:	667b      	str	r3, [r7, #100]	; 0x64
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	011a      	lsls	r2, r3, #4
 80034f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034fa:	4413      	add	r3, r2
 80034fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003500:	663b      	str	r3, [r7, #96]	; 0x60
 8003502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003504:	2200      	movs	r2, #0
 8003506:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	677b      	str	r3, [r7, #116]	; 0x74
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	785b      	ldrb	r3, [r3, #1]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d12b      	bne.n	800356e <HAL_PCD_EP_DB_Transmit+0x51e>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003524:	b29b      	uxth	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352a:	4413      	add	r3, r2
 800352c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	011a      	lsls	r2, r3, #4
 8003534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003536:	4413      	add	r3, r2
 8003538:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800353c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	b29b      	uxth	r3, r3
 8003548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800354c:	b29a      	uxth	r2, r3
 800354e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003552:	801a      	strh	r2, [r3, #0]
 8003554:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003564:	b29a      	uxth	r2, r3
 8003566:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	e017      	b.n	800359e <HAL_PCD_EP_DB_Transmit+0x54e>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	785b      	ldrb	r3, [r3, #1]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d113      	bne.n	800359e <HAL_PCD_EP_DB_Transmit+0x54e>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800357e:	b29b      	uxth	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003584:	4413      	add	r3, r2
 8003586:	677b      	str	r3, [r7, #116]	; 0x74
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	011a      	lsls	r2, r3, #4
 800358e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003590:	4413      	add	r3, r2
 8003592:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003596:	673b      	str	r3, [r7, #112]	; 0x70
 8003598:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800359a:	2200      	movs	r2, #0
 800359c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	4619      	mov	r1, r3
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f005 fb88 	bl	8008cba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f040 811a 	bne.w	80037ea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	441a      	add	r2, r3
 80035e2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80035e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	8013      	strh	r3, [r2, #0]
 80035fa:	e0f6      	b.n	80037ea <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d121      	bne.n	800364a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003620:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	441a      	add	r2, r3
 8003632:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800363a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800363e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003646:	b29b      	uxth	r3, r3
 8003648:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003650:	2b01      	cmp	r3, #1
 8003652:	f040 80ca 	bne.w	80037ea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800365e:	441a      	add	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800366c:	441a      	add	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	6a1a      	ldr	r2, [r3, #32]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	429a      	cmp	r2, r3
 800367c:	d30b      	bcc.n	8003696 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6a1a      	ldr	r2, [r3, #32]
 800368a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800368e:	1ad2      	subs	r2, r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	621a      	str	r2, [r3, #32]
 8003694:	e017      	b.n	80036c6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800369e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036ae:	e00a      	b.n	80036c6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2200      	movs	r2, #0
 80036bc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	657b      	str	r3, [r7, #84]	; 0x54
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	785b      	ldrb	r3, [r3, #1]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d165      	bne.n	80037a0 <HAL_PCD_EP_DB_Transmit+0x750>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e8:	4413      	add	r3, r2
 80036ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	011a      	lsls	r2, r3, #4
 80036f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f4:	4413      	add	r3, r2
 80036f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80036fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	b29b      	uxth	r3, r3
 8003702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003706:	b29a      	uxth	r2, r3
 8003708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800370a:	801a      	strh	r2, [r3, #0]
 800370c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003710:	2b3e      	cmp	r3, #62	; 0x3e
 8003712:	d91d      	bls.n	8003750 <HAL_PCD_EP_DB_Transmit+0x700>
 8003714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	66bb      	str	r3, [r7, #104]	; 0x68
 800371c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <HAL_PCD_EP_DB_Transmit+0x6de>
 8003728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800372a:	3b01      	subs	r3, #1
 800372c:	66bb      	str	r3, [r7, #104]	; 0x68
 800372e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	b29a      	uxth	r2, r3
 8003734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003736:	b29b      	uxth	r3, r3
 8003738:	029b      	lsls	r3, r3, #10
 800373a:	b29b      	uxth	r3, r3
 800373c:	4313      	orrs	r3, r2
 800373e:	b29b      	uxth	r3, r3
 8003740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003748:	b29a      	uxth	r2, r3
 800374a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800374c:	801a      	strh	r2, [r3, #0]
 800374e:	e041      	b.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x784>
 8003750:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <HAL_PCD_EP_DB_Transmit+0x71e>
 8003758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003766:	b29a      	uxth	r2, r3
 8003768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800376a:	801a      	strh	r2, [r3, #0]
 800376c:	e032      	b.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x784>
 800376e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	66bb      	str	r3, [r7, #104]	; 0x68
 8003776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_PCD_EP_DB_Transmit+0x738>
 8003782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003784:	3301      	adds	r3, #1
 8003786:	66bb      	str	r3, [r7, #104]	; 0x68
 8003788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29a      	uxth	r2, r3
 800378e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003790:	b29b      	uxth	r3, r3
 8003792:	029b      	lsls	r3, r3, #10
 8003794:	b29b      	uxth	r3, r3
 8003796:	4313      	orrs	r3, r2
 8003798:	b29a      	uxth	r2, r3
 800379a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800379c:	801a      	strh	r2, [r3, #0]
 800379e:	e019      	b.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x784>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	785b      	ldrb	r3, [r3, #1]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d115      	bne.n	80037d4 <HAL_PCD_EP_DB_Transmit+0x784>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b6:	4413      	add	r3, r2
 80037b8:	657b      	str	r3, [r7, #84]	; 0x54
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	011a      	lsls	r2, r3, #4
 80037c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c2:	4413      	add	r3, r2
 80037c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037c8:	653b      	str	r3, [r7, #80]	; 0x50
 80037ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	6959      	ldr	r1, [r3, #20]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	895a      	ldrh	r2, [r3, #10]
 80037e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f003 fc08 	bl	8006ffa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003804:	82bb      	strh	r3, [r7, #20]
 8003806:	8abb      	ldrh	r3, [r7, #20]
 8003808:	f083 0310 	eor.w	r3, r3, #16
 800380c:	82bb      	strh	r3, [r7, #20]
 800380e:	8abb      	ldrh	r3, [r7, #20]
 8003810:	f083 0320 	eor.w	r3, r3, #32
 8003814:	82bb      	strh	r3, [r7, #20]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	441a      	add	r2, r3
 8003824:	8abb      	ldrh	r3, [r7, #20]
 8003826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800382a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800382e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003836:	b29b      	uxth	r3, r3
 8003838:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3790      	adds	r7, #144	; 0x90
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	607b      	str	r3, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	817b      	strh	r3, [r7, #10]
 8003852:	4613      	mov	r3, r2
 8003854:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003856:	897b      	ldrh	r3, [r7, #10]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	e009      	b.n	800388e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800387a:	897a      	ldrh	r2, [r7, #10]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800388e:	893b      	ldrh	r3, [r7, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d107      	bne.n	80038a4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2200      	movs	r2, #0
 8003898:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	b29a      	uxth	r2, r3
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	80da      	strh	r2, [r3, #6]
 80038a2:	e00b      	b.n	80038bc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2201      	movs	r2, #1
 80038a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e272      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8087 	beq.w	80039f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038e8:	4b92      	ldr	r3, [pc, #584]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d00c      	beq.n	800390e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038f4:	4b8f      	ldr	r3, [pc, #572]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d112      	bne.n	8003926 <HAL_RCC_OscConfig+0x5e>
 8003900:	4b8c      	ldr	r3, [pc, #560]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390c:	d10b      	bne.n	8003926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390e:	4b89      	ldr	r3, [pc, #548]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d06c      	beq.n	80039f4 <HAL_RCC_OscConfig+0x12c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d168      	bne.n	80039f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e24c      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392e:	d106      	bne.n	800393e <HAL_RCC_OscConfig+0x76>
 8003930:	4b80      	ldr	r3, [pc, #512]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a7f      	ldr	r2, [pc, #508]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	e02e      	b.n	800399c <HAL_RCC_OscConfig+0xd4>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x98>
 8003946:	4b7b      	ldr	r3, [pc, #492]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7a      	ldr	r2, [pc, #488]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 800394c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b78      	ldr	r3, [pc, #480]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a77      	ldr	r2, [pc, #476]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e01d      	b.n	800399c <HAL_RCC_OscConfig+0xd4>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003968:	d10c      	bne.n	8003984 <HAL_RCC_OscConfig+0xbc>
 800396a:	4b72      	ldr	r3, [pc, #456]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a71      	ldr	r2, [pc, #452]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4b6f      	ldr	r3, [pc, #444]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a6e      	ldr	r2, [pc, #440]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e00b      	b.n	800399c <HAL_RCC_OscConfig+0xd4>
 8003984:	4b6b      	ldr	r3, [pc, #428]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a6a      	ldr	r2, [pc, #424]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 800398a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4b68      	ldr	r3, [pc, #416]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a67      	ldr	r2, [pc, #412]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800399a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fd f890 	bl	8000ac8 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fd f88c 	bl	8000ac8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e200      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	4b5d      	ldr	r3, [pc, #372]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0xe4>
 80039ca:	e014      	b.n	80039f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fd f87c 	bl	8000ac8 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d4:	f7fd f878 	bl	8000ac8 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	; 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e1ec      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x10c>
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d063      	beq.n	8003aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a02:	4b4c      	ldr	r3, [pc, #304]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a0e:	4b49      	ldr	r3, [pc, #292]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d11c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x18c>
 8003a1a:	4b46      	ldr	r3, [pc, #280]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d116      	bne.n	8003a54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	4b43      	ldr	r3, [pc, #268]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_RCC_OscConfig+0x176>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e1c0      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3e:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4939      	ldr	r1, [pc, #228]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	e03a      	b.n	8003aca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5c:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_RCC_OscConfig+0x270>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a62:	f7fd f831 	bl	8000ac8 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7fd f82d 	bl	8000ac8 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e1a1      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4927      	ldr	r1, [pc, #156]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
 8003a9c:	e015      	b.n	8003aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9e:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa4:	f7fd f810 	bl	8000ac8 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aac:	f7fd f80c 	bl	8000ac8 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e180      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d03a      	beq.n	8003b4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d019      	beq.n	8003b12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ade:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae4:	f7fc fff0 	bl	8000ac8 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aec:	f7fc ffec 	bl	8000ac8 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e160      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	f000 fa9c 	bl	8004048 <RCC_Delay>
 8003b10:	e01c      	b.n	8003b4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <HAL_RCC_OscConfig+0x274>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b18:	f7fc ffd6 	bl	8000ac8 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1e:	e00f      	b.n	8003b40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b20:	f7fc ffd2 	bl	8000ac8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d908      	bls.n	8003b40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e146      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	42420000 	.word	0x42420000
 8003b3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	4b92      	ldr	r3, [pc, #584]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e9      	bne.n	8003b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80a6 	beq.w	8003ca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5e:	4b8b      	ldr	r3, [pc, #556]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10d      	bne.n	8003b86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	4b88      	ldr	r3, [pc, #544]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	4a87      	ldr	r2, [pc, #540]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b74:	61d3      	str	r3, [r2, #28]
 8003b76:	4b85      	ldr	r3, [pc, #532]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b82:	2301      	movs	r3, #1
 8003b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b86:	4b82      	ldr	r3, [pc, #520]	; (8003d90 <HAL_RCC_OscConfig+0x4c8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d118      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b92:	4b7f      	ldr	r3, [pc, #508]	; (8003d90 <HAL_RCC_OscConfig+0x4c8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a7e      	ldr	r2, [pc, #504]	; (8003d90 <HAL_RCC_OscConfig+0x4c8>)
 8003b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9e:	f7fc ff93 	bl	8000ac8 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba6:	f7fc ff8f 	bl	8000ac8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b64      	cmp	r3, #100	; 0x64
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e103      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb8:	4b75      	ldr	r3, [pc, #468]	; (8003d90 <HAL_RCC_OscConfig+0x4c8>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x312>
 8003bcc:	4b6f      	ldr	r3, [pc, #444]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4a6e      	ldr	r2, [pc, #440]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	6213      	str	r3, [r2, #32]
 8003bd8:	e02d      	b.n	8003c36 <HAL_RCC_OscConfig+0x36e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x334>
 8003be2:	4b6a      	ldr	r3, [pc, #424]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4a69      	ldr	r2, [pc, #420]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6213      	str	r3, [r2, #32]
 8003bee:	4b67      	ldr	r3, [pc, #412]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4a66      	ldr	r2, [pc, #408]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	6213      	str	r3, [r2, #32]
 8003bfa:	e01c      	b.n	8003c36 <HAL_RCC_OscConfig+0x36e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	d10c      	bne.n	8003c1e <HAL_RCC_OscConfig+0x356>
 8003c04:	4b61      	ldr	r3, [pc, #388]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4a60      	ldr	r2, [pc, #384]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	f043 0304 	orr.w	r3, r3, #4
 8003c0e:	6213      	str	r3, [r2, #32]
 8003c10:	4b5e      	ldr	r3, [pc, #376]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4a5d      	ldr	r2, [pc, #372]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6213      	str	r3, [r2, #32]
 8003c1c:	e00b      	b.n	8003c36 <HAL_RCC_OscConfig+0x36e>
 8003c1e:	4b5b      	ldr	r3, [pc, #364]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4a5a      	ldr	r2, [pc, #360]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	6213      	str	r3, [r2, #32]
 8003c2a:	4b58      	ldr	r3, [pc, #352]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	4a57      	ldr	r2, [pc, #348]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	f023 0304 	bic.w	r3, r3, #4
 8003c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d015      	beq.n	8003c6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3e:	f7fc ff43 	bl	8000ac8 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c44:	e00a      	b.n	8003c5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fc ff3f 	bl	8000ac8 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e0b1      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ee      	beq.n	8003c46 <HAL_RCC_OscConfig+0x37e>
 8003c68:	e014      	b.n	8003c94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fc ff2d 	bl	8000ac8 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c70:	e00a      	b.n	8003c88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c72:	f7fc ff29 	bl	8000ac8 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e09b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c88:	4b40      	ldr	r3, [pc, #256]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ee      	bne.n	8003c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d105      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9a:	4b3c      	ldr	r3, [pc, #240]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 8087 	beq.w	8003dbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb0:	4b36      	ldr	r3, [pc, #216]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 030c 	and.w	r3, r3, #12
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d061      	beq.n	8003d80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d146      	bne.n	8003d52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc4:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <HAL_RCC_OscConfig+0x4cc>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7fc fefd 	bl	8000ac8 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fc fef9 	bl	8000ac8 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e06d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce4:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f0      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf8:	d108      	bne.n	8003d0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	4921      	ldr	r1, [pc, #132]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a19      	ldr	r1, [r3, #32]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	491b      	ldr	r1, [pc, #108]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d24:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_RCC_OscConfig+0x4cc>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2a:	f7fc fecd 	bl	8000ac8 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d32:	f7fc fec9 	bl	8000ac8 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e03d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x46a>
 8003d50:	e035      	b.n	8003dbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <HAL_RCC_OscConfig+0x4cc>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fc feb6 	bl	8000ac8 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fc feb2 	bl	8000ac8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e026      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_RCC_OscConfig+0x4c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x498>
 8003d7e:	e01e      	b.n	8003dbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e019      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40007000 	.word	0x40007000
 8003d94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_OscConfig+0x500>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d001      	beq.n	8003dbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000

08003dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0d0      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de0:	4b6a      	ldr	r3, [pc, #424]	; (8003f8c <HAL_RCC_ClockConfig+0x1c0>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d910      	bls.n	8003e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dee:	4b67      	ldr	r3, [pc, #412]	; (8003f8c <HAL_RCC_ClockConfig+0x1c0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 0207 	bic.w	r2, r3, #7
 8003df6:	4965      	ldr	r1, [pc, #404]	; (8003f8c <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b63      	ldr	r3, [pc, #396]	; (8003f8c <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0b8      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d020      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e28:	4b59      	ldr	r3, [pc, #356]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a58      	ldr	r2, [pc, #352]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e40:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4a52      	ldr	r2, [pc, #328]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e4c:	4b50      	ldr	r3, [pc, #320]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	494d      	ldr	r1, [pc, #308]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d040      	beq.n	8003eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e72:	4b47      	ldr	r3, [pc, #284]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d115      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e07f      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d107      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8a:	4b41      	ldr	r3, [pc, #260]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e073      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9a:	4b3d      	ldr	r3, [pc, #244]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e06b      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f023 0203 	bic.w	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4936      	ldr	r1, [pc, #216]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ebc:	f7fc fe04 	bl	8000ac8 <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec4:	f7fc fe00 	bl	8000ac8 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e053      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	4b2d      	ldr	r3, [pc, #180]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 020c 	and.w	r2, r3, #12
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d1eb      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eec:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <HAL_RCC_ClockConfig+0x1c0>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d210      	bcs.n	8003f1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_ClockConfig+0x1c0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 0207 	bic.w	r2, r3, #7
 8003f02:	4922      	ldr	r1, [pc, #136]	; (8003f8c <HAL_RCC_ClockConfig+0x1c0>)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_RCC_ClockConfig+0x1c0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e032      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f28:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4916      	ldr	r1, [pc, #88]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	490e      	ldr	r1, [pc, #56]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f5a:	f000 f821 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	490a      	ldr	r1, [pc, #40]	; (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003f6c:	5ccb      	ldrb	r3, [r1, r3]
 8003f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f72:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <HAL_RCC_ClockConfig+0x1cc>)
 8003f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_RCC_ClockConfig+0x1d0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fc fd62 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40022000 	.word	0x40022000
 8003f90:	40021000 	.word	0x40021000
 8003f94:	08009c70 	.word	0x08009c70
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	20000004 	.word	0x20000004

08003fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fba:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d002      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x30>
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d003      	beq.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x36>
 8003fce:	e027      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fd0:	4b19      	ldr	r3, [pc, #100]	; (8004038 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fd2:	613b      	str	r3, [r7, #16]
      break;
 8003fd4:	e027      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	0c9b      	lsrs	r3, r3, #18
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	4a17      	ldr	r2, [pc, #92]	; (800403c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fe0:	5cd3      	ldrb	r3, [r2, r3]
 8003fe2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d010      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	0c5b      	lsrs	r3, r3, #17
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	4a11      	ldr	r2, [pc, #68]	; (8004040 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <HAL_RCC_GetSysClockFreq+0x98>)
 8004002:	fb03 f202 	mul.w	r2, r3, r2
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e004      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a0c      	ldr	r2, [pc, #48]	; (8004044 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004014:	fb02 f303 	mul.w	r3, r2, r3
 8004018:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	613b      	str	r3, [r7, #16]
      break;
 800401e:	e002      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <HAL_RCC_GetSysClockFreq+0x98>)
 8004022:	613b      	str	r3, [r7, #16]
      break;
 8004024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004026:	693b      	ldr	r3, [r7, #16]
}
 8004028:	4618      	mov	r0, r3
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40021000 	.word	0x40021000
 8004038:	007a1200 	.word	0x007a1200
 800403c:	08009c80 	.word	0x08009c80
 8004040:	08009c90 	.word	0x08009c90
 8004044:	003d0900 	.word	0x003d0900

08004048 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <RCC_Delay+0x34>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <RCC_Delay+0x38>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	0a5b      	lsrs	r3, r3, #9
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004064:	bf00      	nop
  }
  while (Delay --);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1e5a      	subs	r2, r3, #1
 800406a:	60fa      	str	r2, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f9      	bne.n	8004064 <RCC_Delay+0x1c>
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	20000000 	.word	0x20000000
 8004080:	10624dd3 	.word	0x10624dd3

08004084 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d07d      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80040a0:	2300      	movs	r3, #0
 80040a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a4:	4b4f      	ldr	r3, [pc, #316]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10d      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b0:	4b4c      	ldr	r3, [pc, #304]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	4a4b      	ldr	r2, [pc, #300]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ba:	61d3      	str	r3, [r2, #28]
 80040bc:	4b49      	ldr	r3, [pc, #292]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c8:	2301      	movs	r3, #1
 80040ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	4b46      	ldr	r3, [pc, #280]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d118      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d8:	4b43      	ldr	r3, [pc, #268]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a42      	ldr	r2, [pc, #264]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e4:	f7fc fcf0 	bl	8000ac8 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ea:	e008      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ec:	f7fc fcec 	bl	8000ac8 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	; 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e06d      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fe:	4b3a      	ldr	r3, [pc, #232]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800410a:	4b36      	ldr	r3, [pc, #216]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d02e      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	429a      	cmp	r2, r3
 8004126:	d027      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004128:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004130:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004132:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004138:	4b2c      	ldr	r3, [pc, #176]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800413e:	4a29      	ldr	r2, [pc, #164]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d014      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414e:	f7fc fcbb 	bl	8000ac8 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004154:	e00a      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004156:	f7fc fcb7 	bl	8000ac8 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	f241 3288 	movw	r2, #5000	; 0x1388
 8004164:	4293      	cmp	r3, r2
 8004166:	d901      	bls.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e036      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416c:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0ee      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004178:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4917      	ldr	r1, [pc, #92]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	4313      	orrs	r3, r2
 8004188:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800418a:	7dfb      	ldrb	r3, [r7, #23]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d105      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004190:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a8:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	490b      	ldr	r1, [pc, #44]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0310 	and.w	r3, r3, #16
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c6:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	4904      	ldr	r1, [pc, #16]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40007000 	.word	0x40007000
 80041ec:	42420440 	.word	0x42420440

080041f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e041      	b.n	8004286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fc fb28 	bl	800086c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f000 fa74 	bl	800471c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d001      	beq.n	80042a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e03a      	b.n	800431e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a18      	ldr	r2, [pc, #96]	; (8004328 <HAL_TIM_Base_Start_IT+0x98>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00e      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x58>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d2:	d009      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x58>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a14      	ldr	r2, [pc, #80]	; (800432c <HAL_TIM_Base_Start_IT+0x9c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x58>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a13      	ldr	r2, [pc, #76]	; (8004330 <HAL_TIM_Base_Start_IT+0xa0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d111      	bne.n	800430c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d010      	beq.n	800431c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430a:	e007      	b.n	800431c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40000400 	.word	0x40000400
 8004330:	40000800 	.word	0x40000800

08004334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d122      	bne.n	8004390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b02      	cmp	r3, #2
 8004356:	d11b      	bne.n	8004390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0202 	mvn.w	r2, #2
 8004360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f9b4 	bl	80046e4 <HAL_TIM_IC_CaptureCallback>
 800437c:	e005      	b.n	800438a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f9a7 	bl	80046d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f9b6 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b04      	cmp	r3, #4
 800439c:	d122      	bne.n	80043e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d11b      	bne.n	80043e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0204 	mvn.w	r2, #4
 80043b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f98a 	bl	80046e4 <HAL_TIM_IC_CaptureCallback>
 80043d0:	e005      	b.n	80043de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f97d 	bl	80046d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f98c 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d122      	bne.n	8004438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d11b      	bne.n	8004438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0208 	mvn.w	r2, #8
 8004408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2204      	movs	r2, #4
 800440e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f960 	bl	80046e4 <HAL_TIM_IC_CaptureCallback>
 8004424:	e005      	b.n	8004432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f953 	bl	80046d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f962 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b10      	cmp	r3, #16
 8004444:	d122      	bne.n	800448c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b10      	cmp	r3, #16
 8004452:	d11b      	bne.n	800448c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0210 	mvn.w	r2, #16
 800445c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2208      	movs	r2, #8
 8004462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f936 	bl	80046e4 <HAL_TIM_IC_CaptureCallback>
 8004478:	e005      	b.n	8004486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f929 	bl	80046d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f938 	bl	80046f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b01      	cmp	r3, #1
 8004498:	d10e      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d107      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0201 	mvn.w	r2, #1
 80044b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fc f8fe 	bl	80006b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c2:	2b80      	cmp	r3, #128	; 0x80
 80044c4:	d10e      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b80      	cmp	r3, #128	; 0x80
 80044d2:	d107      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa7b 	bl	80049da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	d10e      	bne.n	8004510 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b40      	cmp	r3, #64	; 0x40
 80044fe:	d107      	bne.n	8004510 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f8fc 	bl	8004708 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b20      	cmp	r3, #32
 800451c:	d10e      	bne.n	800453c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b20      	cmp	r3, #32
 800452a:	d107      	bne.n	800453c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0220 	mvn.w	r2, #32
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fa46 	bl	80049c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_TIM_ConfigClockSource+0x1c>
 800455c:	2302      	movs	r3, #2
 800455e:	e0b4      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x186>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800457e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004598:	d03e      	beq.n	8004618 <HAL_TIM_ConfigClockSource+0xd4>
 800459a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459e:	f200 8087 	bhi.w	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	f000 8086 	beq.w	80046b6 <HAL_TIM_ConfigClockSource+0x172>
 80045aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ae:	d87f      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b70      	cmp	r3, #112	; 0x70
 80045b2:	d01a      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0xa6>
 80045b4:	2b70      	cmp	r3, #112	; 0x70
 80045b6:	d87b      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b60      	cmp	r3, #96	; 0x60
 80045ba:	d050      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x11a>
 80045bc:	2b60      	cmp	r3, #96	; 0x60
 80045be:	d877      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b50      	cmp	r3, #80	; 0x50
 80045c2:	d03c      	beq.n	800463e <HAL_TIM_ConfigClockSource+0xfa>
 80045c4:	2b50      	cmp	r3, #80	; 0x50
 80045c6:	d873      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d058      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x13a>
 80045cc:	2b40      	cmp	r3, #64	; 0x40
 80045ce:	d86f      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b30      	cmp	r3, #48	; 0x30
 80045d2:	d064      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15a>
 80045d4:	2b30      	cmp	r3, #48	; 0x30
 80045d6:	d86b      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d060      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15a>
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d867      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d05c      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15a>
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d05a      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15a>
 80045e8:	e062      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045fa:	f000 f968 	bl	80048ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800460c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	609a      	str	r2, [r3, #8]
      break;
 8004616:	e04f      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004628:	f000 f951 	bl	80048ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800463a:	609a      	str	r2, [r3, #8]
      break;
 800463c:	e03c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800464a:	461a      	mov	r2, r3
 800464c:	f000 f8c8 	bl	80047e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2150      	movs	r1, #80	; 0x50
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f91f 	bl	800489a <TIM_ITRx_SetConfig>
      break;
 800465c:	e02c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800466a:	461a      	mov	r2, r3
 800466c:	f000 f8e6 	bl	800483c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2160      	movs	r1, #96	; 0x60
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f90f 	bl	800489a <TIM_ITRx_SetConfig>
      break;
 800467c:	e01c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800468a:	461a      	mov	r2, r3
 800468c:	f000 f8a8 	bl	80047e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2140      	movs	r1, #64	; 0x40
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f8ff 	bl	800489a <TIM_ITRx_SetConfig>
      break;
 800469c:	e00c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f000 f8f6 	bl	800489a <TIM_ITRx_SetConfig>
      break;
 80046ae:	e003      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      break;
 80046b4:	e000      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr
	...

0800471c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a29      	ldr	r2, [pc, #164]	; (80047d4 <TIM_Base_SetConfig+0xb8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00b      	beq.n	800474c <TIM_Base_SetConfig+0x30>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473a:	d007      	beq.n	800474c <TIM_Base_SetConfig+0x30>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a26      	ldr	r2, [pc, #152]	; (80047d8 <TIM_Base_SetConfig+0xbc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <TIM_Base_SetConfig+0x30>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a25      	ldr	r2, [pc, #148]	; (80047dc <TIM_Base_SetConfig+0xc0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d108      	bne.n	800475e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1c      	ldr	r2, [pc, #112]	; (80047d4 <TIM_Base_SetConfig+0xb8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00b      	beq.n	800477e <TIM_Base_SetConfig+0x62>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476c:	d007      	beq.n	800477e <TIM_Base_SetConfig+0x62>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <TIM_Base_SetConfig+0xbc>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d003      	beq.n	800477e <TIM_Base_SetConfig+0x62>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a18      	ldr	r2, [pc, #96]	; (80047dc <TIM_Base_SetConfig+0xc0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d108      	bne.n	8004790 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a07      	ldr	r2, [pc, #28]	; (80047d4 <TIM_Base_SetConfig+0xb8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d103      	bne.n	80047c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	615a      	str	r2, [r3, #20]
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800

080047e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800480a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 030a 	bic.w	r3, r3, #10
 800481c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f023 0210 	bic.w	r2, r3, #16
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	031b      	lsls	r3, r3, #12
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004878:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4313      	orrs	r3, r2
 8004882:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr

0800489a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800489a:	b480      	push	{r7}
 800489c:	b085      	sub	sp, #20
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f043 0307 	orr.w	r3, r3, #7
 80048bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	609a      	str	r2, [r3, #8]
}
 80048c4:	bf00      	nop
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr

080048ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b087      	sub	sp, #28
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	021a      	lsls	r2, r3, #8
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	609a      	str	r2, [r3, #8]
}
 8004902:	bf00      	nop
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004920:	2302      	movs	r3, #2
 8004922:	e046      	b.n	80049b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a16      	ldr	r2, [pc, #88]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004970:	d009      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a10      	ldr	r2, [pc, #64]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d10c      	bne.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800498c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	4313      	orrs	r3, r2
 8004996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr
 80049bc:	40012c00 	.word	0x40012c00
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800

080049c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049ec:	b084      	sub	sp, #16
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	f107 0014 	add.w	r0, r7, #20
 80049fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	b004      	add	sp, #16
 8004a0a:	4770      	bx	lr

08004a0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a1c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr

08004a38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004a40:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	4013      	ands	r3, r2
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a84:	b084      	sub	sp, #16
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	f107 0014 	add.w	r0, r7, #20
 8004a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bc80      	pop	{r7}
 8004ac0:	b004      	add	sp, #16
 8004ac2:	4770      	bx	lr

08004ac4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b09d      	sub	sp, #116	; 0x74
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	78db      	ldrb	r3, [r3, #3]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d81f      	bhi.n	8004b36 <USB_ActivateEndpoint+0x72>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <USB_ActivateEndpoint+0x38>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b0d 	.word	0x08004b0d
 8004b00:	08004b29 	.word	0x08004b29
 8004b04:	08004b3f 	.word	0x08004b3f
 8004b08:	08004b1b 	.word	0x08004b1b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b18:	e012      	b.n	8004b40 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b1e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004b22:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b26:	e00b      	b.n	8004b40 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004b34:	e004      	b.n	8004b40 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004b3c:	e000      	b.n	8004b40 <USB_ActivateEndpoint+0x7c>
      break;
 8004b3e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	441a      	add	r2, r3
 8004b4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	441a      	add	r2, r3
 8004b90:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	7b1b      	ldrb	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f040 8178 	bne.w	8004ea2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8084 	beq.w	8004cc4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	461a      	mov	r2, r3
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	4413      	add	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	011a      	lsls	r2, r3, #4
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	88db      	ldrh	r3, [r3, #6]
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	827b      	strh	r3, [r7, #18]
 8004bfe:	8a7b      	ldrh	r3, [r7, #18]
 8004c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01b      	beq.n	8004c40 <USB_ActivateEndpoint+0x17c>
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1e:	823b      	strh	r3, [r7, #16]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	441a      	add	r2, r3
 8004c2a:	8a3b      	ldrh	r3, [r7, #16]
 8004c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	78db      	ldrb	r3, [r3, #3]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d020      	beq.n	8004c8a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c5e:	81bb      	strh	r3, [r7, #12]
 8004c60:	89bb      	ldrh	r3, [r7, #12]
 8004c62:	f083 0320 	eor.w	r3, r3, #32
 8004c66:	81bb      	strh	r3, [r7, #12]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	89bb      	ldrh	r3, [r7, #12]
 8004c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	8013      	strh	r3, [r2, #0]
 8004c88:	e2d5      	b.n	8005236 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca0:	81fb      	strh	r3, [r7, #14]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	441a      	add	r2, r3
 8004cac:	89fb      	ldrh	r3, [r7, #14]
 8004cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	8013      	strh	r3, [r2, #0]
 8004cc2:	e2b8      	b.n	8005236 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	4413      	add	r3, r2
 8004cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	011a      	lsls	r2, r3, #4
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	88db      	ldrh	r3, [r3, #6]
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	4413      	add	r3, r2
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	011a      	lsls	r2, r3, #4
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	4413      	add	r3, r2
 8004d16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	801a      	strh	r2, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b3e      	cmp	r3, #62	; 0x3e
 8004d32:	d91d      	bls.n	8004d70 <USB_ActivateEndpoint+0x2ac>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	095b      	lsrs	r3, r3, #5
 8004d3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d102      	bne.n	8004d4e <USB_ActivateEndpoint+0x28a>
 8004d48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	029b      	lsls	r3, r3, #10
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	e026      	b.n	8004dbe <USB_ActivateEndpoint+0x2fa>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <USB_ActivateEndpoint+0x2ca>
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	801a      	strh	r2, [r3, #0]
 8004d8c:	e017      	b.n	8004dbe <USB_ActivateEndpoint+0x2fa>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <USB_ActivateEndpoint+0x2e4>
 8004da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004da4:	3301      	adds	r3, #1
 8004da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	029b      	lsls	r3, r3, #10
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	4313      	orrs	r3, r2
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	847b      	strh	r3, [r7, #34]	; 0x22
 8004dcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01b      	beq.n	8004e0e <USB_ActivateEndpoint+0x34a>
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dec:	843b      	strh	r3, [r7, #32]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	441a      	add	r2, r3
 8004df8:	8c3b      	ldrh	r3, [r7, #32]
 8004dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d124      	bne.n	8004e60 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2c:	83bb      	strh	r3, [r7, #28]
 8004e2e:	8bbb      	ldrh	r3, [r7, #28]
 8004e30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e34:	83bb      	strh	r3, [r7, #28]
 8004e36:	8bbb      	ldrh	r3, [r7, #28]
 8004e38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e3c:	83bb      	strh	r3, [r7, #28]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	8bbb      	ldrh	r3, [r7, #28]
 8004e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8013      	strh	r3, [r2, #0]
 8004e5e:	e1ea      	b.n	8005236 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	83fb      	strh	r3, [r7, #30]
 8004e78:	8bfb      	ldrh	r3, [r7, #30]
 8004e7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e7e:	83fb      	strh	r3, [r7, #30]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	441a      	add	r2, r3
 8004e8a:	8bfb      	ldrh	r3, [r7, #30]
 8004e8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	8013      	strh	r3, [r2, #0]
 8004ea0:	e1c9      	b.n	8005236 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	78db      	ldrb	r3, [r3, #3]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d11e      	bne.n	8004ee8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	441a      	add	r2, r3
 8004ece:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eda:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	8013      	strh	r3, [r2, #0]
 8004ee6:	e01d      	b.n	8004f24 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	461a      	mov	r2, r3
 8004f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f34:	4413      	add	r3, r2
 8004f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	011a      	lsls	r2, r3, #4
 8004f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f46:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	891b      	ldrh	r3, [r3, #8]
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f56:	801a      	strh	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f68:	4413      	add	r3, r2
 8004f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	011a      	lsls	r2, r3, #4
 8004f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	895b      	ldrh	r3, [r3, #10]
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f040 8093 	bne.w	80050bc <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004fa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d01b      	beq.n	8004fea <USB_ActivateEndpoint+0x526>
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004ff8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01b      	beq.n	800503a <USB_ActivateEndpoint+0x576>
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005018:	877b      	strh	r3, [r7, #58]	; 0x3a
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	441a      	add	r2, r3
 8005024:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005032:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005036:	b29b      	uxth	r3, r3
 8005038:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	b29b      	uxth	r3, r3
 8005048:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005050:	873b      	strh	r3, [r7, #56]	; 0x38
 8005052:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005054:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005058:	873b      	strh	r3, [r7, #56]	; 0x38
 800505a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800505c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005060:	873b      	strh	r3, [r7, #56]	; 0x38
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005098:	86fb      	strh	r3, [r7, #54]	; 0x36
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	8013      	strh	r3, [r2, #0]
 80050ba:	e0bc      	b.n	8005236 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80050cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01d      	beq.n	8005114 <USB_ActivateEndpoint+0x650>
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800510c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005124:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d01d      	beq.n	800516c <USB_ActivateEndpoint+0x6a8>
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	881b      	ldrh	r3, [r3, #0]
 800513c:	b29b      	uxth	r3, r3
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	441a      	add	r2, r3
 8005154:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005164:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005168:	b29b      	uxth	r3, r3
 800516a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	78db      	ldrb	r3, [r3, #3]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d024      	beq.n	80051be <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800518a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800518e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005192:	f083 0320 	eor.w	r3, r3, #32
 8005196:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	8013      	strh	r3, [r2, #0]
 80051bc:	e01d      	b.n	80051fa <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	441a      	add	r2, r3
 80051e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005210:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005232:	b29b      	uxth	r3, r3
 8005234:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800523a:	4618      	mov	r0, r3
 800523c:	3774      	adds	r7, #116	; 0x74
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr

08005244 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005244:	b480      	push	{r7}
 8005246:	b08d      	sub	sp, #52	; 0x34
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	7b1b      	ldrb	r3, [r3, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	f040 808e 	bne.w	8005374 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d044      	beq.n	80052ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	81bb      	strh	r3, [r7, #12]
 800526e:	89bb      	ldrh	r3, [r7, #12]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01b      	beq.n	80052b0 <USB_DeactivateEndpoint+0x6c>
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	817b      	strh	r3, [r7, #10]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	897b      	ldrh	r3, [r7, #10]
 800529c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c6:	813b      	strh	r3, [r7, #8]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	441a      	add	r2, r3
 80052d2:	893b      	ldrh	r3, [r7, #8]
 80052d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	8013      	strh	r3, [r2, #0]
 80052e8:	e192      	b.n	8005610 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	827b      	strh	r3, [r7, #18]
 80052f8:	8a7b      	ldrh	r3, [r7, #18]
 80052fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01b      	beq.n	800533a <USB_DeactivateEndpoint+0xf6>
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005318:	823b      	strh	r3, [r7, #16]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	441a      	add	r2, r3
 8005324:	8a3b      	ldrh	r3, [r7, #16]
 8005326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005336:	b29b      	uxth	r3, r3
 8005338:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	81fb      	strh	r3, [r7, #14]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	89fb      	ldrh	r3, [r7, #14]
 800535e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536e:	b29b      	uxth	r3, r3
 8005370:	8013      	strh	r3, [r2, #0]
 8005372:	e14d      	b.n	8005610 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	2b00      	cmp	r3, #0
 800537a:	f040 80a5 	bne.w	80054c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	843b      	strh	r3, [r7, #32]
 800538c:	8c3b      	ldrh	r3, [r7, #32]
 800538e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d01b      	beq.n	80053ce <USB_DeactivateEndpoint+0x18a>
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ac:	83fb      	strh	r3, [r7, #30]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	441a      	add	r2, r3
 80053b8:	8bfb      	ldrh	r3, [r7, #30]
 80053ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	83bb      	strh	r3, [r7, #28]
 80053dc:	8bbb      	ldrh	r3, [r7, #28]
 80053de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01b      	beq.n	800541e <USB_DeactivateEndpoint+0x1da>
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fc:	837b      	strh	r3, [r7, #26]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	441a      	add	r2, r3
 8005408:	8b7b      	ldrh	r3, [r7, #26]
 800540a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005416:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800541a:	b29b      	uxth	r3, r3
 800541c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005434:	833b      	strh	r3, [r7, #24]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	441a      	add	r2, r3
 8005440:	8b3b      	ldrh	r3, [r7, #24]
 8005442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005452:	b29b      	uxth	r3, r3
 8005454:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546c:	82fb      	strh	r3, [r7, #22]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	8afb      	ldrh	r3, [r7, #22]
 800547a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548a:	b29b      	uxth	r3, r3
 800548c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a4:	82bb      	strh	r3, [r7, #20]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	441a      	add	r2, r3
 80054b0:	8abb      	ldrh	r3, [r7, #20]
 80054b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	8013      	strh	r3, [r2, #0]
 80054c6:	e0a3      	b.n	8005610 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80054d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01b      	beq.n	8005518 <USB_DeactivateEndpoint+0x2d4>
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800550c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005514:	b29b      	uxth	r3, r3
 8005516:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005526:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01b      	beq.n	8005568 <USB_DeactivateEndpoint+0x324>
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	853b      	strh	r3, [r7, #40]	; 0x28
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	441a      	add	r2, r3
 8005552:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005560:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005564:	b29b      	uxth	r3, r3
 8005566:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	441a      	add	r2, r3
 800558a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800558c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559c:	b29b      	uxth	r3, r3
 800559e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	441a      	add	r2, r3
 80055c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	441a      	add	r2, r3
 80055fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560c:	b29b      	uxth	r3, r3
 800560e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3734      	adds	r7, #52	; 0x34
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b0c2      	sub	sp, #264	; 0x108
 8005620:	af00      	add	r7, sp, #0
 8005622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800562a:	6018      	str	r0, [r3, #0]
 800562c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005634:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	2b01      	cmp	r3, #1
 8005644:	f040 86b7 	bne.w	80063b6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	699a      	ldr	r2, [r3, #24]
 8005654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	429a      	cmp	r2, r3
 8005662:	d908      	bls.n	8005676 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005674:	e007      	b.n	8005686 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800567a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800568a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	7b1b      	ldrb	r3, [r3, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d13a      	bne.n	800570c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800569a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6959      	ldr	r1, [r3, #20]
 80056a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	88da      	ldrh	r2, [r3, #6]
 80056ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80056b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056bc:	6800      	ldr	r0, [r0, #0]
 80056be:	f001 fc9c 	bl	8006ffa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056dc:	b29b      	uxth	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4413      	add	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	011a      	lsls	r2, r3, #4
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	4413      	add	r3, r2
 80056f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	f000 be1f 	b.w	800634a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800570c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	78db      	ldrb	r3, [r3, #3]
 8005718:	2b02      	cmp	r3, #2
 800571a:	f040 8462 	bne.w	8005fe2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800571e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6a1a      	ldr	r2, [r3, #32]
 800572a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800572e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	429a      	cmp	r2, r3
 8005738:	f240 83df 	bls.w	8005efa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800573c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	441a      	add	r2, r3
 8005780:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800578c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005794:	b29b      	uxth	r3, r3
 8005796:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6a1a      	ldr	r2, [r3, #32]
 80057a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a8:	1ad2      	subs	r2, r2, r3
 80057aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 81c7 	beq.w	8005b6c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	633b      	str	r3, [r7, #48]	; 0x30
 80057ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d177      	bne.n	80058ea <USB_EPStartXfer+0x2ce>
 80057fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	62bb      	str	r3, [r7, #40]	; 0x28
 8005806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005814:	b29b      	uxth	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	4413      	add	r3, r2
 800581c:	62bb      	str	r3, [r7, #40]	; 0x28
 800581e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	011a      	lsls	r2, r3, #4
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	4413      	add	r3, r2
 8005830:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005840:	b29a      	uxth	r2, r3
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800584a:	2b3e      	cmp	r3, #62	; 0x3e
 800584c:	d921      	bls.n	8005892 <USB_EPStartXfer+0x276>
 800584e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	2b00      	cmp	r3, #0
 8005862:	d104      	bne.n	800586e <USB_EPStartXfer+0x252>
 8005864:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005868:	3b01      	subs	r3, #1
 800586a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29a      	uxth	r2, r3
 8005874:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005878:	b29b      	uxth	r3, r3
 800587a:	029b      	lsls	r3, r3, #10
 800587c:	b29b      	uxth	r3, r3
 800587e:	4313      	orrs	r3, r2
 8005880:	b29b      	uxth	r3, r3
 8005882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588a:	b29a      	uxth	r2, r3
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	e050      	b.n	8005934 <USB_EPStartXfer+0x318>
 8005892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <USB_EPStartXfer+0x294>
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	801a      	strh	r2, [r3, #0]
 80058ae:	e041      	b.n	8005934 <USB_EPStartXfer+0x318>
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <USB_EPStartXfer+0x2b4>
 80058c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058ca:	3301      	adds	r3, #1
 80058cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058da:	b29b      	uxth	r3, r3
 80058dc:	029b      	lsls	r3, r3, #10
 80058de:	b29b      	uxth	r3, r3
 80058e0:	4313      	orrs	r3, r2
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	e024      	b.n	8005934 <USB_EPStartXfer+0x318>
 80058ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	785b      	ldrb	r3, [r3, #1]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d11c      	bne.n	8005934 <USB_EPStartXfer+0x318>
 80058fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005908:	b29b      	uxth	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	4413      	add	r3, r2
 8005910:	633b      	str	r3, [r7, #48]	; 0x30
 8005912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	011a      	lsls	r2, r3, #4
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	4413      	add	r3, r2
 8005924:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800592a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592e:	b29a      	uxth	r2, r3
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005932:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	895b      	ldrh	r3, [r3, #10]
 8005940:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6959      	ldr	r1, [r3, #20]
 8005950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005954:	b29b      	uxth	r3, r3
 8005956:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800595a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800595e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005962:	6800      	ldr	r0, [r0, #0]
 8005964:	f001 fb49 	bl	8006ffa <USB_WritePMA>
            ep->xfer_buff += len;
 8005968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695a      	ldr	r2, [r3, #20]
 8005974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005978:	441a      	add	r2, r3
 800597a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6a1a      	ldr	r2, [r3, #32]
 8005992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d90f      	bls.n	80059c2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80059a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6a1a      	ldr	r2, [r3, #32]
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b2:	1ad2      	subs	r2, r2, r3
 80059b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	621a      	str	r2, [r3, #32]
 80059c0:	e00e      	b.n	80059e0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80059c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80059d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2200      	movs	r2, #0
 80059de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d177      	bne.n	8005ae0 <USB_EPStartXfer+0x4c4>
 80059f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	61bb      	str	r3, [r7, #24]
 80059fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	4413      	add	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
 8005a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	011a      	lsls	r2, r3, #4
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	4413      	add	r3, r2
 8005a26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	801a      	strh	r2, [r3, #0]
 8005a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a40:	2b3e      	cmp	r3, #62	; 0x3e
 8005a42:	d921      	bls.n	8005a88 <USB_EPStartXfer+0x46c>
 8005a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a52:	f003 031f 	and.w	r3, r3, #31
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d104      	bne.n	8005a64 <USB_EPStartXfer+0x448>
 8005a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	029b      	lsls	r3, r3, #10
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	4313      	orrs	r3, r2
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	e056      	b.n	8005b36 <USB_EPStartXfer+0x51a>
 8005a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <USB_EPStartXfer+0x48a>
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	e047      	b.n	8005b36 <USB_EPStartXfer+0x51a>
 8005aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d004      	beq.n	8005ac6 <USB_EPStartXfer+0x4aa>
 8005abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	029b      	lsls	r3, r3, #10
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	801a      	strh	r2, [r3, #0]
 8005ade:	e02a      	b.n	8005b36 <USB_EPStartXfer+0x51a>
 8005ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d122      	bne.n	8005b36 <USB_EPStartXfer+0x51a>
 8005af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	4413      	add	r3, r2
 8005b12:	623b      	str	r3, [r7, #32]
 8005b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	011a      	lsls	r2, r3, #4
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	4413      	add	r3, r2
 8005b26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	891b      	ldrh	r3, [r3, #8]
 8005b42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6959      	ldr	r1, [r3, #20]
 8005b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b64:	6800      	ldr	r0, [r0, #0]
 8005b66:	f001 fa48 	bl	8006ffa <USB_WritePMA>
 8005b6a:	e3ee      	b.n	800634a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	785b      	ldrb	r3, [r3, #1]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d177      	bne.n	8005c6c <USB_EPStartXfer+0x650>
 8005b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b9c:	4413      	add	r3, r2
 8005b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	011a      	lsls	r2, r3, #4
 8005bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8005bce:	d921      	bls.n	8005c14 <USB_EPStartXfer+0x5f8>
 8005bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <USB_EPStartXfer+0x5d4>
 8005be6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bea:	3b01      	subs	r3, #1
 8005bec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	029b      	lsls	r3, r3, #10
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	4313      	orrs	r3, r2
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c10:	801a      	strh	r2, [r3, #0]
 8005c12:	e056      	b.n	8005cc2 <USB_EPStartXfer+0x6a6>
 8005c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <USB_EPStartXfer+0x616>
 8005c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c2e:	801a      	strh	r2, [r3, #0]
 8005c30:	e047      	b.n	8005cc2 <USB_EPStartXfer+0x6a6>
 8005c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d004      	beq.n	8005c52 <USB_EPStartXfer+0x636>
 8005c48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	029b      	lsls	r3, r3, #10
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	4313      	orrs	r3, r2
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c68:	801a      	strh	r2, [r3, #0]
 8005c6a:	e02a      	b.n	8005cc2 <USB_EPStartXfer+0x6a6>
 8005c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d122      	bne.n	8005cc2 <USB_EPStartXfer+0x6a6>
 8005c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	653b      	str	r3, [r7, #80]	; 0x50
 8005c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c9c:	4413      	add	r3, r2
 8005c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	011a      	lsls	r2, r3, #4
 8005cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	891b      	ldrh	r3, [r3, #8]
 8005cce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6959      	ldr	r1, [r3, #20]
 8005cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ce8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005cec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005cf0:	6800      	ldr	r0, [r0, #0]
 8005cf2:	f001 f982 	bl	8006ffa <USB_WritePMA>
            ep->xfer_buff += len;
 8005cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695a      	ldr	r2, [r3, #20]
 8005d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d06:	441a      	add	r2, r3
 8005d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6a1a      	ldr	r2, [r3, #32]
 8005d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d90f      	bls.n	8005d50 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6a1a      	ldr	r2, [r3, #32]
 8005d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d40:	1ad2      	subs	r2, r2, r3
 8005d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	621a      	str	r2, [r3, #32]
 8005d4e:	e00e      	b.n	8005d6e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	643b      	str	r3, [r7, #64]	; 0x40
 8005d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d177      	bne.n	8005e7a <USB_EPStartXfer+0x85e>
 8005d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	4413      	add	r3, r2
 8005dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	011a      	lsls	r2, r3, #4
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dda:	2b3e      	cmp	r3, #62	; 0x3e
 8005ddc:	d921      	bls.n	8005e22 <USB_EPStartXfer+0x806>
 8005dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <USB_EPStartXfer+0x7e2>
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	029b      	lsls	r3, r3, #10
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	e050      	b.n	8005ec4 <USB_EPStartXfer+0x8a8>
 8005e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <USB_EPStartXfer+0x824>
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3c:	801a      	strh	r2, [r3, #0]
 8005e3e:	e041      	b.n	8005ec4 <USB_EPStartXfer+0x8a8>
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <USB_EPStartXfer+0x844>
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	029b      	lsls	r3, r3, #10
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	4313      	orrs	r3, r2
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	e024      	b.n	8005ec4 <USB_EPStartXfer+0x8a8>
 8005e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	785b      	ldrb	r3, [r3, #1]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d11c      	bne.n	8005ec4 <USB_EPStartXfer+0x8a8>
 8005e8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9e:	4413      	add	r3, r2
 8005ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	011a      	lsls	r2, r3, #4
 8005eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	895b      	ldrh	r3, [r3, #10]
 8005ed0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6959      	ldr	r1, [r3, #20]
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005eea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005eee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ef2:	6800      	ldr	r0, [r0, #0]
 8005ef4:	f001 f881 	bl	8006ffa <USB_WritePMA>
 8005ef8:	e227      	b.n	800634a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	441a      	add	r2, r3
 8005f4e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f86:	4413      	add	r3, r2
 8005f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	011a      	lsls	r2, r3, #4
 8005f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005faa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	891b      	ldrh	r3, [r3, #8]
 8005fb8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6959      	ldr	r1, [r3, #20]
 8005fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005fd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005fd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005fda:	6800      	ldr	r0, [r0, #0]
 8005fdc:	f001 f80d 	bl	8006ffa <USB_WritePMA>
 8005fe0:	e1b3      	b.n	800634a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6a1a      	ldr	r2, [r3, #32]
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff2:	1ad2      	subs	r2, r2, r3
 8005ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 80c6 	beq.w	80061b4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	673b      	str	r3, [r7, #112]	; 0x70
 8006034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d177      	bne.n	8006134 <USB_EPStartXfer+0xb18>
 8006044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006048:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605e:	b29b      	uxth	r3, r3
 8006060:	461a      	mov	r2, r3
 8006062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006064:	4413      	add	r3, r2
 8006066:	66bb      	str	r3, [r7, #104]	; 0x68
 8006068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	011a      	lsls	r2, r3, #4
 8006076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006078:	4413      	add	r3, r2
 800607a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800607e:	667b      	str	r3, [r7, #100]	; 0x64
 8006080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800608a:	b29a      	uxth	r2, r3
 800608c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800608e:	801a      	strh	r2, [r3, #0]
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006094:	2b3e      	cmp	r3, #62	; 0x3e
 8006096:	d921      	bls.n	80060dc <USB_EPStartXfer+0xac0>
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609c:	095b      	lsrs	r3, r3, #5
 800609e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d104      	bne.n	80060b8 <USB_EPStartXfer+0xa9c>
 80060ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060b2:	3b01      	subs	r3, #1
 80060b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29a      	uxth	r2, r3
 80060be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	029b      	lsls	r3, r3, #10
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	4313      	orrs	r3, r2
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060d8:	801a      	strh	r2, [r3, #0]
 80060da:	e050      	b.n	800617e <USB_EPStartXfer+0xb62>
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <USB_EPStartXfer+0xade>
 80060e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060f6:	801a      	strh	r2, [r3, #0]
 80060f8:	e041      	b.n	800617e <USB_EPStartXfer+0xb62>
 80060fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <USB_EPStartXfer+0xafe>
 8006110:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006114:	3301      	adds	r3, #1
 8006116:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800611a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29a      	uxth	r2, r3
 8006120:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006124:	b29b      	uxth	r3, r3
 8006126:	029b      	lsls	r3, r3, #10
 8006128:	b29b      	uxth	r3, r3
 800612a:	4313      	orrs	r3, r2
 800612c:	b29a      	uxth	r2, r3
 800612e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006130:	801a      	strh	r2, [r3, #0]
 8006132:	e024      	b.n	800617e <USB_EPStartXfer+0xb62>
 8006134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d11c      	bne.n	800617e <USB_EPStartXfer+0xb62>
 8006144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006152:	b29b      	uxth	r3, r3
 8006154:	461a      	mov	r2, r3
 8006156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006158:	4413      	add	r3, r2
 800615a:	673b      	str	r3, [r7, #112]	; 0x70
 800615c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	011a      	lsls	r2, r3, #4
 800616a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800616c:	4413      	add	r3, r2
 800616e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006172:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006178:	b29a      	uxth	r2, r3
 800617a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800617e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	895b      	ldrh	r3, [r3, #10]
 800618a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800618e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6959      	ldr	r1, [r3, #20]
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80061a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80061a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80061ac:	6800      	ldr	r0, [r0, #0]
 80061ae:	f000 ff24 	bl	8006ffa <USB_WritePMA>
 80061b2:	e0ca      	b.n	800634a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d177      	bne.n	80062b4 <USB_EPStartXfer+0xc98>
 80061c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061de:	b29b      	uxth	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061e4:	4413      	add	r3, r2
 80061e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	011a      	lsls	r2, r3, #4
 80061f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061f8:	4413      	add	r3, r2
 80061fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8006200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800620a:	b29a      	uxth	r2, r3
 800620c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800620e:	801a      	strh	r2, [r3, #0]
 8006210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006214:	2b3e      	cmp	r3, #62	; 0x3e
 8006216:	d921      	bls.n	800625c <USB_EPStartXfer+0xc40>
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2b00      	cmp	r3, #0
 800622c:	d104      	bne.n	8006238 <USB_EPStartXfer+0xc1c>
 800622e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006232:	3b01      	subs	r3, #1
 8006234:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29a      	uxth	r2, r3
 800623e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006242:	b29b      	uxth	r3, r3
 8006244:	029b      	lsls	r3, r3, #10
 8006246:	b29b      	uxth	r3, r3
 8006248:	4313      	orrs	r3, r2
 800624a:	b29b      	uxth	r3, r3
 800624c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006254:	b29a      	uxth	r2, r3
 8006256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	e05c      	b.n	8006316 <USB_EPStartXfer+0xcfa>
 800625c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <USB_EPStartXfer+0xc5e>
 8006264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29b      	uxth	r3, r3
 800626a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800626e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006272:	b29a      	uxth	r2, r3
 8006274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006276:	801a      	strh	r2, [r3, #0]
 8006278:	e04d      	b.n	8006316 <USB_EPStartXfer+0xcfa>
 800627a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d004      	beq.n	800629a <USB_EPStartXfer+0xc7e>
 8006290:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006294:	3301      	adds	r3, #1
 8006296:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800629a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	029b      	lsls	r3, r3, #10
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	4313      	orrs	r3, r2
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	e030      	b.n	8006316 <USB_EPStartXfer+0xcfa>
 80062b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d128      	bne.n	8006316 <USB_EPStartXfer+0xcfa>
 80062c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062e8:	4413      	add	r3, r2
 80062ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	011a      	lsls	r2, r3, #4
 80062fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006300:	4413      	add	r3, r2
 8006302:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006306:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800630a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800630e:	b29a      	uxth	r2, r3
 8006310:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006314:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	891b      	ldrh	r3, [r3, #8]
 8006322:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6959      	ldr	r1, [r3, #20]
 8006332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006336:	b29b      	uxth	r3, r3
 8006338:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800633c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006340:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006344:	6800      	ldr	r0, [r0, #0]
 8006346:	f000 fe58 	bl	8006ffa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800634a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800634e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800636c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006370:	817b      	strh	r3, [r7, #10]
 8006372:	897b      	ldrh	r3, [r7, #10]
 8006374:	f083 0310 	eor.w	r3, r3, #16
 8006378:	817b      	strh	r3, [r7, #10]
 800637a:	897b      	ldrh	r3, [r7, #10]
 800637c:	f083 0320 	eor.w	r3, r3, #32
 8006380:	817b      	strh	r3, [r7, #10]
 8006382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	441a      	add	r2, r3
 800639c:	897b      	ldrh	r3, [r7, #10]
 800639e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	8013      	strh	r3, [r2, #0]
 80063b2:	f000 bcde 	b.w	8006d72 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80063b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	7b1b      	ldrb	r3, [r3, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f040 80bb 	bne.w	800653e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80063c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	699a      	ldr	r2, [r3, #24]
 80063d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d917      	bls.n	8006414 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80063e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80063f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699a      	ldr	r2, [r3, #24]
 8006400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006404:	1ad2      	subs	r2, r2, r3
 8006406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800640a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	619a      	str	r2, [r3, #24]
 8006412:	e00e      	b.n	8006432 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8006424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2200      	movs	r2, #0
 8006430:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006436:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006444:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644e:	b29b      	uxth	r3, r3
 8006450:	461a      	mov	r2, r3
 8006452:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006456:	4413      	add	r3, r2
 8006458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800645c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	011a      	lsls	r2, r3, #4
 800646a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800646e:	4413      	add	r3, r2
 8006470:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006474:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006484:	b29a      	uxth	r2, r3
 8006486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006490:	2b3e      	cmp	r3, #62	; 0x3e
 8006492:	d924      	bls.n	80064de <USB_EPStartXfer+0xec2>
 8006494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <USB_EPStartXfer+0xe98>
 80064aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064ae:	3b01      	subs	r3, #1
 80064b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	029b      	lsls	r3, r3, #10
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	4313      	orrs	r3, r2
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	f000 bc10 	b.w	8006cfe <USB_EPStartXfer+0x16e2>
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10c      	bne.n	8006500 <USB_EPStartXfer+0xee4>
 80064e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e3fe      	b.n	8006cfe <USB_EPStartXfer+0x16e2>
 8006500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006504:	085b      	lsrs	r3, r3, #1
 8006506:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800650a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d004      	beq.n	8006520 <USB_EPStartXfer+0xf04>
 8006516:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800651a:	3301      	adds	r3, #1
 800651c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29a      	uxth	r2, r3
 8006528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800652c:	b29b      	uxth	r3, r3
 800652e:	029b      	lsls	r3, r3, #10
 8006530:	b29b      	uxth	r3, r3
 8006532:	4313      	orrs	r3, r2
 8006534:	b29a      	uxth	r2, r3
 8006536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800653a:	801a      	strh	r2, [r3, #0]
 800653c:	e3df      	b.n	8006cfe <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800653e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	78db      	ldrb	r3, [r3, #3]
 800654a:	2b02      	cmp	r3, #2
 800654c:	f040 8218 	bne.w	8006980 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f040 809d 	bne.w	800669c <USB_EPStartXfer+0x1080>
 8006562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800657e:	b29b      	uxth	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006586:	4413      	add	r3, r2
 8006588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800658c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	011a      	lsls	r2, r3, #4
 800659a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800659e:	4413      	add	r3, r2
 80065a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065ba:	801a      	strh	r2, [r3, #0]
 80065bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	2b3e      	cmp	r3, #62	; 0x3e
 80065ca:	d92b      	bls.n	8006624 <USB_EPStartXfer+0x1008>
 80065cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	f003 031f 	and.w	r3, r3, #31
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d104      	bne.n	80065fc <USB_EPStartXfer+0xfe0>
 80065f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f6:	3b01      	subs	r3, #1
 80065f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29a      	uxth	r2, r3
 8006604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006608:	b29b      	uxth	r3, r3
 800660a:	029b      	lsls	r3, r3, #10
 800660c:	b29b      	uxth	r3, r3
 800660e:	4313      	orrs	r3, r2
 8006610:	b29b      	uxth	r3, r3
 8006612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	e070      	b.n	8006706 <USB_EPStartXfer+0x10ea>
 8006624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10c      	bne.n	800664e <USB_EPStartXfer+0x1032>
 8006634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006644:	b29a      	uxth	r2, r3
 8006646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800664a:	801a      	strh	r2, [r3, #0]
 800664c:	e05b      	b.n	8006706 <USB_EPStartXfer+0x10ea>
 800664e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <USB_EPStartXfer+0x1062>
 8006674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006678:	3301      	adds	r3, #1
 800667a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800667e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29a      	uxth	r2, r3
 8006686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668a:	b29b      	uxth	r3, r3
 800668c:	029b      	lsls	r3, r3, #10
 800668e:	b29b      	uxth	r3, r3
 8006690:	4313      	orrs	r3, r2
 8006692:	b29a      	uxth	r2, r3
 8006694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006698:	801a      	strh	r2, [r3, #0]
 800669a:	e034      	b.n	8006706 <USB_EPStartXfer+0x10ea>
 800669c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	785b      	ldrb	r3, [r3, #1]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d12c      	bne.n	8006706 <USB_EPStartXfer+0x10ea>
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	461a      	mov	r2, r3
 80066cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066d0:	4413      	add	r3, r2
 80066d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	011a      	lsls	r2, r3, #4
 80066e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066e8:	4413      	add	r3, r2
 80066ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	b29a      	uxth	r2, r3
 8006700:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f040 809d 	bne.w	8006860 <USB_EPStartXfer+0x1244>
 8006726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006742:	b29b      	uxth	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800674a:	4413      	add	r3, r2
 800674c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	011a      	lsls	r2, r3, #4
 800675e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006762:	4413      	add	r3, r2
 8006764:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800676c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006778:	b29a      	uxth	r2, r3
 800677a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b3e      	cmp	r3, #62	; 0x3e
 800678e:	d92b      	bls.n	80067e8 <USB_EPStartXfer+0x11cc>
 8006790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 031f 	and.w	r3, r3, #31
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <USB_EPStartXfer+0x11a4>
 80067b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ba:	3b01      	subs	r3, #1
 80067bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	029b      	lsls	r3, r3, #10
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	4313      	orrs	r3, r2
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067de:	b29a      	uxth	r2, r3
 80067e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	e069      	b.n	80068bc <USB_EPStartXfer+0x12a0>
 80067e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10c      	bne.n	8006812 <USB_EPStartXfer+0x11f6>
 80067f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006808:	b29a      	uxth	r2, r3
 800680a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800680e:	801a      	strh	r2, [r3, #0]
 8006810:	e054      	b.n	80068bc <USB_EPStartXfer+0x12a0>
 8006812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <USB_EPStartXfer+0x1226>
 8006838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683c:	3301      	adds	r3, #1
 800683e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006842:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29a      	uxth	r2, r3
 800684a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684e:	b29b      	uxth	r3, r3
 8006850:	029b      	lsls	r3, r3, #10
 8006852:	b29b      	uxth	r3, r3
 8006854:	4313      	orrs	r3, r2
 8006856:	b29a      	uxth	r2, r3
 8006858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800685c:	801a      	strh	r2, [r3, #0]
 800685e:	e02d      	b.n	80068bc <USB_EPStartXfer+0x12a0>
 8006860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d125      	bne.n	80068bc <USB_EPStartXfer+0x12a0>
 8006870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800687e:	b29b      	uxth	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006886:	4413      	add	r3, r2
 8006888:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800688c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	011a      	lsls	r2, r3, #4
 800689a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800689e:	4413      	add	r3, r2
 80068a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80068bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8218 	beq.w	8006cfe <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80068ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80068ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d005      	beq.n	8006906 <USB_EPStartXfer+0x12ea>
 80068fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80068fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10d      	bne.n	8006922 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006906:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800690a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800690e:	2b00      	cmp	r3, #0
 8006910:	f040 81f5 	bne.w	8006cfe <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006914:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691c:	2b00      	cmp	r3, #0
 800691e:	f040 81ee 	bne.w	8006cfe <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006948:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800694c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800695a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	441a      	add	r2, r3
 8006966:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800696a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006976:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800697a:	b29b      	uxth	r3, r3
 800697c:	8013      	strh	r3, [r2, #0]
 800697e:	e1be      	b.n	8006cfe <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	78db      	ldrb	r3, [r3, #3]
 800698c:	2b01      	cmp	r3, #1
 800698e:	f040 81b4 	bne.w	8006cfa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d917      	bls.n	80069de <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80069ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80069be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699a      	ldr	r2, [r3, #24]
 80069ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ce:	1ad2      	subs	r2, r2, r3
 80069d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	619a      	str	r2, [r3, #24]
 80069dc:	e00e      	b.n	80069fc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80069de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80069ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2200      	movs	r2, #0
 80069fa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80069fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	785b      	ldrb	r3, [r3, #1]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f040 8085 	bne.w	8006b18 <USB_EPStartXfer+0x14fc>
 8006a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a32:	4413      	add	r3, r2
 8006a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	011a      	lsls	r2, r3, #4
 8006a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a66:	801a      	strh	r2, [r3, #0]
 8006a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a6e:	d923      	bls.n	8006ab8 <USB_EPStartXfer+0x149c>
 8006a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a7e:	f003 031f 	and.w	r3, r3, #31
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d104      	bne.n	8006a90 <USB_EPStartXfer+0x1474>
 8006a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	029b      	lsls	r3, r3, #10
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ab4:	801a      	strh	r2, [r3, #0]
 8006ab6:	e060      	b.n	8006b7a <USB_EPStartXfer+0x155e>
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10c      	bne.n	8006ada <USB_EPStartXfer+0x14be>
 8006ac0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ad6:	801a      	strh	r2, [r3, #0]
 8006ad8:	e04f      	b.n	8006b7a <USB_EPStartXfer+0x155e>
 8006ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <USB_EPStartXfer+0x14de>
 8006af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af4:	3301      	adds	r3, #1
 8006af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	029b      	lsls	r3, r3, #10
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b14:	801a      	strh	r2, [r3, #0]
 8006b16:	e030      	b.n	8006b7a <USB_EPStartXfer+0x155e>
 8006b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	785b      	ldrb	r3, [r3, #1]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d128      	bne.n	8006b7a <USB_EPStartXfer+0x155e>
 8006b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	011a      	lsls	r2, r3, #4
 8006b60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b64:	4413      	add	r3, r2
 8006b66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b78:	801a      	strh	r2, [r3, #0]
 8006b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f040 8085 	bne.w	8006ca4 <USB_EPStartXfer+0x1688>
 8006b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	011a      	lsls	r2, r3, #4
 8006bd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bf2:	801a      	strh	r2, [r3, #0]
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf8:	2b3e      	cmp	r3, #62	; 0x3e
 8006bfa:	d923      	bls.n	8006c44 <USB_EPStartXfer+0x1628>
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c00:	095b      	lsrs	r3, r3, #5
 8006c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c0a:	f003 031f 	and.w	r3, r3, #31
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d104      	bne.n	8006c1c <USB_EPStartXfer+0x1600>
 8006c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c16:	3b01      	subs	r3, #1
 8006c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	029b      	lsls	r3, r3, #10
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c40:	801a      	strh	r2, [r3, #0]
 8006c42:	e05c      	b.n	8006cfe <USB_EPStartXfer+0x16e2>
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10c      	bne.n	8006c66 <USB_EPStartXfer+0x164a>
 8006c4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	e04b      	b.n	8006cfe <USB_EPStartXfer+0x16e2>
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <USB_EPStartXfer+0x166a>
 8006c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c80:	3301      	adds	r3, #1
 8006c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	029b      	lsls	r3, r3, #10
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	e02c      	b.n	8006cfe <USB_EPStartXfer+0x16e2>
 8006ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d124      	bne.n	8006cfe <USB_EPStartXfer+0x16e2>
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cca:	4413      	add	r3, r2
 8006ccc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	011a      	lsls	r2, r3, #4
 8006cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cf6:	801a      	strh	r2, [r3, #0]
 8006cf8:	e001      	b.n	8006cfe <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e03a      	b.n	8006d74 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d24:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d30:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d3c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	441a      	add	r2, r3
 8006d5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b085      	sub	sp, #20
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d020      	beq.n	8006dd2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da6:	81bb      	strh	r3, [r7, #12]
 8006da8:	89bb      	ldrh	r3, [r7, #12]
 8006daa:	f083 0310 	eor.w	r3, r3, #16
 8006dae:	81bb      	strh	r3, [r7, #12]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	441a      	add	r2, r3
 8006dba:	89bb      	ldrh	r3, [r7, #12]
 8006dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	8013      	strh	r3, [r2, #0]
 8006dd0:	e01f      	b.n	8006e12 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de8:	81fb      	strh	r3, [r7, #14]
 8006dea:	89fb      	ldrh	r3, [r7, #14]
 8006dec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006df0:	81fb      	strh	r3, [r7, #14]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	441a      	add	r2, r3
 8006dfc:	89fb      	ldrh	r3, [r7, #14]
 8006dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr

08006e1e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b087      	sub	sp, #28
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	7b1b      	ldrb	r3, [r3, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f040 809d 	bne.w	8006f6c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	785b      	ldrb	r3, [r3, #1]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d04c      	beq.n	8006ed4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	823b      	strh	r3, [r7, #16]
 8006e48:	8a3b      	ldrh	r3, [r7, #16]
 8006e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01b      	beq.n	8006e8a <USB_EPClearStall+0x6c>
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e68:	81fb      	strh	r3, [r7, #14]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	441a      	add	r2, r3
 8006e74:	89fb      	ldrh	r3, [r7, #14]
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	78db      	ldrb	r3, [r3, #3]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d06c      	beq.n	8006f6c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea8:	81bb      	strh	r3, [r7, #12]
 8006eaa:	89bb      	ldrh	r3, [r7, #12]
 8006eac:	f083 0320 	eor.w	r3, r3, #32
 8006eb0:	81bb      	strh	r3, [r7, #12]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	441a      	add	r2, r3
 8006ebc:	89bb      	ldrh	r3, [r7, #12]
 8006ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	8013      	strh	r3, [r2, #0]
 8006ed2:	e04b      	b.n	8006f6c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	82fb      	strh	r3, [r7, #22]
 8006ee2:	8afb      	ldrh	r3, [r7, #22]
 8006ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01b      	beq.n	8006f24 <USB_EPClearStall+0x106>
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f02:	82bb      	strh	r3, [r7, #20]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	441a      	add	r2, r3
 8006f0e:	8abb      	ldrh	r3, [r7, #20]
 8006f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3a:	827b      	strh	r3, [r7, #18]
 8006f3c:	8a7b      	ldrh	r3, [r7, #18]
 8006f3e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f42:	827b      	strh	r3, [r7, #18]
 8006f44:	8a7b      	ldrh	r3, [r7, #18]
 8006f46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f4a:	827b      	strh	r3, [r7, #18]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	441a      	add	r2, r3
 8006f56:	8a7b      	ldrh	r3, [r7, #18]
 8006f58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr

08006f78 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d103      	bne.n	8006f92 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2280      	movs	r2, #128	; 0x80
 8006f8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr

08006f9e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bc80      	pop	{r7}
 8006fb0:	4770      	bx	lr

08006fb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr

08006fc6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b085      	sub	sp, #20
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bc80      	pop	{r7}
 8006fe2:	4770      	bx	lr

08006fe4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr

08006ffa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b08b      	sub	sp, #44	; 0x2c
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	4611      	mov	r1, r2
 8007006:	461a      	mov	r2, r3
 8007008:	460b      	mov	r3, r1
 800700a:	80fb      	strh	r3, [r7, #6]
 800700c:	4613      	mov	r3, r2
 800700e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007010:	88bb      	ldrh	r3, [r7, #4]
 8007012:	3301      	adds	r3, #1
 8007014:	085b      	lsrs	r3, r3, #1
 8007016:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	005a      	lsls	r2, r3, #1
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800702c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
 8007032:	e01e      	b.n	8007072 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	3301      	adds	r3, #1
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	b21a      	sxth	r2, r3
 8007044:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007048:	4313      	orrs	r3, r2
 800704a:	b21b      	sxth	r3, r3
 800704c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	8a7a      	ldrh	r2, [r7, #18]
 8007052:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	3302      	adds	r3, #2
 8007058:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	3302      	adds	r3, #2
 800705e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	3301      	adds	r3, #1
 8007064:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	3301      	adds	r3, #1
 800706a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	3b01      	subs	r3, #1
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1dd      	bne.n	8007034 <USB_WritePMA+0x3a>
  }
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	372c      	adds	r7, #44	; 0x2c
 800707e:	46bd      	mov	sp, r7
 8007080:	bc80      	pop	{r7}
 8007082:	4770      	bx	lr

08007084 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007084:	b480      	push	{r7}
 8007086:	b08b      	sub	sp, #44	; 0x2c
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	4611      	mov	r1, r2
 8007090:	461a      	mov	r2, r3
 8007092:	460b      	mov	r3, r1
 8007094:	80fb      	strh	r3, [r7, #6]
 8007096:	4613      	mov	r3, r2
 8007098:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800709a:	88bb      	ldrh	r3, [r7, #4]
 800709c:	085b      	lsrs	r3, r3, #1
 800709e:	b29b      	uxth	r3, r3
 80070a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	005a      	lsls	r2, r3, #1
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070b6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
 80070bc:	e01b      	b.n	80070f6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	3302      	adds	r3, #2
 80070ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	3301      	adds	r3, #1
 80070d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	0a1b      	lsrs	r3, r3, #8
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	3301      	adds	r3, #1
 80070e8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	3302      	adds	r3, #2
 80070ee:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	3b01      	subs	r3, #1
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e0      	bne.n	80070be <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80070fc:	88bb      	ldrh	r3, [r7, #4]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d007      	beq.n	8007118 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	b2da      	uxtb	r2, r3
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	701a      	strb	r2, [r3, #0]
  }
}
 8007118:	bf00      	nop
 800711a:	372c      	adds	r7, #44	; 0x2c
 800711c:	46bd      	mov	sp, r7
 800711e:	bc80      	pop	{r7}
 8007120:	4770      	bx	lr

08007122 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7c1b      	ldrb	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d115      	bne.n	8007166 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800713a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800713e:	2202      	movs	r2, #2
 8007140:	2181      	movs	r1, #129	; 0x81
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 fe9d 	bl	8008e82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800714e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007152:	2202      	movs	r2, #2
 8007154:	2101      	movs	r1, #1
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 fe93 	bl	8008e82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007164:	e012      	b.n	800718c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007166:	2340      	movs	r3, #64	; 0x40
 8007168:	2202      	movs	r2, #2
 800716a:	2181      	movs	r1, #129	; 0x81
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 fe88 	bl	8008e82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007178:	2340      	movs	r3, #64	; 0x40
 800717a:	2202      	movs	r2, #2
 800717c:	2101      	movs	r1, #1
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 fe7f 	bl	8008e82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800718c:	2308      	movs	r3, #8
 800718e:	2203      	movs	r2, #3
 8007190:	2182      	movs	r1, #130	; 0x82
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 fe75 	bl	8008e82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800719e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80071a2:	f001 ff95 	bl	80090d0 <USBD_static_malloc>
 80071a6:	4602      	mov	r2, r0
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
 80071bc:	e026      	b.n	800720c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	7c1b      	ldrb	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d109      	bne.n	80071fc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071f2:	2101      	movs	r1, #1
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 ff35 	bl	8009064 <USBD_LL_PrepareReceive>
 80071fa:	e007      	b.n	800720c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007202:	2340      	movs	r3, #64	; 0x40
 8007204:	2101      	movs	r1, #1
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 ff2c 	bl	8009064 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	460b      	mov	r3, r1
 8007220:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007226:	2181      	movs	r1, #129	; 0x81
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fe50 	bl	8008ece <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007234:	2101      	movs	r1, #1
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 fe49 	bl	8008ece <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007244:	2182      	movs	r1, #130	; 0x82
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 fe41 	bl	8008ece <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00e      	beq.n	800727a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726c:	4618      	mov	r0, r3
 800726e:	f001 ff3b 	bl	80090e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007294:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d039      	beq.n	8007322 <USBD_CDC_Setup+0x9e>
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d17f      	bne.n	80073b2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	88db      	ldrh	r3, [r3, #6]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d029      	beq.n	800730e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	b25b      	sxtb	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	da11      	bge.n	80072e8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80072d0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	88d2      	ldrh	r2, [r2, #6]
 80072d6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80072d8:	6939      	ldr	r1, [r7, #16]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	88db      	ldrh	r3, [r3, #6]
 80072de:	461a      	mov	r2, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 fa0a 	bl	80086fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80072e6:	e06b      	b.n	80073c0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	785a      	ldrb	r2, [r3, #1]
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	88db      	ldrh	r3, [r3, #6]
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80072fe:	6939      	ldr	r1, [r7, #16]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	88db      	ldrh	r3, [r3, #6]
 8007304:	461a      	mov	r2, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f001 fa25 	bl	8008756 <USBD_CtlPrepareRx>
      break;
 800730c:	e058      	b.n	80073c0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	7850      	ldrb	r0, [r2, #1]
 800731a:	2200      	movs	r2, #0
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	4798      	blx	r3
      break;
 8007320:	e04e      	b.n	80073c0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	2b0b      	cmp	r3, #11
 8007328:	d02e      	beq.n	8007388 <USBD_CDC_Setup+0x104>
 800732a:	2b0b      	cmp	r3, #11
 800732c:	dc38      	bgt.n	80073a0 <USBD_CDC_Setup+0x11c>
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <USBD_CDC_Setup+0xb4>
 8007332:	2b0a      	cmp	r3, #10
 8007334:	d014      	beq.n	8007360 <USBD_CDC_Setup+0xdc>
 8007336:	e033      	b.n	80073a0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733e:	2b03      	cmp	r3, #3
 8007340:	d107      	bne.n	8007352 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007342:	f107 030c 	add.w	r3, r7, #12
 8007346:	2202      	movs	r2, #2
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 f9d5 	bl	80086fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007350:	e02e      	b.n	80073b0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f001 f966 	bl	8008626 <USBD_CtlError>
            ret = USBD_FAIL;
 800735a:	2302      	movs	r3, #2
 800735c:	75fb      	strb	r3, [r7, #23]
          break;
 800735e:	e027      	b.n	80073b0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007366:	2b03      	cmp	r3, #3
 8007368:	d107      	bne.n	800737a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800736a:	f107 030f 	add.w	r3, r7, #15
 800736e:	2201      	movs	r2, #1
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f001 f9c1 	bl	80086fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007378:	e01a      	b.n	80073b0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f952 	bl	8008626 <USBD_CtlError>
            ret = USBD_FAIL;
 8007382:	2302      	movs	r3, #2
 8007384:	75fb      	strb	r3, [r7, #23]
          break;
 8007386:	e013      	b.n	80073b0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738e:	2b03      	cmp	r3, #3
 8007390:	d00d      	beq.n	80073ae <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 f946 	bl	8008626 <USBD_CtlError>
            ret = USBD_FAIL;
 800739a:	2302      	movs	r3, #2
 800739c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800739e:	e006      	b.n	80073ae <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 f93f 	bl	8008626 <USBD_CtlError>
          ret = USBD_FAIL;
 80073a8:	2302      	movs	r3, #2
 80073aa:	75fb      	strb	r3, [r7, #23]
          break;
 80073ac:	e000      	b.n	80073b0 <USBD_CDC_Setup+0x12c>
          break;
 80073ae:	bf00      	nop
      }
      break;
 80073b0:	e006      	b.n	80073c0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 f936 	bl	8008626 <USBD_CtlError>
      ret = USBD_FAIL;
 80073ba:	2302      	movs	r3, #2
 80073bc:	75fb      	strb	r3, [r7, #23]
      break;
 80073be:	bf00      	nop
  }

  return ret;
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073dc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073e4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d03a      	beq.n	8007466 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80073f0:	78fa      	ldrb	r2, [r7, #3]
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	331c      	adds	r3, #28
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d029      	beq.n	800745a <USBD_CDC_DataIn+0x90>
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	331c      	adds	r3, #28
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	78f9      	ldrb	r1, [r7, #3]
 800741a:	68b8      	ldr	r0, [r7, #8]
 800741c:	460b      	mov	r3, r1
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	440b      	add	r3, r1
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	4403      	add	r3, r0
 8007426:	3338      	adds	r3, #56	; 0x38
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	fbb2 f1f3 	udiv	r1, r2, r3
 800742e:	fb01 f303 	mul.w	r3, r1, r3
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d110      	bne.n	800745a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007438:	78fa      	ldrb	r2, [r7, #3]
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	331c      	adds	r3, #28
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800744c:	78f9      	ldrb	r1, [r7, #3]
 800744e:	2300      	movs	r3, #0
 8007450:	2200      	movs	r2, #0
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 fde3 	bl	800901e <USBD_LL_Transmit>
 8007458:	e003      	b.n	8007462 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	e000      	b.n	8007468 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007466:	2302      	movs	r3, #2
  }
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007482:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 fe0e 	bl	80090aa <USBD_LL_GetRxDataSize>
 800748e:	4602      	mov	r2, r0
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00d      	beq.n	80074bc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80074b4:	4611      	mov	r1, r2
 80074b6:	4798      	blx	r3

    return USBD_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e000      	b.n	80074be <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80074bc:	2302      	movs	r3, #2
  }
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d015      	beq.n	800750c <USBD_CDC_EP0_RxReady+0x46>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074e6:	2bff      	cmp	r3, #255	; 0xff
 80074e8:	d010      	beq.n	800750c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80074f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007500:	b292      	uxth	r2, r2
 8007502:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	22ff      	movs	r2, #255	; 0xff
 8007508:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2243      	movs	r2, #67	; 0x43
 8007524:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007526:	4b03      	ldr	r3, [pc, #12]	; (8007534 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	20000094 	.word	0x20000094

08007538 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2243      	movs	r2, #67	; 0x43
 8007544:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007546:	4b03      	ldr	r3, [pc, #12]	; (8007554 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	20000050 	.word	0x20000050

08007558 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2243      	movs	r2, #67	; 0x43
 8007564:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007566:	4b03      	ldr	r3, [pc, #12]	; (8007574 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	bc80      	pop	{r7}
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	200000d8 	.word	0x200000d8

08007578 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	220a      	movs	r2, #10
 8007584:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007586:	4b03      	ldr	r3, [pc, #12]	; (8007594 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	2000000c 	.word	0x2000000c

08007598 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80075a2:	2302      	movs	r3, #2
 80075a4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr

080075f6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007606:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr

0800761c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01c      	beq.n	8007670 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800763c:	2b00      	cmp	r3, #0
 800763e:	d115      	bne.n	800766c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800765e:	b29b      	uxth	r3, r3
 8007660:	2181      	movs	r1, #129	; 0x81
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fcdb 	bl	800901e <USBD_LL_Transmit>

      return USBD_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	e002      	b.n	8007672 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800766c:	2301      	movs	r3, #1
 800766e:	e000      	b.n	8007672 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007670:	2302      	movs	r3, #2
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007688:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007690:	2b00      	cmp	r3, #0
 8007692:	d017      	beq.n	80076c4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	7c1b      	ldrb	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d109      	bne.n	80076b0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076a6:	2101      	movs	r1, #1
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 fcdb 	bl	8009064 <USBD_LL_PrepareReceive>
 80076ae:	e007      	b.n	80076c0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076b6:	2340      	movs	r3, #64	; 0x40
 80076b8:	2101      	movs	r1, #1
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 fcd2 	bl	8009064 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e000      	b.n	80076c6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80076c4:	2302      	movs	r3, #2
  }
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	4613      	mov	r3, r2
 80076da:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80076e2:	2302      	movs	r3, #2
 80076e4:	e01a      	b.n	800771c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	79fa      	ldrb	r2, [r7, #7]
 8007712:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f001 fb3f 	bl	8008d98 <USBD_LL_Init>

  return USBD_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d006      	beq.n	8007746 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	73fb      	strb	r3, [r7, #15]
 8007744:	e001      	b.n	800774a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007746:	2302      	movs	r3, #2
 8007748:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800774a:	7bfb      	ldrb	r3, [r7, #15]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr

08007756 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fb74 	bl	8008e4c <USBD_LL_Start>

  return USBD_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr

08007782 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800778e:	2302      	movs	r3, #2
 8007790:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00c      	beq.n	80077b6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	78fa      	ldrb	r2, [r7, #3]
 80077a6:	4611      	mov	r1, r2
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	4798      	blx	r3
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	78fa      	ldrb	r2, [r7, #3]
 80077d6:	4611      	mov	r1, r2
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	4798      	blx	r3

  return USBD_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fed8 	bl	80085ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800780c:	461a      	mov	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800781a:	f003 031f 	and.w	r3, r3, #31
 800781e:	2b02      	cmp	r3, #2
 8007820:	d016      	beq.n	8007850 <USBD_LL_SetupStage+0x6a>
 8007822:	2b02      	cmp	r3, #2
 8007824:	d81c      	bhi.n	8007860 <USBD_LL_SetupStage+0x7a>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <USBD_LL_SetupStage+0x4a>
 800782a:	2b01      	cmp	r3, #1
 800782c:	d008      	beq.n	8007840 <USBD_LL_SetupStage+0x5a>
 800782e:	e017      	b.n	8007860 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f9cb 	bl	8007bd4 <USBD_StdDevReq>
      break;
 800783e:	e01a      	b.n	8007876 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa2d 	bl	8007ca8 <USBD_StdItfReq>
      break;
 800784e:	e012      	b.n	8007876 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fa6d 	bl	8007d38 <USBD_StdEPReq>
      break;
 800785e:	e00a      	b.n	8007876 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007866:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800786a:	b2db      	uxtb	r3, r3
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fb4c 	bl	8008f0c <USBD_LL_StallEP>
      break;
 8007874:	bf00      	nop
  }

  return USBD_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	460b      	mov	r3, r1
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d14b      	bne.n	800792c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800789a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	d134      	bne.n	8007910 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d919      	bls.n	80078e6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	68da      	ldr	r2, [r3, #12]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	1ad2      	subs	r2, r2, r3
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d203      	bcs.n	80078d4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	e002      	b.n	80078da <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80078d8:	b29b      	uxth	r3, r3
 80078da:	461a      	mov	r2, r3
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 ff57 	bl	8008792 <USBD_CtlContinueRx>
 80078e4:	e038      	b.n	8007958 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d105      	bne.n	8007908 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 ff54 	bl	80087b6 <USBD_CtlSendStatus>
 800790e:	e023      	b.n	8007958 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007916:	2b05      	cmp	r3, #5
 8007918:	d11e      	bne.n	8007958 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007922:	2100      	movs	r1, #0
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f001 faf1 	bl	8008f0c <USBD_LL_StallEP>
 800792a:	e015      	b.n	8007958 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00d      	beq.n	8007954 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800793e:	2b03      	cmp	r3, #3
 8007940:	d108      	bne.n	8007954 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	7afa      	ldrb	r2, [r7, #11]
 800794c:	4611      	mov	r1, r2
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	4798      	blx	r3
 8007952:	e001      	b.n	8007958 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007954:	2302      	movs	r3, #2
 8007956:	e000      	b.n	800795a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b086      	sub	sp, #24
 8007966:	af00      	add	r7, sp, #0
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	460b      	mov	r3, r1
 800796c:	607a      	str	r2, [r7, #4]
 800796e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007970:	7afb      	ldrb	r3, [r7, #11]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d17f      	bne.n	8007a76 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3314      	adds	r3, #20
 800797a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007982:	2b02      	cmp	r3, #2
 8007984:	d15c      	bne.n	8007a40 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	68da      	ldr	r2, [r3, #12]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	429a      	cmp	r2, r3
 8007990:	d915      	bls.n	80079be <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	1ad2      	subs	r2, r2, r3
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 fec1 	bl	8008732 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079b0:	2300      	movs	r3, #0
 80079b2:	2200      	movs	r2, #0
 80079b4:	2100      	movs	r1, #0
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f001 fb54 	bl	8009064 <USBD_LL_PrepareReceive>
 80079bc:	e04e      	b.n	8007a5c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	6912      	ldr	r2, [r2, #16]
 80079c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80079ca:	fb01 f202 	mul.w	r2, r1, r2
 80079ce:	1a9b      	subs	r3, r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d11c      	bne.n	8007a0e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079dc:	429a      	cmp	r2, r3
 80079de:	d316      	bcc.n	8007a0e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d20f      	bcs.n	8007a0e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 fe9d 	bl	8008732 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a00:	2300      	movs	r3, #0
 8007a02:	2200      	movs	r2, #0
 8007a04:	2100      	movs	r1, #0
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f001 fb2c 	bl	8009064 <USBD_LL_PrepareReceive>
 8007a0c:	e026      	b.n	8007a5c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d105      	bne.n	8007a30 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007a30:	2180      	movs	r1, #128	; 0x80
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f001 fa6a 	bl	8008f0c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fecf 	bl	80087dc <USBD_CtlReceiveStatus>
 8007a3e:	e00d      	b.n	8007a5c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d004      	beq.n	8007a54 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007a54:	2180      	movs	r1, #128	; 0x80
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f001 fa58 	bl	8008f0c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d11d      	bne.n	8007aa2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff fe81 	bl	800776e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a74:	e015      	b.n	8007aa2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00d      	beq.n	8007a9e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d108      	bne.n	8007a9e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	7afa      	ldrb	r2, [r7, #11]
 8007a96:	4611      	mov	r1, r2
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	4798      	blx	r3
 8007a9c:	e001      	b.n	8007aa2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	e000      	b.n	8007aa4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ab4:	2340      	movs	r3, #64	; 0x40
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2100      	movs	r1, #0
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 f9e1 	bl	8008e82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2240      	movs	r2, #64	; 0x40
 8007acc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ad0:	2340      	movs	r3, #64	; 0x40
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2180      	movs	r1, #128	; 0x80
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 f9d3 	bl	8008e82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2240      	movs	r2, #64	; 0x40
 8007ae6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d009      	beq.n	8007b24 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6852      	ldr	r2, [r2, #4]
 8007b1c:	b2d2      	uxtb	r2, r2
 8007b1e:	4611      	mov	r1, r2
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
  }

  return USBD_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	460b      	mov	r3, r1
 8007b38:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr

08007b4c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2204      	movs	r2, #4
 8007b64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bc80      	pop	{r7}
 8007b72:	4770      	bx	lr

08007b74 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d105      	bne.n	8007b92 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc80      	pop	{r7}
 8007b9c:	4770      	bx	lr

08007b9e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d10b      	bne.n	8007bc8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bea:	2b40      	cmp	r3, #64	; 0x40
 8007bec:	d005      	beq.n	8007bfa <USBD_StdDevReq+0x26>
 8007bee:	2b40      	cmp	r3, #64	; 0x40
 8007bf0:	d84f      	bhi.n	8007c92 <USBD_StdDevReq+0xbe>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <USBD_StdDevReq+0x36>
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d14b      	bne.n	8007c92 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4798      	blx	r3
      break;
 8007c08:	e048      	b.n	8007c9c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	785b      	ldrb	r3, [r3, #1]
 8007c0e:	2b09      	cmp	r3, #9
 8007c10:	d839      	bhi.n	8007c86 <USBD_StdDevReq+0xb2>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <USBD_StdDevReq+0x44>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c69 	.word	0x08007c69
 8007c1c:	08007c7d 	.word	0x08007c7d
 8007c20:	08007c87 	.word	0x08007c87
 8007c24:	08007c73 	.word	0x08007c73
 8007c28:	08007c87 	.word	0x08007c87
 8007c2c:	08007c4b 	.word	0x08007c4b
 8007c30:	08007c41 	.word	0x08007c41
 8007c34:	08007c87 	.word	0x08007c87
 8007c38:	08007c5f 	.word	0x08007c5f
 8007c3c:	08007c55 	.word	0x08007c55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f9dc 	bl	8008000 <USBD_GetDescriptor>
          break;
 8007c48:	e022      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fb3f 	bl	80082d0 <USBD_SetAddress>
          break;
 8007c52:	e01d      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fb7e 	bl	8008358 <USBD_SetConfig>
          break;
 8007c5c:	e018      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fc07 	bl	8008474 <USBD_GetConfig>
          break;
 8007c66:	e013      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fc37 	bl	80084de <USBD_GetStatus>
          break;
 8007c70:	e00e      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fc65 	bl	8008544 <USBD_SetFeature>
          break;
 8007c7a:	e009      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fc74 	bl	800856c <USBD_ClrFeature>
          break;
 8007c84:	e004      	b.n	8007c90 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fccc 	bl	8008626 <USBD_CtlError>
          break;
 8007c8e:	bf00      	nop
      }
      break;
 8007c90:	e004      	b.n	8007c9c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fcc6 	bl	8008626 <USBD_CtlError>
      break;
 8007c9a:	bf00      	nop
  }

  return ret;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop

08007ca8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cbe:	2b40      	cmp	r3, #64	; 0x40
 8007cc0:	d005      	beq.n	8007cce <USBD_StdItfReq+0x26>
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d82e      	bhi.n	8007d24 <USBD_StdItfReq+0x7c>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <USBD_StdItfReq+0x26>
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	d12a      	bne.n	8007d24 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d81d      	bhi.n	8007d16 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	889b      	ldrh	r3, [r3, #4]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d813      	bhi.n	8007d0c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	4798      	blx	r3
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	88db      	ldrh	r3, [r3, #6]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d110      	bne.n	8007d20 <USBD_StdItfReq+0x78>
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10d      	bne.n	8007d20 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fd56 	bl	80087b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007d0a:	e009      	b.n	8007d20 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fc89 	bl	8008626 <USBD_CtlError>
          break;
 8007d14:	e004      	b.n	8007d20 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fc84 	bl	8008626 <USBD_CtlError>
          break;
 8007d1e:	e000      	b.n	8007d22 <USBD_StdItfReq+0x7a>
          break;
 8007d20:	bf00      	nop
      }
      break;
 8007d22:	e004      	b.n	8007d2e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fc7d 	bl	8008626 <USBD_CtlError>
      break;
 8007d2c:	bf00      	nop
  }

  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	889b      	ldrh	r3, [r3, #4]
 8007d4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d54:	2b40      	cmp	r3, #64	; 0x40
 8007d56:	d007      	beq.n	8007d68 <USBD_StdEPReq+0x30>
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	f200 8146 	bhi.w	8007fea <USBD_StdEPReq+0x2b2>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <USBD_StdEPReq+0x40>
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	f040 8141 	bne.w	8007fea <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
      break;
 8007d76:	e13d      	b.n	8007ff4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d80:	2b20      	cmp	r3, #32
 8007d82:	d10a      	bne.n	8007d9a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	4798      	blx	r3
 8007d92:	4603      	mov	r3, r0
 8007d94:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	e12d      	b.n	8007ff6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	785b      	ldrb	r3, [r3, #1]
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d007      	beq.n	8007db2 <USBD_StdEPReq+0x7a>
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	f300 811b 	bgt.w	8007fde <USBD_StdEPReq+0x2a6>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d072      	beq.n	8007e92 <USBD_StdEPReq+0x15a>
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d03a      	beq.n	8007e26 <USBD_StdEPReq+0xee>
 8007db0:	e115      	b.n	8007fde <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d002      	beq.n	8007dc2 <USBD_StdEPReq+0x8a>
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d015      	beq.n	8007dec <USBD_StdEPReq+0xb4>
 8007dc0:	e02b      	b.n	8007e1a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00c      	beq.n	8007de2 <USBD_StdEPReq+0xaa>
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b80      	cmp	r3, #128	; 0x80
 8007dcc:	d009      	beq.n	8007de2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 f89a 	bl	8008f0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007dd8:	2180      	movs	r1, #128	; 0x80
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f001 f896 	bl	8008f0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007de0:	e020      	b.n	8007e24 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fc1e 	bl	8008626 <USBD_CtlError>
              break;
 8007dea:	e01b      	b.n	8007e24 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	885b      	ldrh	r3, [r3, #2]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10e      	bne.n	8007e12 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00b      	beq.n	8007e12 <USBD_StdEPReq+0xda>
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b80      	cmp	r3, #128	; 0x80
 8007dfe:	d008      	beq.n	8007e12 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	88db      	ldrh	r3, [r3, #6]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 f87d 	bl	8008f0c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fccf 	bl	80087b6 <USBD_CtlSendStatus>

              break;
 8007e18:	e004      	b.n	8007e24 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fc02 	bl	8008626 <USBD_CtlError>
              break;
 8007e22:	bf00      	nop
          }
          break;
 8007e24:	e0e0      	b.n	8007fe8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d002      	beq.n	8007e36 <USBD_StdEPReq+0xfe>
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d015      	beq.n	8007e60 <USBD_StdEPReq+0x128>
 8007e34:	e026      	b.n	8007e84 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00c      	beq.n	8007e56 <USBD_StdEPReq+0x11e>
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b80      	cmp	r3, #128	; 0x80
 8007e40:	d009      	beq.n	8007e56 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 f860 	bl	8008f0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e4c:	2180      	movs	r1, #128	; 0x80
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 f85c 	bl	8008f0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e54:	e01c      	b.n	8007e90 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007e56:	6839      	ldr	r1, [r7, #0]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fbe4 	bl	8008626 <USBD_CtlError>
              break;
 8007e5e:	e017      	b.n	8007e90 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	885b      	ldrh	r3, [r3, #2]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d112      	bne.n	8007e8e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d004      	beq.n	8007e7c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 f867 	bl	8008f4a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fc9a 	bl	80087b6 <USBD_CtlSendStatus>
              }
              break;
 8007e82:	e004      	b.n	8007e8e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fbcd 	bl	8008626 <USBD_CtlError>
              break;
 8007e8c:	e000      	b.n	8007e90 <USBD_StdEPReq+0x158>
              break;
 8007e8e:	bf00      	nop
          }
          break;
 8007e90:	e0aa      	b.n	8007fe8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d002      	beq.n	8007ea2 <USBD_StdEPReq+0x16a>
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d032      	beq.n	8007f06 <USBD_StdEPReq+0x1ce>
 8007ea0:	e097      	b.n	8007fd2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <USBD_StdEPReq+0x180>
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d004      	beq.n	8007eb8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fbb8 	bl	8008626 <USBD_CtlError>
                break;
 8007eb6:	e091      	b.n	8007fdc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	da0b      	bge.n	8007ed8 <USBD_StdEPReq+0x1a0>
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
 8007ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	3310      	adds	r3, #16
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	3304      	adds	r3, #4
 8007ed6:	e00b      	b.n	8007ef0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	4413      	add	r3, r2
 8007eee:	3304      	adds	r3, #4
 8007ef0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2202      	movs	r2, #2
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fbfb 	bl	80086fa <USBD_CtlSendData>
              break;
 8007f04:	e06a      	b.n	8007fdc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	da11      	bge.n	8007f32 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	f003 020f 	and.w	r2, r3, #15
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	3318      	adds	r3, #24
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d117      	bne.n	8007f58 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fb7b 	bl	8008626 <USBD_CtlError>
                  break;
 8007f30:	e054      	b.n	8007fdc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	f003 020f 	and.w	r2, r3, #15
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	440b      	add	r3, r1
 8007f44:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d104      	bne.n	8007f58 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fb68 	bl	8008626 <USBD_CtlError>
                  break;
 8007f56:	e041      	b.n	8007fdc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da0b      	bge.n	8007f78 <USBD_StdEPReq+0x240>
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f66:	4613      	mov	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	3310      	adds	r3, #16
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	4413      	add	r3, r2
 8007f74:	3304      	adds	r3, #4
 8007f76:	e00b      	b.n	8007f90 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f7e:	4613      	mov	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4413      	add	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3304      	adds	r3, #4
 8007f90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <USBD_StdEPReq+0x266>
 8007f98:	7bbb      	ldrb	r3, [r7, #14]
 8007f9a:	2b80      	cmp	r3, #128	; 0x80
 8007f9c:	d103      	bne.n	8007fa6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	e00e      	b.n	8007fc4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007fa6:	7bbb      	ldrb	r3, [r7, #14]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 ffec 	bl	8008f88 <USBD_LL_IsStallEP>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	601a      	str	r2, [r3, #0]
 8007fbc:	e002      	b.n	8007fc4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fb95 	bl	80086fa <USBD_CtlSendData>
              break;
 8007fd0:	e004      	b.n	8007fdc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fb26 	bl	8008626 <USBD_CtlError>
              break;
 8007fda:	bf00      	nop
          }
          break;
 8007fdc:	e004      	b.n	8007fe8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fb20 	bl	8008626 <USBD_CtlError>
          break;
 8007fe6:	bf00      	nop
      }
      break;
 8007fe8:	e004      	b.n	8007ff4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fb1a 	bl	8008626 <USBD_CtlError>
      break;
 8007ff2:	bf00      	nop
  }

  return ret;
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	885b      	ldrh	r3, [r3, #2]
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	2b06      	cmp	r3, #6
 8008022:	f200 8128 	bhi.w	8008276 <USBD_GetDescriptor+0x276>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <USBD_GetDescriptor+0x2c>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	08008049 	.word	0x08008049
 8008030:	08008061 	.word	0x08008061
 8008034:	080080a1 	.word	0x080080a1
 8008038:	08008277 	.word	0x08008277
 800803c:	08008277 	.word	0x08008277
 8008040:	08008217 	.word	0x08008217
 8008044:	08008243 	.word	0x08008243
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	7c12      	ldrb	r2, [r2, #16]
 8008054:	f107 0108 	add.w	r1, r7, #8
 8008058:	4610      	mov	r0, r2
 800805a:	4798      	blx	r3
 800805c:	60f8      	str	r0, [r7, #12]
      break;
 800805e:	e112      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7c1b      	ldrb	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10d      	bne.n	8008084 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008070:	f107 0208 	add.w	r2, r7, #8
 8008074:	4610      	mov	r0, r2
 8008076:	4798      	blx	r3
 8008078:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	2202      	movs	r2, #2
 8008080:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008082:	e100      	b.n	8008286 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	f107 0208 	add.w	r2, r7, #8
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
 8008094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3301      	adds	r3, #1
 800809a:	2202      	movs	r2, #2
 800809c:	701a      	strb	r2, [r3, #0]
      break;
 800809e:	e0f2      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	885b      	ldrh	r3, [r3, #2]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b05      	cmp	r3, #5
 80080a8:	f200 80ac 	bhi.w	8008204 <USBD_GetDescriptor+0x204>
 80080ac:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <USBD_GetDescriptor+0xb4>)
 80080ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	080080cd 	.word	0x080080cd
 80080b8:	08008101 	.word	0x08008101
 80080bc:	08008135 	.word	0x08008135
 80080c0:	08008169 	.word	0x08008169
 80080c4:	0800819d 	.word	0x0800819d
 80080c8:	080081d1 	.word	0x080081d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00b      	beq.n	80080f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	7c12      	ldrb	r2, [r2, #16]
 80080e4:	f107 0108 	add.w	r1, r7, #8
 80080e8:	4610      	mov	r0, r2
 80080ea:	4798      	blx	r3
 80080ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ee:	e091      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa97 	bl	8008626 <USBD_CtlError>
            err++;
 80080f8:	7afb      	ldrb	r3, [r7, #11]
 80080fa:	3301      	adds	r3, #1
 80080fc:	72fb      	strb	r3, [r7, #11]
          break;
 80080fe:	e089      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00b      	beq.n	8008124 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	7c12      	ldrb	r2, [r2, #16]
 8008118:	f107 0108 	add.w	r1, r7, #8
 800811c:	4610      	mov	r0, r2
 800811e:	4798      	blx	r3
 8008120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008122:	e077      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fa7d 	bl	8008626 <USBD_CtlError>
            err++;
 800812c:	7afb      	ldrb	r3, [r7, #11]
 800812e:	3301      	adds	r3, #1
 8008130:	72fb      	strb	r3, [r7, #11]
          break;
 8008132:	e06f      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00b      	beq.n	8008158 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	7c12      	ldrb	r2, [r2, #16]
 800814c:	f107 0108 	add.w	r1, r7, #8
 8008150:	4610      	mov	r0, r2
 8008152:	4798      	blx	r3
 8008154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008156:	e05d      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fa63 	bl	8008626 <USBD_CtlError>
            err++;
 8008160:	7afb      	ldrb	r3, [r7, #11]
 8008162:	3301      	adds	r3, #1
 8008164:	72fb      	strb	r3, [r7, #11]
          break;
 8008166:	e055      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00b      	beq.n	800818c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	7c12      	ldrb	r2, [r2, #16]
 8008180:	f107 0108 	add.w	r1, r7, #8
 8008184:	4610      	mov	r0, r2
 8008186:	4798      	blx	r3
 8008188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800818a:	e043      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa49 	bl	8008626 <USBD_CtlError>
            err++;
 8008194:	7afb      	ldrb	r3, [r7, #11]
 8008196:	3301      	adds	r3, #1
 8008198:	72fb      	strb	r3, [r7, #11]
          break;
 800819a:	e03b      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00b      	beq.n	80081c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	7c12      	ldrb	r2, [r2, #16]
 80081b4:	f107 0108 	add.w	r1, r7, #8
 80081b8:	4610      	mov	r0, r2
 80081ba:	4798      	blx	r3
 80081bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081be:	e029      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa2f 	bl	8008626 <USBD_CtlError>
            err++;
 80081c8:	7afb      	ldrb	r3, [r7, #11]
 80081ca:	3301      	adds	r3, #1
 80081cc:	72fb      	strb	r3, [r7, #11]
          break;
 80081ce:	e021      	b.n	8008214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	7c12      	ldrb	r2, [r2, #16]
 80081e8:	f107 0108 	add.w	r1, r7, #8
 80081ec:	4610      	mov	r0, r2
 80081ee:	4798      	blx	r3
 80081f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081f2:	e00f      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fa15 	bl	8008626 <USBD_CtlError>
            err++;
 80081fc:	7afb      	ldrb	r3, [r7, #11]
 80081fe:	3301      	adds	r3, #1
 8008200:	72fb      	strb	r3, [r7, #11]
          break;
 8008202:	e007      	b.n	8008214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa0d 	bl	8008626 <USBD_CtlError>
          err++;
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	3301      	adds	r3, #1
 8008210:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008212:	e038      	b.n	8008286 <USBD_GetDescriptor+0x286>
 8008214:	e037      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	7c1b      	ldrb	r3, [r3, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d109      	bne.n	8008232 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008226:	f107 0208 	add.w	r2, r7, #8
 800822a:	4610      	mov	r0, r2
 800822c:	4798      	blx	r3
 800822e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008230:	e029      	b.n	8008286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f9f6 	bl	8008626 <USBD_CtlError>
        err++;
 800823a:	7afb      	ldrb	r3, [r7, #11]
 800823c:	3301      	adds	r3, #1
 800823e:	72fb      	strb	r3, [r7, #11]
      break;
 8008240:	e021      	b.n	8008286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	7c1b      	ldrb	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10d      	bne.n	8008266 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	f107 0208 	add.w	r2, r7, #8
 8008256:	4610      	mov	r0, r2
 8008258:	4798      	blx	r3
 800825a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	3301      	adds	r3, #1
 8008260:	2207      	movs	r2, #7
 8008262:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008264:	e00f      	b.n	8008286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f9dc 	bl	8008626 <USBD_CtlError>
        err++;
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	3301      	adds	r3, #1
 8008272:	72fb      	strb	r3, [r7, #11]
      break;
 8008274:	e007      	b.n	8008286 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f9d4 	bl	8008626 <USBD_CtlError>
      err++;
 800827e:	7afb      	ldrb	r3, [r7, #11]
 8008280:	3301      	adds	r3, #1
 8008282:	72fb      	strb	r3, [r7, #11]
      break;
 8008284:	bf00      	nop
  }

  if (err != 0U)
 8008286:	7afb      	ldrb	r3, [r7, #11]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d11c      	bne.n	80082c6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800828c:	893b      	ldrh	r3, [r7, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d011      	beq.n	80082b6 <USBD_GetDescriptor+0x2b6>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	88db      	ldrh	r3, [r3, #6]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00d      	beq.n	80082b6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	88da      	ldrh	r2, [r3, #6]
 800829e:	893b      	ldrh	r3, [r7, #8]
 80082a0:	4293      	cmp	r3, r2
 80082a2:	bf28      	it	cs
 80082a4:	4613      	movcs	r3, r2
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082aa:	893b      	ldrh	r3, [r7, #8]
 80082ac:	461a      	mov	r2, r3
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fa22 	bl	80086fa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	88db      	ldrh	r3, [r3, #6]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d104      	bne.n	80082c8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa79 	bl	80087b6 <USBD_CtlSendStatus>
 80082c4:	e000      	b.n	80082c8 <USBD_GetDescriptor+0x2c8>
    return;
 80082c6:	bf00      	nop
    }
  }
}
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop

080082d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	889b      	ldrh	r3, [r3, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d130      	bne.n	8008344 <USBD_SetAddress+0x74>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	88db      	ldrh	r3, [r3, #6]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d12c      	bne.n	8008344 <USBD_SetAddress+0x74>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	885b      	ldrh	r3, [r3, #2]
 80082ee:	2b7f      	cmp	r3, #127	; 0x7f
 80082f0:	d828      	bhi.n	8008344 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	885b      	ldrh	r3, [r3, #2]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008304:	2b03      	cmp	r3, #3
 8008306:	d104      	bne.n	8008312 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f98b 	bl	8008626 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008310:	e01d      	b.n	800834e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	7bfa      	ldrb	r2, [r7, #15]
 8008316:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fe5e 	bl	8008fe0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fa46 	bl	80087b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d004      	beq.n	800833a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008338:	e009      	b.n	800834e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008342:	e004      	b.n	800834e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f96d 	bl	8008626 <USBD_CtlError>
  }
}
 800834c:	bf00      	nop
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	885b      	ldrh	r3, [r3, #2]
 8008366:	b2da      	uxtb	r2, r3
 8008368:	4b41      	ldr	r3, [pc, #260]	; (8008470 <USBD_SetConfig+0x118>)
 800836a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800836c:	4b40      	ldr	r3, [pc, #256]	; (8008470 <USBD_SetConfig+0x118>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d904      	bls.n	800837e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f955 	bl	8008626 <USBD_CtlError>
 800837c:	e075      	b.n	800846a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008384:	2b02      	cmp	r3, #2
 8008386:	d002      	beq.n	800838e <USBD_SetConfig+0x36>
 8008388:	2b03      	cmp	r3, #3
 800838a:	d023      	beq.n	80083d4 <USBD_SetConfig+0x7c>
 800838c:	e062      	b.n	8008454 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800838e:	4b38      	ldr	r3, [pc, #224]	; (8008470 <USBD_SetConfig+0x118>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01a      	beq.n	80083cc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008396:	4b36      	ldr	r3, [pc, #216]	; (8008470 <USBD_SetConfig+0x118>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2203      	movs	r2, #3
 80083a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80083a8:	4b31      	ldr	r3, [pc, #196]	; (8008470 <USBD_SetConfig+0x118>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff f9e7 	bl	8007782 <USBD_SetClassConfig>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d104      	bne.n	80083c4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f932 	bl	8008626 <USBD_CtlError>
            return;
 80083c2:	e052      	b.n	800846a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f9f6 	bl	80087b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80083ca:	e04e      	b.n	800846a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f9f2 	bl	80087b6 <USBD_CtlSendStatus>
        break;
 80083d2:	e04a      	b.n	800846a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80083d4:	4b26      	ldr	r3, [pc, #152]	; (8008470 <USBD_SetConfig+0x118>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d112      	bne.n	8008402 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80083e4:	4b22      	ldr	r3, [pc, #136]	; (8008470 <USBD_SetConfig+0x118>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80083ee:	4b20      	ldr	r3, [pc, #128]	; (8008470 <USBD_SetConfig+0x118>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff f9e3 	bl	80077c0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f9db 	bl	80087b6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008400:	e033      	b.n	800846a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008402:	4b1b      	ldr	r3, [pc, #108]	; (8008470 <USBD_SetConfig+0x118>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	429a      	cmp	r2, r3
 800840e:	d01d      	beq.n	800844c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	b2db      	uxtb	r3, r3
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff f9d1 	bl	80077c0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800841e:	4b14      	ldr	r3, [pc, #80]	; (8008470 <USBD_SetConfig+0x118>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008428:	4b11      	ldr	r3, [pc, #68]	; (8008470 <USBD_SetConfig+0x118>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	4619      	mov	r1, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7ff f9a7 	bl	8007782 <USBD_SetClassConfig>
 8008434:	4603      	mov	r3, r0
 8008436:	2b02      	cmp	r3, #2
 8008438:	d104      	bne.n	8008444 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f8f2 	bl	8008626 <USBD_CtlError>
            return;
 8008442:	e012      	b.n	800846a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f9b6 	bl	80087b6 <USBD_CtlSendStatus>
        break;
 800844a:	e00e      	b.n	800846a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f9b2 	bl	80087b6 <USBD_CtlSendStatus>
        break;
 8008452:	e00a      	b.n	800846a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f8e5 	bl	8008626 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800845c:	4b04      	ldr	r3, [pc, #16]	; (8008470 <USBD_SetConfig+0x118>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7ff f9ac 	bl	80077c0 <USBD_ClrClassConfig>
        break;
 8008468:	bf00      	nop
    }
  }
}
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	200002fc 	.word	0x200002fc

08008474 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	88db      	ldrh	r3, [r3, #6]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d004      	beq.n	8008490 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f8cc 	bl	8008626 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800848e:	e022      	b.n	80084d6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008496:	2b02      	cmp	r3, #2
 8008498:	dc02      	bgt.n	80084a0 <USBD_GetConfig+0x2c>
 800849a:	2b00      	cmp	r3, #0
 800849c:	dc03      	bgt.n	80084a6 <USBD_GetConfig+0x32>
 800849e:	e015      	b.n	80084cc <USBD_GetConfig+0x58>
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d00b      	beq.n	80084bc <USBD_GetConfig+0x48>
 80084a4:	e012      	b.n	80084cc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3308      	adds	r3, #8
 80084b0:	2201      	movs	r2, #1
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f920 	bl	80086fa <USBD_CtlSendData>
        break;
 80084ba:	e00c      	b.n	80084d6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3304      	adds	r3, #4
 80084c0:	2201      	movs	r2, #1
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f918 	bl	80086fa <USBD_CtlSendData>
        break;
 80084ca:	e004      	b.n	80084d6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f8a9 	bl	8008626 <USBD_CtlError>
        break;
 80084d4:	bf00      	nop
}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ee:	3b01      	subs	r3, #1
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d81e      	bhi.n	8008532 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	88db      	ldrh	r3, [r3, #6]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d004      	beq.n	8008506 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f891 	bl	8008626 <USBD_CtlError>
        break;
 8008504:	e01a      	b.n	800853c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008512:	2b00      	cmp	r3, #0
 8008514:	d005      	beq.n	8008522 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f043 0202 	orr.w	r2, r3, #2
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	330c      	adds	r3, #12
 8008526:	2202      	movs	r2, #2
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f8e5 	bl	80086fa <USBD_CtlSendData>
      break;
 8008530:	e004      	b.n	800853c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f876 	bl	8008626 <USBD_CtlError>
      break;
 800853a:	bf00      	nop
  }
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	885b      	ldrh	r3, [r3, #2]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d106      	bne.n	8008564 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f929 	bl	80087b6 <USBD_CtlSendStatus>
  }
}
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800857c:	3b01      	subs	r3, #1
 800857e:	2b02      	cmp	r3, #2
 8008580:	d80b      	bhi.n	800859a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	885b      	ldrh	r3, [r3, #2]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d10c      	bne.n	80085a4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f90f 	bl	80087b6 <USBD_CtlSendStatus>
      }
      break;
 8008598:	e004      	b.n	80085a4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f842 	bl	8008626 <USBD_CtlError>
      break;
 80085a2:	e000      	b.n	80085a6 <USBD_ClrFeature+0x3a>
      break;
 80085a4:	bf00      	nop
  }
}
 80085a6:	bf00      	nop
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	781a      	ldrb	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	785a      	ldrb	r2, [r3, #1]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	3302      	adds	r3, #2
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	3303      	adds	r3, #3
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	021b      	lsls	r3, r3, #8
 80085da:	b29b      	uxth	r3, r3
 80085dc:	4413      	add	r3, r2
 80085de:	b29a      	uxth	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	3304      	adds	r3, #4
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	3305      	adds	r3, #5
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	4413      	add	r3, r2
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	3306      	adds	r3, #6
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	b29a      	uxth	r2, r3
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	3307      	adds	r3, #7
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	b29b      	uxth	r3, r3
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	b29b      	uxth	r3, r3
 8008614:	4413      	add	r3, r2
 8008616:	b29a      	uxth	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	80da      	strh	r2, [r3, #6]

}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008630:	2180      	movs	r1, #128	; 0x80
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fc6a 	bl	8008f0c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008638:	2100      	movs	r1, #0
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fc66 	bl	8008f0c <USBD_LL_StallEP>
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d032      	beq.n	80086c4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 f834 	bl	80086cc <USBD_GetLen>
 8008664:	4603      	mov	r3, r0
 8008666:	3301      	adds	r3, #1
 8008668:	b29b      	uxth	r3, r3
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	b29a      	uxth	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	75fa      	strb	r2, [r7, #23]
 8008678:	461a      	mov	r2, r3
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	4413      	add	r3, r2
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	7812      	ldrb	r2, [r2, #0]
 8008682:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	75fa      	strb	r2, [r7, #23]
 800868a:	461a      	mov	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	4413      	add	r3, r2
 8008690:	2203      	movs	r2, #3
 8008692:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008694:	e012      	b.n	80086bc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	60fa      	str	r2, [r7, #12]
 800869c:	7dfa      	ldrb	r2, [r7, #23]
 800869e:	1c51      	adds	r1, r2, #1
 80086a0:	75f9      	strb	r1, [r7, #23]
 80086a2:	4611      	mov	r1, r2
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	440a      	add	r2, r1
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	75fa      	strb	r2, [r7, #23]
 80086b2:	461a      	mov	r2, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	4413      	add	r3, r2
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e8      	bne.n	8008696 <USBD_GetString+0x4e>
    }
  }
}
 80086c4:	bf00      	nop
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80086d8:	e005      	b.n	80086e6 <USBD_GetLen+0x1a>
  {
    len++;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	3301      	adds	r3, #1
 80086de:	73fb      	strb	r3, [r7, #15]
    buf++;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3301      	adds	r3, #1
 80086e4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1f5      	bne.n	80086da <USBD_GetLen+0xe>
  }

  return len;
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	4613      	mov	r3, r2
 8008706:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2202      	movs	r2, #2
 800870c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008710:	88fa      	ldrh	r2, [r7, #6]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008716:	88fa      	ldrh	r2, [r7, #6]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800871c:	88fb      	ldrh	r3, [r7, #6]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	2100      	movs	r1, #0
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 fc7b 	bl	800901e <USBD_LL_Transmit>

  return USBD_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	4613      	mov	r3, r2
 800873e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	2100      	movs	r1, #0
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 fc69 	bl	800901e <USBD_LL_Transmit>

  return USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	4613      	mov	r3, r2
 8008762:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2203      	movs	r2, #3
 8008768:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800876c:	88fa      	ldrh	r2, [r7, #6]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008774:	88fa      	ldrh	r2, [r7, #6]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800877c:	88fb      	ldrh	r3, [r7, #6]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	2100      	movs	r1, #0
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f000 fc6e 	bl	8009064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	4613      	mov	r3, r2
 800879e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087a0:	88fb      	ldrh	r3, [r7, #6]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	2100      	movs	r1, #0
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 fc5c 	bl	8009064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b082      	sub	sp, #8
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2204      	movs	r2, #4
 80087c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087c6:	2300      	movs	r3, #0
 80087c8:	2200      	movs	r2, #0
 80087ca:	2100      	movs	r1, #0
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fc26 	bl	800901e <USBD_LL_Transmit>

  return USBD_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2205      	movs	r2, #5
 80087e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087ec:	2300      	movs	r3, #0
 80087ee:	2200      	movs	r2, #0
 80087f0:	2100      	movs	r1, #0
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fc36 	bl	8009064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008808:	2200      	movs	r2, #0
 800880a:	4912      	ldr	r1, [pc, #72]	; (8008854 <MX_USB_DEVICE_Init+0x50>)
 800880c:	4812      	ldr	r0, [pc, #72]	; (8008858 <MX_USB_DEVICE_Init+0x54>)
 800880e:	f7fe ff5e 	bl	80076ce <USBD_Init>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008818:	f7f7 ff80 	bl	800071c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800881c:	490f      	ldr	r1, [pc, #60]	; (800885c <MX_USB_DEVICE_Init+0x58>)
 800881e:	480e      	ldr	r0, [pc, #56]	; (8008858 <MX_USB_DEVICE_Init+0x54>)
 8008820:	f7fe ff80 	bl	8007724 <USBD_RegisterClass>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800882a:	f7f7 ff77 	bl	800071c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800882e:	490c      	ldr	r1, [pc, #48]	; (8008860 <MX_USB_DEVICE_Init+0x5c>)
 8008830:	4809      	ldr	r0, [pc, #36]	; (8008858 <MX_USB_DEVICE_Init+0x54>)
 8008832:	f7fe feb1 	bl	8007598 <USBD_CDC_RegisterInterface>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800883c:	f7f7 ff6e 	bl	800071c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008840:	4805      	ldr	r0, [pc, #20]	; (8008858 <MX_USB_DEVICE_Init+0x54>)
 8008842:	f7fe ff88 	bl	8007756 <USBD_Start>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800884c:	f7f7 ff66 	bl	800071c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008850:	bf00      	nop
 8008852:	bd80      	pop	{r7, pc}
 8008854:	2000012c 	.word	0x2000012c
 8008858:	20000300 	.word	0x20000300
 800885c:	20000018 	.word	0x20000018
 8008860:	2000011c 	.word	0x2000011c

08008864 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008868:	2200      	movs	r2, #0
 800886a:	4905      	ldr	r1, [pc, #20]	; (8008880 <CDC_Init_FS+0x1c>)
 800886c:	4805      	ldr	r0, [pc, #20]	; (8008884 <CDC_Init_FS+0x20>)
 800886e:	f7fe fea9 	bl	80075c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008872:	4905      	ldr	r1, [pc, #20]	; (8008888 <CDC_Init_FS+0x24>)
 8008874:	4803      	ldr	r0, [pc, #12]	; (8008884 <CDC_Init_FS+0x20>)
 8008876:	f7fe febe 	bl	80075f6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800887a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800887c:	4618      	mov	r0, r3
 800887e:	bd80      	pop	{r7, pc}
 8008880:	200009c4 	.word	0x200009c4
 8008884:	20000300 	.word	0x20000300
 8008888:	200005c4 	.word	0x200005c4

0800888c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008890:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008892:	4618      	mov	r0, r3
 8008894:	46bd      	mov	sp, r7
 8008896:	bc80      	pop	{r7}
 8008898:	4770      	bx	lr
	...

0800889c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	6039      	str	r1, [r7, #0]
 80088a6:	71fb      	strb	r3, [r7, #7]
 80088a8:	4613      	mov	r3, r2
 80088aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	2b23      	cmp	r3, #35	; 0x23
 80088b0:	d84a      	bhi.n	8008948 <CDC_Control_FS+0xac>
 80088b2:	a201      	add	r2, pc, #4	; (adr r2, 80088b8 <CDC_Control_FS+0x1c>)
 80088b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b8:	08008949 	.word	0x08008949
 80088bc:	08008949 	.word	0x08008949
 80088c0:	08008949 	.word	0x08008949
 80088c4:	08008949 	.word	0x08008949
 80088c8:	08008949 	.word	0x08008949
 80088cc:	08008949 	.word	0x08008949
 80088d0:	08008949 	.word	0x08008949
 80088d4:	08008949 	.word	0x08008949
 80088d8:	08008949 	.word	0x08008949
 80088dc:	08008949 	.word	0x08008949
 80088e0:	08008949 	.word	0x08008949
 80088e4:	08008949 	.word	0x08008949
 80088e8:	08008949 	.word	0x08008949
 80088ec:	08008949 	.word	0x08008949
 80088f0:	08008949 	.word	0x08008949
 80088f4:	08008949 	.word	0x08008949
 80088f8:	08008949 	.word	0x08008949
 80088fc:	08008949 	.word	0x08008949
 8008900:	08008949 	.word	0x08008949
 8008904:	08008949 	.word	0x08008949
 8008908:	08008949 	.word	0x08008949
 800890c:	08008949 	.word	0x08008949
 8008910:	08008949 	.word	0x08008949
 8008914:	08008949 	.word	0x08008949
 8008918:	08008949 	.word	0x08008949
 800891c:	08008949 	.word	0x08008949
 8008920:	08008949 	.word	0x08008949
 8008924:	08008949 	.word	0x08008949
 8008928:	08008949 	.word	0x08008949
 800892c:	08008949 	.word	0x08008949
 8008930:	08008949 	.word	0x08008949
 8008934:	08008949 	.word	0x08008949
 8008938:	08008949 	.word	0x08008949
 800893c:	08008949 	.word	0x08008949
 8008940:	08008949 	.word	0x08008949
 8008944:	08008949 	.word	0x08008949
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008948:	bf00      	nop
  }

  return (USBD_OK);
 800894a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800894c:	4618      	mov	r0, r3
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	bc80      	pop	{r7}
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop

08008958 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	480f      	ldr	r0, [pc, #60]	; (80089a4 <CDC_Receive_FS+0x4c>)
 8008966:	f7fe fe46 	bl	80075f6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800896a:	480e      	ldr	r0, [pc, #56]	; (80089a4 <CDC_Receive_FS+0x4c>)
 800896c:	f7fe fe85 	bl	800767a <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	73fb      	strb	r3, [r7, #15]
  memset(buffer, '\0',64);
 8008976:	2240      	movs	r2, #64	; 0x40
 8008978:	2100      	movs	r1, #0
 800897a:	480b      	ldr	r0, [pc, #44]	; (80089a8 <CDC_Receive_FS+0x50>)
 800897c:	f000 fca0 	bl	80092c0 <memset>
  memcpy(buffer, Buf, len);
 8008980:	7bfb      	ldrb	r3, [r7, #15]
 8008982:	461a      	mov	r2, r3
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	4808      	ldr	r0, [pc, #32]	; (80089a8 <CDC_Receive_FS+0x50>)
 8008988:	f000 fcce 	bl	8009328 <memcpy>
  memset(Buf, '\0', len);
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	461a      	mov	r2, r3
 8008990:	2100      	movs	r1, #0
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fc94 	bl	80092c0 <memset>
  return (USBD_OK);
 8008998:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	20000300 	.word	0x20000300
 80089a8:	200002b4 	.word	0x200002b4

080089ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80089bc:	4b0d      	ldr	r3, [pc, #52]	; (80089f4 <CDC_Transmit_FS+0x48>)
 80089be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e00b      	b.n	80089ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80089d2:	887b      	ldrh	r3, [r7, #2]
 80089d4:	461a      	mov	r2, r3
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	4806      	ldr	r0, [pc, #24]	; (80089f4 <CDC_Transmit_FS+0x48>)
 80089da:	f7fe fdf3 	bl	80075c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80089de:	4805      	ldr	r0, [pc, #20]	; (80089f4 <CDC_Transmit_FS+0x48>)
 80089e0:	f7fe fe1c 	bl	800761c <USBD_CDC_TransmitPacket>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20000300 	.word	0x20000300

080089f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	6039      	str	r1, [r7, #0]
 8008a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2212      	movs	r2, #18
 8008a08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a0a:	4b03      	ldr	r3, [pc, #12]	; (8008a18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bc80      	pop	{r7}
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	20000148 	.word	0x20000148

08008a1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	6039      	str	r1, [r7, #0]
 8008a26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	2204      	movs	r2, #4
 8008a2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a2e:	4b03      	ldr	r3, [pc, #12]	; (8008a3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bc80      	pop	{r7}
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	2000015c 	.word	0x2000015c

08008a40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	6039      	str	r1, [r7, #0]
 8008a4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d105      	bne.n	8008a5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	4907      	ldr	r1, [pc, #28]	; (8008a74 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a56:	4808      	ldr	r0, [pc, #32]	; (8008a78 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a58:	f7ff fdf6 	bl	8008648 <USBD_GetString>
 8008a5c:	e004      	b.n	8008a68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	4904      	ldr	r1, [pc, #16]	; (8008a74 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a62:	4805      	ldr	r0, [pc, #20]	; (8008a78 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a64:	f7ff fdf0 	bl	8008648 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a68:	4b02      	ldr	r3, [pc, #8]	; (8008a74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000dc4 	.word	0x20000dc4
 8008a78:	08009c28 	.word	0x08009c28

08008a7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	6039      	str	r1, [r7, #0]
 8008a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	4904      	ldr	r1, [pc, #16]	; (8008a9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a8c:	4804      	ldr	r0, [pc, #16]	; (8008aa0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a8e:	f7ff fddb 	bl	8008648 <USBD_GetString>
  return USBD_StrDesc;
 8008a92:	4b02      	ldr	r3, [pc, #8]	; (8008a9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20000dc4 	.word	0x20000dc4
 8008aa0:	08009c40 	.word	0x08009c40

08008aa4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	6039      	str	r1, [r7, #0]
 8008aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	221a      	movs	r2, #26
 8008ab4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ab6:	f000 f843 	bl	8008b40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008aba:	4b02      	ldr	r3, [pc, #8]	; (8008ac4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	20000160 	.word	0x20000160

08008ac8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d105      	bne.n	8008ae6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	4907      	ldr	r1, [pc, #28]	; (8008afc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ade:	4808      	ldr	r0, [pc, #32]	; (8008b00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ae0:	f7ff fdb2 	bl	8008648 <USBD_GetString>
 8008ae4:	e004      	b.n	8008af0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	4904      	ldr	r1, [pc, #16]	; (8008afc <USBD_FS_ConfigStrDescriptor+0x34>)
 8008aea:	4805      	ldr	r0, [pc, #20]	; (8008b00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008aec:	f7ff fdac 	bl	8008648 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008af0:	4b02      	ldr	r3, [pc, #8]	; (8008afc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	20000dc4 	.word	0x20000dc4
 8008b00:	08009c54 	.word	0x08009c54

08008b04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	6039      	str	r1, [r7, #0]
 8008b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b10:	79fb      	ldrb	r3, [r7, #7]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d105      	bne.n	8008b22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	4907      	ldr	r1, [pc, #28]	; (8008b38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b1a:	4808      	ldr	r0, [pc, #32]	; (8008b3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b1c:	f7ff fd94 	bl	8008648 <USBD_GetString>
 8008b20:	e004      	b.n	8008b2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4904      	ldr	r1, [pc, #16]	; (8008b38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b26:	4805      	ldr	r0, [pc, #20]	; (8008b3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b28:	f7ff fd8e 	bl	8008648 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b2c:	4b02      	ldr	r3, [pc, #8]	; (8008b38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20000dc4 	.word	0x20000dc4
 8008b3c:	08009c60 	.word	0x08009c60

08008b40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b46:	4b0f      	ldr	r3, [pc, #60]	; (8008b84 <Get_SerialNum+0x44>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b4c:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <Get_SerialNum+0x48>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b52:	4b0e      	ldr	r3, [pc, #56]	; (8008b8c <Get_SerialNum+0x4c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d009      	beq.n	8008b7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b66:	2208      	movs	r2, #8
 8008b68:	4909      	ldr	r1, [pc, #36]	; (8008b90 <Get_SerialNum+0x50>)
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 f814 	bl	8008b98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b70:	2204      	movs	r2, #4
 8008b72:	4908      	ldr	r1, [pc, #32]	; (8008b94 <Get_SerialNum+0x54>)
 8008b74:	68b8      	ldr	r0, [r7, #8]
 8008b76:	f000 f80f 	bl	8008b98 <IntToUnicode>
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	1ffff7e8 	.word	0x1ffff7e8
 8008b88:	1ffff7ec 	.word	0x1ffff7ec
 8008b8c:	1ffff7f0 	.word	0x1ffff7f0
 8008b90:	20000162 	.word	0x20000162
 8008b94:	20000172 	.word	0x20000172

08008b98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008baa:	2300      	movs	r3, #0
 8008bac:	75fb      	strb	r3, [r7, #23]
 8008bae:	e027      	b.n	8008c00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	0f1b      	lsrs	r3, r3, #28
 8008bb4:	2b09      	cmp	r3, #9
 8008bb6:	d80b      	bhi.n	8008bd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	0f1b      	lsrs	r3, r3, #28
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	005b      	lsls	r3, r3, #1
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	440b      	add	r3, r1
 8008bc8:	3230      	adds	r2, #48	; 0x30
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	e00a      	b.n	8008be6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	0f1b      	lsrs	r3, r3, #28
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	005b      	lsls	r3, r3, #1
 8008bda:	4619      	mov	r1, r3
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	440b      	add	r3, r1
 8008be0:	3237      	adds	r2, #55	; 0x37
 8008be2:	b2d2      	uxtb	r2, r2
 8008be4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	011b      	lsls	r3, r3, #4
 8008bea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
 8008bee:	005b      	lsls	r3, r3, #1
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	75fb      	strb	r3, [r7, #23]
 8008c00:	7dfa      	ldrb	r2, [r7, #23]
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d3d3      	bcc.n	8008bb0 <IntToUnicode+0x18>
  }
}
 8008c08:	bf00      	nop
 8008c0a:	bf00      	nop
 8008c0c:	371c      	adds	r7, #28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr

08008c14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a0d      	ldr	r2, [pc, #52]	; (8008c58 <HAL_PCD_MspInit+0x44>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d113      	bne.n	8008c4e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008c26:	4b0d      	ldr	r3, [pc, #52]	; (8008c5c <HAL_PCD_MspInit+0x48>)
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	4a0c      	ldr	r2, [pc, #48]	; (8008c5c <HAL_PCD_MspInit+0x48>)
 8008c2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c30:	61d3      	str	r3, [r2, #28]
 8008c32:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <HAL_PCD_MspInit+0x48>)
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2100      	movs	r1, #0
 8008c42:	2014      	movs	r0, #20
 8008c44:	f7f8 fce1 	bl	800160a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008c48:	2014      	movs	r0, #20
 8008c4a:	f7f8 fcfa 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	40005c00 	.word	0x40005c00
 8008c5c:	40021000 	.word	0x40021000

08008c60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f7fe fdb5 	bl	80077e6 <USBD_LL_SetupStage>
}
 8008c7c:	bf00      	nop
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	440b      	add	r3, r1
 8008ca4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	4619      	mov	r1, r3
 8008cae:	f7fe fde7 	bl	8007880 <USBD_LL_DataOutStage>
}
 8008cb2:	bf00      	nop
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008ccc:	78fa      	ldrb	r2, [r7, #3]
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	440b      	add	r3, r1
 8008cda:	333c      	adds	r3, #60	; 0x3c
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	78fb      	ldrb	r3, [r7, #3]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	f7fe fe3e 	bl	8007962 <USBD_LL_DataInStage>
}
 8008ce6:	bf00      	nop
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b082      	sub	sp, #8
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fe ff4e 	bl	8007b9e <USBD_LL_SOF>
}
 8008d02:	bf00      	nop
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d12:	2301      	movs	r3, #1
 8008d14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d001      	beq.n	8008d22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d1e:	f7f7 fcfd 	bl	800071c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008d28:	7bfa      	ldrb	r2, [r7, #15]
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fe fefe 	bl	8007b2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fe feb7 	bl	8007aac <USBD_LL_Reset>
}
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fe fef8 	bl	8007b4c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d64:	4b04      	ldr	r3, [pc, #16]	; (8008d78 <HAL_PCD_SuspendCallback+0x30>)
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	4a03      	ldr	r2, [pc, #12]	; (8008d78 <HAL_PCD_SuspendCallback+0x30>)
 8008d6a:	f043 0306 	orr.w	r3, r3, #6
 8008d6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	e000ed00 	.word	0xe000ed00

08008d7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fef2 	bl	8007b74 <USBD_LL_Resume>
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008da0:	4a28      	ldr	r2, [pc, #160]	; (8008e44 <USBD_LL_Init+0xac>)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a26      	ldr	r2, [pc, #152]	; (8008e44 <USBD_LL_Init+0xac>)
 8008dac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008db0:	4b24      	ldr	r3, [pc, #144]	; (8008e44 <USBD_LL_Init+0xac>)
 8008db2:	4a25      	ldr	r2, [pc, #148]	; (8008e48 <USBD_LL_Init+0xb0>)
 8008db4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008db6:	4b23      	ldr	r3, [pc, #140]	; (8008e44 <USBD_LL_Init+0xac>)
 8008db8:	2208      	movs	r2, #8
 8008dba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008dbc:	4b21      	ldr	r3, [pc, #132]	; (8008e44 <USBD_LL_Init+0xac>)
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008dc2:	4b20      	ldr	r3, [pc, #128]	; (8008e44 <USBD_LL_Init+0xac>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008dc8:	4b1e      	ldr	r3, [pc, #120]	; (8008e44 <USBD_LL_Init+0xac>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008dce:	4b1d      	ldr	r3, [pc, #116]	; (8008e44 <USBD_LL_Init+0xac>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008dd4:	481b      	ldr	r0, [pc, #108]	; (8008e44 <USBD_LL_Init+0xac>)
 8008dd6:	f7f9 f809 	bl	8001dec <HAL_PCD_Init>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008de0:	f7f7 fc9c 	bl	800071c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008dea:	2318      	movs	r3, #24
 8008dec:	2200      	movs	r2, #0
 8008dee:	2100      	movs	r1, #0
 8008df0:	f7fa fd28 	bl	8003844 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008dfa:	2358      	movs	r3, #88	; 0x58
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2180      	movs	r1, #128	; 0x80
 8008e00:	f7fa fd20 	bl	8003844 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e0a:	23c0      	movs	r3, #192	; 0xc0
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2181      	movs	r1, #129	; 0x81
 8008e10:	f7fa fd18 	bl	8003844 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e1a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008e1e:	2200      	movs	r2, #0
 8008e20:	2101      	movs	r1, #1
 8008e22:	f7fa fd0f 	bl	8003844 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e30:	2200      	movs	r2, #0
 8008e32:	2182      	movs	r1, #130	; 0x82
 8008e34:	f7fa fd06 	bl	8003844 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20000fc4 	.word	0x20000fc4
 8008e48:	40005c00 	.word	0x40005c00

08008e4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7f9 f8c1 	bl	8001fea <HAL_PCD_Start>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 f94e 	bl	8009110 <USBD_Get_USB_Status>
 8008e74:	4603      	mov	r3, r0
 8008e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	4608      	mov	r0, r1
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	461a      	mov	r2, r3
 8008e90:	4603      	mov	r3, r0
 8008e92:	70fb      	strb	r3, [r7, #3]
 8008e94:	460b      	mov	r3, r1
 8008e96:	70bb      	strb	r3, [r7, #2]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008eaa:	78bb      	ldrb	r3, [r7, #2]
 8008eac:	883a      	ldrh	r2, [r7, #0]
 8008eae:	78f9      	ldrb	r1, [r7, #3]
 8008eb0:	f7f9 fa16 	bl	80022e0 <HAL_PCD_EP_Open>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 f928 	bl	8009110 <USBD_Get_USB_Status>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ee8:	78fa      	ldrb	r2, [r7, #3]
 8008eea:	4611      	mov	r1, r2
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7f9 fa54 	bl	800239a <HAL_PCD_EP_Close>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 f909 	bl	8009110 <USBD_Get_USB_Status>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f26:	78fa      	ldrb	r2, [r7, #3]
 8008f28:	4611      	mov	r1, r2
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7f9 fafc 	bl	8002528 <HAL_PCD_EP_SetStall>
 8008f30:	4603      	mov	r3, r0
 8008f32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 f8ea 	bl	8009110 <USBD_Get_USB_Status>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	460b      	mov	r3, r1
 8008f54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	4611      	mov	r1, r2
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7f9 fb3d 	bl	80025e8 <HAL_PCD_EP_ClrStall>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 f8cb 	bl	8009110 <USBD_Get_USB_Status>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	da0c      	bge.n	8008fbe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008faa:	68f9      	ldr	r1, [r7, #12]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	440b      	add	r3, r1
 8008fb8:	3302      	adds	r3, #2
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	e00b      	b.n	8008fd6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fbe:	78fb      	ldrb	r3, [r7, #3]
 8008fc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fc4:	68f9      	ldr	r1, [r7, #12]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	00db      	lsls	r3, r3, #3
 8008fce:	440b      	add	r3, r1
 8008fd0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008fd4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bc80      	pop	{r7}
 8008fde:	4770      	bx	lr

08008fe0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ffa:	78fa      	ldrb	r2, [r7, #3]
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7f9 f949 	bl	8002296 <HAL_PCD_SetAddress>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	4618      	mov	r0, r3
 800900c:	f000 f880 	bl	8009110 <USBD_Get_USB_Status>
 8009010:	4603      	mov	r3, r0
 8009012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009014:	7bbb      	ldrb	r3, [r7, #14]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b086      	sub	sp, #24
 8009022:	af00      	add	r7, sp, #0
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	607a      	str	r2, [r7, #4]
 8009028:	461a      	mov	r2, r3
 800902a:	460b      	mov	r3, r1
 800902c:	72fb      	strb	r3, [r7, #11]
 800902e:	4613      	mov	r3, r2
 8009030:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009040:	893b      	ldrh	r3, [r7, #8]
 8009042:	7af9      	ldrb	r1, [r7, #11]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	f7f9 fa38 	bl	80024ba <HAL_PCD_EP_Transmit>
 800904a:	4603      	mov	r3, r0
 800904c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 f85d 	bl	8009110 <USBD_Get_USB_Status>
 8009056:	4603      	mov	r3, r0
 8009058:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800905a:	7dbb      	ldrb	r3, [r7, #22]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	607a      	str	r2, [r7, #4]
 800906e:	461a      	mov	r2, r3
 8009070:	460b      	mov	r3, r1
 8009072:	72fb      	strb	r3, [r7, #11]
 8009074:	4613      	mov	r3, r2
 8009076:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009086:	893b      	ldrh	r3, [r7, #8]
 8009088:	7af9      	ldrb	r1, [r7, #11]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	f7f9 f9cd 	bl	800242a <HAL_PCD_EP_Receive>
 8009090:	4603      	mov	r3, r0
 8009092:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009094:	7dfb      	ldrb	r3, [r7, #23]
 8009096:	4618      	mov	r0, r3
 8009098:	f000 f83a 	bl	8009110 <USBD_Get_USB_Status>
 800909c:	4603      	mov	r3, r0
 800909e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	460b      	mov	r3, r1
 80090b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090bc:	78fa      	ldrb	r2, [r7, #3]
 80090be:	4611      	mov	r1, r2
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7f9 f9e3 	bl	800248c <HAL_PCD_EP_GetRxCount>
 80090c6:	4603      	mov	r3, r0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80090d8:	4b02      	ldr	r3, [pc, #8]	; (80090e4 <USBD_static_malloc+0x14>)
}
 80090da:	4618      	mov	r0, r3
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	bc80      	pop	{r7}
 80090e2:	4770      	bx	lr
 80090e4:	200012b4 	.word	0x200012b4

080090e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]

}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bc80      	pop	{r7}
 80090f8:	4770      	bx	lr

080090fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	460b      	mov	r3, r1
 8009104:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009106:	bf00      	nop
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	bc80      	pop	{r7}
 800910e:	4770      	bx	lr

08009110 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800911e:	79fb      	ldrb	r3, [r7, #7]
 8009120:	2b03      	cmp	r3, #3
 8009122:	d817      	bhi.n	8009154 <USBD_Get_USB_Status+0x44>
 8009124:	a201      	add	r2, pc, #4	; (adr r2, 800912c <USBD_Get_USB_Status+0x1c>)
 8009126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912a:	bf00      	nop
 800912c:	0800913d 	.word	0x0800913d
 8009130:	08009143 	.word	0x08009143
 8009134:	08009149 	.word	0x08009149
 8009138:	0800914f 	.word	0x0800914f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]
    break;
 8009140:	e00b      	b.n	800915a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009142:	2302      	movs	r3, #2
 8009144:	73fb      	strb	r3, [r7, #15]
    break;
 8009146:	e008      	b.n	800915a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009148:	2301      	movs	r3, #1
 800914a:	73fb      	strb	r3, [r7, #15]
    break;
 800914c:	e005      	b.n	800915a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800914e:	2302      	movs	r3, #2
 8009150:	73fb      	strb	r3, [r7, #15]
    break;
 8009152:	e002      	b.n	800915a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009154:	2302      	movs	r3, #2
 8009156:	73fb      	strb	r3, [r7, #15]
    break;
 8009158:	bf00      	nop
  }
  return usb_status;
 800915a:	7bfb      	ldrb	r3, [r7, #15]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	bc80      	pop	{r7}
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop

08009168 <atoi>:
 8009168:	220a      	movs	r2, #10
 800916a:	2100      	movs	r1, #0
 800916c:	f000 b87e 	b.w	800926c <strtol>

08009170 <_strtol_l.constprop.0>:
 8009170:	2b01      	cmp	r3, #1
 8009172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009176:	4686      	mov	lr, r0
 8009178:	4690      	mov	r8, r2
 800917a:	d001      	beq.n	8009180 <_strtol_l.constprop.0+0x10>
 800917c:	2b24      	cmp	r3, #36	; 0x24
 800917e:	d906      	bls.n	800918e <_strtol_l.constprop.0+0x1e>
 8009180:	f000 f8a6 	bl	80092d0 <__errno>
 8009184:	2316      	movs	r3, #22
 8009186:	6003      	str	r3, [r0, #0]
 8009188:	2000      	movs	r0, #0
 800918a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918e:	460d      	mov	r5, r1
 8009190:	4835      	ldr	r0, [pc, #212]	; (8009268 <_strtol_l.constprop.0+0xf8>)
 8009192:	462a      	mov	r2, r5
 8009194:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009198:	5d06      	ldrb	r6, [r0, r4]
 800919a:	f016 0608 	ands.w	r6, r6, #8
 800919e:	d1f8      	bne.n	8009192 <_strtol_l.constprop.0+0x22>
 80091a0:	2c2d      	cmp	r4, #45	; 0x2d
 80091a2:	d12e      	bne.n	8009202 <_strtol_l.constprop.0+0x92>
 80091a4:	2601      	movs	r6, #1
 80091a6:	782c      	ldrb	r4, [r5, #0]
 80091a8:	1c95      	adds	r5, r2, #2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d057      	beq.n	800925e <_strtol_l.constprop.0+0xee>
 80091ae:	2b10      	cmp	r3, #16
 80091b0:	d109      	bne.n	80091c6 <_strtol_l.constprop.0+0x56>
 80091b2:	2c30      	cmp	r4, #48	; 0x30
 80091b4:	d107      	bne.n	80091c6 <_strtol_l.constprop.0+0x56>
 80091b6:	782a      	ldrb	r2, [r5, #0]
 80091b8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80091bc:	2a58      	cmp	r2, #88	; 0x58
 80091be:	d149      	bne.n	8009254 <_strtol_l.constprop.0+0xe4>
 80091c0:	2310      	movs	r3, #16
 80091c2:	786c      	ldrb	r4, [r5, #1]
 80091c4:	3502      	adds	r5, #2
 80091c6:	2200      	movs	r2, #0
 80091c8:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80091cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80091d0:	fbbc f9f3 	udiv	r9, ip, r3
 80091d4:	4610      	mov	r0, r2
 80091d6:	fb03 ca19 	mls	sl, r3, r9, ip
 80091da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80091de:	2f09      	cmp	r7, #9
 80091e0:	d814      	bhi.n	800920c <_strtol_l.constprop.0+0x9c>
 80091e2:	463c      	mov	r4, r7
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	dd20      	ble.n	800922a <_strtol_l.constprop.0+0xba>
 80091e8:	1c57      	adds	r7, r2, #1
 80091ea:	d007      	beq.n	80091fc <_strtol_l.constprop.0+0x8c>
 80091ec:	4581      	cmp	r9, r0
 80091ee:	d319      	bcc.n	8009224 <_strtol_l.constprop.0+0xb4>
 80091f0:	d101      	bne.n	80091f6 <_strtol_l.constprop.0+0x86>
 80091f2:	45a2      	cmp	sl, r4
 80091f4:	db16      	blt.n	8009224 <_strtol_l.constprop.0+0xb4>
 80091f6:	2201      	movs	r2, #1
 80091f8:	fb00 4003 	mla	r0, r0, r3, r4
 80091fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009200:	e7eb      	b.n	80091da <_strtol_l.constprop.0+0x6a>
 8009202:	2c2b      	cmp	r4, #43	; 0x2b
 8009204:	bf04      	itt	eq
 8009206:	782c      	ldrbeq	r4, [r5, #0]
 8009208:	1c95      	addeq	r5, r2, #2
 800920a:	e7ce      	b.n	80091aa <_strtol_l.constprop.0+0x3a>
 800920c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009210:	2f19      	cmp	r7, #25
 8009212:	d801      	bhi.n	8009218 <_strtol_l.constprop.0+0xa8>
 8009214:	3c37      	subs	r4, #55	; 0x37
 8009216:	e7e5      	b.n	80091e4 <_strtol_l.constprop.0+0x74>
 8009218:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800921c:	2f19      	cmp	r7, #25
 800921e:	d804      	bhi.n	800922a <_strtol_l.constprop.0+0xba>
 8009220:	3c57      	subs	r4, #87	; 0x57
 8009222:	e7df      	b.n	80091e4 <_strtol_l.constprop.0+0x74>
 8009224:	f04f 32ff 	mov.w	r2, #4294967295
 8009228:	e7e8      	b.n	80091fc <_strtol_l.constprop.0+0x8c>
 800922a:	1c53      	adds	r3, r2, #1
 800922c:	d108      	bne.n	8009240 <_strtol_l.constprop.0+0xd0>
 800922e:	2322      	movs	r3, #34	; 0x22
 8009230:	4660      	mov	r0, ip
 8009232:	f8ce 3000 	str.w	r3, [lr]
 8009236:	f1b8 0f00 	cmp.w	r8, #0
 800923a:	d0a6      	beq.n	800918a <_strtol_l.constprop.0+0x1a>
 800923c:	1e69      	subs	r1, r5, #1
 800923e:	e006      	b.n	800924e <_strtol_l.constprop.0+0xde>
 8009240:	b106      	cbz	r6, 8009244 <_strtol_l.constprop.0+0xd4>
 8009242:	4240      	negs	r0, r0
 8009244:	f1b8 0f00 	cmp.w	r8, #0
 8009248:	d09f      	beq.n	800918a <_strtol_l.constprop.0+0x1a>
 800924a:	2a00      	cmp	r2, #0
 800924c:	d1f6      	bne.n	800923c <_strtol_l.constprop.0+0xcc>
 800924e:	f8c8 1000 	str.w	r1, [r8]
 8009252:	e79a      	b.n	800918a <_strtol_l.constprop.0+0x1a>
 8009254:	2430      	movs	r4, #48	; 0x30
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1b5      	bne.n	80091c6 <_strtol_l.constprop.0+0x56>
 800925a:	2308      	movs	r3, #8
 800925c:	e7b3      	b.n	80091c6 <_strtol_l.constprop.0+0x56>
 800925e:	2c30      	cmp	r4, #48	; 0x30
 8009260:	d0a9      	beq.n	80091b6 <_strtol_l.constprop.0+0x46>
 8009262:	230a      	movs	r3, #10
 8009264:	e7af      	b.n	80091c6 <_strtol_l.constprop.0+0x56>
 8009266:	bf00      	nop
 8009268:	08009c93 	.word	0x08009c93

0800926c <strtol>:
 800926c:	4613      	mov	r3, r2
 800926e:	460a      	mov	r2, r1
 8009270:	4601      	mov	r1, r0
 8009272:	4802      	ldr	r0, [pc, #8]	; (800927c <strtol+0x10>)
 8009274:	6800      	ldr	r0, [r0, #0]
 8009276:	f7ff bf7b 	b.w	8009170 <_strtol_l.constprop.0>
 800927a:	bf00      	nop
 800927c:	200001c8 	.word	0x200001c8

08009280 <siprintf>:
 8009280:	b40e      	push	{r1, r2, r3}
 8009282:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009286:	b500      	push	{lr}
 8009288:	b09c      	sub	sp, #112	; 0x70
 800928a:	ab1d      	add	r3, sp, #116	; 0x74
 800928c:	9002      	str	r0, [sp, #8]
 800928e:	9006      	str	r0, [sp, #24]
 8009290:	9107      	str	r1, [sp, #28]
 8009292:	9104      	str	r1, [sp, #16]
 8009294:	4808      	ldr	r0, [pc, #32]	; (80092b8 <siprintf+0x38>)
 8009296:	4909      	ldr	r1, [pc, #36]	; (80092bc <siprintf+0x3c>)
 8009298:	f853 2b04 	ldr.w	r2, [r3], #4
 800929c:	9105      	str	r1, [sp, #20]
 800929e:	6800      	ldr	r0, [r0, #0]
 80092a0:	a902      	add	r1, sp, #8
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	f000 f99c 	bl	80095e0 <_svfiprintf_r>
 80092a8:	2200      	movs	r2, #0
 80092aa:	9b02      	ldr	r3, [sp, #8]
 80092ac:	701a      	strb	r2, [r3, #0]
 80092ae:	b01c      	add	sp, #112	; 0x70
 80092b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092b4:	b003      	add	sp, #12
 80092b6:	4770      	bx	lr
 80092b8:	200001c8 	.word	0x200001c8
 80092bc:	ffff0208 	.word	0xffff0208

080092c0 <memset>:
 80092c0:	4603      	mov	r3, r0
 80092c2:	4402      	add	r2, r0
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d100      	bne.n	80092ca <memset+0xa>
 80092c8:	4770      	bx	lr
 80092ca:	f803 1b01 	strb.w	r1, [r3], #1
 80092ce:	e7f9      	b.n	80092c4 <memset+0x4>

080092d0 <__errno>:
 80092d0:	4b01      	ldr	r3, [pc, #4]	; (80092d8 <__errno+0x8>)
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	200001c8 	.word	0x200001c8

080092dc <__libc_init_array>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	2600      	movs	r6, #0
 80092e0:	4d0c      	ldr	r5, [pc, #48]	; (8009314 <__libc_init_array+0x38>)
 80092e2:	4c0d      	ldr	r4, [pc, #52]	; (8009318 <__libc_init_array+0x3c>)
 80092e4:	1b64      	subs	r4, r4, r5
 80092e6:	10a4      	asrs	r4, r4, #2
 80092e8:	42a6      	cmp	r6, r4
 80092ea:	d109      	bne.n	8009300 <__libc_init_array+0x24>
 80092ec:	f000 fc7a 	bl	8009be4 <_init>
 80092f0:	2600      	movs	r6, #0
 80092f2:	4d0a      	ldr	r5, [pc, #40]	; (800931c <__libc_init_array+0x40>)
 80092f4:	4c0a      	ldr	r4, [pc, #40]	; (8009320 <__libc_init_array+0x44>)
 80092f6:	1b64      	subs	r4, r4, r5
 80092f8:	10a4      	asrs	r4, r4, #2
 80092fa:	42a6      	cmp	r6, r4
 80092fc:	d105      	bne.n	800930a <__libc_init_array+0x2e>
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	f855 3b04 	ldr.w	r3, [r5], #4
 8009304:	4798      	blx	r3
 8009306:	3601      	adds	r6, #1
 8009308:	e7ee      	b.n	80092e8 <__libc_init_array+0xc>
 800930a:	f855 3b04 	ldr.w	r3, [r5], #4
 800930e:	4798      	blx	r3
 8009310:	3601      	adds	r6, #1
 8009312:	e7f2      	b.n	80092fa <__libc_init_array+0x1e>
 8009314:	08009dc8 	.word	0x08009dc8
 8009318:	08009dc8 	.word	0x08009dc8
 800931c:	08009dc8 	.word	0x08009dc8
 8009320:	08009dcc 	.word	0x08009dcc

08009324 <__retarget_lock_acquire_recursive>:
 8009324:	4770      	bx	lr

08009326 <__retarget_lock_release_recursive>:
 8009326:	4770      	bx	lr

08009328 <memcpy>:
 8009328:	440a      	add	r2, r1
 800932a:	4291      	cmp	r1, r2
 800932c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009330:	d100      	bne.n	8009334 <memcpy+0xc>
 8009332:	4770      	bx	lr
 8009334:	b510      	push	{r4, lr}
 8009336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800933a:	4291      	cmp	r1, r2
 800933c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009340:	d1f9      	bne.n	8009336 <memcpy+0xe>
 8009342:	bd10      	pop	{r4, pc}

08009344 <_free_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4605      	mov	r5, r0
 8009348:	2900      	cmp	r1, #0
 800934a:	d040      	beq.n	80093ce <_free_r+0x8a>
 800934c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009350:	1f0c      	subs	r4, r1, #4
 8009352:	2b00      	cmp	r3, #0
 8009354:	bfb8      	it	lt
 8009356:	18e4      	addlt	r4, r4, r3
 8009358:	f000 f8dc 	bl	8009514 <__malloc_lock>
 800935c:	4a1c      	ldr	r2, [pc, #112]	; (80093d0 <_free_r+0x8c>)
 800935e:	6813      	ldr	r3, [r2, #0]
 8009360:	b933      	cbnz	r3, 8009370 <_free_r+0x2c>
 8009362:	6063      	str	r3, [r4, #4]
 8009364:	6014      	str	r4, [r2, #0]
 8009366:	4628      	mov	r0, r5
 8009368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800936c:	f000 b8d8 	b.w	8009520 <__malloc_unlock>
 8009370:	42a3      	cmp	r3, r4
 8009372:	d908      	bls.n	8009386 <_free_r+0x42>
 8009374:	6820      	ldr	r0, [r4, #0]
 8009376:	1821      	adds	r1, r4, r0
 8009378:	428b      	cmp	r3, r1
 800937a:	bf01      	itttt	eq
 800937c:	6819      	ldreq	r1, [r3, #0]
 800937e:	685b      	ldreq	r3, [r3, #4]
 8009380:	1809      	addeq	r1, r1, r0
 8009382:	6021      	streq	r1, [r4, #0]
 8009384:	e7ed      	b.n	8009362 <_free_r+0x1e>
 8009386:	461a      	mov	r2, r3
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	b10b      	cbz	r3, 8009390 <_free_r+0x4c>
 800938c:	42a3      	cmp	r3, r4
 800938e:	d9fa      	bls.n	8009386 <_free_r+0x42>
 8009390:	6811      	ldr	r1, [r2, #0]
 8009392:	1850      	adds	r0, r2, r1
 8009394:	42a0      	cmp	r0, r4
 8009396:	d10b      	bne.n	80093b0 <_free_r+0x6c>
 8009398:	6820      	ldr	r0, [r4, #0]
 800939a:	4401      	add	r1, r0
 800939c:	1850      	adds	r0, r2, r1
 800939e:	4283      	cmp	r3, r0
 80093a0:	6011      	str	r1, [r2, #0]
 80093a2:	d1e0      	bne.n	8009366 <_free_r+0x22>
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	4408      	add	r0, r1
 80093aa:	6010      	str	r0, [r2, #0]
 80093ac:	6053      	str	r3, [r2, #4]
 80093ae:	e7da      	b.n	8009366 <_free_r+0x22>
 80093b0:	d902      	bls.n	80093b8 <_free_r+0x74>
 80093b2:	230c      	movs	r3, #12
 80093b4:	602b      	str	r3, [r5, #0]
 80093b6:	e7d6      	b.n	8009366 <_free_r+0x22>
 80093b8:	6820      	ldr	r0, [r4, #0]
 80093ba:	1821      	adds	r1, r4, r0
 80093bc:	428b      	cmp	r3, r1
 80093be:	bf01      	itttt	eq
 80093c0:	6819      	ldreq	r1, [r3, #0]
 80093c2:	685b      	ldreq	r3, [r3, #4]
 80093c4:	1809      	addeq	r1, r1, r0
 80093c6:	6021      	streq	r1, [r4, #0]
 80093c8:	6063      	str	r3, [r4, #4]
 80093ca:	6054      	str	r4, [r2, #4]
 80093cc:	e7cb      	b.n	8009366 <_free_r+0x22>
 80093ce:	bd38      	pop	{r3, r4, r5, pc}
 80093d0:	20001614 	.word	0x20001614

080093d4 <sbrk_aligned>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	4e0e      	ldr	r6, [pc, #56]	; (8009410 <sbrk_aligned+0x3c>)
 80093d8:	460c      	mov	r4, r1
 80093da:	6831      	ldr	r1, [r6, #0]
 80093dc:	4605      	mov	r5, r0
 80093de:	b911      	cbnz	r1, 80093e6 <sbrk_aligned+0x12>
 80093e0:	f000 fbaa 	bl	8009b38 <_sbrk_r>
 80093e4:	6030      	str	r0, [r6, #0]
 80093e6:	4621      	mov	r1, r4
 80093e8:	4628      	mov	r0, r5
 80093ea:	f000 fba5 	bl	8009b38 <_sbrk_r>
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	d00a      	beq.n	8009408 <sbrk_aligned+0x34>
 80093f2:	1cc4      	adds	r4, r0, #3
 80093f4:	f024 0403 	bic.w	r4, r4, #3
 80093f8:	42a0      	cmp	r0, r4
 80093fa:	d007      	beq.n	800940c <sbrk_aligned+0x38>
 80093fc:	1a21      	subs	r1, r4, r0
 80093fe:	4628      	mov	r0, r5
 8009400:	f000 fb9a 	bl	8009b38 <_sbrk_r>
 8009404:	3001      	adds	r0, #1
 8009406:	d101      	bne.n	800940c <sbrk_aligned+0x38>
 8009408:	f04f 34ff 	mov.w	r4, #4294967295
 800940c:	4620      	mov	r0, r4
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	20001618 	.word	0x20001618

08009414 <_malloc_r>:
 8009414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009418:	1ccd      	adds	r5, r1, #3
 800941a:	f025 0503 	bic.w	r5, r5, #3
 800941e:	3508      	adds	r5, #8
 8009420:	2d0c      	cmp	r5, #12
 8009422:	bf38      	it	cc
 8009424:	250c      	movcc	r5, #12
 8009426:	2d00      	cmp	r5, #0
 8009428:	4607      	mov	r7, r0
 800942a:	db01      	blt.n	8009430 <_malloc_r+0x1c>
 800942c:	42a9      	cmp	r1, r5
 800942e:	d905      	bls.n	800943c <_malloc_r+0x28>
 8009430:	230c      	movs	r3, #12
 8009432:	2600      	movs	r6, #0
 8009434:	603b      	str	r3, [r7, #0]
 8009436:	4630      	mov	r0, r6
 8009438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800943c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009510 <_malloc_r+0xfc>
 8009440:	f000 f868 	bl	8009514 <__malloc_lock>
 8009444:	f8d8 3000 	ldr.w	r3, [r8]
 8009448:	461c      	mov	r4, r3
 800944a:	bb5c      	cbnz	r4, 80094a4 <_malloc_r+0x90>
 800944c:	4629      	mov	r1, r5
 800944e:	4638      	mov	r0, r7
 8009450:	f7ff ffc0 	bl	80093d4 <sbrk_aligned>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	4604      	mov	r4, r0
 8009458:	d155      	bne.n	8009506 <_malloc_r+0xf2>
 800945a:	f8d8 4000 	ldr.w	r4, [r8]
 800945e:	4626      	mov	r6, r4
 8009460:	2e00      	cmp	r6, #0
 8009462:	d145      	bne.n	80094f0 <_malloc_r+0xdc>
 8009464:	2c00      	cmp	r4, #0
 8009466:	d048      	beq.n	80094fa <_malloc_r+0xe6>
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	4631      	mov	r1, r6
 800946c:	4638      	mov	r0, r7
 800946e:	eb04 0903 	add.w	r9, r4, r3
 8009472:	f000 fb61 	bl	8009b38 <_sbrk_r>
 8009476:	4581      	cmp	r9, r0
 8009478:	d13f      	bne.n	80094fa <_malloc_r+0xe6>
 800947a:	6821      	ldr	r1, [r4, #0]
 800947c:	4638      	mov	r0, r7
 800947e:	1a6d      	subs	r5, r5, r1
 8009480:	4629      	mov	r1, r5
 8009482:	f7ff ffa7 	bl	80093d4 <sbrk_aligned>
 8009486:	3001      	adds	r0, #1
 8009488:	d037      	beq.n	80094fa <_malloc_r+0xe6>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	442b      	add	r3, r5
 800948e:	6023      	str	r3, [r4, #0]
 8009490:	f8d8 3000 	ldr.w	r3, [r8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d038      	beq.n	800950a <_malloc_r+0xf6>
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	42a2      	cmp	r2, r4
 800949c:	d12b      	bne.n	80094f6 <_malloc_r+0xe2>
 800949e:	2200      	movs	r2, #0
 80094a0:	605a      	str	r2, [r3, #4]
 80094a2:	e00f      	b.n	80094c4 <_malloc_r+0xb0>
 80094a4:	6822      	ldr	r2, [r4, #0]
 80094a6:	1b52      	subs	r2, r2, r5
 80094a8:	d41f      	bmi.n	80094ea <_malloc_r+0xd6>
 80094aa:	2a0b      	cmp	r2, #11
 80094ac:	d917      	bls.n	80094de <_malloc_r+0xca>
 80094ae:	1961      	adds	r1, r4, r5
 80094b0:	42a3      	cmp	r3, r4
 80094b2:	6025      	str	r5, [r4, #0]
 80094b4:	bf18      	it	ne
 80094b6:	6059      	strne	r1, [r3, #4]
 80094b8:	6863      	ldr	r3, [r4, #4]
 80094ba:	bf08      	it	eq
 80094bc:	f8c8 1000 	streq.w	r1, [r8]
 80094c0:	5162      	str	r2, [r4, r5]
 80094c2:	604b      	str	r3, [r1, #4]
 80094c4:	4638      	mov	r0, r7
 80094c6:	f104 060b 	add.w	r6, r4, #11
 80094ca:	f000 f829 	bl	8009520 <__malloc_unlock>
 80094ce:	f026 0607 	bic.w	r6, r6, #7
 80094d2:	1d23      	adds	r3, r4, #4
 80094d4:	1af2      	subs	r2, r6, r3
 80094d6:	d0ae      	beq.n	8009436 <_malloc_r+0x22>
 80094d8:	1b9b      	subs	r3, r3, r6
 80094da:	50a3      	str	r3, [r4, r2]
 80094dc:	e7ab      	b.n	8009436 <_malloc_r+0x22>
 80094de:	42a3      	cmp	r3, r4
 80094e0:	6862      	ldr	r2, [r4, #4]
 80094e2:	d1dd      	bne.n	80094a0 <_malloc_r+0x8c>
 80094e4:	f8c8 2000 	str.w	r2, [r8]
 80094e8:	e7ec      	b.n	80094c4 <_malloc_r+0xb0>
 80094ea:	4623      	mov	r3, r4
 80094ec:	6864      	ldr	r4, [r4, #4]
 80094ee:	e7ac      	b.n	800944a <_malloc_r+0x36>
 80094f0:	4634      	mov	r4, r6
 80094f2:	6876      	ldr	r6, [r6, #4]
 80094f4:	e7b4      	b.n	8009460 <_malloc_r+0x4c>
 80094f6:	4613      	mov	r3, r2
 80094f8:	e7cc      	b.n	8009494 <_malloc_r+0x80>
 80094fa:	230c      	movs	r3, #12
 80094fc:	4638      	mov	r0, r7
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	f000 f80e 	bl	8009520 <__malloc_unlock>
 8009504:	e797      	b.n	8009436 <_malloc_r+0x22>
 8009506:	6025      	str	r5, [r4, #0]
 8009508:	e7dc      	b.n	80094c4 <_malloc_r+0xb0>
 800950a:	605b      	str	r3, [r3, #4]
 800950c:	deff      	udf	#255	; 0xff
 800950e:	bf00      	nop
 8009510:	20001614 	.word	0x20001614

08009514 <__malloc_lock>:
 8009514:	4801      	ldr	r0, [pc, #4]	; (800951c <__malloc_lock+0x8>)
 8009516:	f7ff bf05 	b.w	8009324 <__retarget_lock_acquire_recursive>
 800951a:	bf00      	nop
 800951c:	20001610 	.word	0x20001610

08009520 <__malloc_unlock>:
 8009520:	4801      	ldr	r0, [pc, #4]	; (8009528 <__malloc_unlock+0x8>)
 8009522:	f7ff bf00 	b.w	8009326 <__retarget_lock_release_recursive>
 8009526:	bf00      	nop
 8009528:	20001610 	.word	0x20001610

0800952c <__ssputs_r>:
 800952c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009530:	461f      	mov	r7, r3
 8009532:	688e      	ldr	r6, [r1, #8]
 8009534:	4682      	mov	sl, r0
 8009536:	42be      	cmp	r6, r7
 8009538:	460c      	mov	r4, r1
 800953a:	4690      	mov	r8, r2
 800953c:	680b      	ldr	r3, [r1, #0]
 800953e:	d82c      	bhi.n	800959a <__ssputs_r+0x6e>
 8009540:	898a      	ldrh	r2, [r1, #12]
 8009542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009546:	d026      	beq.n	8009596 <__ssputs_r+0x6a>
 8009548:	6965      	ldr	r5, [r4, #20]
 800954a:	6909      	ldr	r1, [r1, #16]
 800954c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009550:	eba3 0901 	sub.w	r9, r3, r1
 8009554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009558:	1c7b      	adds	r3, r7, #1
 800955a:	444b      	add	r3, r9
 800955c:	106d      	asrs	r5, r5, #1
 800955e:	429d      	cmp	r5, r3
 8009560:	bf38      	it	cc
 8009562:	461d      	movcc	r5, r3
 8009564:	0553      	lsls	r3, r2, #21
 8009566:	d527      	bpl.n	80095b8 <__ssputs_r+0x8c>
 8009568:	4629      	mov	r1, r5
 800956a:	f7ff ff53 	bl	8009414 <_malloc_r>
 800956e:	4606      	mov	r6, r0
 8009570:	b360      	cbz	r0, 80095cc <__ssputs_r+0xa0>
 8009572:	464a      	mov	r2, r9
 8009574:	6921      	ldr	r1, [r4, #16]
 8009576:	f7ff fed7 	bl	8009328 <memcpy>
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009584:	81a3      	strh	r3, [r4, #12]
 8009586:	6126      	str	r6, [r4, #16]
 8009588:	444e      	add	r6, r9
 800958a:	6026      	str	r6, [r4, #0]
 800958c:	463e      	mov	r6, r7
 800958e:	6165      	str	r5, [r4, #20]
 8009590:	eba5 0509 	sub.w	r5, r5, r9
 8009594:	60a5      	str	r5, [r4, #8]
 8009596:	42be      	cmp	r6, r7
 8009598:	d900      	bls.n	800959c <__ssputs_r+0x70>
 800959a:	463e      	mov	r6, r7
 800959c:	4632      	mov	r2, r6
 800959e:	4641      	mov	r1, r8
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	f000 faaf 	bl	8009b04 <memmove>
 80095a6:	2000      	movs	r0, #0
 80095a8:	68a3      	ldr	r3, [r4, #8]
 80095aa:	1b9b      	subs	r3, r3, r6
 80095ac:	60a3      	str	r3, [r4, #8]
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	4433      	add	r3, r6
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b8:	462a      	mov	r2, r5
 80095ba:	f000 fadb 	bl	8009b74 <_realloc_r>
 80095be:	4606      	mov	r6, r0
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d1e0      	bne.n	8009586 <__ssputs_r+0x5a>
 80095c4:	4650      	mov	r0, sl
 80095c6:	6921      	ldr	r1, [r4, #16]
 80095c8:	f7ff febc 	bl	8009344 <_free_r>
 80095cc:	230c      	movs	r3, #12
 80095ce:	f8ca 3000 	str.w	r3, [sl]
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	e7e9      	b.n	80095b4 <__ssputs_r+0x88>

080095e0 <_svfiprintf_r>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	4698      	mov	r8, r3
 80095e6:	898b      	ldrh	r3, [r1, #12]
 80095e8:	4607      	mov	r7, r0
 80095ea:	061b      	lsls	r3, r3, #24
 80095ec:	460d      	mov	r5, r1
 80095ee:	4614      	mov	r4, r2
 80095f0:	b09d      	sub	sp, #116	; 0x74
 80095f2:	d50e      	bpl.n	8009612 <_svfiprintf_r+0x32>
 80095f4:	690b      	ldr	r3, [r1, #16]
 80095f6:	b963      	cbnz	r3, 8009612 <_svfiprintf_r+0x32>
 80095f8:	2140      	movs	r1, #64	; 0x40
 80095fa:	f7ff ff0b 	bl	8009414 <_malloc_r>
 80095fe:	6028      	str	r0, [r5, #0]
 8009600:	6128      	str	r0, [r5, #16]
 8009602:	b920      	cbnz	r0, 800960e <_svfiprintf_r+0x2e>
 8009604:	230c      	movs	r3, #12
 8009606:	603b      	str	r3, [r7, #0]
 8009608:	f04f 30ff 	mov.w	r0, #4294967295
 800960c:	e0d0      	b.n	80097b0 <_svfiprintf_r+0x1d0>
 800960e:	2340      	movs	r3, #64	; 0x40
 8009610:	616b      	str	r3, [r5, #20]
 8009612:	2300      	movs	r3, #0
 8009614:	9309      	str	r3, [sp, #36]	; 0x24
 8009616:	2320      	movs	r3, #32
 8009618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800961c:	2330      	movs	r3, #48	; 0x30
 800961e:	f04f 0901 	mov.w	r9, #1
 8009622:	f8cd 800c 	str.w	r8, [sp, #12]
 8009626:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80097c8 <_svfiprintf_r+0x1e8>
 800962a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800962e:	4623      	mov	r3, r4
 8009630:	469a      	mov	sl, r3
 8009632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009636:	b10a      	cbz	r2, 800963c <_svfiprintf_r+0x5c>
 8009638:	2a25      	cmp	r2, #37	; 0x25
 800963a:	d1f9      	bne.n	8009630 <_svfiprintf_r+0x50>
 800963c:	ebba 0b04 	subs.w	fp, sl, r4
 8009640:	d00b      	beq.n	800965a <_svfiprintf_r+0x7a>
 8009642:	465b      	mov	r3, fp
 8009644:	4622      	mov	r2, r4
 8009646:	4629      	mov	r1, r5
 8009648:	4638      	mov	r0, r7
 800964a:	f7ff ff6f 	bl	800952c <__ssputs_r>
 800964e:	3001      	adds	r0, #1
 8009650:	f000 80a9 	beq.w	80097a6 <_svfiprintf_r+0x1c6>
 8009654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009656:	445a      	add	r2, fp
 8009658:	9209      	str	r2, [sp, #36]	; 0x24
 800965a:	f89a 3000 	ldrb.w	r3, [sl]
 800965e:	2b00      	cmp	r3, #0
 8009660:	f000 80a1 	beq.w	80097a6 <_svfiprintf_r+0x1c6>
 8009664:	2300      	movs	r3, #0
 8009666:	f04f 32ff 	mov.w	r2, #4294967295
 800966a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800966e:	f10a 0a01 	add.w	sl, sl, #1
 8009672:	9304      	str	r3, [sp, #16]
 8009674:	9307      	str	r3, [sp, #28]
 8009676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800967a:	931a      	str	r3, [sp, #104]	; 0x68
 800967c:	4654      	mov	r4, sl
 800967e:	2205      	movs	r2, #5
 8009680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009684:	4850      	ldr	r0, [pc, #320]	; (80097c8 <_svfiprintf_r+0x1e8>)
 8009686:	f000 fa67 	bl	8009b58 <memchr>
 800968a:	9a04      	ldr	r2, [sp, #16]
 800968c:	b9d8      	cbnz	r0, 80096c6 <_svfiprintf_r+0xe6>
 800968e:	06d0      	lsls	r0, r2, #27
 8009690:	bf44      	itt	mi
 8009692:	2320      	movmi	r3, #32
 8009694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009698:	0711      	lsls	r1, r2, #28
 800969a:	bf44      	itt	mi
 800969c:	232b      	movmi	r3, #43	; 0x2b
 800969e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096a2:	f89a 3000 	ldrb.w	r3, [sl]
 80096a6:	2b2a      	cmp	r3, #42	; 0x2a
 80096a8:	d015      	beq.n	80096d6 <_svfiprintf_r+0xf6>
 80096aa:	4654      	mov	r4, sl
 80096ac:	2000      	movs	r0, #0
 80096ae:	f04f 0c0a 	mov.w	ip, #10
 80096b2:	9a07      	ldr	r2, [sp, #28]
 80096b4:	4621      	mov	r1, r4
 80096b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096ba:	3b30      	subs	r3, #48	; 0x30
 80096bc:	2b09      	cmp	r3, #9
 80096be:	d94d      	bls.n	800975c <_svfiprintf_r+0x17c>
 80096c0:	b1b0      	cbz	r0, 80096f0 <_svfiprintf_r+0x110>
 80096c2:	9207      	str	r2, [sp, #28]
 80096c4:	e014      	b.n	80096f0 <_svfiprintf_r+0x110>
 80096c6:	eba0 0308 	sub.w	r3, r0, r8
 80096ca:	fa09 f303 	lsl.w	r3, r9, r3
 80096ce:	4313      	orrs	r3, r2
 80096d0:	46a2      	mov	sl, r4
 80096d2:	9304      	str	r3, [sp, #16]
 80096d4:	e7d2      	b.n	800967c <_svfiprintf_r+0x9c>
 80096d6:	9b03      	ldr	r3, [sp, #12]
 80096d8:	1d19      	adds	r1, r3, #4
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	9103      	str	r1, [sp, #12]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	bfbb      	ittet	lt
 80096e2:	425b      	neglt	r3, r3
 80096e4:	f042 0202 	orrlt.w	r2, r2, #2
 80096e8:	9307      	strge	r3, [sp, #28]
 80096ea:	9307      	strlt	r3, [sp, #28]
 80096ec:	bfb8      	it	lt
 80096ee:	9204      	strlt	r2, [sp, #16]
 80096f0:	7823      	ldrb	r3, [r4, #0]
 80096f2:	2b2e      	cmp	r3, #46	; 0x2e
 80096f4:	d10c      	bne.n	8009710 <_svfiprintf_r+0x130>
 80096f6:	7863      	ldrb	r3, [r4, #1]
 80096f8:	2b2a      	cmp	r3, #42	; 0x2a
 80096fa:	d134      	bne.n	8009766 <_svfiprintf_r+0x186>
 80096fc:	9b03      	ldr	r3, [sp, #12]
 80096fe:	3402      	adds	r4, #2
 8009700:	1d1a      	adds	r2, r3, #4
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	9203      	str	r2, [sp, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	bfb8      	it	lt
 800970a:	f04f 33ff 	movlt.w	r3, #4294967295
 800970e:	9305      	str	r3, [sp, #20]
 8009710:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80097cc <_svfiprintf_r+0x1ec>
 8009714:	2203      	movs	r2, #3
 8009716:	4650      	mov	r0, sl
 8009718:	7821      	ldrb	r1, [r4, #0]
 800971a:	f000 fa1d 	bl	8009b58 <memchr>
 800971e:	b138      	cbz	r0, 8009730 <_svfiprintf_r+0x150>
 8009720:	2240      	movs	r2, #64	; 0x40
 8009722:	9b04      	ldr	r3, [sp, #16]
 8009724:	eba0 000a 	sub.w	r0, r0, sl
 8009728:	4082      	lsls	r2, r0
 800972a:	4313      	orrs	r3, r2
 800972c:	3401      	adds	r4, #1
 800972e:	9304      	str	r3, [sp, #16]
 8009730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009734:	2206      	movs	r2, #6
 8009736:	4826      	ldr	r0, [pc, #152]	; (80097d0 <_svfiprintf_r+0x1f0>)
 8009738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800973c:	f000 fa0c 	bl	8009b58 <memchr>
 8009740:	2800      	cmp	r0, #0
 8009742:	d038      	beq.n	80097b6 <_svfiprintf_r+0x1d6>
 8009744:	4b23      	ldr	r3, [pc, #140]	; (80097d4 <_svfiprintf_r+0x1f4>)
 8009746:	bb1b      	cbnz	r3, 8009790 <_svfiprintf_r+0x1b0>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	3307      	adds	r3, #7
 800974c:	f023 0307 	bic.w	r3, r3, #7
 8009750:	3308      	adds	r3, #8
 8009752:	9303      	str	r3, [sp, #12]
 8009754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009756:	4433      	add	r3, r6
 8009758:	9309      	str	r3, [sp, #36]	; 0x24
 800975a:	e768      	b.n	800962e <_svfiprintf_r+0x4e>
 800975c:	460c      	mov	r4, r1
 800975e:	2001      	movs	r0, #1
 8009760:	fb0c 3202 	mla	r2, ip, r2, r3
 8009764:	e7a6      	b.n	80096b4 <_svfiprintf_r+0xd4>
 8009766:	2300      	movs	r3, #0
 8009768:	f04f 0c0a 	mov.w	ip, #10
 800976c:	4619      	mov	r1, r3
 800976e:	3401      	adds	r4, #1
 8009770:	9305      	str	r3, [sp, #20]
 8009772:	4620      	mov	r0, r4
 8009774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009778:	3a30      	subs	r2, #48	; 0x30
 800977a:	2a09      	cmp	r2, #9
 800977c:	d903      	bls.n	8009786 <_svfiprintf_r+0x1a6>
 800977e:	2b00      	cmp	r3, #0
 8009780:	d0c6      	beq.n	8009710 <_svfiprintf_r+0x130>
 8009782:	9105      	str	r1, [sp, #20]
 8009784:	e7c4      	b.n	8009710 <_svfiprintf_r+0x130>
 8009786:	4604      	mov	r4, r0
 8009788:	2301      	movs	r3, #1
 800978a:	fb0c 2101 	mla	r1, ip, r1, r2
 800978e:	e7f0      	b.n	8009772 <_svfiprintf_r+0x192>
 8009790:	ab03      	add	r3, sp, #12
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	462a      	mov	r2, r5
 8009796:	4638      	mov	r0, r7
 8009798:	4b0f      	ldr	r3, [pc, #60]	; (80097d8 <_svfiprintf_r+0x1f8>)
 800979a:	a904      	add	r1, sp, #16
 800979c:	f3af 8000 	nop.w
 80097a0:	1c42      	adds	r2, r0, #1
 80097a2:	4606      	mov	r6, r0
 80097a4:	d1d6      	bne.n	8009754 <_svfiprintf_r+0x174>
 80097a6:	89ab      	ldrh	r3, [r5, #12]
 80097a8:	065b      	lsls	r3, r3, #25
 80097aa:	f53f af2d 	bmi.w	8009608 <_svfiprintf_r+0x28>
 80097ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097b0:	b01d      	add	sp, #116	; 0x74
 80097b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b6:	ab03      	add	r3, sp, #12
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	462a      	mov	r2, r5
 80097bc:	4638      	mov	r0, r7
 80097be:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <_svfiprintf_r+0x1f8>)
 80097c0:	a904      	add	r1, sp, #16
 80097c2:	f000 f87d 	bl	80098c0 <_printf_i>
 80097c6:	e7eb      	b.n	80097a0 <_svfiprintf_r+0x1c0>
 80097c8:	08009d93 	.word	0x08009d93
 80097cc:	08009d99 	.word	0x08009d99
 80097d0:	08009d9d 	.word	0x08009d9d
 80097d4:	00000000 	.word	0x00000000
 80097d8:	0800952d 	.word	0x0800952d

080097dc <_printf_common>:
 80097dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e0:	4616      	mov	r6, r2
 80097e2:	4699      	mov	r9, r3
 80097e4:	688a      	ldr	r2, [r1, #8]
 80097e6:	690b      	ldr	r3, [r1, #16]
 80097e8:	4607      	mov	r7, r0
 80097ea:	4293      	cmp	r3, r2
 80097ec:	bfb8      	it	lt
 80097ee:	4613      	movlt	r3, r2
 80097f0:	6033      	str	r3, [r6, #0]
 80097f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097f6:	460c      	mov	r4, r1
 80097f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097fc:	b10a      	cbz	r2, 8009802 <_printf_common+0x26>
 80097fe:	3301      	adds	r3, #1
 8009800:	6033      	str	r3, [r6, #0]
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	0699      	lsls	r1, r3, #26
 8009806:	bf42      	ittt	mi
 8009808:	6833      	ldrmi	r3, [r6, #0]
 800980a:	3302      	addmi	r3, #2
 800980c:	6033      	strmi	r3, [r6, #0]
 800980e:	6825      	ldr	r5, [r4, #0]
 8009810:	f015 0506 	ands.w	r5, r5, #6
 8009814:	d106      	bne.n	8009824 <_printf_common+0x48>
 8009816:	f104 0a19 	add.w	sl, r4, #25
 800981a:	68e3      	ldr	r3, [r4, #12]
 800981c:	6832      	ldr	r2, [r6, #0]
 800981e:	1a9b      	subs	r3, r3, r2
 8009820:	42ab      	cmp	r3, r5
 8009822:	dc2b      	bgt.n	800987c <_printf_common+0xa0>
 8009824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009828:	1e13      	subs	r3, r2, #0
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	bf18      	it	ne
 800982e:	2301      	movne	r3, #1
 8009830:	0692      	lsls	r2, r2, #26
 8009832:	d430      	bmi.n	8009896 <_printf_common+0xba>
 8009834:	4649      	mov	r1, r9
 8009836:	4638      	mov	r0, r7
 8009838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800983c:	47c0      	blx	r8
 800983e:	3001      	adds	r0, #1
 8009840:	d023      	beq.n	800988a <_printf_common+0xae>
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	6922      	ldr	r2, [r4, #16]
 8009846:	f003 0306 	and.w	r3, r3, #6
 800984a:	2b04      	cmp	r3, #4
 800984c:	bf14      	ite	ne
 800984e:	2500      	movne	r5, #0
 8009850:	6833      	ldreq	r3, [r6, #0]
 8009852:	f04f 0600 	mov.w	r6, #0
 8009856:	bf08      	it	eq
 8009858:	68e5      	ldreq	r5, [r4, #12]
 800985a:	f104 041a 	add.w	r4, r4, #26
 800985e:	bf08      	it	eq
 8009860:	1aed      	subeq	r5, r5, r3
 8009862:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009866:	bf08      	it	eq
 8009868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800986c:	4293      	cmp	r3, r2
 800986e:	bfc4      	itt	gt
 8009870:	1a9b      	subgt	r3, r3, r2
 8009872:	18ed      	addgt	r5, r5, r3
 8009874:	42b5      	cmp	r5, r6
 8009876:	d11a      	bne.n	80098ae <_printf_common+0xd2>
 8009878:	2000      	movs	r0, #0
 800987a:	e008      	b.n	800988e <_printf_common+0xb2>
 800987c:	2301      	movs	r3, #1
 800987e:	4652      	mov	r2, sl
 8009880:	4649      	mov	r1, r9
 8009882:	4638      	mov	r0, r7
 8009884:	47c0      	blx	r8
 8009886:	3001      	adds	r0, #1
 8009888:	d103      	bne.n	8009892 <_printf_common+0xb6>
 800988a:	f04f 30ff 	mov.w	r0, #4294967295
 800988e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009892:	3501      	adds	r5, #1
 8009894:	e7c1      	b.n	800981a <_printf_common+0x3e>
 8009896:	2030      	movs	r0, #48	; 0x30
 8009898:	18e1      	adds	r1, r4, r3
 800989a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800989e:	1c5a      	adds	r2, r3, #1
 80098a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098a4:	4422      	add	r2, r4
 80098a6:	3302      	adds	r3, #2
 80098a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098ac:	e7c2      	b.n	8009834 <_printf_common+0x58>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4622      	mov	r2, r4
 80098b2:	4649      	mov	r1, r9
 80098b4:	4638      	mov	r0, r7
 80098b6:	47c0      	blx	r8
 80098b8:	3001      	adds	r0, #1
 80098ba:	d0e6      	beq.n	800988a <_printf_common+0xae>
 80098bc:	3601      	adds	r6, #1
 80098be:	e7d9      	b.n	8009874 <_printf_common+0x98>

080098c0 <_printf_i>:
 80098c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098c4:	7e0f      	ldrb	r7, [r1, #24]
 80098c6:	4691      	mov	r9, r2
 80098c8:	2f78      	cmp	r7, #120	; 0x78
 80098ca:	4680      	mov	r8, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	469a      	mov	sl, r3
 80098d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098d6:	d807      	bhi.n	80098e8 <_printf_i+0x28>
 80098d8:	2f62      	cmp	r7, #98	; 0x62
 80098da:	d80a      	bhi.n	80098f2 <_printf_i+0x32>
 80098dc:	2f00      	cmp	r7, #0
 80098de:	f000 80d5 	beq.w	8009a8c <_printf_i+0x1cc>
 80098e2:	2f58      	cmp	r7, #88	; 0x58
 80098e4:	f000 80c1 	beq.w	8009a6a <_printf_i+0x1aa>
 80098e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098f0:	e03a      	b.n	8009968 <_printf_i+0xa8>
 80098f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098f6:	2b15      	cmp	r3, #21
 80098f8:	d8f6      	bhi.n	80098e8 <_printf_i+0x28>
 80098fa:	a101      	add	r1, pc, #4	; (adr r1, 8009900 <_printf_i+0x40>)
 80098fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009900:	08009959 	.word	0x08009959
 8009904:	0800996d 	.word	0x0800996d
 8009908:	080098e9 	.word	0x080098e9
 800990c:	080098e9 	.word	0x080098e9
 8009910:	080098e9 	.word	0x080098e9
 8009914:	080098e9 	.word	0x080098e9
 8009918:	0800996d 	.word	0x0800996d
 800991c:	080098e9 	.word	0x080098e9
 8009920:	080098e9 	.word	0x080098e9
 8009924:	080098e9 	.word	0x080098e9
 8009928:	080098e9 	.word	0x080098e9
 800992c:	08009a73 	.word	0x08009a73
 8009930:	08009999 	.word	0x08009999
 8009934:	08009a2d 	.word	0x08009a2d
 8009938:	080098e9 	.word	0x080098e9
 800993c:	080098e9 	.word	0x080098e9
 8009940:	08009a95 	.word	0x08009a95
 8009944:	080098e9 	.word	0x080098e9
 8009948:	08009999 	.word	0x08009999
 800994c:	080098e9 	.word	0x080098e9
 8009950:	080098e9 	.word	0x080098e9
 8009954:	08009a35 	.word	0x08009a35
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	1d1a      	adds	r2, r3, #4
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	602a      	str	r2, [r5, #0]
 8009960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009968:	2301      	movs	r3, #1
 800996a:	e0a0      	b.n	8009aae <_printf_i+0x1ee>
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	0607      	lsls	r7, r0, #24
 8009972:	f103 0104 	add.w	r1, r3, #4
 8009976:	6029      	str	r1, [r5, #0]
 8009978:	d501      	bpl.n	800997e <_printf_i+0xbe>
 800997a:	681e      	ldr	r6, [r3, #0]
 800997c:	e003      	b.n	8009986 <_printf_i+0xc6>
 800997e:	0646      	lsls	r6, r0, #25
 8009980:	d5fb      	bpl.n	800997a <_printf_i+0xba>
 8009982:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009986:	2e00      	cmp	r6, #0
 8009988:	da03      	bge.n	8009992 <_printf_i+0xd2>
 800998a:	232d      	movs	r3, #45	; 0x2d
 800998c:	4276      	negs	r6, r6
 800998e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009992:	230a      	movs	r3, #10
 8009994:	4859      	ldr	r0, [pc, #356]	; (8009afc <_printf_i+0x23c>)
 8009996:	e012      	b.n	80099be <_printf_i+0xfe>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	6820      	ldr	r0, [r4, #0]
 800999c:	1d19      	adds	r1, r3, #4
 800999e:	6029      	str	r1, [r5, #0]
 80099a0:	0605      	lsls	r5, r0, #24
 80099a2:	d501      	bpl.n	80099a8 <_printf_i+0xe8>
 80099a4:	681e      	ldr	r6, [r3, #0]
 80099a6:	e002      	b.n	80099ae <_printf_i+0xee>
 80099a8:	0641      	lsls	r1, r0, #25
 80099aa:	d5fb      	bpl.n	80099a4 <_printf_i+0xe4>
 80099ac:	881e      	ldrh	r6, [r3, #0]
 80099ae:	2f6f      	cmp	r7, #111	; 0x6f
 80099b0:	bf0c      	ite	eq
 80099b2:	2308      	moveq	r3, #8
 80099b4:	230a      	movne	r3, #10
 80099b6:	4851      	ldr	r0, [pc, #324]	; (8009afc <_printf_i+0x23c>)
 80099b8:	2100      	movs	r1, #0
 80099ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099be:	6865      	ldr	r5, [r4, #4]
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	bfa8      	it	ge
 80099c4:	6821      	ldrge	r1, [r4, #0]
 80099c6:	60a5      	str	r5, [r4, #8]
 80099c8:	bfa4      	itt	ge
 80099ca:	f021 0104 	bicge.w	r1, r1, #4
 80099ce:	6021      	strge	r1, [r4, #0]
 80099d0:	b90e      	cbnz	r6, 80099d6 <_printf_i+0x116>
 80099d2:	2d00      	cmp	r5, #0
 80099d4:	d04b      	beq.n	8009a6e <_printf_i+0x1ae>
 80099d6:	4615      	mov	r5, r2
 80099d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80099dc:	fb03 6711 	mls	r7, r3, r1, r6
 80099e0:	5dc7      	ldrb	r7, [r0, r7]
 80099e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099e6:	4637      	mov	r7, r6
 80099e8:	42bb      	cmp	r3, r7
 80099ea:	460e      	mov	r6, r1
 80099ec:	d9f4      	bls.n	80099d8 <_printf_i+0x118>
 80099ee:	2b08      	cmp	r3, #8
 80099f0:	d10b      	bne.n	8009a0a <_printf_i+0x14a>
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	07de      	lsls	r6, r3, #31
 80099f6:	d508      	bpl.n	8009a0a <_printf_i+0x14a>
 80099f8:	6923      	ldr	r3, [r4, #16]
 80099fa:	6861      	ldr	r1, [r4, #4]
 80099fc:	4299      	cmp	r1, r3
 80099fe:	bfde      	ittt	le
 8009a00:	2330      	movle	r3, #48	; 0x30
 8009a02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a0a:	1b52      	subs	r2, r2, r5
 8009a0c:	6122      	str	r2, [r4, #16]
 8009a0e:	464b      	mov	r3, r9
 8009a10:	4621      	mov	r1, r4
 8009a12:	4640      	mov	r0, r8
 8009a14:	f8cd a000 	str.w	sl, [sp]
 8009a18:	aa03      	add	r2, sp, #12
 8009a1a:	f7ff fedf 	bl	80097dc <_printf_common>
 8009a1e:	3001      	adds	r0, #1
 8009a20:	d14a      	bne.n	8009ab8 <_printf_i+0x1f8>
 8009a22:	f04f 30ff 	mov.w	r0, #4294967295
 8009a26:	b004      	add	sp, #16
 8009a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	f043 0320 	orr.w	r3, r3, #32
 8009a32:	6023      	str	r3, [r4, #0]
 8009a34:	2778      	movs	r7, #120	; 0x78
 8009a36:	4832      	ldr	r0, [pc, #200]	; (8009b00 <_printf_i+0x240>)
 8009a38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	6829      	ldr	r1, [r5, #0]
 8009a40:	061f      	lsls	r7, r3, #24
 8009a42:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a46:	d402      	bmi.n	8009a4e <_printf_i+0x18e>
 8009a48:	065f      	lsls	r7, r3, #25
 8009a4a:	bf48      	it	mi
 8009a4c:	b2b6      	uxthmi	r6, r6
 8009a4e:	07df      	lsls	r7, r3, #31
 8009a50:	bf48      	it	mi
 8009a52:	f043 0320 	orrmi.w	r3, r3, #32
 8009a56:	6029      	str	r1, [r5, #0]
 8009a58:	bf48      	it	mi
 8009a5a:	6023      	strmi	r3, [r4, #0]
 8009a5c:	b91e      	cbnz	r6, 8009a66 <_printf_i+0x1a6>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	f023 0320 	bic.w	r3, r3, #32
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	2310      	movs	r3, #16
 8009a68:	e7a6      	b.n	80099b8 <_printf_i+0xf8>
 8009a6a:	4824      	ldr	r0, [pc, #144]	; (8009afc <_printf_i+0x23c>)
 8009a6c:	e7e4      	b.n	8009a38 <_printf_i+0x178>
 8009a6e:	4615      	mov	r5, r2
 8009a70:	e7bd      	b.n	80099ee <_printf_i+0x12e>
 8009a72:	682b      	ldr	r3, [r5, #0]
 8009a74:	6826      	ldr	r6, [r4, #0]
 8009a76:	1d18      	adds	r0, r3, #4
 8009a78:	6961      	ldr	r1, [r4, #20]
 8009a7a:	6028      	str	r0, [r5, #0]
 8009a7c:	0635      	lsls	r5, r6, #24
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	d501      	bpl.n	8009a86 <_printf_i+0x1c6>
 8009a82:	6019      	str	r1, [r3, #0]
 8009a84:	e002      	b.n	8009a8c <_printf_i+0x1cc>
 8009a86:	0670      	lsls	r0, r6, #25
 8009a88:	d5fb      	bpl.n	8009a82 <_printf_i+0x1c2>
 8009a8a:	8019      	strh	r1, [r3, #0]
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4615      	mov	r5, r2
 8009a90:	6123      	str	r3, [r4, #16]
 8009a92:	e7bc      	b.n	8009a0e <_printf_i+0x14e>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	2100      	movs	r1, #0
 8009a98:	1d1a      	adds	r2, r3, #4
 8009a9a:	602a      	str	r2, [r5, #0]
 8009a9c:	681d      	ldr	r5, [r3, #0]
 8009a9e:	6862      	ldr	r2, [r4, #4]
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f000 f859 	bl	8009b58 <memchr>
 8009aa6:	b108      	cbz	r0, 8009aac <_printf_i+0x1ec>
 8009aa8:	1b40      	subs	r0, r0, r5
 8009aaa:	6060      	str	r0, [r4, #4]
 8009aac:	6863      	ldr	r3, [r4, #4]
 8009aae:	6123      	str	r3, [r4, #16]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab6:	e7aa      	b.n	8009a0e <_printf_i+0x14e>
 8009ab8:	462a      	mov	r2, r5
 8009aba:	4649      	mov	r1, r9
 8009abc:	4640      	mov	r0, r8
 8009abe:	6923      	ldr	r3, [r4, #16]
 8009ac0:	47d0      	blx	sl
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	d0ad      	beq.n	8009a22 <_printf_i+0x162>
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	079b      	lsls	r3, r3, #30
 8009aca:	d413      	bmi.n	8009af4 <_printf_i+0x234>
 8009acc:	68e0      	ldr	r0, [r4, #12]
 8009ace:	9b03      	ldr	r3, [sp, #12]
 8009ad0:	4298      	cmp	r0, r3
 8009ad2:	bfb8      	it	lt
 8009ad4:	4618      	movlt	r0, r3
 8009ad6:	e7a6      	b.n	8009a26 <_printf_i+0x166>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	4632      	mov	r2, r6
 8009adc:	4649      	mov	r1, r9
 8009ade:	4640      	mov	r0, r8
 8009ae0:	47d0      	blx	sl
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	d09d      	beq.n	8009a22 <_printf_i+0x162>
 8009ae6:	3501      	adds	r5, #1
 8009ae8:	68e3      	ldr	r3, [r4, #12]
 8009aea:	9903      	ldr	r1, [sp, #12]
 8009aec:	1a5b      	subs	r3, r3, r1
 8009aee:	42ab      	cmp	r3, r5
 8009af0:	dcf2      	bgt.n	8009ad8 <_printf_i+0x218>
 8009af2:	e7eb      	b.n	8009acc <_printf_i+0x20c>
 8009af4:	2500      	movs	r5, #0
 8009af6:	f104 0619 	add.w	r6, r4, #25
 8009afa:	e7f5      	b.n	8009ae8 <_printf_i+0x228>
 8009afc:	08009da4 	.word	0x08009da4
 8009b00:	08009db5 	.word	0x08009db5

08009b04 <memmove>:
 8009b04:	4288      	cmp	r0, r1
 8009b06:	b510      	push	{r4, lr}
 8009b08:	eb01 0402 	add.w	r4, r1, r2
 8009b0c:	d902      	bls.n	8009b14 <memmove+0x10>
 8009b0e:	4284      	cmp	r4, r0
 8009b10:	4623      	mov	r3, r4
 8009b12:	d807      	bhi.n	8009b24 <memmove+0x20>
 8009b14:	1e43      	subs	r3, r0, #1
 8009b16:	42a1      	cmp	r1, r4
 8009b18:	d008      	beq.n	8009b2c <memmove+0x28>
 8009b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b22:	e7f8      	b.n	8009b16 <memmove+0x12>
 8009b24:	4601      	mov	r1, r0
 8009b26:	4402      	add	r2, r0
 8009b28:	428a      	cmp	r2, r1
 8009b2a:	d100      	bne.n	8009b2e <memmove+0x2a>
 8009b2c:	bd10      	pop	{r4, pc}
 8009b2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b36:	e7f7      	b.n	8009b28 <memmove+0x24>

08009b38 <_sbrk_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	4d05      	ldr	r5, [pc, #20]	; (8009b54 <_sbrk_r+0x1c>)
 8009b3e:	4604      	mov	r4, r0
 8009b40:	4608      	mov	r0, r1
 8009b42:	602b      	str	r3, [r5, #0]
 8009b44:	f7f6 ff06 	bl	8000954 <_sbrk>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_sbrk_r+0x1a>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_sbrk_r+0x1a>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	2000160c 	.word	0x2000160c

08009b58 <memchr>:
 8009b58:	4603      	mov	r3, r0
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	b2c9      	uxtb	r1, r1
 8009b5e:	4402      	add	r2, r0
 8009b60:	4293      	cmp	r3, r2
 8009b62:	4618      	mov	r0, r3
 8009b64:	d101      	bne.n	8009b6a <memchr+0x12>
 8009b66:	2000      	movs	r0, #0
 8009b68:	e003      	b.n	8009b72 <memchr+0x1a>
 8009b6a:	7804      	ldrb	r4, [r0, #0]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	428c      	cmp	r4, r1
 8009b70:	d1f6      	bne.n	8009b60 <memchr+0x8>
 8009b72:	bd10      	pop	{r4, pc}

08009b74 <_realloc_r>:
 8009b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b78:	4680      	mov	r8, r0
 8009b7a:	4614      	mov	r4, r2
 8009b7c:	460e      	mov	r6, r1
 8009b7e:	b921      	cbnz	r1, 8009b8a <_realloc_r+0x16>
 8009b80:	4611      	mov	r1, r2
 8009b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b86:	f7ff bc45 	b.w	8009414 <_malloc_r>
 8009b8a:	b92a      	cbnz	r2, 8009b98 <_realloc_r+0x24>
 8009b8c:	f7ff fbda 	bl	8009344 <_free_r>
 8009b90:	4625      	mov	r5, r4
 8009b92:	4628      	mov	r0, r5
 8009b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b98:	f000 f81b 	bl	8009bd2 <_malloc_usable_size_r>
 8009b9c:	4284      	cmp	r4, r0
 8009b9e:	4607      	mov	r7, r0
 8009ba0:	d802      	bhi.n	8009ba8 <_realloc_r+0x34>
 8009ba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ba6:	d812      	bhi.n	8009bce <_realloc_r+0x5a>
 8009ba8:	4621      	mov	r1, r4
 8009baa:	4640      	mov	r0, r8
 8009bac:	f7ff fc32 	bl	8009414 <_malloc_r>
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d0ed      	beq.n	8009b92 <_realloc_r+0x1e>
 8009bb6:	42bc      	cmp	r4, r7
 8009bb8:	4622      	mov	r2, r4
 8009bba:	4631      	mov	r1, r6
 8009bbc:	bf28      	it	cs
 8009bbe:	463a      	movcs	r2, r7
 8009bc0:	f7ff fbb2 	bl	8009328 <memcpy>
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	f7ff fbbc 	bl	8009344 <_free_r>
 8009bcc:	e7e1      	b.n	8009b92 <_realloc_r+0x1e>
 8009bce:	4635      	mov	r5, r6
 8009bd0:	e7df      	b.n	8009b92 <_realloc_r+0x1e>

08009bd2 <_malloc_usable_size_r>:
 8009bd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bd6:	1f18      	subs	r0, r3, #4
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	bfbc      	itt	lt
 8009bdc:	580b      	ldrlt	r3, [r1, r0]
 8009bde:	18c0      	addlt	r0, r0, r3
 8009be0:	4770      	bx	lr
	...

08009be4 <_init>:
 8009be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be6:	bf00      	nop
 8009be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bea:	bc08      	pop	{r3}
 8009bec:	469e      	mov	lr, r3
 8009bee:	4770      	bx	lr

08009bf0 <_fini>:
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	bf00      	nop
 8009bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bf6:	bc08      	pop	{r3}
 8009bf8:	469e      	mov	lr, r3
 8009bfa:	4770      	bx	lr
