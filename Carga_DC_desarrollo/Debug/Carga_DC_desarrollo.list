
Carga_DC_desarrollo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800be90  0800be90  0001be90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c354  0800c354  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c354  0800c354  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c354  0800c354  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c354  0800c354  0001c354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c358  0800c358  0001c358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c35c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000157c  200001ec  0800c548  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001768  0800c548  00021768  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   000184bb  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f37  00000000  00000000  00038713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  0003c650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d1  00000000  00000000  0003dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd23  00000000  00000000  0003ef41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d59f  00000000  00000000  0005ac64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009690f  00000000  00000000  00078203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066f0  00000000  00000000  0010eb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00115204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	0800be78 	.word	0x0800be78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	0800be78 	.word	0x0800be78

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_I2C_cmd>:
#define SLAVE_ADDRESS_LCD  0x4e	//0x4E // change this according to ur setup 0x7e

/* Envia comando por LCD ---------------------------------------*/

void LCD_I2C_cmd(char cmd)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f023 030f 	bic.w	r3, r3, #15
 800016c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	011b      	lsls	r3, r3, #4
 8000172:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	f043 030c 	orr.w	r3, r3, #12
 800017a:	b2db      	uxtb	r3, r3
 800017c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800017e:	7bfb      	ldrb	r3, [r7, #15]
 8000180:	f043 0308 	orr.w	r3, r3, #8
 8000184:	b2db      	uxtb	r3, r3
 8000186:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000188:	7bbb      	ldrb	r3, [r7, #14]
 800018a:	f043 030c 	orr.w	r3, r3, #12
 800018e:	b2db      	uxtb	r3, r3
 8000190:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000192:	7bbb      	ldrb	r3, [r7, #14]
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	b2db      	uxtb	r3, r3
 800019a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800019c:	f107 0208 	add.w	r2, r7, #8
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	9300      	str	r3, [sp, #0]
 80001a4:	2304      	movs	r3, #4
 80001a6:	214e      	movs	r1, #78	; 0x4e
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <LCD_I2C_cmd+0x60>)
 80001aa:	f003 f937 	bl	800341c <HAL_I2C_Master_Transmit>
	//while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
	HAL_Delay(1);
 80001ae:	2001      	movs	r0, #1
 80001b0:	f002 f826 	bl	8002200 <HAL_Delay>
}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	2000027c 	.word	0x2000027c

080001c0 <LCD_I2C_char>:

/* Envia dato por LCD ------------------------------------------*/

void LCD_I2C_char(char data)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	f023 030f 	bic.w	r3, r3, #15
 80001d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	011b      	lsls	r3, r3, #4
 80001d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80001ec:	7bbb      	ldrb	r3, [r7, #14]
 80001ee:	f043 030d 	orr.w	r3, r3, #13
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80001f6:	7bbb      	ldrb	r3, [r7, #14]
 80001f8:	f043 0309 	orr.w	r3, r3, #9
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000200:	f107 0208 	add.w	r2, r7, #8
 8000204:	2364      	movs	r3, #100	; 0x64
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2304      	movs	r3, #4
 800020a:	214e      	movs	r1, #78	; 0x4e
 800020c:	4807      	ldr	r0, [pc, #28]	; (800022c <LCD_I2C_char+0x6c>)
 800020e:	f003 f905 	bl	800341c <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000212:	bf00      	nop
 8000214:	4805      	ldr	r0, [pc, #20]	; (800022c <LCD_I2C_char+0x6c>)
 8000216:	f003 f9ff 	bl	8003618 <HAL_I2C_GetState>
 800021a:	4603      	mov	r3, r0
 800021c:	2b20      	cmp	r3, #32
 800021e:	d1f9      	bne.n	8000214 <LCD_I2C_char+0x54>
		//HAL_Delay(1);
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	2000027c 	.word	0x2000027c

08000230 <LCD_I2C_init>:

/* Inicializa LCD -----------------------------------------------*/

void LCD_I2C_init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	LCD_I2C_cmd(0x02);
 8000234:	2002      	movs	r0, #2
 8000236:	f7ff ff91 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x28);
 800023a:	2028      	movs	r0, #40	; 0x28
 800023c:	f7ff ff8e 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x0c);
 8000240:	200c      	movs	r0, #12
 8000242:	f7ff ff8b 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x80);
 8000246:	2080      	movs	r0, #128	; 0x80
 8000248:	f7ff ff88 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_CLEAR);
 800024c:	2001      	movs	r0, #1
 800024e:	f7ff ff85 	bl	800015c <LCD_I2C_cmd>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}

08000256 <LCD_I2C_write_text>:

/* Envia cadena de caracteres al LCD -----------------------------*/

void LCD_I2C_write_text(char *str)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	b082      	sub	sp, #8
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
	while (*str) LCD_I2C_char(*str++);
 800025e:	e006      	b.n	800026e <LCD_I2C_write_text+0x18>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	1c5a      	adds	r2, r3, #1
 8000264:	607a      	str	r2, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ffa9 	bl	80001c0 <LCD_I2C_char>
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d1f4      	bne.n	8000260 <LCD_I2C_write_text+0xa>
}
 8000276:	bf00      	nop
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <keypad_init>:
GPIO_TypeDef* COL_3_Port = GPIOB;
GPIO_TypeDef* COL_4_Port = GPIOB;


void keypad_init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
  // Configure GPIO pins for keypad matrix
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	463b      	mov	r3, r7
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = ROW_1_Pin | ROW_2_Pin | ROW_3_Pin | ROW_4_Pin;
 8000292:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000296:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000298:	2300      	movs	r3, #0
 800029a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800029c:	2301      	movs	r3, #1
 800029e:	60bb      	str	r3, [r7, #8]
  	  HAL_GPIO_Init(ROW_1_Port, &GPIO_InitStruct);
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <keypad_init+0xa8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	463a      	mov	r2, r7
 80002a6:	4611      	mov	r1, r2
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 fd8f 	bl	8002dcc <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_2_Port, &GPIO_InitStruct);
 80002ae:	4b1f      	ldr	r3, [pc, #124]	; (800032c <keypad_init+0xac>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	463a      	mov	r2, r7
 80002b4:	4611      	mov	r1, r2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fd88 	bl	8002dcc <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_3_Port, &GPIO_InitStruct);
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <keypad_init+0xb0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	463a      	mov	r2, r7
 80002c2:	4611      	mov	r1, r2
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 fd81 	bl	8002dcc <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_4_Port, &GPIO_InitStruct);
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <keypad_init+0xb4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	463a      	mov	r2, r7
 80002d0:	4611      	mov	r1, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fd7a 	bl	8002dcc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = COL_1_Pin | COL_2_Pin | COL_3_Pin | COL_4_Pin;
 80002d8:	f640 4303 	movw	r3, #3075	; 0xc03
 80002dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	2301      	movs	r3, #1
 80002e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e2:	2302      	movs	r3, #2
 80002e4:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(COL_1_Port, &GPIO_InitStruct);
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <keypad_init+0xb8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	463a      	mov	r2, r7
 80002ec:	4611      	mov	r1, r2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 fd6c 	bl	8002dcc <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_2_Port, &GPIO_InitStruct);
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <keypad_init+0xbc>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	463a      	mov	r2, r7
 80002fa:	4611      	mov	r1, r2
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fd65 	bl	8002dcc <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_3_Port, &GPIO_InitStruct);
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <keypad_init+0xc0>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	463a      	mov	r2, r7
 8000308:	4611      	mov	r1, r2
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fd5e 	bl	8002dcc <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_4_Port, &GPIO_InitStruct);
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <keypad_init+0xc4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	463a      	mov	r2, r7
 8000316:	4611      	mov	r1, r2
 8000318:	4618      	mov	r0, r3
 800031a:	f002 fd57 	bl	8002dcc <HAL_GPIO_Init>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000000 	.word	0x20000000
 800032c:	20000004 	.word	0x20000004
 8000330:	20000008 	.word	0x20000008
 8000334:	2000000c 	.word	0x2000000c
 8000338:	20000010 	.word	0x20000010
 800033c:	20000014 	.word	0x20000014
 8000340:	20000018 	.word	0x20000018
 8000344:	2000001c 	.word	0x2000001c

08000348 <keypad_scan>:
char keypad_scan(void)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b087      	sub	sp, #28
 800034c:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'C'},
 800034e:	4b6f      	ldr	r3, [pc, #444]	; (800050c <keypad_scan+0x1c4>)
 8000350:	1d3c      	adds	r4, r7, #4
 8000352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'P'},
                     {'7', '8', '9', 'R'},
                     {'D', '0', 'K', 'U'}};

  for(int i = 0; i < 4; i++)
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	e0cc      	b.n	80004f8 <keypad_scan+0x1b0>
  {
    // Set current column as output and low
    switch(i)
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	2b03      	cmp	r3, #3
 8000362:	f200 8087 	bhi.w	8000474 <keypad_scan+0x12c>
 8000366:	a201      	add	r2, pc, #4	; (adr r2, 800036c <keypad_scan+0x24>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	0800037d 	.word	0x0800037d
 8000370:	080003bb 	.word	0x080003bb
 8000374:	080003f9 	.word	0x080003f9
 8000378:	08000437 	.word	0x08000437
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 800037c:	4b64      	ldr	r3, [pc, #400]	; (8000510 <keypad_scan+0x1c8>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	4618      	mov	r0, r3
 8000386:	f002 febc 	bl	8003102 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 800038a:	4b62      	ldr	r3, [pc, #392]	; (8000514 <keypad_scan+0x1cc>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2201      	movs	r2, #1
 8000390:	2102      	movs	r1, #2
 8000392:	4618      	mov	r0, r3
 8000394:	f002 feb5 	bl	8003102 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8000398:	4b5f      	ldr	r3, [pc, #380]	; (8000518 <keypad_scan+0x1d0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fead 	bl	8003102 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80003a8:	4b5c      	ldr	r3, [pc, #368]	; (800051c <keypad_scan+0x1d4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fea5 	bl	8003102 <HAL_GPIO_WritePin>
        break;
 80003b8:	e05c      	b.n	8000474 <keypad_scan+0x12c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003ba:	4b55      	ldr	r3, [pc, #340]	; (8000510 <keypad_scan+0x1c8>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2201      	movs	r2, #1
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fe9d 	bl	8003102 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 80003c8:	4b52      	ldr	r3, [pc, #328]	; (8000514 <keypad_scan+0x1cc>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2200      	movs	r2, #0
 80003ce:	2102      	movs	r1, #2
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 fe96 	bl	8003102 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80003d6:	4b50      	ldr	r3, [pc, #320]	; (8000518 <keypad_scan+0x1d0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 fe8e 	bl	8003102 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80003e6:	4b4d      	ldr	r3, [pc, #308]	; (800051c <keypad_scan+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f0:	4618      	mov	r0, r3
 80003f2:	f002 fe86 	bl	8003102 <HAL_GPIO_WritePin>
        break;
 80003f6:	e03d      	b.n	8000474 <keypad_scan+0x12c>

      case 2:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003f8:	4b45      	ldr	r3, [pc, #276]	; (8000510 <keypad_scan+0x1c8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2201      	movs	r2, #1
 80003fe:	2101      	movs	r1, #1
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fe7e 	bl	8003102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8000406:	4b43      	ldr	r3, [pc, #268]	; (8000514 <keypad_scan+0x1cc>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2201      	movs	r2, #1
 800040c:	2102      	movs	r1, #2
 800040e:	4618      	mov	r0, r3
 8000410:	f002 fe77 	bl	8003102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 8000414:	4b40      	ldr	r3, [pc, #256]	; (8000518 <keypad_scan+0x1d0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041e:	4618      	mov	r0, r3
 8000420:	f002 fe6f 	bl	8003102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8000424:	4b3d      	ldr	r3, [pc, #244]	; (800051c <keypad_scan+0x1d4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2201      	movs	r2, #1
 800042a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800042e:	4618      	mov	r0, r3
 8000430:	f002 fe67 	bl	8003102 <HAL_GPIO_WritePin>
		break;
 8000434:	e01e      	b.n	8000474 <keypad_scan+0x12c>

	  case 3:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8000436:	4b36      	ldr	r3, [pc, #216]	; (8000510 <keypad_scan+0x1c8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2201      	movs	r2, #1
 800043c:	2101      	movs	r1, #1
 800043e:	4618      	mov	r0, r3
 8000440:	f002 fe5f 	bl	8003102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8000444:	4b33      	ldr	r3, [pc, #204]	; (8000514 <keypad_scan+0x1cc>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2201      	movs	r2, #1
 800044a:	2102      	movs	r1, #2
 800044c:	4618      	mov	r0, r3
 800044e:	f002 fe58 	bl	8003102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8000452:	4b31      	ldr	r3, [pc, #196]	; (8000518 <keypad_scan+0x1d0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2201      	movs	r2, #1
 8000458:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045c:	4618      	mov	r0, r3
 800045e:	f002 fe50 	bl	8003102 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 8000462:	4b2e      	ldr	r3, [pc, #184]	; (800051c <keypad_scan+0x1d4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800046c:	4618      	mov	r0, r3
 800046e:	f002 fe48 	bl	8003102 <HAL_GPIO_WritePin>
		break;
 8000472:	bf00      	nop
    }
// Read current rows
	if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 8000474:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <keypad_scan+0x1d8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800047c:	4618      	mov	r0, r3
 800047e:	f002 fe29 	bl	80030d4 <HAL_GPIO_ReadPin>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d104      	bne.n	8000492 <keypad_scan+0x14a>
	  return keys[0][i];
 8000488:	1d3a      	adds	r2, r7, #4
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	4413      	add	r3, r2
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	e037      	b.n	8000502 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 8000492:	4b24      	ldr	r3, [pc, #144]	; (8000524 <keypad_scan+0x1dc>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049a:	4618      	mov	r0, r3
 800049c:	f002 fe1a 	bl	80030d4 <HAL_GPIO_ReadPin>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d105      	bne.n	80004b2 <keypad_scan+0x16a>
	  return keys[1][i];
 80004a6:	f107 0208 	add.w	r2, r7, #8
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	4413      	add	r3, r2
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	e027      	b.n	8000502 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <keypad_scan+0x1e0>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 fe0a 	bl	80030d4 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d105      	bne.n	80004d2 <keypad_scan+0x18a>
	  return keys[2][i];
 80004c6:	f107 020c 	add.w	r2, r7, #12
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	4413      	add	r3, r2
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	e017      	b.n	8000502 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <keypad_scan+0x1e4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fdfa 	bl	80030d4 <HAL_GPIO_ReadPin>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d105      	bne.n	80004f2 <keypad_scan+0x1aa>
	  return keys[3][i];
 80004e6:	f107 0210 	add.w	r2, r7, #16
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	e007      	b.n	8000502 <keypad_scan+0x1ba>
  for(int i = 0; i < 4; i++)
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	3301      	adds	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	f77f af2f 	ble.w	800035e <keypad_scan+0x16>
  }
return 0; // No key pressed
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	371c      	adds	r7, #28
 8000506:	46bd      	mov	sp, r7
 8000508:	bd90      	pop	{r4, r7, pc}
 800050a:	bf00      	nop
 800050c:	0800be90 	.word	0x0800be90
 8000510:	20000010 	.word	0x20000010
 8000514:	20000014 	.word	0x20000014
 8000518:	20000018 	.word	0x20000018
 800051c:	2000001c 	.word	0x2000001c
 8000520:	20000000 	.word	0x20000000
 8000524:	20000004 	.word	0x20000004
 8000528:	20000008 	.word	0x20000008
 800052c:	2000000c 	.word	0x2000000c

08000530 <tipo_dato>:


uint8_t tipo_dato(char input){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if(input=='C'||input=='R'||input=='P')
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b43      	cmp	r3, #67	; 0x43
 800053e:	d005      	beq.n	800054c <tipo_dato+0x1c>
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b52      	cmp	r3, #82	; 0x52
 8000544:	d002      	beq.n	800054c <tipo_dato+0x1c>
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b50      	cmp	r3, #80	; 0x50
 800054a:	d101      	bne.n	8000550 <tipo_dato+0x20>
		return 2;
 800054c:	2302      	movs	r3, #2
 800054e:	e012      	b.n	8000576 <tipo_dato+0x46>
	if(input=='U')
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	2b55      	cmp	r3, #85	; 0x55
 8000554:	d101      	bne.n	800055a <tipo_dato+0x2a>
		return 3;
 8000556:	2303      	movs	r3, #3
 8000558:	e00d      	b.n	8000576 <tipo_dato+0x46>
	if(input=='D')
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b44      	cmp	r3, #68	; 0x44
 800055e:	d101      	bne.n	8000564 <tipo_dato+0x34>
		return 4;
 8000560:	2304      	movs	r3, #4
 8000562:	e008      	b.n	8000576 <tipo_dato+0x46>
	if(input>='0'&&input<='9')
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b2f      	cmp	r3, #47	; 0x2f
 8000568:	d904      	bls.n	8000574 <tipo_dato+0x44>
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b39      	cmp	r3, #57	; 0x39
 800056e:	d801      	bhi.n	8000574 <tipo_dato+0x44>
		return 1;
 8000570:	2301      	movs	r3, #1
 8000572:	e000      	b.n	8000576 <tipo_dato+0x46>
	else
		return 0;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f001 fdd9 	bl	800213c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f9a1 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fb7f 	bl	8000c90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000592:	f000 fb67 	bl	8000c64 <MX_DMA_Init>
  MX_ADC1_Init();
 8000596:	f000 f9f9 	bl	800098c <MX_ADC1_Init>
  MX_I2C1_Init();
 800059a:	f000 fa61 	bl	8000a60 <MX_I2C1_Init>
  MX_TIM2_Init();
 800059e:	f000 fac5 	bl	8000b2c <MX_TIM2_Init>
  MX_SPI1_Init();
 80005a2:	f000 fa8b 	bl	8000abc <MX_SPI1_Init>
  MX_TIM3_Init();
 80005a6:	f000 fb0f 	bl	8000bc8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80005aa:	f00a fa41 	bl	800aa30 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  enviar_spi_dac(0);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fcc4 	bl	8000f3c <enviar_spi_dac>
  keypad_init();
 80005b4:	f7ff fe64 	bl	8000280 <keypad_init>
  HAL_Delay(10);
 80005b8:	200a      	movs	r0, #10
 80005ba:	f001 fe21 	bl	8002200 <HAL_Delay>
  LCD_I2C_init();
 80005be:	f7ff fe37 	bl	8000230 <LCD_I2C_init>

	//esto podria estar encapsulado
  	  LCD_I2C_cmd(LCD_LINEA1);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff fdca 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   UTN FRP   ");
 80005c8:	48ae      	ldr	r0, [pc, #696]	; (8000884 <main+0x304>)
 80005ca:	f7ff fe44 	bl	8000256 <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA2);
 80005ce:	20c0      	movs	r0, #192	; 0xc0
 80005d0:	f7ff fdc4 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   Carga DC   ");
 80005d4:	48ac      	ldr	r0, [pc, #688]	; (8000888 <main+0x308>)
 80005d6:	f7ff fe3e 	bl	8000256 <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA4);
 80005da:	20d4      	movs	r0, #212	; 0xd4
 80005dc:	f7ff fdbe 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   A.Gotte/A.Jose   ");
 80005e0:	48aa      	ldr	r0, [pc, #680]	; (800088c <main+0x30c>)
 80005e2:	f7ff fe38 	bl	8000256 <LCD_I2C_write_text>
	  HAL_Delay(4000);
 80005e6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80005ea:	f001 fe09 	bl	8002200 <HAL_Delay>
	  LCD_I2C_cmd(LCD_CLEAR);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff fdb4 	bl	800015c <LCD_I2C_cmd>

  HAL_TIM_Base_Start_IT(&htim2);
 80005f4:	48a6      	ldr	r0, [pc, #664]	; (8000890 <main+0x310>)
 80005f6:	f005 ff61 	bl	80064bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80005fa:	48a6      	ldr	r0, [pc, #664]	; (8000894 <main+0x314>)
 80005fc:	f005 ff5e 	bl	80064bc <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, input_adc, 4);//cuelga el programa
 8000600:	2204      	movs	r2, #4
 8000602:	49a5      	ldr	r1, [pc, #660]	; (8000898 <main+0x318>)
 8000604:	48a5      	ldr	r0, [pc, #660]	; (800089c <main+0x31c>)
 8000606:	f001 fef7 	bl	80023f8 <HAL_ADC_Start_DMA>



	//se deberia hacer un POST

  char modo_carga = 'C';
 800060a:	2343      	movs	r3, #67	; 0x43
 800060c:	73fb      	strb	r3, [r7, #15]
  char input_valor[5]="";
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	713b      	strb	r3, [r7, #4]
  //char buffer_val[20]="val:  NNNN [utm]";

  uint8_t cont_digitos_input_val = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	73bb      	strb	r3, [r7, #14]
  uint8_t flag_update_display = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	737b      	strb	r3, [r7, #13]
  uint16_t control_spi = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	813b      	strh	r3, [r7, #8]
  uint16_t set_point = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	817b      	strh	r3, [r7, #10]
  //uint16_t temperatura_sensor = 0;
  enviar_spi_dac(control_spi);
 8000626:	893b      	ldrh	r3, [r7, #8]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fc87 	bl	8000f3c <enviar_spi_dac>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
{
//update display modo stand by
	  if(flag_update_display_1_seg){
 800062e:	4b9c      	ldr	r3, [pc, #624]	; (80008a0 <main+0x320>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <main+0xca>
		  display_update_stat(modo_carga,input_valor,adc2use[0]);
 8000636:	4b9b      	ldr	r3, [pc, #620]	; (80008a4 <main+0x324>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	4639      	mov	r1, r7
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fe9c 	bl	800137c <display_update_stat>
		  flag_update_display_1_seg=0;
 8000644:	4b96      	ldr	r3, [pc, #600]	; (80008a0 <main+0x320>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
	  }
//entra a modo usb
	  if(input_keypad=='U'){
 800064a:	4b97      	ldr	r3, [pc, #604]	; (80008a8 <main+0x328>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b55      	cmp	r3, #85	; 0x55
 8000650:	d12d      	bne.n	80006ae <main+0x12e>
		  LCD_I2C_cmd(LCD_CLEAR);
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff fd82 	bl	800015c <LCD_I2C_cmd>
		  sprintf(str, "$USB#\n");
 8000658:	4994      	ldr	r1, [pc, #592]	; (80008ac <main+0x32c>)
 800065a:	4895      	ldr	r0, [pc, #596]	; (80008b0 <main+0x330>)
 800065c:	f00a ff5a 	bl	800b514 <siprintf>
		  memset(buffer_usb, '\0',64);
 8000660:	2240      	movs	r2, #64	; 0x40
 8000662:	2100      	movs	r1, #0
 8000664:	4893      	ldr	r0, [pc, #588]	; (80008b4 <main+0x334>)
 8000666:	f00a ff75 	bl	800b554 <memset>
		  CDC_Transmit_FS((uint8_t*) str, strlen(str));
 800066a:	4891      	ldr	r0, [pc, #580]	; (80008b0 <main+0x330>)
 800066c:	f7ff fd6e 	bl	800014c <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29b      	uxth	r3, r3
 8000674:	4619      	mov	r1, r3
 8000676:	488e      	ldr	r0, [pc, #568]	; (80008b0 <main+0x330>)
 8000678:	f00a faae 	bl	800abd8 <CDC_Transmit_FS>

		  HAL_Delay(500);
 800067c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000680:	f001 fdbe 	bl	8002200 <HAL_Delay>
		  if(buffer_usb[0]=='$' && buffer_usb[1]=='O' && buffer_usb[2]=='K' && buffer_usb[3]=='#'){//si responde la pc, entra al bucle
 8000684:	4b8b      	ldr	r3, [pc, #556]	; (80008b4 <main+0x334>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b24      	cmp	r3, #36	; 0x24
 800068a:	d10d      	bne.n	80006a8 <main+0x128>
 800068c:	4b89      	ldr	r3, [pc, #548]	; (80008b4 <main+0x334>)
 800068e:	785b      	ldrb	r3, [r3, #1]
 8000690:	2b4f      	cmp	r3, #79	; 0x4f
 8000692:	d109      	bne.n	80006a8 <main+0x128>
 8000694:	4b87      	ldr	r3, [pc, #540]	; (80008b4 <main+0x334>)
 8000696:	789b      	ldrb	r3, [r3, #2]
 8000698:	2b4b      	cmp	r3, #75	; 0x4b
 800069a:	d105      	bne.n	80006a8 <main+0x128>
 800069c:	4b85      	ldr	r3, [pc, #532]	; (80008b4 <main+0x334>)
 800069e:	78db      	ldrb	r3, [r3, #3]
 80006a0:	2b23      	cmp	r3, #35	; 0x23
 80006a2:	d101      	bne.n	80006a8 <main+0x128>
			  modo_usb();
 80006a4:	f000 ffcc 	bl	8001640 <modo_usb>
		  }
		 input_keypad=0;
 80006a8:	4b7f      	ldr	r3, [pc, #508]	; (80008a8 <main+0x328>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
	  }
//entra a modo config
	  if(tipo_dato(input_keypad)==2){//tipo_dato()=2 si input es C,P,R
 80006ae:	4b7e      	ldr	r3, [pc, #504]	; (80008a8 <main+0x328>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff3c 	bl	8000530 <tipo_dato>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	f040 808a 	bne.w	80007d4 <main+0x254>
		  //ingresa a la configuracion de modo
		  flag_config=1;
 80006c0:	4b7d      	ldr	r3, [pc, #500]	; (80008b8 <main+0x338>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]

		  while(flag_config){
 80006c6:	e080      	b.n	80007ca <main+0x24a>
			  if(tipo_dato(input_keypad)==1 && cont_digitos_input_val<4){//tipo_dato()=1 si input es >=0 y <=9
 80006c8:	4b77      	ldr	r3, [pc, #476]	; (80008a8 <main+0x328>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff2f 	bl	8000530 <tipo_dato>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d112      	bne.n	80006fe <main+0x17e>
 80006d8:	7bbb      	ldrb	r3, [r7, #14]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d80f      	bhi.n	80006fe <main+0x17e>
				  agregar_digito(input_valor, input_keypad);
 80006de:	4b72      	ldr	r3, [pc, #456]	; (80008a8 <main+0x328>)
 80006e0:	781a      	ldrb	r2, [r3, #0]
 80006e2:	463b      	mov	r3, r7
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fbf6 	bl	8000ed8 <agregar_digito>
				  input_keypad=0;
 80006ec:	4b6e      	ldr	r3, [pc, #440]	; (80008a8 <main+0x328>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
				  cont_digitos_input_val++;
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	3301      	adds	r3, #1
 80006f6:	73bb      	strb	r3, [r7, #14]
				  flag_update_display=1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	737b      	strb	r3, [r7, #13]
 80006fc:	e05a      	b.n	80007b4 <main+0x234>
			  }
			  else if(input_keypad=='D'&&cont_digitos_input_val>0){
 80006fe:	4b6a      	ldr	r3, [pc, #424]	; (80008a8 <main+0x328>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b44      	cmp	r3, #68	; 0x44
 8000704:	d10f      	bne.n	8000726 <main+0x1a6>
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00c      	beq.n	8000726 <main+0x1a6>
				  borrar_ultimo_digito(input_valor);
 800070c:	463b      	mov	r3, r7
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fbfe 	bl	8000f10 <borrar_ultimo_digito>
				  input_keypad=0;
 8000714:	4b64      	ldr	r3, [pc, #400]	; (80008a8 <main+0x328>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
				  cont_digitos_input_val--;
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	3b01      	subs	r3, #1
 800071e:	73bb      	strb	r3, [r7, #14]
				  flag_update_display=1;
 8000720:	2301      	movs	r3, #1
 8000722:	737b      	strb	r3, [r7, #13]
 8000724:	e046      	b.n	80007b4 <main+0x234>
			  }
			  else if(input_keypad=='K'){
 8000726:	4b60      	ldr	r3, [pc, #384]	; (80008a8 <main+0x328>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b4b      	cmp	r3, #75	; 0x4b
 800072c:	d132      	bne.n	8000794 <main+0x214>
				  input_keypad=0;
 800072e:	4b5e      	ldr	r3, [pc, #376]	; (80008a8 <main+0x328>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
				  //validar parametro ingresado
				  if(validar_input(modo_carga,atoi(input_valor))==1){
 8000734:	463b      	mov	r3, r7
 8000736:	4618      	mov	r0, r3
 8000738:	f00a fe2c 	bl	800b394 <atoi>
 800073c:	4602      	mov	r2, r0
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fc2a 	bl	8000f9c <validar_input>
 8000748:	4603      	mov	r3, r0
 800074a:	2b01      	cmp	r3, #1
 800074c:	d10c      	bne.n	8000768 <main+0x1e8>
					  set_point=atoi(input_valor);
 800074e:	463b      	mov	r3, r7
 8000750:	4618      	mov	r0, r3
 8000752:	f00a fe1f 	bl	800b394 <atoi>
 8000756:	4603      	mov	r3, r0
 8000758:	817b      	strh	r3, [r7, #10]
					  flag_config=0;//sale del while y vuelve al super loop
 800075a:	4b57      	ldr	r3, [pc, #348]	; (80008b8 <main+0x338>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
					  flag_update_display_1_seg=1;
 8000760:	4b4f      	ldr	r3, [pc, #316]	; (80008a0 <main+0x320>)
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	e025      	b.n	80007b4 <main+0x234>
				  }
				  else{
					  //display error
					  LCD_I2C_cmd(LCD_CLEAR);
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff fcf7 	bl	800015c <LCD_I2C_cmd>
					  LCD_I2C_cmd(LCD_LINEA2);
 800076e:	20c0      	movs	r0, #192	; 0xc0
 8000770:	f7ff fcf4 	bl	800015c <LCD_I2C_cmd>
					  LCD_I2C_write_text("   Configuracion   ");
 8000774:	4851      	ldr	r0, [pc, #324]	; (80008bc <main+0x33c>)
 8000776:	f7ff fd6e 	bl	8000256 <LCD_I2C_write_text>
					  LCD_I2C_cmd(LCD_LINEA3);
 800077a:	2094      	movs	r0, #148	; 0x94
 800077c:	f7ff fcee 	bl	800015c <LCD_I2C_cmd>
					  LCD_I2C_write_text("      Invalida      ");
 8000780:	484f      	ldr	r0, [pc, #316]	; (80008c0 <main+0x340>)
 8000782:	f7ff fd68 	bl	8000256 <LCD_I2C_write_text>
					  HAL_Delay(3000);
 8000786:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800078a:	f001 fd39 	bl	8002200 <HAL_Delay>
					  flag_update_display=1;
 800078e:	2301      	movs	r3, #1
 8000790:	737b      	strb	r3, [r7, #13]
 8000792:	e00f      	b.n	80007b4 <main+0x234>
				  }
			  }
			  else if(tipo_dato(input_keypad)==2){
 8000794:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <main+0x328>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fec9 	bl	8000530 <tipo_dato>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d107      	bne.n	80007b4 <main+0x234>
				  modo_carga=input_keypad;//guardar el modo que se selecciono
 80007a4:	4b40      	ldr	r3, [pc, #256]	; (80008a8 <main+0x328>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	73fb      	strb	r3, [r7, #15]
				  input_keypad=0;
 80007aa:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <main+0x328>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
				  //borrar buffer
				  flag_update_display=1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	737b      	strb	r3, [r7, #13]
			  }
		  if(flag_update_display){
 80007b4:	7b7b      	ldrb	r3, [r7, #13]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d007      	beq.n	80007ca <main+0x24a>
			  display_update_conf(modo_carga,input_valor);
 80007ba:	463a      	mov	r2, r7
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fd3b 	bl	800123c <display_update_conf>
			  flag_update_display=0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	737b      	strb	r3, [r7, #13]
		  while(flag_config){
 80007ca:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <main+0x338>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	f47f af7a 	bne.w	80006c8 <main+0x148>
		  }
		}//fin while config
	  }//fin if config
// entra a modo running
	  if(flag_on_off){
 80007d4:	4b3b      	ldr	r3, [pc, #236]	; (80008c4 <main+0x344>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f43f af28 	beq.w	800062e <main+0xae>
		  //setting del modo de trabajo
		  //flag_update_display_1_seg=1;
		  while(flag_on_off){
 80007de:	e043      	b.n	8000868 <main+0x2e8>
			  if(flag_update_loop_control){
 80007e0:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <main+0x348>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d012      	beq.n	800080e <main+0x28e>
				 control_spi=control_carga(modo_carga,adc2use[0],adc2use[1],set_point);
 80007e8:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <main+0x324>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	b299      	uxth	r1, r3
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <main+0x324>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	897b      	ldrh	r3, [r7, #10]
 80007f6:	7bf8      	ldrb	r0, [r7, #15]
 80007f8:	f001 fa00 	bl	8001bfc <control_carga>
 80007fc:	4603      	mov	r3, r0
 80007fe:	813b      	strh	r3, [r7, #8]
				 enviar_spi_dac(control_spi);
 8000800:	893b      	ldrh	r3, [r7, #8]
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fb9a 	bl	8000f3c <enviar_spi_dac>
				 flag_update_loop_control=0;
 8000808:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <main+0x348>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
			  }
			  if(flag_update_display_1_seg){
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <main+0x320>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d00a      	beq.n	800082c <main+0x2ac>
				  display_update_running(modo_carga,adc2use[0],adc2use[1]);
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <main+0x324>)
 8000818:	6819      	ldr	r1, [r3, #0]
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <main+0x324>)
 800081c:	685a      	ldr	r2, [r3, #4]
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	4618      	mov	r0, r3
 8000822:	f001 f82d 	bl	8001880 <display_update_running>
				  flag_update_display_1_seg=0;
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <main+0x320>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
				  }
			  if(flag_error!=0){
 800082c:	4b27      	ldr	r3, [pc, #156]	; (80008cc <main+0x34c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d019      	beq.n	8000868 <main+0x2e8>
				  	flag_on_off=0;
 8000834:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <main+0x344>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
			  		enviar_spi_dac(0);//setear el dac a 0
 800083a:	2000      	movs	r0, #0
 800083c:	f000 fb7e 	bl	8000f3c <enviar_spi_dac>
			  		input_keypad = 0;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <main+0x328>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
			  		print_error(flag_error);
 8000846:	4b21      	ldr	r3, [pc, #132]	; (80008cc <main+0x34c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fc9a 	bl	8001184 <print_error>
			  		while(flag_error!=0){//wait for 'K'
 8000850:	e006      	b.n	8000860 <main+0x2e0>
			  			if(input_keypad=='K'){
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <main+0x328>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b4b      	cmp	r3, #75	; 0x4b
 8000858:	d102      	bne.n	8000860 <main+0x2e0>
			  				flag_error=0;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <main+0x34c>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
			  		while(flag_error!=0){//wait for 'K'
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <main+0x34c>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1f4      	bne.n	8000852 <main+0x2d2>
		  while(flag_on_off){
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <main+0x344>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1b7      	bne.n	80007e0 <main+0x260>
			  		}

			  	}
		  }//fin while flag_on_off
		  //configuracion post carga activa
		  input_keypad=0;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <main+0x328>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
		  control_spi=0;
 8000876:	2300      	movs	r3, #0
 8000878:	813b      	strh	r3, [r7, #8]
		  //flag_update_display_1_seg=1;
		  enviar_spi_dac(control_spi);
 800087a:	893b      	ldrh	r3, [r7, #8]
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fb5d 	bl	8000f3c <enviar_spi_dac>
	  if(flag_update_display_1_seg){
 8000882:	e6d4      	b.n	800062e <main+0xae>
 8000884:	0800bea0 	.word	0x0800bea0
 8000888:	0800beb0 	.word	0x0800beb0
 800088c:	0800bec0 	.word	0x0800bec0
 8000890:	20000328 	.word	0x20000328
 8000894:	20000370 	.word	0x20000370
 8000898:	200003c8 	.word	0x200003c8
 800089c:	20000208 	.word	0x20000208
 80008a0:	200003c2 	.word	0x200003c2
 80008a4:	200003d8 	.word	0x200003d8
 80008a8:	2000043e 	.word	0x2000043e
 80008ac:	0800bed8 	.word	0x0800bed8
 80008b0:	20000420 	.word	0x20000420
 80008b4:	200003e0 	.word	0x200003e0
 80008b8:	200003c1 	.word	0x200003c1
 80008bc:	0800bee0 	.word	0x0800bee0
 80008c0:	0800bef4 	.word	0x0800bef4
 80008c4:	200003c0 	.word	0x200003c0
 80008c8:	200003c3 	.word	0x200003c3
 80008cc:	200003c4 	.word	0x200003c4

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008da:	2228      	movs	r2, #40	; 0x28
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f00a fe38 	bl	800b554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090e:	2301      	movs	r3, #1
 8000910:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800091c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000920:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000926:	4618      	mov	r0, r3
 8000928:	f004 fe4c 	bl	80055c4 <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000932:	f001 f9f7 	bl	8001d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2302      	movs	r3, #2
 800093c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000946:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2102      	movs	r1, #2
 8000952:	4618      	mov	r0, r3
 8000954:	f005 f8b8 	bl	8005ac8 <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800095e:	f001 f9e1 	bl	8001d24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000962:	2312      	movs	r3, #18
 8000964:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000966:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800096a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f005 fa22 	bl	8005dbc <HAL_RCCEx_PeriphCLKConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800097e:	f001 f9d1 	bl	8001d24 <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3750      	adds	r7, #80	; 0x50
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800099c:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <MX_ADC1_Init+0xcc>)
 800099e:	4a2f      	ldr	r2, [pc, #188]	; (8000a5c <MX_ADC1_Init+0xd0>)
 80009a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <MX_ADC1_Init+0xcc>)
 80009a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <MX_ADC1_Init+0xcc>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <MX_ADC1_Init+0xcc>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b6:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <MX_ADC1_Init+0xcc>)
 80009b8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <MX_ADC1_Init+0xcc>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <MX_ADC1_Init+0xcc>)
 80009c6:	2204      	movs	r2, #4
 80009c8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ca:	4823      	ldr	r0, [pc, #140]	; (8000a58 <MX_ADC1_Init+0xcc>)
 80009cc:	f001 fc3c 	bl	8002248 <HAL_ADC_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80009d6:	f001 f9a5 	bl	8001d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009da:	2301      	movs	r3, #1
 80009dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009de:	2301      	movs	r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	481b      	ldr	r0, [pc, #108]	; (8000a58 <MX_ADC1_Init+0xcc>)
 80009ec:	f001 fdfe 	bl	80025ec <HAL_ADC_ConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f001 f995 	bl	8001d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_ADC1_Init+0xcc>)
 8000a08:	f001 fdf0 	bl	80025ec <HAL_ADC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a12:	f001 f987 	bl	8001d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a16:	2303      	movs	r3, #3
 8000a18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_ADC1_Init+0xcc>)
 8000a24:	f001 fde2 	bl	80025ec <HAL_ADC_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000a2e:	f001 f979 	bl	8001d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a32:	2304      	movs	r3, #4
 8000a34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a36:	2304      	movs	r3, #4
 8000a38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_ADC1_Init+0xcc>)
 8000a40:	f001 fdd4 	bl	80025ec <HAL_ADC_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000a4a:	f001 f96b 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000208 	.word	0x20000208
 8000a5c:	40012400 	.word	0x40012400

08000a60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MX_I2C1_Init+0x54>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 80000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_I2C1_Init+0x58>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a9e:	f002 fb79 	bl	8003194 <HAL_I2C_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f001 f93c 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000027c 	.word	0x2000027c
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	00013880 	.word	0x00013880

08000abc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ac2:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <MX_SPI1_Init+0x6c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ada:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000af2:	2228      	movs	r2, #40	; 0x28
 8000af4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000b0a:	220a      	movs	r2, #10
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000b10:	f005 fa0a 	bl	8005f28 <HAL_SPI_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000b1a:	f001 f903 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200002d0 	.word	0x200002d0
 8000b28:	40013000 	.word	0x40013000

08000b2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_TIM2_Init+0x98>)
 8000b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_TIM2_Init+0x98>)
 8000b52:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000b56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_TIM2_Init+0x98>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_TIM2_Init+0x98>)
 8000b60:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000b64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_TIM2_Init+0x98>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_TIM2_Init+0x98>)
 8000b6e:	2280      	movs	r2, #128	; 0x80
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b72:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <MX_TIM2_Init+0x98>)
 8000b74:	f005 fc52 	bl	800641c <HAL_TIM_Base_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b7e:	f001 f8d1 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <MX_TIM2_Init+0x98>)
 8000b90:	f005 fdee 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b9a:	f001 f8c3 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <MX_TIM2_Init+0x98>)
 8000bac:	f005 ffc4 	bl	8006b38 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000bb6:	f001 f8b5 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000328 	.word	0x20000328

08000bc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_TIM3_Init+0x94>)
 8000be6:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <MX_TIM3_Init+0x98>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_TIM3_Init+0x94>)
 8000bec:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000bf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_TIM3_Init+0x94>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1499;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_TIM3_Init+0x94>)
 8000bfa:	f240 52db 	movw	r2, #1499	; 0x5db
 8000bfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_TIM3_Init+0x94>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_TIM3_Init+0x94>)
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c0c:	4813      	ldr	r0, [pc, #76]	; (8000c5c <MX_TIM3_Init+0x94>)
 8000c0e:	f005 fc05 	bl	800641c <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c18:	f001 f884 	bl	8001d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <MX_TIM3_Init+0x94>)
 8000c2a:	f005 fda1 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c34:	f001 f876 	bl	8001d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_TIM3_Init+0x94>)
 8000c46:	f005 ff77 	bl	8006b38 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f001 f868 	bl	8001d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000370 	.word	0x20000370
 8000c60:	40000400 	.word	0x40000400

08000c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_DMA_Init+0x28>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <MX_DMA_Init+0x28>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <MX_DMA_Init+0x28>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	40021000 	.word	0x40021000

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca4:	4b49      	ldr	r3, [pc, #292]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a48      	ldr	r2, [pc, #288]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000caa:	f043 0310 	orr.w	r3, r3, #16
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbc:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a42      	ldr	r2, [pc, #264]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000cc2:	f043 0320 	orr.w	r3, r3, #32
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0320 	and.w	r3, r3, #32
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b3d      	ldr	r3, [pc, #244]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a3c      	ldr	r2, [pc, #240]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cec:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <MX_GPIO_Init+0x13c>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d0a:	4831      	ldr	r0, [pc, #196]	; (8000dd0 <MX_GPIO_Init+0x140>)
 8000d0c:	f002 f9f9 	bl	8003102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	482f      	ldr	r0, [pc, #188]	; (8000dd4 <MX_GPIO_Init+0x144>)
 8000d16:	f002 f9f4 	bl	8003102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f640 6103 	movw	r1, #3587	; 0xe03
 8000d20:	482d      	ldr	r0, [pc, #180]	; (8000dd8 <MX_GPIO_Init+0x148>)
 8000d22:	f002 f9ee 	bl	8003102 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000d26:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4824      	ldr	r0, [pc, #144]	; (8000dd0 <MX_GPIO_Init+0x140>)
 8000d40:	f002 f844 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d44:	2340      	movs	r3, #64	; 0x40
 8000d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	481e      	ldr	r0, [pc, #120]	; (8000dd4 <MX_GPIO_Init+0x144>)
 8000d5c:	f002 f836 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000d60:	f640 6303 	movw	r3, #3587	; 0xe03
 8000d64:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	4817      	ldr	r0, [pc, #92]	; (8000dd8 <MX_GPIO_Init+0x148>)
 8000d7a:	f002 f827 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000d7e:	f44f 4371 	mov.w	r3, #61696	; 0xf100
 8000d82:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <MX_GPIO_Init+0x148>)
 8000d94:	f002 f81a 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_GPIO_Init+0x14c>)
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <MX_GPIO_Init+0x144>)
 8000dae:	f002 f80d 	bl	8002dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2017      	movs	r0, #23
 8000db8:	f001 fee9 	bl	8002b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dbc:	2017      	movs	r0, #23
 8000dbe:	f001 ff02 	bl	8002bc6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	10210000 	.word	0x10210000

08000de0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//definiciones de los callback y funciones
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	80fb      	strh	r3, [r7, #6]
     current_tim = HAL_GetTick();
 8000dea:	f001 f9ff 	bl	80021ec <HAL_GetTick>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x64>)
 8000df2:	6013      	str	r3, [r2, #0]
     if(GPIO_Pin == GPIO_PIN_9 && ((current_tim-last_tim)>1000)) // INT Source is pin A9
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dfa:	d11e      	bne.n	8000e3a <HAL_GPIO_EXTI_Callback+0x5a>
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x64>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x68>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e0a:	d916      	bls.n	8000e3a <HAL_GPIO_EXTI_Callback+0x5a>
    {

		if(!flag_on_off && !flag_config && (adc2use[0]>=LIM_inf_Voltage)){
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10b      	bne.n	8000e2c <HAL_GPIO_EXTI_Callback+0x4c>
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x70>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d107      	bne.n	8000e2c <HAL_GPIO_EXTI_Callback+0x4c>
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_GPIO_EXTI_Callback+0x74>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b63      	cmp	r3, #99	; 0x63
 8000e22:	d903      	bls.n	8000e2c <HAL_GPIO_EXTI_Callback+0x4c>
			flag_on_off=1;// conecta la carga
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	e002      	b.n	8000e32 <HAL_GPIO_EXTI_Callback+0x52>
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
			//flag_update_loop_control=1;
			//flag_update_display_1_seg=1;
		}
		else{
			flag_on_off=0;// desconecta la carga
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
			//flag_update_display_1_seg=1;//
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
			}
	last_tim=current_tim;
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x64>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x68>)
 8000e38:	6013      	str	r3, [r2, #0]

    }
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200003b8 	.word	0x200003b8
 8000e48:	200003bc 	.word	0x200003bc
 8000e4c:	200003c0 	.word	0x200003c0
 8000e50:	200003c1 	.word	0x200003c1
 8000e54:	200003d8 	.word	0x200003d8

08000e58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM2){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e68:	d11b      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x4a>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6e:	4814      	ldr	r0, [pc, #80]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000e70:	f002 f95f 	bl	8003132 <HAL_GPIO_TogglePin>
	 input_keypad=keypad_scan();//condicionar la lectura a que no este en modo activo la carga
 8000e74:	f7ff fa68 	bl	8000348 <keypad_scan>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000e7e:	701a      	strb	r2, [r3, #0]
	 //flag_update_loop_control=1; //movemos al timer3

	 if(cont_timer_update>=5){//cada segundo y medio actualiza el display
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d906      	bls.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0x3e>

		 flag_update_display_1_seg=1;//update nombre
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
		 cont_timer_update=0;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	e005      	b.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x4a>
		 //temperatura_sensor=leer_temperatura();
	 }
	 else cont_timer_update++;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ea0:	701a      	strb	r2, [r3, #0]
 }
 if(htim->Instance == TIM3){
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d104      	bne.n	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x5e>
 	 //disparar control de la carga
	 validar_ADC();
 8000eac:	f000 f8a6 	bl	8000ffc <validar_ADC>
	 flag_update_loop_control=1; //flag ciclo de control
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40011000 	.word	0x40011000
 8000ec4:	2000043e 	.word	0x2000043e
 8000ec8:	200003c5 	.word	0x200003c5
 8000ecc:	200003c2 	.word	0x200003c2
 8000ed0:	40000400 	.word	0x40000400
 8000ed4:	200003c3 	.word	0x200003c3

08000ed8 <agregar_digito>:

void agregar_digito(char *buffer, char digito) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
    size_t longitud = strlen(buffer);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff f931 	bl	800014c <strlen>
 8000eea:	60f8      	str	r0, [r7, #12]

    if (longitud < BUFFER_SIZE_input) {
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d80a      	bhi.n	8000f08 <agregar_digito+0x30>
        buffer[longitud] = digito;
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	78fa      	ldrb	r2, [r7, #3]
 8000efa:	701a      	strb	r2, [r3, #0]
        buffer[longitud + 1] = '\0';
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3301      	adds	r3, #1
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
    }
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <borrar_ultimo_digito>:

void borrar_ultimo_digito(char *buffer) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    size_t longitud = strlen(buffer);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff f917 	bl	800014c <strlen>
 8000f1e:	60f8      	str	r0, [r7, #12]

    if (longitud > 0) {
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d005      	beq.n	8000f32 <borrar_ultimo_digito+0x22>
        buffer[longitud - 1] = '\0';
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
    }
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <enviar_spi_dac>:
		temperature_milicelsius=0;
	}
	 return temperature_milicelsius;
}

void enviar_spi_dac(uint16_t dato){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	80fb      	strh	r3, [r7, #6]
	if(dato<=0x0FFF){
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f4c:	d21f      	bcs.n	8000f8e <enviar_spi_dac+0x52>
		uint16_t send = 0x3000;
 8000f4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f52:	81fb      	strh	r3, [r7, #14]
		send = send|dato;
 8000f54:	89fa      	ldrh	r2, [r7, #14]
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	480c      	ldr	r0, [pc, #48]	; (8000f94 <enviar_spi_dac+0x58>)
 8000f64:	f002 f8cd 	bl	8003102 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &send, 2, 10);
 8000f68:	f107 010e 	add.w	r1, r7, #14
 8000f6c:	230a      	movs	r3, #10
 8000f6e:	2202      	movs	r2, #2
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <enviar_spi_dac+0x5c>)
 8000f72:	f005 f85d 	bl	8006030 <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&hspi1)!=HAL_SPI_STATE_READY);
 8000f76:	bf00      	nop
 8000f78:	4807      	ldr	r0, [pc, #28]	; (8000f98 <enviar_spi_dac+0x5c>)
 8000f7a:	f005 f99c 	bl	80062b6 <HAL_SPI_GetState>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d1f9      	bne.n	8000f78 <enviar_spi_dac+0x3c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2140      	movs	r1, #64	; 0x40
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <enviar_spi_dac+0x58>)
 8000f8a:	f002 f8ba 	bl	8003102 <HAL_GPIO_WritePin>

		return;
	}
}
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40010800 	.word	0x40010800
 8000f98:	200002d0 	.word	0x200002d0

08000f9c <validar_input>:
uint16_t validar_input(char mode, int val){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
	if(mode=='C' && val<LIM_inf_Current)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b43      	cmp	r3, #67	; 0x43
 8000fac:	d104      	bne.n	8000fb8 <validar_input+0x1c>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2b13      	cmp	r3, #19
 8000fb2:	dc01      	bgt.n	8000fb8 <validar_input+0x1c>
		return 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e01b      	b.n	8000ff0 <validar_input+0x54>
	else if(mode=='C' && val>LIM_sup_Current)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b43      	cmp	r3, #67	; 0x43
 8000fbc:	d105      	bne.n	8000fca <validar_input+0x2e>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fc4:	dd01      	ble.n	8000fca <validar_input+0x2e>
		return 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e012      	b.n	8000ff0 <validar_input+0x54>
	else if(mode=='P' && val>LIM_sup_Pot)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b50      	cmp	r3, #80	; 0x50
 8000fce:	d106      	bne.n	8000fde <validar_input+0x42>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	dd01      	ble.n	8000fde <validar_input+0x42>
		return 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e008      	b.n	8000ff0 <validar_input+0x54>
	else if(mode=='R' && val<LIM_inf_Res)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b52      	cmp	r3, #82	; 0x52
 8000fe2:	d104      	bne.n	8000fee <validar_input+0x52>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2b09      	cmp	r3, #9
 8000fe8:	dc01      	bgt.n	8000fee <validar_input+0x52>
		return 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <validar_input+0x54>
	else return 1;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
	...

08000ffc <validar_ADC>:

void validar_ADC(){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	//valida que adc de corriente usar o si el sense esta activo
	//corriente
	if(input_adc[2]>LIM_HAL_SENSOR_5A){
 8001000:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <validar_ADC+0xe8>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f640 52ac 	movw	r2, #3500	; 0xdac
 8001008:	4293      	cmp	r3, r2
 800100a:	d915      	bls.n	8001038 <validar_ADC+0x3c>
		adc2use[1]=input_adc[3]*FACTOR_ADC_30A_CURRENT_mult;
 800100c:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <validar_ADC+0xe8>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4a35      	ldr	r2, [pc, #212]	; (80010e8 <validar_ADC+0xec>)
 8001012:	fb02 f303 	mul.w	r3, r2, r3
 8001016:	4a35      	ldr	r2, [pc, #212]	; (80010ec <validar_ADC+0xf0>)
 8001018:	6053      	str	r3, [r2, #4]
		adc2use[1]=adc2use[1]/FACTOR_ADC_30A_CURRENT_div;
 800101a:	4b34      	ldr	r3, [pc, #208]	; (80010ec <validar_ADC+0xf0>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	4a33      	ldr	r2, [pc, #204]	; (80010f0 <validar_ADC+0xf4>)
 8001022:	fba2 2303 	umull	r2, r3, r2, r3
 8001026:	09db      	lsrs	r3, r3, #7
 8001028:	4a30      	ldr	r2, [pc, #192]	; (80010ec <validar_ADC+0xf0>)
 800102a:	6053      	str	r3, [r2, #4]
		adc2use[1]=adc2use[1]+OFFSET_30A;
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <validar_ADC+0xf0>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	3307      	adds	r3, #7
 8001032:	4a2e      	ldr	r2, [pc, #184]	; (80010ec <validar_ADC+0xf0>)
 8001034:	6053      	str	r3, [r2, #4]
 8001036:	e014      	b.n	8001062 <validar_ADC+0x66>
	}else{
		adc2use[1]=input_adc[2]+OFFSET_5A_restar;
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <validar_ADC+0xe8>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	3364      	adds	r3, #100	; 0x64
 800103e:	4a2b      	ldr	r2, [pc, #172]	; (80010ec <validar_ADC+0xf0>)
 8001040:	6053      	str	r3, [r2, #4]
		adc2use[1]=adc2use[1]*FACTOR_ADC_5A_CURRENT_mult;
 8001042:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <validar_ADC+0xf0>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f240 5219 	movw	r2, #1305	; 0x519
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	4a27      	ldr	r2, [pc, #156]	; (80010ec <validar_ADC+0xf0>)
 8001050:	6053      	str	r3, [r2, #4]
		adc2use[1]=adc2use[1]/FACTOR_ADC_5A_CURRENT_div;
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <validar_ADC+0xf0>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <validar_ADC+0xf8>)
 8001058:	fba2 2303 	umull	r2, r3, r2, r3
 800105c:	0b5b      	lsrs	r3, r3, #13
 800105e:	4a23      	ldr	r2, [pc, #140]	; (80010ec <validar_ADC+0xf0>)
 8001060:	6053      	str	r3, [r2, #4]
	}
	//tension
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==GPIO_PIN_SET){
 8001062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001066:	4824      	ldr	r0, [pc, #144]	; (80010f8 <validar_ADC+0xfc>)
 8001068:	f002 f834 	bl	80030d4 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d115      	bne.n	800109e <validar_ADC+0xa2>
		adc2use[0]=input_adc[0]*FACTOR_ADC_VOLTAGE_mult;//inputadc[0]marron linea baja impedancia
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <validar_ADC+0xe8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f642 725f 	movw	r2, #12127	; 0x2f5f
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	4a1b      	ldr	r2, [pc, #108]	; (80010ec <validar_ADC+0xf0>)
 8001080:	6013      	str	r3, [r2, #0]
		adc2use[0]=adc2use[0]/FACTOR_ADC_VOLTAGE_div;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <validar_ADC+0xf0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <validar_ADC+0xf8>)
 8001088:	fba2 2303 	umull	r2, r3, r2, r3
 800108c:	0b5b      	lsrs	r3, r3, #13
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <validar_ADC+0xf0>)
 8001090:	6013      	str	r3, [r2, #0]
		adc2use[0]=adc2use[0]+OFFSET_ADC_VOLTAGE_low;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <validar_ADC+0xf0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	335f      	adds	r3, #95	; 0x5f
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <validar_ADC+0xf0>)
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e014      	b.n	80010c8 <validar_ADC+0xcc>
	}else{
		//adc2use[0]=input_adc[0]*FACTOR_ADC_VOLTAGE_mult;//quitar linea para usar sense
		adc2use[0]=input_adc[1]*FACTOR_ADC_VOLTAGE_mult;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <validar_ADC+0xe8>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f642 725f 	movw	r2, #12127	; 0x2f5f
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <validar_ADC+0xf0>)
 80010ac:	6013      	str	r3, [r2, #0]
		adc2use[0]=adc2use[0]/FACTOR_ADC_VOLTAGE_div;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <validar_ADC+0xf0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <validar_ADC+0xf8>)
 80010b4:	fba2 2303 	umull	r2, r3, r2, r3
 80010b8:	0b5b      	lsrs	r3, r3, #13
 80010ba:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <validar_ADC+0xf0>)
 80010bc:	6013      	str	r3, [r2, #0]
		adc2use[0]=adc2use[0]+OFFSET_ADC_VOLTAGE_low;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <validar_ADC+0xf0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	335f      	adds	r3, #95	; 0x5f
 80010c4:	4a09      	ldr	r2, [pc, #36]	; (80010ec <validar_ADC+0xf0>)
 80010c6:	6013      	str	r3, [r2, #0]
	}
	if(flag_on_off)	detectar_error(adc2use[0],adc2use[1]);
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <validar_ADC+0x100>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d007      	beq.n	80010e0 <validar_ADC+0xe4>
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <validar_ADC+0xf0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a05      	ldr	r2, [pc, #20]	; (80010ec <validar_ADC+0xf0>)
 80010d6:	6852      	ldr	r2, [r2, #4]
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f810 	bl	8001100 <detectar_error>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200003c8 	.word	0x200003c8
 80010e8:	00014480 	.word	0x00014480
 80010ec:	200003d8 	.word	0x200003d8
 80010f0:	0a7c5ac5 	.word	0x0a7c5ac5
 80010f4:	d1b71759 	.word	0xd1b71759
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	200003c0 	.word	0x200003c0

08001100 <detectar_error>:
void detectar_error(uint32_t voltage, uint32_t current){
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
uint32_t pot = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
pot =voltage*current;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	fb02 f303 	mul.w	r3, r2, r3
 8001116:	60fb      	str	r3, [r7, #12]
pot = pot/1000;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <detectar_error+0x7c>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	099b      	lsrs	r3, r3, #6
 8001122:	60fb      	str	r3, [r7, #12]
	if(voltage<LIM_inf_Voltage)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b63      	cmp	r3, #99	; 0x63
 8001128:	d803      	bhi.n	8001132 <detectar_error+0x32>
		flag_error=1;
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <detectar_error+0x80>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
	else if(current>LIM_sup_Current)
		flag_error=4;
	else if(pot>LIM_sup_Pot)
		flag_error=5;
	//sumar error de temp
}
 8001130:	e01f      	b.n	8001172 <detectar_error+0x72>
	else if(voltage>LIM_sup_Voltage)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f241 3288 	movw	r2, #5000	; 0x1388
 8001138:	4293      	cmp	r3, r2
 800113a:	d903      	bls.n	8001144 <detectar_error+0x44>
		flag_error=2;
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <detectar_error+0x80>)
 800113e:	2202      	movs	r2, #2
 8001140:	701a      	strb	r2, [r3, #0]
}
 8001142:	e016      	b.n	8001172 <detectar_error+0x72>
	else if(current<LIM_inf_Current)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2b13      	cmp	r3, #19
 8001148:	d803      	bhi.n	8001152 <detectar_error+0x52>
		flag_error=3;
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <detectar_error+0x80>)
 800114c:	2203      	movs	r2, #3
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	e00f      	b.n	8001172 <detectar_error+0x72>
	else if(current>LIM_sup_Current)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001158:	d903      	bls.n	8001162 <detectar_error+0x62>
		flag_error=4;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <detectar_error+0x80>)
 800115c:	2204      	movs	r2, #4
 800115e:	701a      	strb	r2, [r3, #0]
}
 8001160:	e007      	b.n	8001172 <detectar_error+0x72>
	else if(pot>LIM_sup_Pot)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001168:	4293      	cmp	r3, r2
 800116a:	d902      	bls.n	8001172 <detectar_error+0x72>
		flag_error=5;
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <detectar_error+0x80>)
 800116e:	2205      	movs	r2, #5
 8001170:	701a      	strb	r2, [r3, #0]
}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	10624dd3 	.word	0x10624dd3
 8001180:	200003c4 	.word	0x200003c4

08001184 <print_error>:
void print_error(uint8_t error_id){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	LCD_I2C_cmd(LCD_CLEAR);//cambiar display
 800118e:	2001      	movs	r0, #1
 8001190:	f7fe ffe4 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 8001194:	2000      	movs	r0, #0
 8001196:	f7fe ffe1 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text("  Error electrico  ");
 800119a:	481f      	ldr	r0, [pc, #124]	; (8001218 <print_error+0x94>)
 800119c:	f7ff f85b 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA2);
 80011a0:	20c0      	movs	r0, #192	; 0xc0
 80011a2:	f7fe ffdb 	bl	800015c <LCD_I2C_cmd>
	switch(error_id){
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d826      	bhi.n	80011fc <print_error+0x78>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <print_error+0x30>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011cd 	.word	0x080011cd
 80011b8:	080011d5 	.word	0x080011d5
 80011bc:	080011dd 	.word	0x080011dd
 80011c0:	080011e5 	.word	0x080011e5
 80011c4:	080011ed 	.word	0x080011ed
 80011c8:	080011f5 	.word	0x080011f5
	case 1:
		LCD_I2C_write_text("  Caida de Tension  ");
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <print_error+0x98>)
 80011ce:	f7ff f842 	bl	8000256 <LCD_I2C_write_text>
		break;
 80011d2:	e016      	b.n	8001202 <print_error+0x7e>
	case 2:
		LCD_I2C_write_text("   Sobre Tension   ");
 80011d4:	4812      	ldr	r0, [pc, #72]	; (8001220 <print_error+0x9c>)
 80011d6:	f7ff f83e 	bl	8000256 <LCD_I2C_write_text>
		break;
 80011da:	e012      	b.n	8001202 <print_error+0x7e>
	case 3:
		LCD_I2C_write_text(" Caida de Corriente ");
 80011dc:	4811      	ldr	r0, [pc, #68]	; (8001224 <print_error+0xa0>)
 80011de:	f7ff f83a 	bl	8000256 <LCD_I2C_write_text>
		break;
 80011e2:	e00e      	b.n	8001202 <print_error+0x7e>
	case 4:
		LCD_I2C_write_text("  Sobre Corriente  ");
 80011e4:	4810      	ldr	r0, [pc, #64]	; (8001228 <print_error+0xa4>)
 80011e6:	f7ff f836 	bl	8000256 <LCD_I2C_write_text>
		break;
 80011ea:	e00a      	b.n	8001202 <print_error+0x7e>
	case 5:
		LCD_I2C_write_text("   Sobre Potencia   ");
 80011ec:	480f      	ldr	r0, [pc, #60]	; (800122c <print_error+0xa8>)
 80011ee:	f7ff f832 	bl	8000256 <LCD_I2C_write_text>
		break;
 80011f2:	e006      	b.n	8001202 <print_error+0x7e>
	case 6:
		LCD_I2C_write_text(" Sobre Temperatura ");
 80011f4:	480e      	ldr	r0, [pc, #56]	; (8001230 <print_error+0xac>)
 80011f6:	f7ff f82e 	bl	8000256 <LCD_I2C_write_text>
		break;
 80011fa:	e002      	b.n	8001202 <print_error+0x7e>
	default:
		LCD_I2C_write_text("        404        ");
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <print_error+0xb0>)
 80011fe:	f7ff f82a 	bl	8000256 <LCD_I2C_write_text>
	}


	LCD_I2C_cmd(LCD_LINEA4);
 8001202:	20d4      	movs	r0, #212	; 0xd4
 8001204:	f7fe ffaa 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text("  Press enter  ");
 8001208:	480b      	ldr	r0, [pc, #44]	; (8001238 <print_error+0xb4>)
 800120a:	f7ff f824 	bl	8000256 <LCD_I2C_write_text>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	0800bf0c 	.word	0x0800bf0c
 800121c:	0800bf20 	.word	0x0800bf20
 8001220:	0800bf38 	.word	0x0800bf38
 8001224:	0800bf4c 	.word	0x0800bf4c
 8001228:	0800bf64 	.word	0x0800bf64
 800122c:	0800bf78 	.word	0x0800bf78
 8001230:	0800bf90 	.word	0x0800bf90
 8001234:	0800bfa4 	.word	0x0800bfa4
 8001238:	0800bfb8 	.word	0x0800bfb8

0800123c <display_update_conf>:

void display_update_conf(char modo_op, char *dato){
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	; 0x38
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]

	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800124e:	2300      	movs	r3, #0
 8001250:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
 8001258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
	snprintf(buffer_fun, sizeof(buffer_fun), "Config Modo C%s:", char_as_str);
 8001278:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800127c:	f107 0020 	add.w	r0, r7, #32
 8001280:	4a38      	ldr	r2, [pc, #224]	; (8001364 <display_update_conf+0x128>)
 8001282:	2114      	movs	r1, #20
 8001284:	f00a f912 	bl	800b4ac <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 8001288:	2001      	movs	r0, #1
 800128a:	f7fe ff67 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 800128e:	2000      	movs	r0, #0
 8001290:	f7fe ff64 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 8001294:	f107 0320 	add.w	r3, r7, #32
 8001298:	4618      	mov	r0, r3
 800129a:	f7fe ffdc 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA3);
 800129e:	2094      	movs	r0, #148	; 0x94
 80012a0:	f7fe ff5c 	bl	800015c <LCD_I2C_cmd>
	switch(modo_op){//print del modo
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	3b43      	subs	r3, #67	; 0x43
 80012a8:	2b13      	cmp	r3, #19
 80012aa:	d84b      	bhi.n	8001344 <display_update_conf+0x108>
 80012ac:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <display_update_conf+0x78>)
 80012ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b2:	bf00      	nop
 80012b4:	08001305 	.word	0x08001305
 80012b8:	08001345 	.word	0x08001345
 80012bc:	08001345 	.word	0x08001345
 80012c0:	08001345 	.word	0x08001345
 80012c4:	08001345 	.word	0x08001345
 80012c8:	08001345 	.word	0x08001345
 80012cc:	08001345 	.word	0x08001345
 80012d0:	08001345 	.word	0x08001345
 80012d4:	08001345 	.word	0x08001345
 80012d8:	08001345 	.word	0x08001345
 80012dc:	08001345 	.word	0x08001345
 80012e0:	08001345 	.word	0x08001345
 80012e4:	08001345 	.word	0x08001345
 80012e8:	08001335 	.word	0x08001335
 80012ec:	08001345 	.word	0x08001345
 80012f0:	08001325 	.word	0x08001325
 80012f4:	08001345 	.word	0x08001345
 80012f8:	08001345 	.word	0x08001345
 80012fc:	08001345 	.word	0x08001345
 8001300:	08001315 	.word	0x08001315

	case 'C':
		snprintf(buffer_dato, sizeof(buffer_dato), "Current: %s0[mA]", dato);
 8001304:	f107 000c 	add.w	r0, r7, #12
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <display_update_conf+0x12c>)
 800130c:	2114      	movs	r1, #20
 800130e:	f00a f8cd 	bl	800b4ac <sniprintf>
		break;
 8001312:	e01e      	b.n	8001352 <display_update_conf+0x116>
	case 'V':
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %s0[mV]", dato);
 8001314:	f107 000c 	add.w	r0, r7, #12
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	4a14      	ldr	r2, [pc, #80]	; (800136c <display_update_conf+0x130>)
 800131c:	2114      	movs	r1, #20
 800131e:	f00a f8c5 	bl	800b4ac <sniprintf>
		break;
 8001322:	e016      	b.n	8001352 <display_update_conf+0x116>
	case 'R':
		snprintf(buffer_dato, sizeof(buffer_dato), "Resist: %s0[mOhm]", dato);
 8001324:	f107 000c 	add.w	r0, r7, #12
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <display_update_conf+0x134>)
 800132c:	2114      	movs	r1, #20
 800132e:	f00a f8bd 	bl	800b4ac <sniprintf>
		break;
 8001332:	e00e      	b.n	8001352 <display_update_conf+0x116>
	case 'P':
		snprintf(buffer_dato, sizeof(buffer_dato), "Power.: %s00[mW]", dato);
 8001334:	f107 000c 	add.w	r0, r7, #12
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <display_update_conf+0x138>)
 800133c:	2114      	movs	r1, #20
 800133e:	f00a f8b5 	bl	800b4ac <sniprintf>
		break;
 8001342:	e006      	b.n	8001352 <display_update_conf+0x116>
	default:
		snprintf(buffer_dato, sizeof(buffer_dato), "Error: case def");
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <display_update_conf+0x13c>)
 800134a:	2114      	movs	r1, #20
 800134c:	4618      	mov	r0, r3
 800134e:	f00a f8ad 	bl	800b4ac <sniprintf>
	}
	LCD_I2C_write_text(buffer_dato);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4618      	mov	r0, r3
 8001358:	f7fe ff7d 	bl	8000256 <LCD_I2C_write_text>
}
 800135c:	bf00      	nop
 800135e:	3738      	adds	r7, #56	; 0x38
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	0800bfc8 	.word	0x0800bfc8
 8001368:	0800bfdc 	.word	0x0800bfdc
 800136c:	0800bff0 	.word	0x0800bff0
 8001370:	0800c004 	.word	0x0800c004
 8001374:	0800c018 	.word	0x0800c018
 8001378:	0800c02c 	.word	0x0800c02c

0800137c <display_update_stat>:

void display_update_stat(char modo_op, char *dato,uint32_t volt){
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b093      	sub	sp, #76	; 0x4c
 8001380:	af02      	add	r7, sp, #8
 8001382:	4603      	mov	r3, r0
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	73fb      	strb	r3, [r7, #15]
	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001390:	2300      	movs	r3, #0
 8001392:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
 800139a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
	//uint32_t volt_convertido = 0;
	//volt_convertido=volt*FACTOR_ADC_VOLTAGE_mult;//122;
	//volt_convertido=volt_convertido/FACTOR_ADC_VOLTAGE_div;//100;
	int dato_num = atoi(dato);
 80013ba:	68b8      	ldr	r0, [r7, #8]
 80013bc:	f009 ffea 	bl	800b394 <atoi>
 80013c0:	63f8      	str	r0, [r7, #60]	; 0x3c
	snprintf(buffer_fun, sizeof(buffer_fun), "Modo C%s:", char_as_str);
 80013c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80013ca:	4a91      	ldr	r2, [pc, #580]	; (8001610 <display_update_stat+0x294>)
 80013cc:	2114      	movs	r1, #20
 80013ce:	f00a f86d 	bl	800b4ac <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7fe fec2 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 80013d8:	2000      	movs	r0, #0
 80013da:	f7fe febf 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe ff37 	bl	8000256 <LCD_I2C_write_text>

	switch(modo_op){//print del modo
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2b52      	cmp	r3, #82	; 0x52
 80013ec:	d04b      	beq.n	8001486 <display_update_stat+0x10a>
 80013ee:	2b52      	cmp	r3, #82	; 0x52
 80013f0:	f300 80ff 	bgt.w	80015f2 <display_update_stat+0x276>
 80013f4:	2b43      	cmp	r3, #67	; 0x43
 80013f6:	d003      	beq.n	8001400 <display_update_stat+0x84>
 80013f8:	2b50      	cmp	r3, #80	; 0x50
 80013fa:	f000 80a3 	beq.w	8001544 <display_update_stat+0x1c8>
 80013fe:	e0f8      	b.n	80015f2 <display_update_stat+0x276>

	case 'C':
		LCD_I2C_cmd(LCD_LINEA2);
 8001400:	20c0      	movs	r0, #192	; 0xc0
 8001402:	f7fe feab 	bl	800015c <LCD_I2C_cmd>
		if(volt<LIM_inf_Voltage)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b63      	cmp	r3, #99	; 0x63
 800140a:	d807      	bhi.n	800141c <display_update_stat+0xa0>
			snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: Under Lim");//
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4a80      	ldr	r2, [pc, #512]	; (8001614 <display_update_stat+0x298>)
 8001412:	2114      	movs	r1, #20
 8001414:	4618      	mov	r0, r3
 8001416:	f00a f849 	bl	800b4ac <sniprintf>
 800141a:	e019      	b.n	8001450 <display_update_stat+0xd4>
		else
			snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]", (int)volt/100,(int)volt%100);//
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a7e      	ldr	r2, [pc, #504]	; (8001618 <display_update_stat+0x29c>)
 8001420:	fb82 1203 	smull	r1, r2, r2, r3
 8001424:	1152      	asrs	r2, r2, #5
 8001426:	17db      	asrs	r3, r3, #31
 8001428:	1ad4      	subs	r4, r2, r3
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4b7a      	ldr	r3, [pc, #488]	; (8001618 <display_update_stat+0x29c>)
 800142e:	fb83 1302 	smull	r1, r3, r3, r2
 8001432:	1159      	asrs	r1, r3, #5
 8001434:	17d3      	asrs	r3, r2, #31
 8001436:	1acb      	subs	r3, r1, r3
 8001438:	2164      	movs	r1, #100	; 0x64
 800143a:	fb01 f303 	mul.w	r3, r1, r3
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f107 0010 	add.w	r0, r7, #16
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4623      	mov	r3, r4
 8001448:	4a74      	ldr	r2, [pc, #464]	; (800161c <display_update_stat+0x2a0>)
 800144a:	2114      	movs	r1, #20
 800144c:	f00a f82e 	bl	800b4ac <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4618      	mov	r0, r3
 8001456:	f7fe fefe 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 800145a:	2094      	movs	r0, #148	; 0x94
 800145c:	f7fe fe7e 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Current: %s0 [mA]", dato);
 8001460:	f107 0010 	add.w	r0, r7, #16
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4a6e      	ldr	r2, [pc, #440]	; (8001620 <display_update_stat+0x2a4>)
 8001468:	2114      	movs	r1, #20
 800146a:	f00a f81f 	bl	800b4ac <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe feef 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8001478:	20d4      	movs	r0, #212	; 0xd4
 800147a:	f7fe fe6f 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[W]");
 800147e:	4869      	ldr	r0, [pc, #420]	; (8001624 <display_update_stat+0x2a8>)
 8001480:	f7fe fee9 	bl	8000256 <LCD_I2C_write_text>

		break;
 8001484:	e0c0      	b.n	8001608 <display_update_stat+0x28c>
		LCD_I2C_write_text("Current: 0[mA]");
		LCD_I2C_cmd(LCD_LINEA4);
		LCD_I2C_write_text("Power: 0[mW]");
		break;*/
	case 'R':
		LCD_I2C_cmd(LCD_CLEAR);
 8001486:	2001      	movs	r0, #1
 8001488:	f7fe fe68 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_cmd(LCD_LINEA1);
 800148c:	2000      	movs	r0, #0
 800148e:	f7fe fe65 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Res: %d.%02d[ohm]", (int)dato_num/100,(int)dato_num%100);
 8001492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001494:	4a60      	ldr	r2, [pc, #384]	; (8001618 <display_update_stat+0x29c>)
 8001496:	fb82 1203 	smull	r1, r2, r2, r3
 800149a:	1152      	asrs	r2, r2, #5
 800149c:	17db      	asrs	r3, r3, #31
 800149e:	1ad4      	subs	r4, r2, r3
 80014a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014a2:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <display_update_stat+0x29c>)
 80014a4:	fb83 1302 	smull	r1, r3, r3, r2
 80014a8:	1159      	asrs	r1, r3, #5
 80014aa:	17d3      	asrs	r3, r2, #31
 80014ac:	1acb      	subs	r3, r1, r3
 80014ae:	2164      	movs	r1, #100	; 0x64
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f107 0010 	add.w	r0, r7, #16
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4623      	mov	r3, r4
 80014be:	4a5a      	ldr	r2, [pc, #360]	; (8001628 <display_update_stat+0x2ac>)
 80014c0:	2114      	movs	r1, #20
 80014c2:	f009 fff3 	bl	800b4ac <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe fec3 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA2);
 80014d0:	20c0      	movs	r0, #192	; 0xc0
 80014d2:	f7fe fe43 	bl	800015c <LCD_I2C_cmd>
		if(volt<LIM_inf_Voltage)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b63      	cmp	r3, #99	; 0x63
 80014da:	d807      	bhi.n	80014ec <display_update_stat+0x170>
			snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: Under Lim");//
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <display_update_stat+0x298>)
 80014e2:	2114      	movs	r1, #20
 80014e4:	4618      	mov	r0, r3
 80014e6:	f009 ffe1 	bl	800b4ac <sniprintf>
 80014ea:	e019      	b.n	8001520 <display_update_stat+0x1a4>
		else
			snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]", (int)volt/100,(int)volt%100);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a4a      	ldr	r2, [pc, #296]	; (8001618 <display_update_stat+0x29c>)
 80014f0:	fb82 1203 	smull	r1, r2, r2, r3
 80014f4:	1152      	asrs	r2, r2, #5
 80014f6:	17db      	asrs	r3, r3, #31
 80014f8:	1ad4      	subs	r4, r2, r3
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4b46      	ldr	r3, [pc, #280]	; (8001618 <display_update_stat+0x29c>)
 80014fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001502:	1159      	asrs	r1, r3, #5
 8001504:	17d3      	asrs	r3, r2, #31
 8001506:	1acb      	subs	r3, r1, r3
 8001508:	2164      	movs	r1, #100	; 0x64
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f107 0010 	add.w	r0, r7, #16
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	4623      	mov	r3, r4
 8001518:	4a40      	ldr	r2, [pc, #256]	; (800161c <display_update_stat+0x2a0>)
 800151a:	2114      	movs	r1, #20
 800151c:	f009 ffc6 	bl	800b4ac <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe fe96 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 800152a:	2094      	movs	r0, #148	; 0x94
 800152c:	f7fe fe16 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 8001530:	483e      	ldr	r0, [pc, #248]	; (800162c <display_update_stat+0x2b0>)
 8001532:	f7fe fe90 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8001536:	20d4      	movs	r0, #212	; 0xd4
 8001538:	f7fe fe10 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[mW]");
 800153c:	483c      	ldr	r0, [pc, #240]	; (8001630 <display_update_stat+0x2b4>)
 800153e:	f7fe fe8a 	bl	8000256 <LCD_I2C_write_text>
		break;
 8001542:	e061      	b.n	8001608 <display_update_stat+0x28c>
	case 'P':
		LCD_I2C_cmd(LCD_LINEA2);
 8001544:	20c0      	movs	r0, #192	; 0xc0
 8001546:	f7fe fe09 	bl	800015c <LCD_I2C_cmd>
		if(volt<LIM_inf_Voltage)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b63      	cmp	r3, #99	; 0x63
 800154e:	d807      	bhi.n	8001560 <display_update_stat+0x1e4>
			snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: Under Lim");//
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	4a2f      	ldr	r2, [pc, #188]	; (8001614 <display_update_stat+0x298>)
 8001556:	2114      	movs	r1, #20
 8001558:	4618      	mov	r0, r3
 800155a:	f009 ffa7 	bl	800b4ac <sniprintf>
 800155e:	e019      	b.n	8001594 <display_update_stat+0x218>
		else
			snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]", (int)volt/100,(int)volt%100);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a2d      	ldr	r2, [pc, #180]	; (8001618 <display_update_stat+0x29c>)
 8001564:	fb82 1203 	smull	r1, r2, r2, r3
 8001568:	1152      	asrs	r2, r2, #5
 800156a:	17db      	asrs	r3, r3, #31
 800156c:	1ad4      	subs	r4, r2, r3
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4b29      	ldr	r3, [pc, #164]	; (8001618 <display_update_stat+0x29c>)
 8001572:	fb83 1302 	smull	r1, r3, r3, r2
 8001576:	1159      	asrs	r1, r3, #5
 8001578:	17d3      	asrs	r3, r2, #31
 800157a:	1acb      	subs	r3, r1, r3
 800157c:	2164      	movs	r1, #100	; 0x64
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f107 0010 	add.w	r0, r7, #16
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	4623      	mov	r3, r4
 800158c:	4a23      	ldr	r2, [pc, #140]	; (800161c <display_update_stat+0x2a0>)
 800158e:	2114      	movs	r1, #20
 8001590:	f009 ff8c 	bl	800b4ac <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fe5c 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 800159e:	2094      	movs	r0, #148	; 0x94
 80015a0:	f7fe fddc 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 80015a4:	4821      	ldr	r0, [pc, #132]	; (800162c <display_update_stat+0x2b0>)
 80015a6:	f7fe fe56 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 80015aa:	20d4      	movs	r0, #212	; 0xd4
 80015ac:	f7fe fdd6 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Power: %d.%01d [W]", (int)dato_num/10,(int)dato_num%10);
 80015b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015b2:	4a20      	ldr	r2, [pc, #128]	; (8001634 <display_update_stat+0x2b8>)
 80015b4:	fb82 1203 	smull	r1, r2, r2, r3
 80015b8:	1092      	asrs	r2, r2, #2
 80015ba:	17db      	asrs	r3, r3, #31
 80015bc:	1ad4      	subs	r4, r2, r3
 80015be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <display_update_stat+0x2b8>)
 80015c2:	fb83 2301 	smull	r2, r3, r3, r1
 80015c6:	109a      	asrs	r2, r3, #2
 80015c8:	17cb      	asrs	r3, r1, #31
 80015ca:	1ad2      	subs	r2, r2, r3
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	1aca      	subs	r2, r1, r3
 80015d6:	f107 0010 	add.w	r0, r7, #16
 80015da:	9200      	str	r2, [sp, #0]
 80015dc:	4623      	mov	r3, r4
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <display_update_stat+0x2bc>)
 80015e0:	2114      	movs	r1, #20
 80015e2:	f009 ff63 	bl	800b4ac <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe fe33 	bl	8000256 <LCD_I2C_write_text>

		break;
 80015f0:	e00a      	b.n	8001608 <display_update_stat+0x28c>
	default:
		LCD_I2C_cmd(LCD_LINEA1);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7fe fdb2 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Error: monit");
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4a0f      	ldr	r2, [pc, #60]	; (800163c <display_update_stat+0x2c0>)
 80015fe:	2114      	movs	r1, #20
 8001600:	4618      	mov	r0, r3
 8001602:	f009 ff53 	bl	800b4ac <sniprintf>
	}

}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	3744      	adds	r7, #68	; 0x44
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}
 8001610:	0800c03c 	.word	0x0800c03c
 8001614:	0800c048 	.word	0x0800c048
 8001618:	51eb851f 	.word	0x51eb851f
 800161c:	0800c05c 	.word	0x0800c05c
 8001620:	0800c074 	.word	0x0800c074
 8001624:	0800c088 	.word	0x0800c088
 8001628:	0800c094 	.word	0x0800c094
 800162c:	0800c0a8 	.word	0x0800c0a8
 8001630:	0800c0b8 	.word	0x0800c0b8
 8001634:	66666667 	.word	0x66666667
 8001638:	0800c0c8 	.word	0x0800c0c8
 800163c:	0800c0dc 	.word	0x0800c0dc

08001640 <modo_usb>:

void modo_usb(){
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b08d      	sub	sp, #52	; 0x34
 8001644:	af02      	add	r7, sp, #8
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800164c:	4881      	ldr	r0, [pc, #516]	; (8001854 <modo_usb+0x214>)
 800164e:	f001 fd58 	bl	8003102 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001658:	487f      	ldr	r0, [pc, #508]	; (8001858 <modo_usb+0x218>)
 800165a:	f001 fd52 	bl	8003102 <HAL_GPIO_WritePin>
uint16_t control_spi = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	843b      	strh	r3, [r7, #32]

int valor = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
char mode = 'C';
 8001666:	2343      	movs	r3, #67	; 0x43
 8001668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
char str_aux[30]="";
 800166c:	2300      	movs	r3, #0
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	615a      	str	r2, [r3, #20]
 8001680:	831a      	strh	r2, [r3, #24]
uint8_t flag_USB = 1;
 8001682:	2301      	movs	r3, #1
 8001684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
input_keypad=0;
 8001688:	4b74      	ldr	r3, [pc, #464]	; (800185c <modo_usb+0x21c>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
	while(flag_USB==1){
 800168e:	e0c2      	b.n	8001816 <modo_usb+0x1d6>
  //lectura de datos USB
		if (buffer_usb[0]=='$' && buffer_usb[1]=='C' && buffer_usb[9]=='#') {//comando config
 8001690:	4b73      	ldr	r3, [pc, #460]	; (8001860 <modo_usb+0x220>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b24      	cmp	r3, #36	; 0x24
 8001696:	d140      	bne.n	800171a <modo_usb+0xda>
 8001698:	4b71      	ldr	r3, [pc, #452]	; (8001860 <modo_usb+0x220>)
 800169a:	785b      	ldrb	r3, [r3, #1]
 800169c:	2b43      	cmp	r3, #67	; 0x43
 800169e:	d13c      	bne.n	800171a <modo_usb+0xda>
 80016a0:	4b6f      	ldr	r3, [pc, #444]	; (8001860 <modo_usb+0x220>)
 80016a2:	7a5b      	ldrb	r3, [r3, #9]
 80016a4:	2b23      	cmp	r3, #35	; 0x23
 80016a6:	d138      	bne.n	800171a <modo_usb+0xda>
			sprintf(str, "$D,%c,%04d,%04d,%04d", mode,valor,(int)adc2use[0],(int)adc2use[1]);
 80016a8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016ac:	4b6d      	ldr	r3, [pc, #436]	; (8001864 <modo_usb+0x224>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4b6c      	ldr	r3, [pc, #432]	; (8001864 <modo_usb+0x224>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	9100      	str	r1, [sp, #0]
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	496a      	ldr	r1, [pc, #424]	; (8001868 <modo_usb+0x228>)
 80016be:	486b      	ldr	r0, [pc, #428]	; (800186c <modo_usb+0x22c>)
 80016c0:	f009 ff28 	bl	800b514 <siprintf>
			mode=buffer_usb[3];
 80016c4:	4b66      	ldr	r3, [pc, #408]	; (8001860 <modo_usb+0x220>)
 80016c6:	78db      	ldrb	r3, [r3, #3]
 80016c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			sprintf(str_aux, "%c%c%c%c",buffer_usb[5],buffer_usb[6],buffer_usb[7],buffer_usb[8]);
 80016cc:	4b64      	ldr	r3, [pc, #400]	; (8001860 <modo_usb+0x220>)
 80016ce:	795b      	ldrb	r3, [r3, #5]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <modo_usb+0x220>)
 80016d4:	799b      	ldrb	r3, [r3, #6]
 80016d6:	461c      	mov	r4, r3
 80016d8:	4b61      	ldr	r3, [pc, #388]	; (8001860 <modo_usb+0x220>)
 80016da:	79db      	ldrb	r3, [r3, #7]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b60      	ldr	r3, [pc, #384]	; (8001860 <modo_usb+0x220>)
 80016e0:	7a1b      	ldrb	r3, [r3, #8]
 80016e2:	4638      	mov	r0, r7
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	9200      	str	r2, [sp, #0]
 80016e8:	4623      	mov	r3, r4
 80016ea:	460a      	mov	r2, r1
 80016ec:	4960      	ldr	r1, [pc, #384]	; (8001870 <modo_usb+0x230>)
 80016ee:	f009 ff11 	bl	800b514 <siprintf>
			valor=atoi(str_aux);
 80016f2:	463b      	mov	r3, r7
 80016f4:	4618      	mov	r0, r3
 80016f6:	f009 fe4d 	bl	800b394 <atoi>
 80016fa:	6278      	str	r0, [r7, #36]	; 0x24
			CDC_Transmit_FS((uint8_t*) str, strlen(str));
 80016fc:	485b      	ldr	r0, [pc, #364]	; (800186c <modo_usb+0x22c>)
 80016fe:	f7fe fd25 	bl	800014c <strlen>
 8001702:	4603      	mov	r3, r0
 8001704:	b29b      	uxth	r3, r3
 8001706:	4619      	mov	r1, r3
 8001708:	4858      	ldr	r0, [pc, #352]	; (800186c <modo_usb+0x22c>)
 800170a:	f009 fa65 	bl	800abd8 <CDC_Transmit_FS>
			memset(buffer_usb, '\0',64);
 800170e:	2240      	movs	r2, #64	; 0x40
 8001710:	2100      	movs	r1, #0
 8001712:	4853      	ldr	r0, [pc, #332]	; (8001860 <modo_usb+0x220>)
 8001714:	f009 ff1e 	bl	800b554 <memset>
 8001718:	e037      	b.n	800178a <modo_usb+0x14a>

		}else if(buffer_usb[0]=='$' && buffer_usb[1]=='R' && buffer_usb[2]=='e' && buffer_usb[3]=='q'){//comando request
 800171a:	4b51      	ldr	r3, [pc, #324]	; (8001860 <modo_usb+0x220>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b24      	cmp	r3, #36	; 0x24
 8001720:	d128      	bne.n	8001774 <modo_usb+0x134>
 8001722:	4b4f      	ldr	r3, [pc, #316]	; (8001860 <modo_usb+0x220>)
 8001724:	785b      	ldrb	r3, [r3, #1]
 8001726:	2b52      	cmp	r3, #82	; 0x52
 8001728:	d124      	bne.n	8001774 <modo_usb+0x134>
 800172a:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <modo_usb+0x220>)
 800172c:	789b      	ldrb	r3, [r3, #2]
 800172e:	2b65      	cmp	r3, #101	; 0x65
 8001730:	d120      	bne.n	8001774 <modo_usb+0x134>
 8001732:	4b4b      	ldr	r3, [pc, #300]	; (8001860 <modo_usb+0x220>)
 8001734:	78db      	ldrb	r3, [r3, #3]
 8001736:	2b71      	cmp	r3, #113	; 0x71
 8001738:	d11c      	bne.n	8001774 <modo_usb+0x134>
			sprintf(str, "$D,%c,%04d,%04d,%04d", mode,valor,(int)adc2use[0],(int)adc2use[1]);
 800173a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800173e:	4b49      	ldr	r3, [pc, #292]	; (8001864 <modo_usb+0x224>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	4b47      	ldr	r3, [pc, #284]	; (8001864 <modo_usb+0x224>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	9100      	str	r1, [sp, #0]
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	4946      	ldr	r1, [pc, #280]	; (8001868 <modo_usb+0x228>)
 8001750:	4846      	ldr	r0, [pc, #280]	; (800186c <modo_usb+0x22c>)
 8001752:	f009 fedf 	bl	800b514 <siprintf>
			CDC_Transmit_FS((uint8_t*) str, strlen(str));
 8001756:	4845      	ldr	r0, [pc, #276]	; (800186c <modo_usb+0x22c>)
 8001758:	f7fe fcf8 	bl	800014c <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29b      	uxth	r3, r3
 8001760:	4619      	mov	r1, r3
 8001762:	4842      	ldr	r0, [pc, #264]	; (800186c <modo_usb+0x22c>)
 8001764:	f009 fa38 	bl	800abd8 <CDC_Transmit_FS>
			memset(buffer_usb, '\0',64);
 8001768:	2240      	movs	r2, #64	; 0x40
 800176a:	2100      	movs	r1, #0
 800176c:	483c      	ldr	r0, [pc, #240]	; (8001860 <modo_usb+0x220>)
 800176e:	f009 fef1 	bl	800b554 <memset>
 8001772:	e00a      	b.n	800178a <modo_usb+0x14a>
		}else if(buffer_usb[0]=='$' && buffer_usb[1]=='D'){//fin modo usb
 8001774:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <modo_usb+0x220>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b24      	cmp	r3, #36	; 0x24
 800177a:	d106      	bne.n	800178a <modo_usb+0x14a>
 800177c:	4b38      	ldr	r3, [pc, #224]	; (8001860 <modo_usb+0x220>)
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	2b44      	cmp	r3, #68	; 0x44
 8001782:	d102      	bne.n	800178a <modo_usb+0x14a>
			flag_USB=0;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}
  //lectura fin modo usb
		if(tipo_dato(input_keypad)==3){
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <modo_usb+0x21c>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fece 	bl	8000530 <tipo_dato>
 8001794:	4603      	mov	r3, r0
 8001796:	2b03      	cmp	r3, #3
 8001798:	d114      	bne.n	80017c4 <modo_usb+0x184>
			flag_USB=0;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			sprintf(str, "$END");
 80017a0:	4934      	ldr	r1, [pc, #208]	; (8001874 <modo_usb+0x234>)
 80017a2:	4832      	ldr	r0, [pc, #200]	; (800186c <modo_usb+0x22c>)
 80017a4:	f009 feb6 	bl	800b514 <siprintf>
			CDC_Transmit_FS((uint8_t*) str, strlen(str));
 80017a8:	4830      	ldr	r0, [pc, #192]	; (800186c <modo_usb+0x22c>)
 80017aa:	f7fe fccf 	bl	800014c <strlen>
 80017ae:	4603      	mov	r3, r0
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4619      	mov	r1, r3
 80017b4:	482d      	ldr	r0, [pc, #180]	; (800186c <modo_usb+0x22c>)
 80017b6:	f009 fa0f 	bl	800abd8 <CDC_Transmit_FS>
			memset(buffer_usb, '\0',64);
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	2100      	movs	r1, #0
 80017be:	4828      	ldr	r0, [pc, #160]	; (8001860 <modo_usb+0x220>)
 80017c0:	f009 fec8 	bl	800b554 <memset>
			//enviar fin usb/ready
		}
  //call a funciones de control y display
		if(flag_update_loop_control){
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <modo_usb+0x238>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d014      	beq.n	80017f6 <modo_usb+0x1b6>

			 control_spi=control_carga(mode,adc2use[0],adc2use[1],(uint16_t)valor);
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <modo_usb+0x224>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	b299      	uxth	r1, r3
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <modo_usb+0x224>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 80017e0:	f000 fa0c 	bl	8001bfc <control_carga>
 80017e4:	4603      	mov	r3, r0
 80017e6:	843b      	strh	r3, [r7, #32]
			 enviar_spi_dac(control_spi);
 80017e8:	8c3b      	ldrh	r3, [r7, #32]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fba6 	bl	8000f3c <enviar_spi_dac>
			 flag_update_loop_control=0;
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <modo_usb+0x238>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]

		  }
		  if(flag_update_display_1_seg){
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <modo_usb+0x23c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <modo_usb+0x1d6>
			  display_update_running_usb(mode,adc2use[0],adc2use[1]);
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <modo_usb+0x224>)
 8001800:	6819      	ldr	r1, [r3, #0]
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <modo_usb+0x224>)
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f924 	bl	8001a58 <display_update_running_usb>
			  flag_update_display_1_seg=0;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <modo_usb+0x23c>)
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
	while(flag_USB==1){
 8001816:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800181a:	2b01      	cmp	r3, #1
 800181c:	f43f af38 	beq.w	8001690 <modo_usb+0x50>
			  }
	}//fin while
	  input_keypad=0;
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <modo_usb+0x21c>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
	  control_spi=0;
 8001826:	2300      	movs	r3, #0
 8001828:	843b      	strh	r3, [r7, #32]
	  enviar_spi_dac(control_spi);
 800182a:	8c3b      	ldrh	r3, [r7, #32]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fb85 	bl	8000f3c <enviar_spi_dac>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);//led
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001838:	4806      	ldr	r0, [pc, #24]	; (8001854 <modo_usb+0x214>)
 800183a:	f001 fc62 	bl	8003102 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);//cooler
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <modo_usb+0x218>)
 8001846:	f001 fc5c 	bl	8003102 <HAL_GPIO_WritePin>
}//fin modo usb
 800184a:	bf00      	nop
 800184c:	372c      	adds	r7, #44	; 0x2c
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	bf00      	nop
 8001854:	40011000 	.word	0x40011000
 8001858:	40010c00 	.word	0x40010c00
 800185c:	2000043e 	.word	0x2000043e
 8001860:	200003e0 	.word	0x200003e0
 8001864:	200003d8 	.word	0x200003d8
 8001868:	0800c0ec 	.word	0x0800c0ec
 800186c:	20000420 	.word	0x20000420
 8001870:	0800c104 	.word	0x0800c104
 8001874:	0800c110 	.word	0x0800c110
 8001878:	200003c3 	.word	0x200003c3
 800187c:	200003c2 	.word	0x200003c2

08001880 <display_update_running>:

void display_update_running(char modo_op,uint32_t volt, uint32_t corriente){
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b095      	sub	sp, #84	; 0x54
 8001884:	af02      	add	r7, sp, #8
 8001886:	4603      	mov	r3, r0
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	73fb      	strb	r3, [r7, #15]
	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001894:	2300      	movs	r3, #0
 8001896:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 800189a:	2300      	movs	r3, #0
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
 800189e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	f107 0318 	add.w	r3, r7, #24
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]

	uint32_t potencia =0;
 80018be:	2300      	movs	r3, #0
 80018c0:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t resistencia =0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	643b      	str	r3, [r7, #64]	; 0x40
	volt_convertido=volt*FACTOR_ADC_VOLTAGE_mult;//122;
	volt_convertido=volt_convertido/FACTOR_ADC_VOLTAGE_div;//100;
	corriente_convertido=corriente*FACTOR_ADC_30A_CURRENT_mult;//8437;
	corriente_convertido=corriente_convertido/FACTOR_ADC_30A_CURRENT_div;//10000;
	*/
	potencia = volt*corriente;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
	potencia=potencia/1000;
 80018d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d2:	4a59      	ldr	r2, [pc, #356]	; (8001a38 <display_update_running+0x1b8>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	099b      	lsrs	r3, r3, #6
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
	resistencia=volt*100;
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2264      	movs	r2, #100	; 0x64
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	643b      	str	r3, [r7, #64]	; 0x40
	resistencia=resistencia/corriente;
 80018e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	643b      	str	r3, [r7, #64]	; 0x40

	LCD_I2C_cmd(LCD_CLEAR);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f7fe fc33 	bl	800015c <LCD_I2C_cmd>
	if(modo_op == 'R'){
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	2b52      	cmp	r3, #82	; 0x52
 80018fa:	d122      	bne.n	8001942 <display_update_running+0xc2>
		LCD_I2C_cmd(LCD_LINEA1);
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7fe fc2d 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Res: %d.%02d[ohm]", (int)resistencia/100,(int)resistencia%100);
 8001902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001904:	4a4d      	ldr	r2, [pc, #308]	; (8001a3c <display_update_running+0x1bc>)
 8001906:	fb82 1203 	smull	r1, r2, r2, r3
 800190a:	1152      	asrs	r2, r2, #5
 800190c:	17db      	asrs	r3, r3, #31
 800190e:	1ad4      	subs	r4, r2, r3
 8001910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001912:	4b4a      	ldr	r3, [pc, #296]	; (8001a3c <display_update_running+0x1bc>)
 8001914:	fb83 1302 	smull	r1, r3, r3, r2
 8001918:	1159      	asrs	r1, r3, #5
 800191a:	17d3      	asrs	r3, r2, #31
 800191c:	1acb      	subs	r3, r1, r3
 800191e:	2164      	movs	r1, #100	; 0x64
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	f107 0014 	add.w	r0, r7, #20
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4623      	mov	r3, r4
 800192e:	4a44      	ldr	r2, [pc, #272]	; (8001a40 <display_update_running+0x1c0>)
 8001930:	2114      	movs	r1, #20
 8001932:	f009 fdbb 	bl	800b4ac <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fc8b 	bl	8000256 <LCD_I2C_write_text>
 8001940:	e00f      	b.n	8001962 <display_update_running+0xe2>
	}
	else{
		snprintf(buffer_fun, sizeof(buffer_fun), "Running Modo C%s:", char_as_str);
 8001942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001946:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800194a:	4a3e      	ldr	r2, [pc, #248]	; (8001a44 <display_update_running+0x1c4>)
 800194c:	2114      	movs	r1, #20
 800194e:	f009 fdad 	bl	800b4ac <sniprintf>
		LCD_I2C_cmd(LCD_LINEA1);
 8001952:	2000      	movs	r0, #0
 8001954:	f7fe fc02 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text(buffer_fun);
 8001958:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fc7a 	bl	8000256 <LCD_I2C_write_text>
	}
	LCD_I2C_cmd(LCD_LINEA2);
 8001962:	20c0      	movs	r0, #192	; 0xc0
 8001964:	f7fe fbfa 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d[V]",  (int)volt/100,(int)volt%100);//
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4a34      	ldr	r2, [pc, #208]	; (8001a3c <display_update_running+0x1bc>)
 800196c:	fb82 1203 	smull	r1, r2, r2, r3
 8001970:	1152      	asrs	r2, r2, #5
 8001972:	17db      	asrs	r3, r3, #31
 8001974:	1ad4      	subs	r4, r2, r3
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <display_update_running+0x1bc>)
 800197a:	fb83 1302 	smull	r1, r3, r3, r2
 800197e:	1159      	asrs	r1, r3, #5
 8001980:	17d3      	asrs	r3, r2, #31
 8001982:	1acb      	subs	r3, r1, r3
 8001984:	2164      	movs	r1, #100	; 0x64
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f107 0014 	add.w	r0, r7, #20
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	4623      	mov	r3, r4
 8001994:	4a2c      	ldr	r2, [pc, #176]	; (8001a48 <display_update_running+0x1c8>)
 8001996:	2114      	movs	r1, #20
 8001998:	f009 fd88 	bl	800b4ac <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fc58 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA3);
 80019a6:	2094      	movs	r0, #148	; 0x94
 80019a8:	f7fe fbd8 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Current: %d.%02d[A]", (int)corriente/100,(int)corriente%100);//
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <display_update_running+0x1bc>)
 80019b0:	fb82 1203 	smull	r1, r2, r2, r3
 80019b4:	1152      	asrs	r2, r2, #5
 80019b6:	17db      	asrs	r3, r3, #31
 80019b8:	1ad4      	subs	r4, r2, r3
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <display_update_running+0x1bc>)
 80019be:	fb83 1302 	smull	r1, r3, r3, r2
 80019c2:	1159      	asrs	r1, r3, #5
 80019c4:	17d3      	asrs	r3, r2, #31
 80019c6:	1acb      	subs	r3, r1, r3
 80019c8:	2164      	movs	r1, #100	; 0x64
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f107 0014 	add.w	r0, r7, #20
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	4623      	mov	r3, r4
 80019d8:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <display_update_running+0x1cc>)
 80019da:	2114      	movs	r1, #20
 80019dc:	f009 fd66 	bl	800b4ac <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fc36 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA4);
 80019ea:	20d4      	movs	r0, #212	; 0xd4
 80019ec:	f7fe fbb6 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Pot: %d.%d[W]", (int)potencia/10,(int)potencia%10);//
 80019f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f2:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <display_update_running+0x1d0>)
 80019f4:	fb82 1203 	smull	r1, r2, r2, r3
 80019f8:	1092      	asrs	r2, r2, #2
 80019fa:	17db      	asrs	r3, r3, #31
 80019fc:	1ad4      	subs	r4, r2, r3
 80019fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <display_update_running+0x1d0>)
 8001a02:	fb83 2301 	smull	r2, r3, r3, r1
 8001a06:	109a      	asrs	r2, r3, #2
 8001a08:	17cb      	asrs	r3, r1, #31
 8001a0a:	1ad2      	subs	r2, r2, r3
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	1aca      	subs	r2, r1, r3
 8001a16:	f107 0014 	add.w	r0, r7, #20
 8001a1a:	9200      	str	r2, [sp, #0]
 8001a1c:	4623      	mov	r3, r4
 8001a1e:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <display_update_running+0x1d4>)
 8001a20:	2114      	movs	r1, #20
 8001a22:	f009 fd43 	bl	800b4ac <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fc13 	bl	8000256 <LCD_I2C_write_text>
}
 8001a30:	bf00      	nop
 8001a32:	374c      	adds	r7, #76	; 0x4c
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd90      	pop	{r4, r7, pc}
 8001a38:	10624dd3 	.word	0x10624dd3
 8001a3c:	51eb851f 	.word	0x51eb851f
 8001a40:	0800c094 	.word	0x0800c094
 8001a44:	0800c118 	.word	0x0800c118
 8001a48:	0800c12c 	.word	0x0800c12c
 8001a4c:	0800c140 	.word	0x0800c140
 8001a50:	66666667 	.word	0x66666667
 8001a54:	0800c154 	.word	0x0800c154

08001a58 <display_update_running_usb>:

void display_update_running_usb(char modo_op,uint32_t volt, uint32_t corriente){
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b093      	sub	sp, #76	; 0x4c
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	4603      	mov	r3, r0
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	73fb      	strb	r3, [r7, #15]
	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]

	uint32_t potencia =0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t resistencia =0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	877b      	strh	r3, [r7, #58]	; 0x3a
	volt_convertido=volt*FACTOR_ADC_VOLTAGE_mult;//122;
	volt_convertido=volt_convertido/FACTOR_ADC_VOLTAGE_div;//100;
	corriente_convertido=corriente*FACTOR_ADC_30A_CURRENT_mult;//8437;
	corriente_convertido=corriente_convertido/FACTOR_ADC_30A_CURRENT_div;//10000;
	*/
	potencia = volt*corriente;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
	potencia=potencia/1000;
 8001aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aaa:	4a4c      	ldr	r2, [pc, #304]	; (8001bdc <display_update_running_usb+0x184>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	099b      	lsrs	r3, r3, #6
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
	resistencia=volt/corriente;
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	877b      	strh	r3, [r7, #58]	; 0x3a


	LCD_I2C_cmd(LCD_CLEAR);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7fe fb4c 	bl	800015c <LCD_I2C_cmd>

	snprintf(buffer_fun, sizeof(buffer_fun), "USB Modo C%s:", char_as_str);
 8001ac4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ac8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001acc:	4a44      	ldr	r2, [pc, #272]	; (8001be0 <display_update_running_usb+0x188>)
 8001ace:	2114      	movs	r1, #20
 8001ad0:	f009 fcec 	bl	800b4ac <sniprintf>
	LCD_I2C_cmd(LCD_LINEA1);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7fe fb41 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 8001ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fbb9 	bl	8000256 <LCD_I2C_write_text>

	LCD_I2C_cmd(LCD_LINEA2);
 8001ae4:	20c0      	movs	r0, #192	; 0xc0
 8001ae6:	f7fe fb39 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]",  (int)volt/100,(int)volt%100);//
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	4a3d      	ldr	r2, [pc, #244]	; (8001be4 <display_update_running_usb+0x18c>)
 8001aee:	fb82 1203 	smull	r1, r2, r2, r3
 8001af2:	1152      	asrs	r2, r2, #5
 8001af4:	17db      	asrs	r3, r3, #31
 8001af6:	1ad4      	subs	r4, r2, r3
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <display_update_running_usb+0x18c>)
 8001afc:	fb83 1302 	smull	r1, r3, r3, r2
 8001b00:	1159      	asrs	r1, r3, #5
 8001b02:	17d3      	asrs	r3, r2, #31
 8001b04:	1acb      	subs	r3, r1, r3
 8001b06:	2164      	movs	r1, #100	; 0x64
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f107 0010 	add.w	r0, r7, #16
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	4623      	mov	r3, r4
 8001b16:	4a34      	ldr	r2, [pc, #208]	; (8001be8 <display_update_running_usb+0x190>)
 8001b18:	2114      	movs	r1, #20
 8001b1a:	f009 fcc7 	bl	800b4ac <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fb97 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA3);
 8001b28:	2094      	movs	r0, #148	; 0x94
 8001b2a:	f7fe fb17 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Current: %d.%02d [A]", (int)corriente/100,(int)corriente%100);//
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a2c      	ldr	r2, [pc, #176]	; (8001be4 <display_update_running_usb+0x18c>)
 8001b32:	fb82 1203 	smull	r1, r2, r2, r3
 8001b36:	1152      	asrs	r2, r2, #5
 8001b38:	17db      	asrs	r3, r3, #31
 8001b3a:	1ad4      	subs	r4, r2, r3
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <display_update_running_usb+0x18c>)
 8001b40:	fb83 1302 	smull	r1, r3, r3, r2
 8001b44:	1159      	asrs	r1, r3, #5
 8001b46:	17d3      	asrs	r3, r2, #31
 8001b48:	1acb      	subs	r3, r1, r3
 8001b4a:	2164      	movs	r1, #100	; 0x64
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f107 0010 	add.w	r0, r7, #16
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	4623      	mov	r3, r4
 8001b5a:	4a24      	ldr	r2, [pc, #144]	; (8001bec <display_update_running_usb+0x194>)
 8001b5c:	2114      	movs	r1, #20
 8001b5e:	f009 fca5 	bl	800b4ac <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fb75 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA4);
 8001b6c:	20d4      	movs	r0, #212	; 0xd4
 8001b6e:	f7fe faf5 	bl	800015c <LCD_I2C_cmd>
	if(modo_op == 'R'){
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	2b52      	cmp	r3, #82	; 0x52
 8001b76:	d10c      	bne.n	8001b92 <display_update_running_usb+0x13a>
		//if(resistencia>4999)snprintf(buffer_dato, sizeof(buffer_dato), "Res: O.Lim");
		snprintf(buffer_dato, sizeof(buffer_dato), "Res: %d[ohm]", resistencia);
 8001b78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001b7a:	f107 0010 	add.w	r0, r7, #16
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <display_update_running_usb+0x198>)
 8001b80:	2114      	movs	r1, #20
 8001b82:	f009 fc93 	bl	800b4ac <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fb63 	bl	8000256 <LCD_I2C_write_text>
	}else{
		snprintf(buffer_dato, sizeof(buffer_dato), "Pot: %d.%d [W]", (int)potencia/10,(int)potencia%10);//
		LCD_I2C_write_text(buffer_dato);
	}

}
 8001b90:	e01f      	b.n	8001bd2 <display_update_running_usb+0x17a>
		snprintf(buffer_dato, sizeof(buffer_dato), "Pot: %d.%d [W]", (int)potencia/10,(int)potencia%10);//
 8001b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b94:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <display_update_running_usb+0x19c>)
 8001b96:	fb82 1203 	smull	r1, r2, r2, r3
 8001b9a:	1092      	asrs	r2, r2, #2
 8001b9c:	17db      	asrs	r3, r3, #31
 8001b9e:	1ad4      	subs	r4, r2, r3
 8001ba0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <display_update_running_usb+0x19c>)
 8001ba4:	fb83 2301 	smull	r2, r3, r3, r1
 8001ba8:	109a      	asrs	r2, r3, #2
 8001baa:	17cb      	asrs	r3, r1, #31
 8001bac:	1ad2      	subs	r2, r2, r3
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	1aca      	subs	r2, r1, r3
 8001bb8:	f107 0010 	add.w	r0, r7, #16
 8001bbc:	9200      	str	r2, [sp, #0]
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <display_update_running_usb+0x1a0>)
 8001bc2:	2114      	movs	r1, #20
 8001bc4:	f009 fc72 	bl	800b4ac <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fb42 	bl	8000256 <LCD_I2C_write_text>
}
 8001bd2:	bf00      	nop
 8001bd4:	3744      	adds	r7, #68	; 0x44
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd90      	pop	{r4, r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	10624dd3 	.word	0x10624dd3
 8001be0:	0800c164 	.word	0x0800c164
 8001be4:	51eb851f 	.word	0x51eb851f
 8001be8:	0800c05c 	.word	0x0800c05c
 8001bec:	0800c174 	.word	0x0800c174
 8001bf0:	0800c18c 	.word	0x0800c18c
 8001bf4:	66666667 	.word	0x66666667
 8001bf8:	0800c19c 	.word	0x0800c19c

08001bfc <control_carga>:
uint16_t control_carga(char modo, uint16_t voltage, uint16_t current, uint16_t set_point){
 8001bfc:	b490      	push	{r4, r7}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4604      	mov	r4, r0
 8001c04:	4608      	mov	r0, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4623      	mov	r3, r4
 8001c0c:	71fb      	strb	r3, [r7, #7]
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80bb      	strh	r3, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	807b      	strh	r3, [r7, #2]
 8001c16:	4613      	mov	r3, r2
 8001c18:	803b      	strh	r3, [r7, #0]
	uint32_t calculo = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
	uint16_t DAC_nuevo_valor = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	817b      	strh	r3, [r7, #10]
	volt_convertido=voltage*FACTOR_ADC_VOLTAGE_mult;//122;
	volt_convertido=volt_convertido/FACTOR_ADC_VOLTAGE_div;//100;
	corriente_convertido=current*FACTOR_ADC_30A_CURRENT_mult;//8437;
	corriente_convertido=corriente_convertido/FACTOR_ADC_30A_CURRENT_div;//10000;
	 */
	switch(modo){
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	3b43      	subs	r3, #67	; 0x43
 8001c26:	2b13      	cmp	r3, #19
 8001c28:	d86f      	bhi.n	8001d0a <control_carga+0x10e>
 8001c2a:	a201      	add	r2, pc, #4	; (adr r2, 8001c30 <control_carga+0x34>)
 8001c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c30:	08001c81 	.word	0x08001c81
 8001c34:	08001d0b 	.word	0x08001d0b
 8001c38:	08001d0b 	.word	0x08001d0b
 8001c3c:	08001d0b 	.word	0x08001d0b
 8001c40:	08001d0b 	.word	0x08001d0b
 8001c44:	08001d0b 	.word	0x08001d0b
 8001c48:	08001d0b 	.word	0x08001d0b
 8001c4c:	08001d0b 	.word	0x08001d0b
 8001c50:	08001d0b 	.word	0x08001d0b
 8001c54:	08001d0b 	.word	0x08001d0b
 8001c58:	08001d0b 	.word	0x08001d0b
 8001c5c:	08001d0b 	.word	0x08001d0b
 8001c60:	08001d0b 	.word	0x08001d0b
 8001c64:	08001ca5 	.word	0x08001ca5
 8001c68:	08001d0b 	.word	0x08001d0b
 8001c6c:	08001cd9 	.word	0x08001cd9
 8001c70:	08001d0b 	.word	0x08001d0b
 8001c74:	08001d0b 	.word	0x08001d0b
 8001c78:	08001d0b 	.word	0x08001d0b
 8001c7c:	08001c9f 	.word	0x08001c9f
	case 'C'://seteo directo
		calculo = set_point * 4095;//dac resol
 8001c80:	883a      	ldrh	r2, [r7, #0]
 8001c82:	4613      	mov	r3, r2
 8001c84:	031b      	lsls	r3, r3, #12
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
		calculo = calculo /N_TRANSISTORES; //div num MOSFET
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	60fb      	str	r3, [r7, #12]
		calculo = calculo /I_MAX_x_TRANSISTOR;//div corriente max por cada mosfet 250->2500 mA
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <control_carga+0x124>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	095b      	lsrs	r3, r3, #5
 8001c9a:	60fb      	str	r3, [r7, #12]
		break;
 8001c9c:	e037      	b.n	8001d0e <control_carga+0x112>
	case 'V':
		//rev
		calculo = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
		break;
 8001ca2:	e034      	b.n	8001d0e <control_carga+0x112>
	case 'P':
		calculo = set_point * 1000;// agregamos ceros para que se alinee la coma y el resultado sea con las cifras correspondientes
 8001ca4:	883b      	ldrh	r3, [r7, #0]
 8001ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	60fb      	str	r3, [r7, #12]
		calculo=calculo/voltage;//P/V=I//1500000/1440
 8001cb0:	88bb      	ldrh	r3, [r7, #4]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	60fb      	str	r3, [r7, #12]
		calculo = calculo * 4095;//dac resol
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	031b      	lsls	r3, r3, #12
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
		calculo = calculo /N_TRANSISTORES; //div num MOSFET
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	60fb      	str	r3, [r7, #12]
		calculo = calculo /I_MAX_x_TRANSISTOR;//div corriente max por cada mosfet 250->2500 mA
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <control_carga+0x124>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	60fb      	str	r3, [r7, #12]
		break;
 8001cd6:	e01a      	b.n	8001d0e <control_carga+0x112>
	case 'R':
		calculo=voltage*100;//ceros para acomodar la coma
 8001cd8:	88bb      	ldrh	r3, [r7, #4]
 8001cda:	2264      	movs	r2, #100	; 0x64
 8001cdc:	fb02 f303 	mul.w	r3, r2, r3
 8001ce0:	60fb      	str	r3, [r7, #12]
		calculo=calculo/set_point;//por ley de ohm
 8001ce2:	883b      	ldrh	r3, [r7, #0]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	60fb      	str	r3, [r7, #12]
		calculo = calculo * 4095;//dac resol
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	031b      	lsls	r3, r3, #12
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
		calculo = calculo /N_TRANSISTORES; //div num MOSFET
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	60fb      	str	r3, [r7, #12]
		calculo = calculo /I_MAX_x_TRANSISTOR;//div corriente max por cada mosfet 250->2500 mA
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <control_carga+0x124>)
 8001d00:	fba2 2303 	umull	r2, r3, r2, r3
 8001d04:	095b      	lsrs	r3, r3, #5
 8001d06:	60fb      	str	r3, [r7, #12]
		break;
 8001d08:	e001      	b.n	8001d0e <control_carga+0x112>
	default:
		calculo=0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]

	}
	DAC_nuevo_valor=(uint16_t)calculo;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	817b      	strh	r3, [r7, #10]
	return DAC_nuevo_valor;
 8001d12:	897b      	ldrh	r3, [r7, #10]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc90      	pop	{r4, r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	10624dd3 	.word	0x10624dd3

08001d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d28:	b672      	cpsid	i
}
 8001d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <Error_Handler+0x8>
	...

08001d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_MspInit+0x5c>)
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <HAL_MspInit+0x5c>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6193      	str	r3, [r2, #24]
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_MspInit+0x5c>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_MspInit+0x5c>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_MspInit+0x5c>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	61d3      	str	r3, [r2, #28]
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <HAL_MspInit+0x5c>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_MspInit+0x60>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <HAL_MspInit+0x60>)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40010000 	.word	0x40010000

08001d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a28      	ldr	r2, [pc, #160]	; (8001e50 <HAL_ADC_MspInit+0xbc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d149      	bne.n	8001e48 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_ADC_MspInit+0xc0>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <HAL_ADC_MspInit+0xc0>)
 8001dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_ADC_MspInit+0xc0>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <HAL_ADC_MspInit+0xc0>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <HAL_ADC_MspInit+0xc0>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_ADC_MspInit+0xc0>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001de4:	231e      	movs	r3, #30
 8001de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de8:	2303      	movs	r3, #3
 8001dea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	4619      	mov	r1, r3
 8001df2:	4819      	ldr	r0, [pc, #100]	; (8001e58 <HAL_ADC_MspInit+0xc4>)
 8001df4:	f000 ffea 	bl	8002dcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001dfa:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <HAL_ADC_MspInit+0xcc>)
 8001dfc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e22:	2220      	movs	r2, #32
 8001e24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e2e:	f000 fee5 	bl	8002bfc <HAL_DMA_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001e38:	f7ff ff74 	bl	8001d24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a07      	ldr	r2, [pc, #28]	; (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e40:	621a      	str	r2, [r3, #32]
 8001e42:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <HAL_ADC_MspInit+0xc8>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e48:	bf00      	nop
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40012400 	.word	0x40012400
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	20000238 	.word	0x20000238
 8001e60:	40020008 	.word	0x40020008

08001e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <HAL_I2C_MspInit+0x70>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d123      	bne.n	8001ecc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_I2C_MspInit+0x74>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <HAL_I2C_MspInit+0x74>)
 8001e8a:	f043 0308 	orr.w	r3, r3, #8
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <HAL_I2C_MspInit+0x74>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e9c:	23c0      	movs	r3, #192	; 0xc0
 8001e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea0:	2312      	movs	r3, #18
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4619      	mov	r1, r3
 8001eae:	480b      	ldr	r0, [pc, #44]	; (8001edc <HAL_I2C_MspInit+0x78>)
 8001eb0:	f000 ff8c 	bl	8002dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_I2C_MspInit+0x74>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <HAL_I2C_MspInit+0x74>)
 8001eba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ebe:	61d3      	str	r3, [r2, #28]
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_I2C_MspInit+0x74>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ecc:	bf00      	nop
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40005400 	.word	0x40005400
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010c00 	.word	0x40010c00

08001ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <HAL_SPI_MspInit+0x70>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d123      	bne.n	8001f48 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <HAL_SPI_MspInit+0x74>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a13      	ldr	r2, [pc, #76]	; (8001f54 <HAL_SPI_MspInit+0x74>)
 8001f06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_SPI_MspInit+0x74>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_SPI_MspInit+0x74>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_SPI_MspInit+0x74>)
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_SPI_MspInit+0x74>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f30:	23a0      	movs	r3, #160	; 0xa0
 8001f32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	4619      	mov	r1, r3
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <HAL_SPI_MspInit+0x78>)
 8001f44:	f000 ff42 	bl	8002dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f48:	bf00      	nop
 8001f4a:	3720      	adds	r7, #32
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40013000 	.word	0x40013000
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40010800 	.word	0x40010800

08001f5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6c:	d114      	bne.n	8001f98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_TIM_Base_MspInit+0x78>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a18      	ldr	r2, [pc, #96]	; (8001fd4 <HAL_TIM_Base_MspInit+0x78>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	61d3      	str	r3, [r2, #28]
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_TIM_Base_MspInit+0x78>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	201c      	movs	r0, #28
 8001f8c:	f000 fdff 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f90:	201c      	movs	r0, #28
 8001f92:	f000 fe18 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f96:	e018      	b.n	8001fca <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_TIM_Base_MspInit+0x7c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d113      	bne.n	8001fca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <HAL_TIM_Base_MspInit+0x78>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <HAL_TIM_Base_MspInit+0x78>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	61d3      	str	r3, [r2, #28]
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_TIM_Base_MspInit+0x78>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	201d      	movs	r0, #29
 8001fc0:	f000 fde5 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fc4:	201d      	movs	r0, #29
 8001fc6:	f000 fdfe 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40000400 	.word	0x40000400

08001fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <NMI_Handler+0x4>

08001fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <HardFault_Handler+0x4>

08001fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <MemManage_Handler+0x4>

08001fee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <BusFault_Handler+0x4>

08001ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <UsageFault_Handler+0x4>

08001ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002022:	f000 f8d1 	bl	80021c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002032:	f001 fe7e 	bl	8003d32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20001110 	.word	0x20001110

08002040 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002044:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002048:	f001 f88c 	bl	8003164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <TIM2_IRQHandler+0x10>)
 8002056:	f004 fa83 	bl	8006560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000328 	.word	0x20000328

08002064 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <TIM3_IRQHandler+0x10>)
 800206a:	f004 fa79 	bl	8006560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000370 	.word	0x20000370

08002078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <_sbrk+0x5c>)
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <_sbrk+0x60>)
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <_sbrk+0x64>)
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <_sbrk+0x68>)
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d207      	bcs.n	80020b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a8:	f009 fa5c 	bl	800b564 <__errno>
 80020ac:	4603      	mov	r3, r0
 80020ae:	220c      	movs	r2, #12
 80020b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	e009      	b.n	80020cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <_sbrk+0x64>)
 80020c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20005000 	.word	0x20005000
 80020d8:	00000400 	.word	0x00000400
 80020dc:	20000440 	.word	0x20000440
 80020e0:	20001768 	.word	0x20001768

080020e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f0:	f7ff fff8 	bl	80020e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f4:	480b      	ldr	r0, [pc, #44]	; (8002124 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020f6:	490c      	ldr	r1, [pc, #48]	; (8002128 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020f8:	4a0c      	ldr	r2, [pc, #48]	; (800212c <LoopFillZerobss+0x16>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020fc:	e002      	b.n	8002104 <LoopCopyDataInit>

080020fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002102:	3304      	adds	r3, #4

08002104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002108:	d3f9      	bcc.n	80020fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800210c:	4c09      	ldr	r4, [pc, #36]	; (8002134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002110:	e001      	b.n	8002116 <LoopFillZerobss>

08002112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002114:	3204      	adds	r2, #4

08002116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002118:	d3fb      	bcc.n	8002112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211a:	f009 fa29 	bl	800b570 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800211e:	f7fe fa2f 	bl	8000580 <main>
  bx lr
 8002122:	4770      	bx	lr
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800212c:	0800c35c 	.word	0x0800c35c
  ldr r2, =_sbss
 8002130:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002134:	20001768 	.word	0x20001768

08002138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC1_2_IRQHandler>
	...

0800213c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_Init+0x28>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_Init+0x28>)
 8002146:	f043 0310 	orr.w	r3, r3, #16
 800214a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 fd13 	bl	8002b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002152:	200f      	movs	r0, #15
 8002154:	f000 f808 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002158:	f7ff fdea 	bl	8001d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000

08002168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_InitTick+0x54>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_InitTick+0x58>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fd2b 	bl	8002be2 <HAL_SYSTICK_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e00e      	b.n	80021b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d80a      	bhi.n	80021b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219c:	2200      	movs	r2, #0
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f000 fcf3 	bl	8002b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a8:	4a06      	ldr	r2, [pc, #24]	; (80021c4 <HAL_InitTick+0x5c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000020 	.word	0x20000020
 80021c0:	20000028 	.word	0x20000028
 80021c4:	20000024 	.word	0x20000024

080021c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_IncTick+0x1c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_IncTick+0x20>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a03      	ldr	r2, [pc, #12]	; (80021e8 <HAL_IncTick+0x20>)
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	20000028 	.word	0x20000028
 80021e8:	20000444 	.word	0x20000444

080021ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b02      	ldr	r3, [pc, #8]	; (80021fc <HAL_GetTick+0x10>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	20000444 	.word	0x20000444

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff fff0 	bl	80021ec <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d005      	beq.n	8002226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_Delay+0x44>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002226:	bf00      	nop
 8002228:	f7ff ffe0 	bl	80021ec <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	429a      	cmp	r2, r3
 8002236:	d8f7      	bhi.n	8002228 <HAL_Delay+0x28>
  {
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000028 	.word	0x20000028

08002248 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e0be      	b.n	80023e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fd84 	bl	8001d94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 faff 	bl	8002890 <ADC_ConversionStop_Disable>
 8002292:	4603      	mov	r3, r0
 8002294:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 8099 	bne.w	80023d6 <HAL_ADC_Init+0x18e>
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 8095 	bne.w	80023d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022b4:	f023 0302 	bic.w	r3, r3, #2
 80022b8:	f043 0202 	orr.w	r2, r3, #2
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7b1b      	ldrb	r3, [r3, #12]
 80022ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e0:	d003      	beq.n	80022ea <HAL_ADC_Init+0xa2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d102      	bne.n	80022f0 <HAL_ADC_Init+0xa8>
 80022ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ee:	e000      	b.n	80022f2 <HAL_ADC_Init+0xaa>
 80022f0:	2300      	movs	r3, #0
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7d1b      	ldrb	r3, [r3, #20]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d119      	bne.n	8002334 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7b1b      	ldrb	r3, [r3, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	3b01      	subs	r3, #1
 800230e:	035a      	lsls	r2, r3, #13
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e00b      	b.n	8002334 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	f043 0220 	orr.w	r2, r3, #32
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	f043 0201 	orr.w	r2, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	430a      	orrs	r2, r1
 8002346:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_ADC_Init+0x1a8>)
 8002350:	4013      	ands	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	430b      	orrs	r3, r1
 800235a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002364:	d003      	beq.n	800236e <HAL_ADC_Init+0x126>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d104      	bne.n	8002378 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	3b01      	subs	r3, #1
 8002374:	051b      	lsls	r3, r3, #20
 8002376:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	430a      	orrs	r2, r1
 800238a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_ADC_Init+0x1ac>)
 8002394:	4013      	ands	r3, r2
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	429a      	cmp	r2, r3
 800239a:	d10b      	bne.n	80023b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	f023 0303 	bic.w	r3, r3, #3
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023b2:	e018      	b.n	80023e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	f023 0312 	bic.w	r3, r3, #18
 80023bc:	f043 0210 	orr.w	r2, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023d4:	e007      	b.n	80023e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	f043 0210 	orr.w	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	ffe1f7fd 	.word	0xffe1f7fd
 80023f4:	ff1f0efe 	.word	0xff1f0efe

080023f8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a64      	ldr	r2, [pc, #400]	; (80025a0 <HAL_ADC_Start_DMA+0x1a8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <HAL_ADC_Start_DMA+0x24>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <HAL_ADC_Start_DMA+0x1ac>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d106      	bne.n	800242a <HAL_ADC_Start_DMA+0x32>
 800241c:	4b60      	ldr	r3, [pc, #384]	; (80025a0 <HAL_ADC_Start_DMA+0x1a8>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002424:	2b00      	cmp	r3, #0
 8002426:	f040 80b3 	bne.w	8002590 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_ADC_Start_DMA+0x40>
 8002434:	2302      	movs	r3, #2
 8002436:	e0ae      	b.n	8002596 <HAL_ADC_Start_DMA+0x19e>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f9cb 	bl	80027dc <ADC_Enable>
 8002446:	4603      	mov	r3, r0
 8002448:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 809a 	bne.w	8002586 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a4e      	ldr	r2, [pc, #312]	; (80025a4 <HAL_ADC_Start_DMA+0x1ac>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d105      	bne.n	800247c <HAL_ADC_Start_DMA+0x84>
 8002470:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <HAL_ADC_Start_DMA+0x1a8>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d115      	bne.n	80024a8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002492:	2b00      	cmp	r3, #0
 8002494:	d026      	beq.n	80024e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800249e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024a6:	e01d      	b.n	80024e4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a39      	ldr	r2, [pc, #228]	; (80025a0 <HAL_ADC_Start_DMA+0x1a8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_ADC_Start_DMA+0xd0>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <HAL_ADC_Start_DMA+0x1ac>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d10d      	bne.n	80024e4 <HAL_ADC_Start_DMA+0xec>
 80024c8:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_ADC_Start_DMA+0x1a8>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	f023 0206 	bic.w	r2, r3, #6
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80024fc:	e002      	b.n	8002504 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <HAL_ADC_Start_DMA+0x1b0>)
 8002512:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a24      	ldr	r2, [pc, #144]	; (80025ac <HAL_ADC_Start_DMA+0x1b4>)
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <HAL_ADC_Start_DMA+0x1b8>)
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0202 	mvn.w	r2, #2
 800252c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800253c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a18      	ldr	r0, [r3, #32]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	334c      	adds	r3, #76	; 0x4c
 8002548:	4619      	mov	r1, r3
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f000 fbaf 	bl	8002cb0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800255c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002560:	d108      	bne.n	8002574 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002570:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002572:	e00f      	b.n	8002594 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002582:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002584:	e006      	b.n	8002594 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800258e:	e001      	b.n	8002594 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002594:	7dfb      	ldrb	r3, [r7, #23]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40012400 	.word	0x40012400
 80025a4:	40012800 	.word	0x40012800
 80025a8:	08002913 	.word	0x08002913
 80025ac:	0800298f 	.word	0x0800298f
 80025b0:	080029ab 	.word	0x080029ab

080025b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x20>
 8002608:	2302      	movs	r3, #2
 800260a:	e0dc      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x1da>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b06      	cmp	r3, #6
 800261a:	d81c      	bhi.n	8002656 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	3b05      	subs	r3, #5
 800262e:	221f      	movs	r2, #31
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	4019      	ands	r1, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3b05      	subs	r3, #5
 8002648:	fa00 f203 	lsl.w	r2, r0, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	635a      	str	r2, [r3, #52]	; 0x34
 8002654:	e03c      	b.n	80026d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b0c      	cmp	r3, #12
 800265c:	d81c      	bhi.n	8002698 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	3b23      	subs	r3, #35	; 0x23
 8002670:	221f      	movs	r2, #31
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	4019      	ands	r1, r3
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b23      	subs	r3, #35	; 0x23
 800268a:	fa00 f203 	lsl.w	r2, r0, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
 8002696:	e01b      	b.n	80026d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	3b41      	subs	r3, #65	; 0x41
 80026aa:	221f      	movs	r2, #31
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	4019      	ands	r1, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	3b41      	subs	r3, #65	; 0x41
 80026c4:	fa00 f203 	lsl.w	r2, r0, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b09      	cmp	r3, #9
 80026d6:	d91c      	bls.n	8002712 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68d9      	ldr	r1, [r3, #12]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	3b1e      	subs	r3, #30
 80026ea:	2207      	movs	r2, #7
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	4019      	ands	r1, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6898      	ldr	r0, [r3, #8]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	3b1e      	subs	r3, #30
 8002704:	fa00 f203 	lsl.w	r2, r0, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	e019      	b.n	8002746 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6919      	ldr	r1, [r3, #16]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	2207      	movs	r2, #7
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	4019      	ands	r1, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6898      	ldr	r0, [r3, #8]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	fa00 f203 	lsl.w	r2, r0, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b10      	cmp	r3, #16
 800274c:	d003      	beq.n	8002756 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002752:	2b11      	cmp	r3, #17
 8002754:	d132      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d125      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d126      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800277c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b10      	cmp	r3, #16
 8002784:	d11a      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	0c9a      	lsrs	r2, r3, #18
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800279c:	e002      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f9      	bne.n	800279e <HAL_ADC_ConfigChannel+0x1b2>
 80027aa:	e007      	b.n	80027bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	f043 0220 	orr.w	r2, r3, #32
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	40012400 	.word	0x40012400
 80027d4:	20000020 	.word	0x20000020
 80027d8:	431bde83 	.word	0x431bde83

080027dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d040      	beq.n	800287c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800280a:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <ADC_Enable+0xac>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1f      	ldr	r2, [pc, #124]	; (800288c <ADC_Enable+0xb0>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	0c9b      	lsrs	r3, r3, #18
 8002816:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002818:	e002      	b.n	8002820 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3b01      	subs	r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f9      	bne.n	800281a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002826:	f7ff fce1 	bl	80021ec <HAL_GetTick>
 800282a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800282c:	e01f      	b.n	800286e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800282e:	f7ff fcdd 	bl	80021ec <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d918      	bls.n	800286e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b01      	cmp	r3, #1
 8002848:	d011      	beq.n	800286e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	f043 0210 	orr.w	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e007      	b.n	800287e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d1d8      	bne.n	800282e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000020 	.word	0x20000020
 800288c:	431bde83 	.word	0x431bde83

08002890 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d12e      	bne.n	8002908 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0201 	bic.w	r2, r2, #1
 80028b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ba:	f7ff fc97 	bl	80021ec <HAL_GetTick>
 80028be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028c0:	e01b      	b.n	80028fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028c2:	f7ff fc93 	bl	80021ec <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d914      	bls.n	80028fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10d      	bne.n	80028fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	f043 0210 	orr.w	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e007      	b.n	800290a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	d0dc      	beq.n	80028c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002928:	2b00      	cmp	r3, #0
 800292a:	d127      	bne.n	800297c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002942:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002946:	d115      	bne.n	8002974 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	f043 0201 	orr.w	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f7ff fe1d 	bl	80025b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800297a:	e004      	b.n	8002986 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
}
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b084      	sub	sp, #16
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff fe12 	bl	80025c6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	f043 0204 	orr.w	r2, r3, #4
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7ff fe01 	bl	80025d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a12:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	60d3      	str	r3, [r2, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db0b      	blt.n	8002a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	4906      	ldr	r1, [pc, #24]	; (8002a78 <__NVIC_EnableIRQ+0x34>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2001      	movs	r0, #1
 8002a66:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
         );
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b44:	d301      	bcc.n	8002b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00f      	b.n	8002b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <SysTick_Config+0x40>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b52:	210f      	movs	r1, #15
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	f7ff ff90 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <SysTick_Config+0x40>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b62:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <SysTick_Config+0x40>)
 8002b64:	2207      	movs	r2, #7
 8002b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	e000e010 	.word	0xe000e010

08002b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff2d 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba0:	f7ff ff42 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	6978      	ldr	r0, [r7, #20]
 8002bac:	f7ff ff90 	bl	8002ad0 <NVIC_EncodePriority>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff5f 	bl	8002a7c <__NVIC_SetPriority>
}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff35 	bl	8002a44 <__NVIC_EnableIRQ>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ffa2 	bl	8002b34 <SysTick_Config>
 8002bf0:	4603      	mov	r3, r0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e043      	b.n	8002c9a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <HAL_DMA_Init+0xa8>)
 8002c1a:	4413      	add	r3, r2
 8002c1c:	4a22      	ldr	r2, [pc, #136]	; (8002ca8 <HAL_DMA_Init+0xac>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	009a      	lsls	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a1f      	ldr	r2, [pc, #124]	; (8002cac <HAL_DMA_Init+0xb0>)
 8002c2e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	bffdfff8 	.word	0xbffdfff8
 8002ca8:	cccccccd 	.word	0xcccccccd
 8002cac:	40020000 	.word	0x40020000

08002cb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_DMA_Start_IT+0x20>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e04b      	b.n	8002d68 <HAL_DMA_Start_IT+0xb8>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d13a      	bne.n	8002d5a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f831 	bl	8002d70 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 020e 	orr.w	r2, r2, #14
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e00f      	b.n	8002d48 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0204 	bic.w	r2, r2, #4
 8002d36:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 020a 	orr.w	r2, r2, #10
 8002d46:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e005      	b.n	8002d66 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
 8002d64:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	2101      	movs	r1, #1
 8002d88:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d108      	bne.n	8002db0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dae:	e007      	b.n	8002dc0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	60da      	str	r2, [r3, #12]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b08b      	sub	sp, #44	; 0x2c
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dde:	e169      	b.n	80030b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002de0:	2201      	movs	r2, #1
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	f040 8158 	bne.w	80030ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a9a      	ldr	r2, [pc, #616]	; (800306c <HAL_GPIO_Init+0x2a0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d05e      	beq.n	8002ec6 <HAL_GPIO_Init+0xfa>
 8002e08:	4a98      	ldr	r2, [pc, #608]	; (800306c <HAL_GPIO_Init+0x2a0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d875      	bhi.n	8002efa <HAL_GPIO_Init+0x12e>
 8002e0e:	4a98      	ldr	r2, [pc, #608]	; (8003070 <HAL_GPIO_Init+0x2a4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d058      	beq.n	8002ec6 <HAL_GPIO_Init+0xfa>
 8002e14:	4a96      	ldr	r2, [pc, #600]	; (8003070 <HAL_GPIO_Init+0x2a4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d86f      	bhi.n	8002efa <HAL_GPIO_Init+0x12e>
 8002e1a:	4a96      	ldr	r2, [pc, #600]	; (8003074 <HAL_GPIO_Init+0x2a8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d052      	beq.n	8002ec6 <HAL_GPIO_Init+0xfa>
 8002e20:	4a94      	ldr	r2, [pc, #592]	; (8003074 <HAL_GPIO_Init+0x2a8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d869      	bhi.n	8002efa <HAL_GPIO_Init+0x12e>
 8002e26:	4a94      	ldr	r2, [pc, #592]	; (8003078 <HAL_GPIO_Init+0x2ac>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d04c      	beq.n	8002ec6 <HAL_GPIO_Init+0xfa>
 8002e2c:	4a92      	ldr	r2, [pc, #584]	; (8003078 <HAL_GPIO_Init+0x2ac>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d863      	bhi.n	8002efa <HAL_GPIO_Init+0x12e>
 8002e32:	4a92      	ldr	r2, [pc, #584]	; (800307c <HAL_GPIO_Init+0x2b0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d046      	beq.n	8002ec6 <HAL_GPIO_Init+0xfa>
 8002e38:	4a90      	ldr	r2, [pc, #576]	; (800307c <HAL_GPIO_Init+0x2b0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d85d      	bhi.n	8002efa <HAL_GPIO_Init+0x12e>
 8002e3e:	2b12      	cmp	r3, #18
 8002e40:	d82a      	bhi.n	8002e98 <HAL_GPIO_Init+0xcc>
 8002e42:	2b12      	cmp	r3, #18
 8002e44:	d859      	bhi.n	8002efa <HAL_GPIO_Init+0x12e>
 8002e46:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <HAL_GPIO_Init+0x80>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002ec7 	.word	0x08002ec7
 8002e50:	08002ea1 	.word	0x08002ea1
 8002e54:	08002eb3 	.word	0x08002eb3
 8002e58:	08002ef5 	.word	0x08002ef5
 8002e5c:	08002efb 	.word	0x08002efb
 8002e60:	08002efb 	.word	0x08002efb
 8002e64:	08002efb 	.word	0x08002efb
 8002e68:	08002efb 	.word	0x08002efb
 8002e6c:	08002efb 	.word	0x08002efb
 8002e70:	08002efb 	.word	0x08002efb
 8002e74:	08002efb 	.word	0x08002efb
 8002e78:	08002efb 	.word	0x08002efb
 8002e7c:	08002efb 	.word	0x08002efb
 8002e80:	08002efb 	.word	0x08002efb
 8002e84:	08002efb 	.word	0x08002efb
 8002e88:	08002efb 	.word	0x08002efb
 8002e8c:	08002efb 	.word	0x08002efb
 8002e90:	08002ea9 	.word	0x08002ea9
 8002e94:	08002ebd 	.word	0x08002ebd
 8002e98:	4a79      	ldr	r2, [pc, #484]	; (8003080 <HAL_GPIO_Init+0x2b4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d013      	beq.n	8002ec6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e9e:	e02c      	b.n	8002efa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	623b      	str	r3, [r7, #32]
          break;
 8002ea6:	e029      	b.n	8002efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	3304      	adds	r3, #4
 8002eae:	623b      	str	r3, [r7, #32]
          break;
 8002eb0:	e024      	b.n	8002efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	623b      	str	r3, [r7, #32]
          break;
 8002eba:	e01f      	b.n	8002efc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	330c      	adds	r3, #12
 8002ec2:	623b      	str	r3, [r7, #32]
          break;
 8002ec4:	e01a      	b.n	8002efc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ece:	2304      	movs	r3, #4
 8002ed0:	623b      	str	r3, [r7, #32]
          break;
 8002ed2:	e013      	b.n	8002efc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002edc:	2308      	movs	r3, #8
 8002ede:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	611a      	str	r2, [r3, #16]
          break;
 8002ee6:	e009      	b.n	8002efc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ee8:	2308      	movs	r3, #8
 8002eea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	615a      	str	r2, [r3, #20]
          break;
 8002ef2:	e003      	b.n	8002efc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	623b      	str	r3, [r7, #32]
          break;
 8002ef8:	e000      	b.n	8002efc <HAL_GPIO_Init+0x130>
          break;
 8002efa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2bff      	cmp	r3, #255	; 0xff
 8002f00:	d801      	bhi.n	8002f06 <HAL_GPIO_Init+0x13a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	e001      	b.n	8002f0a <HAL_GPIO_Init+0x13e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2bff      	cmp	r3, #255	; 0xff
 8002f10:	d802      	bhi.n	8002f18 <HAL_GPIO_Init+0x14c>
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	e002      	b.n	8002f1e <HAL_GPIO_Init+0x152>
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	3b08      	subs	r3, #8
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	210f      	movs	r1, #15
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	401a      	ands	r2, r3
 8002f30:	6a39      	ldr	r1, [r7, #32]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80b1 	beq.w	80030ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f4c:	4b4d      	ldr	r3, [pc, #308]	; (8003084 <HAL_GPIO_Init+0x2b8>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4a4c      	ldr	r2, [pc, #304]	; (8003084 <HAL_GPIO_Init+0x2b8>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6193      	str	r3, [r2, #24]
 8002f58:	4b4a      	ldr	r3, [pc, #296]	; (8003084 <HAL_GPIO_Init+0x2b8>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f64:	4a48      	ldr	r2, [pc, #288]	; (8003088 <HAL_GPIO_Init+0x2bc>)
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	3302      	adds	r3, #2
 8002f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4013      	ands	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a40      	ldr	r2, [pc, #256]	; (800308c <HAL_GPIO_Init+0x2c0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d013      	beq.n	8002fb8 <HAL_GPIO_Init+0x1ec>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3f      	ldr	r2, [pc, #252]	; (8003090 <HAL_GPIO_Init+0x2c4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00d      	beq.n	8002fb4 <HAL_GPIO_Init+0x1e8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3e      	ldr	r2, [pc, #248]	; (8003094 <HAL_GPIO_Init+0x2c8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d007      	beq.n	8002fb0 <HAL_GPIO_Init+0x1e4>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a3d      	ldr	r2, [pc, #244]	; (8003098 <HAL_GPIO_Init+0x2cc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d101      	bne.n	8002fac <HAL_GPIO_Init+0x1e0>
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e006      	b.n	8002fba <HAL_GPIO_Init+0x1ee>
 8002fac:	2304      	movs	r3, #4
 8002fae:	e004      	b.n	8002fba <HAL_GPIO_Init+0x1ee>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e002      	b.n	8002fba <HAL_GPIO_Init+0x1ee>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_GPIO_Init+0x1ee>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	f002 0203 	and.w	r2, r2, #3
 8002fc0:	0092      	lsls	r2, r2, #2
 8002fc2:	4093      	lsls	r3, r2
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fca:	492f      	ldr	r1, [pc, #188]	; (8003088 <HAL_GPIO_Init+0x2bc>)
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d006      	beq.n	8002ff2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fe4:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_GPIO_Init+0x2d0>)
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	492c      	ldr	r1, [pc, #176]	; (800309c <HAL_GPIO_Init+0x2d0>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	608b      	str	r3, [r1, #8]
 8002ff0:	e006      	b.n	8003000 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	; (800309c <HAL_GPIO_Init+0x2d0>)
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4928      	ldr	r1, [pc, #160]	; (800309c <HAL_GPIO_Init+0x2d0>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d006      	beq.n	800301a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800300c:	4b23      	ldr	r3, [pc, #140]	; (800309c <HAL_GPIO_Init+0x2d0>)
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	4922      	ldr	r1, [pc, #136]	; (800309c <HAL_GPIO_Init+0x2d0>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	60cb      	str	r3, [r1, #12]
 8003018:	e006      	b.n	8003028 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_GPIO_Init+0x2d0>)
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	43db      	mvns	r3, r3
 8003022:	491e      	ldr	r1, [pc, #120]	; (800309c <HAL_GPIO_Init+0x2d0>)
 8003024:	4013      	ands	r3, r2
 8003026:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d006      	beq.n	8003042 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_GPIO_Init+0x2d0>)
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4918      	ldr	r1, [pc, #96]	; (800309c <HAL_GPIO_Init+0x2d0>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
 8003040:	e006      	b.n	8003050 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003042:	4b16      	ldr	r3, [pc, #88]	; (800309c <HAL_GPIO_Init+0x2d0>)
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	43db      	mvns	r3, r3
 800304a:	4914      	ldr	r1, [pc, #80]	; (800309c <HAL_GPIO_Init+0x2d0>)
 800304c:	4013      	ands	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d021      	beq.n	80030a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <HAL_GPIO_Init+0x2d0>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	490e      	ldr	r1, [pc, #56]	; (800309c <HAL_GPIO_Init+0x2d0>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	e021      	b.n	80030ae <HAL_GPIO_Init+0x2e2>
 800306a:	bf00      	nop
 800306c:	10320000 	.word	0x10320000
 8003070:	10310000 	.word	0x10310000
 8003074:	10220000 	.word	0x10220000
 8003078:	10210000 	.word	0x10210000
 800307c:	10120000 	.word	0x10120000
 8003080:	10110000 	.word	0x10110000
 8003084:	40021000 	.word	0x40021000
 8003088:	40010000 	.word	0x40010000
 800308c:	40010800 	.word	0x40010800
 8003090:	40010c00 	.word	0x40010c00
 8003094:	40011000 	.word	0x40011000
 8003098:	40011400 	.word	0x40011400
 800309c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_GPIO_Init+0x304>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	4909      	ldr	r1, [pc, #36]	; (80030d0 <HAL_GPIO_Init+0x304>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	3301      	adds	r3, #1
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	fa22 f303 	lsr.w	r3, r2, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f47f ae8e 	bne.w	8002de0 <HAL_GPIO_Init+0x14>
  }
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	372c      	adds	r7, #44	; 0x2c
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	40010400 	.word	0x40010400

080030d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	887b      	ldrh	r3, [r7, #2]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	e001      	b.n	80030f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	807b      	strh	r3, [r7, #2]
 800310e:	4613      	mov	r3, r2
 8003110:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003112:	787b      	ldrb	r3, [r7, #1]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003118:	887a      	ldrh	r2, [r7, #2]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800311e:	e003      	b.n	8003128 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003120:	887b      	ldrh	r3, [r7, #2]
 8003122:	041a      	lsls	r2, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	611a      	str	r2, [r3, #16]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003144:	887a      	ldrh	r2, [r7, #2]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4013      	ands	r3, r2
 800314a:	041a      	lsls	r2, r3, #16
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43d9      	mvns	r1, r3
 8003150:	887b      	ldrh	r3, [r7, #2]
 8003152:	400b      	ands	r3, r1
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	611a      	str	r2, [r3, #16]
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d006      	beq.n	8003188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800317a:	4a05      	ldr	r2, [pc, #20]	; (8003190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd fe2c 	bl	8000de0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40010400 	.word	0x40010400

08003194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e12b      	b.n	80033fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe fe52 	bl	8001e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2224      	movs	r2, #36	; 0x24
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f8:	f002 fdae 	bl	8005d58 <HAL_RCC_GetPCLK1Freq>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4a81      	ldr	r2, [pc, #516]	; (8003408 <HAL_I2C_Init+0x274>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d807      	bhi.n	8003218 <HAL_I2C_Init+0x84>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a80      	ldr	r2, [pc, #512]	; (800340c <HAL_I2C_Init+0x278>)
 800320c:	4293      	cmp	r3, r2
 800320e:	bf94      	ite	ls
 8003210:	2301      	movls	r3, #1
 8003212:	2300      	movhi	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e006      	b.n	8003226 <HAL_I2C_Init+0x92>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a7d      	ldr	r2, [pc, #500]	; (8003410 <HAL_I2C_Init+0x27c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	bf94      	ite	ls
 8003220:	2301      	movls	r3, #1
 8003222:	2300      	movhi	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0e7      	b.n	80033fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4a78      	ldr	r2, [pc, #480]	; (8003414 <HAL_I2C_Init+0x280>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0c9b      	lsrs	r3, r3, #18
 8003238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a6a      	ldr	r2, [pc, #424]	; (8003408 <HAL_I2C_Init+0x274>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d802      	bhi.n	8003268 <HAL_I2C_Init+0xd4>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3301      	adds	r3, #1
 8003266:	e009      	b.n	800327c <HAL_I2C_Init+0xe8>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	4a69      	ldr	r2, [pc, #420]	; (8003418 <HAL_I2C_Init+0x284>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	3301      	adds	r3, #1
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	430b      	orrs	r3, r1
 8003282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800328e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	495c      	ldr	r1, [pc, #368]	; (8003408 <HAL_I2C_Init+0x274>)
 8003298:	428b      	cmp	r3, r1
 800329a:	d819      	bhi.n	80032d0 <HAL_I2C_Init+0x13c>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1e59      	subs	r1, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032aa:	1c59      	adds	r1, r3, #1
 80032ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032b0:	400b      	ands	r3, r1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_I2C_Init+0x138>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1e59      	subs	r1, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ca:	e051      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 80032cc:	2304      	movs	r3, #4
 80032ce:	e04f      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d111      	bne.n	80032fc <HAL_I2C_Init+0x168>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e58      	subs	r0, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	440b      	add	r3, r1
 80032e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ea:	3301      	adds	r3, #1
 80032ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e012      	b.n	8003322 <HAL_I2C_Init+0x18e>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1e58      	subs	r0, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	0099      	lsls	r1, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Init+0x196>
 8003326:	2301      	movs	r3, #1
 8003328:	e022      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10e      	bne.n	8003350 <HAL_I2C_Init+0x1bc>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1e58      	subs	r0, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	440b      	add	r3, r1
 8003340:	fbb0 f3f3 	udiv	r3, r0, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334e:	e00f      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e58      	subs	r0, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	0099      	lsls	r1, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	fbb0 f3f3 	udiv	r3, r0, r3
 8003366:	3301      	adds	r3, #1
 8003368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	6809      	ldr	r1, [r1, #0]
 8003374:	4313      	orrs	r3, r2
 8003376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800339e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6911      	ldr	r1, [r2, #16]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68d2      	ldr	r2, [r2, #12]
 80033aa:	4311      	orrs	r1, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	000186a0 	.word	0x000186a0
 800340c:	001e847f 	.word	0x001e847f
 8003410:	003d08ff 	.word	0x003d08ff
 8003414:	431bde83 	.word	0x431bde83
 8003418:	10624dd3 	.word	0x10624dd3

0800341c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	461a      	mov	r2, r3
 8003428:	460b      	mov	r3, r1
 800342a:	817b      	strh	r3, [r7, #10]
 800342c:	4613      	mov	r3, r2
 800342e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003430:	f7fe fedc 	bl	80021ec <HAL_GetTick>
 8003434:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	f040 80e0 	bne.w	8003604 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	4970      	ldr	r1, [pc, #448]	; (8003610 <HAL_I2C_Master_Transmit+0x1f4>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f972 	bl	8003738 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	e0d3      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_I2C_Master_Transmit+0x50>
 8003468:	2302      	movs	r3, #2
 800346a:	e0cc      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d007      	beq.n	8003492 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2221      	movs	r2, #33	; 0x21
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2210      	movs	r2, #16
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	893a      	ldrh	r2, [r7, #8]
 80034c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a50      	ldr	r2, [pc, #320]	; (8003614 <HAL_I2C_Master_Transmit+0x1f8>)
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f8aa 	bl	8003634 <I2C_MasterRequestWrite>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e08d      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003500:	e066      	b.n	80035d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	6a39      	ldr	r1, [r7, #32]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fa30 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2b04      	cmp	r3, #4
 8003518:	d107      	bne.n	800352a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06b      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	781a      	ldrb	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d11b      	bne.n	80035a4 <HAL_I2C_Master_Transmit+0x188>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d017      	beq.n	80035a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	6a39      	ldr	r1, [r7, #32]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 fa27 	bl	80039fc <I2C_WaitOnBTFFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00d      	beq.n	80035d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d107      	bne.n	80035cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e01a      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d194      	bne.n	8003502 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	00100002 	.word	0x00100002
 8003614:	ffff0000 	.word	0xffff0000

08003618 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
	...

08003634 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	460b      	mov	r3, r1
 8003642:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d006      	beq.n	800365e <I2C_MasterRequestWrite+0x2a>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d003      	beq.n	800365e <I2C_MasterRequestWrite+0x2a>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800365c:	d108      	bne.n	8003670 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e00b      	b.n	8003688 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	2b12      	cmp	r3, #18
 8003676:	d107      	bne.n	8003688 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003686:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f84f 	bl	8003738 <I2C_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00d      	beq.n	80036bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ae:	d103      	bne.n	80036b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e035      	b.n	8003728 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c4:	d108      	bne.n	80036d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036c6:	897b      	ldrh	r3, [r7, #10]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036d4:	611a      	str	r2, [r3, #16]
 80036d6:	e01b      	b.n	8003710 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036d8:	897b      	ldrh	r3, [r7, #10]
 80036da:	11db      	asrs	r3, r3, #7
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 0306 	and.w	r3, r3, #6
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f063 030f 	orn	r3, r3, #15
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	490e      	ldr	r1, [pc, #56]	; (8003730 <I2C_MasterRequestWrite+0xfc>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f898 	bl	800382c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e010      	b.n	8003728 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003706:	897b      	ldrh	r3, [r7, #10]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4907      	ldr	r1, [pc, #28]	; (8003734 <I2C_MasterRequestWrite+0x100>)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f888 	bl	800382c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	00010008 	.word	0x00010008
 8003734:	00010002 	.word	0x00010002

08003738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003748:	e048      	b.n	80037dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d044      	beq.n	80037dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7fe fd4b 	bl	80021ec <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d139      	bne.n	80037dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	0c1b      	lsrs	r3, r3, #16
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10d      	bne.n	800378e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	43da      	mvns	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4013      	ands	r3, r2
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	e00c      	b.n	80037a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	43da      	mvns	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4013      	ands	r3, r2
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d116      	bne.n	80037dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e023      	b.n	8003824 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	0c1b      	lsrs	r3, r3, #16
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d10d      	bne.n	8003802 <I2C_WaitOnFlagUntilTimeout+0xca>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	43da      	mvns	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4013      	ands	r3, r2
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	e00c      	b.n	800381c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	43da      	mvns	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	429a      	cmp	r2, r3
 8003820:	d093      	beq.n	800374a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800383a:	e071      	b.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384a:	d123      	bne.n	8003894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003864:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 0204 	orr.w	r2, r3, #4
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e067      	b.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d041      	beq.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7fe fca6 	bl	80021ec <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d136      	bne.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d10c      	bne.n	80038d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	43da      	mvns	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf14      	ite	ne
 80038ce:	2301      	movne	r3, #1
 80038d0:	2300      	moveq	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	e00b      	b.n	80038ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	43da      	mvns	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e021      	b.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d10c      	bne.n	8003944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	43da      	mvns	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4013      	ands	r3, r2
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e00b      	b.n	800395c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	43da      	mvns	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	f47f af6d 	bne.w	800383c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003978:	e034      	b.n	80039e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f886 	bl	8003a8c <I2C_IsAcknowledgeFailed>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e034      	b.n	80039f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d028      	beq.n	80039e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fe fc2b 	bl	80021ec <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d11d      	bne.n	80039e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d016      	beq.n	80039e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e007      	b.n	80039f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	2b80      	cmp	r3, #128	; 0x80
 80039f0:	d1c3      	bne.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a08:	e034      	b.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f83e 	bl	8003a8c <I2C_IsAcknowledgeFailed>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e034      	b.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d028      	beq.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7fe fbe3 	bl	80021ec <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d11d      	bne.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d016      	beq.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f043 0220 	orr.w	r2, r3, #32
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e007      	b.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d1c3      	bne.n	8003a0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa2:	d11b      	bne.n	8003adc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f043 0204 	orr.w	r2, r3, #4
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aea:	b08b      	sub	sp, #44	; 0x2c
 8003aec:	af06      	add	r7, sp, #24
 8003aee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0f1      	b.n	8003cde <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f007 f996 	bl	800ae40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2203      	movs	r2, #3
 8003b18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 f89f 	bl	8006c64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	687e      	ldr	r6, [r7, #4]
 8003b2e:	466d      	mov	r5, sp
 8003b30:	f106 0410 	add.w	r4, r6, #16
 8003b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	602b      	str	r3, [r5, #0]
 8003b3c:	1d33      	adds	r3, r6, #4
 8003b3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b40:	6838      	ldr	r0, [r7, #0]
 8003b42:	f003 f869 	bl	8006c18 <USB_CoreInit>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0c2      	b.n	8003cde <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f003 f89a 	bl	8006c98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	e040      	b.n	8003bec <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	440b      	add	r3, r1
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3303      	adds	r3, #3
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	440b      	add	r3, r1
 8003bb8:	3338      	adds	r3, #56	; 0x38
 8003bba:	2200      	movs	r2, #0
 8003bbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bbe:	7bfa      	ldrb	r2, [r7, #15]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	440b      	add	r3, r1
 8003bcc:	333c      	adds	r3, #60	; 0x3c
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bd2:	7bfa      	ldrb	r2, [r7, #15]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	440b      	add	r3, r1
 8003be0:	3340      	adds	r3, #64	; 0x40
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	3301      	adds	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d3b9      	bcc.n	8003b6a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	73fb      	strb	r3, [r7, #15]
 8003bfa:	e044      	b.n	8003c86 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	440b      	add	r3, r1
 8003c0a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	440b      	add	r3, r1
 8003c20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c24:	7bfa      	ldrb	r2, [r7, #15]
 8003c26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	440b      	add	r3, r1
 8003c36:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	440b      	add	r3, r1
 8003c4c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	440b      	add	r3, r1
 8003c62:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c6a:	7bfa      	ldrb	r2, [r7, #15]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	440b      	add	r3, r1
 8003c78:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	3301      	adds	r3, #1
 8003c84:	73fb      	strb	r3, [r7, #15]
 8003c86:	7bfa      	ldrb	r2, [r7, #15]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d3b5      	bcc.n	8003bfc <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	687e      	ldr	r6, [r7, #4]
 8003c98:	466d      	mov	r5, sp
 8003c9a:	f106 0410 	add.w	r4, r6, #16
 8003c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	602b      	str	r3, [r5, #0]
 8003ca6:	1d33      	adds	r3, r6, #4
 8003ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003caa:	6838      	ldr	r0, [r7, #0]
 8003cac:	f003 f800 	bl	8006cb0 <USB_DevInit>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e00d      	b.n	8003cde <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f005 fa81 	bl	80091de <USB_DevDisconnect>

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ce6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_PCD_Start+0x16>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e016      	b.n	8003d2a <HAL_PCD_Start+0x44>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f002 ff95 	bl	8006c38 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003d0e:	2101      	movs	r1, #1
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f007 fb08 	bl	800b326 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f005 fa55 	bl	80091ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b088      	sub	sp, #32
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f005 fa57 	bl	80091f2 <USB_ReadInterrupts>
 8003d44:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fb1b 	bl	800438c <PCD_EP_ISR_Handler>

    return;
 8003d56:	e119      	b.n	8003f8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d013      	beq.n	8003d8a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d74:	b292      	uxth	r2, r2
 8003d76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f007 f8db 	bl	800af36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003d80:	2100      	movs	r1, #0
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f905 	bl	8003f92 <HAL_PCD_SetAddress>

    return;
 8003d88:	e100      	b.n	8003f8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00c      	beq.n	8003dae <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003da6:	b292      	uxth	r2, r2
 8003da8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003dac:	e0ee      	b.n	8003f8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00c      	beq.n	8003dd2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dca:	b292      	uxth	r2, r2
 8003dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003dd0:	e0dc      	b.n	8003f8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d027      	beq.n	8003e2c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0204 	bic.w	r2, r2, #4
 8003dee:	b292      	uxth	r2, r2
 8003df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0208 	bic.w	r2, r2, #8
 8003e06:	b292      	uxth	r2, r2
 8003e08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f007 f8cb 	bl	800afa8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e24:	b292      	uxth	r2, r2
 8003e26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003e2a:	e0af      	b.n	8003f8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 8083 	beq.w	8003f3e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	77fb      	strb	r3, [r7, #31]
 8003e3c:	e010      	b.n	8003e60 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	7ffb      	ldrb	r3, [r7, #31]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	441a      	add	r2, r3
 8003e4a:	7ffb      	ldrb	r3, [r7, #31]
 8003e4c:	8812      	ldrh	r2, [r2, #0]
 8003e4e:	b292      	uxth	r2, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	3320      	adds	r3, #32
 8003e54:	443b      	add	r3, r7
 8003e56:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003e5a:	7ffb      	ldrb	r3, [r7, #31]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	7ffb      	ldrb	r3, [r7, #31]
 8003e62:	2b07      	cmp	r3, #7
 8003e64:	d9eb      	bls.n	8003e3e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	b292      	uxth	r2, r2
 8003e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	b292      	uxth	r2, r2
 8003e92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003e96:	bf00      	nop
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f6      	beq.n	8003e98 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ebc:	b292      	uxth	r2, r2
 8003ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e00f      	b.n	8003ee8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003ec8:	7ffb      	ldrb	r3, [r7, #31]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	4611      	mov	r1, r2
 8003ed0:	7ffa      	ldrb	r2, [r7, #31]
 8003ed2:	0092      	lsls	r2, r2, #2
 8003ed4:	440a      	add	r2, r1
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	3320      	adds	r3, #32
 8003eda:	443b      	add	r3, r7
 8003edc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003ee0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003ee2:	7ffb      	ldrb	r3, [r7, #31]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	7ffb      	ldrb	r3, [r7, #31]
 8003eea:	2b07      	cmp	r3, #7
 8003eec:	d9ec      	bls.n	8003ec8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0208 	orr.w	r2, r2, #8
 8003f00:	b292      	uxth	r2, r2
 8003f02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f18:	b292      	uxth	r2, r2
 8003f1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0204 	orr.w	r2, r2, #4
 8003f30:	b292      	uxth	r2, r2
 8003f32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f007 f81c 	bl	800af74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003f3c:	e026      	b.n	8003f8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00f      	beq.n	8003f68 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f5a:	b292      	uxth	r2, r2
 8003f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f006 ffda 	bl	800af1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003f66:	e011      	b.n	8003f8c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00c      	beq.n	8003f8c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f84:	b292      	uxth	r2, r2
 8003f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f8a:	bf00      	nop
  }
}
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_PCD_SetAddress+0x1a>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e013      	b.n	8003fd4 <HAL_PCD_SetAddress+0x42>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f005 f8ed 	bl	80091a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	4608      	mov	r0, r1
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4603      	mov	r3, r0
 8003fec:	70fb      	strb	r3, [r7, #3]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	803b      	strh	r3, [r7, #0]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	da0e      	bge.n	8004020 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	705a      	strb	r2, [r3, #1]
 800401e:	e00e      	b.n	800403e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	f003 0207 	and.w	r2, r3, #7
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	b2da      	uxtb	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800404a:	883a      	ldrh	r2, [r7, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	78ba      	ldrb	r2, [r7, #2]
 8004054:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004056:	78bb      	ldrb	r3, [r7, #2]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d102      	bne.n	8004062 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_PCD_EP_Open+0x94>
 800406c:	2302      	movs	r3, #2
 800406e:	e00e      	b.n	800408e <HAL_PCD_EP_Open+0xb2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68f9      	ldr	r1, [r7, #12]
 800407e:	4618      	mov	r0, r3
 8004080:	f002 fe36 	bl	8006cf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800408c:	7afb      	ldrb	r3, [r7, #11]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	460b      	mov	r3, r1
 80040a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	da0e      	bge.n	80040c8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4413      	add	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	705a      	strb	r2, [r3, #1]
 80040c6:	e00e      	b.n	80040e6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	f003 0207 	and.w	r2, r3, #7
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_PCD_EP_Close+0x6a>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e00e      	b.n	800411e <HAL_PCD_EP_Close+0x88>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68f9      	ldr	r1, [r7, #12]
 800410e:	4618      	mov	r0, r3
 8004110:	f003 f9ae 	bl	8007470 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	460b      	mov	r3, r1
 8004134:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004136:	7afb      	ldrb	r3, [r7, #11]
 8004138:	f003 0207 	and.w	r2, r3, #7
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2200      	movs	r2, #0
 800415e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2200      	movs	r2, #0
 8004164:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004166:	7afb      	ldrb	r3, [r7, #11]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	b2da      	uxtb	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6979      	ldr	r1, [r7, #20]
 8004178:	4618      	mov	r0, r3
 800417a:	f003 fb65 	bl	8007848 <USB_EPStartXfer>

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	f003 0207 	and.w	r2, r3, #7
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	440b      	add	r3, r1
 80041a6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80041aa:	681b      	ldr	r3, [r3, #0]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr

080041b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	460b      	mov	r3, r1
 80041c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c6:	7afb      	ldrb	r3, [r7, #11]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4413      	add	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2200      	movs	r2, #0
 80041fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2201      	movs	r2, #1
 8004200:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004202:	7afb      	ldrb	r3, [r7, #11]
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	b2da      	uxtb	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6979      	ldr	r1, [r7, #20]
 8004214:	4618      	mov	r0, r3
 8004216:	f003 fb17 	bl	8007848 <USB_EPStartXfer>

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	f003 0207 	and.w	r2, r3, #7
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d901      	bls.n	8004242 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e04c      	b.n	80042dc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004246:	2b00      	cmp	r3, #0
 8004248:	da0e      	bge.n	8004268 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	705a      	strb	r2, [r3, #1]
 8004266:	e00c      	b.n	8004282 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	b2da      	uxtb	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_PCD_EP_SetStall+0x7e>
 800429e:	2302      	movs	r3, #2
 80042a0:	e01c      	b.n	80042dc <HAL_PCD_EP_SetStall+0xb8>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f004 fe7a 	bl	8008faa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d108      	bne.n	80042d2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80042ca:	4619      	mov	r1, r3
 80042cc:	4610      	mov	r0, r2
 80042ce:	f004 ff9f 	bl	8009210 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	f003 020f 	and.w	r2, r3, #15
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d901      	bls.n	8004302 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e040      	b.n	8004384 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004306:	2b00      	cmp	r3, #0
 8004308:	da0e      	bge.n	8004328 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	705a      	strb	r2, [r3, #1]
 8004326:	e00e      	b.n	8004346 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	f003 0207 	and.w	r2, r3, #7
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	b2da      	uxtb	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_PCD_EP_ClrStall+0x82>
 8004362:	2302      	movs	r3, #2
 8004364:	e00e      	b.n	8004384 <HAL_PCD_EP_ClrStall+0xa0>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68f9      	ldr	r1, [r7, #12]
 8004374:	4618      	mov	r0, r3
 8004376:	f004 fe68 	bl	800904a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b096      	sub	sp, #88	; 0x58
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004394:	e3bf      	b.n	8004b16 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800439e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80043a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80043b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f040 8179 	bne.w	80046ac <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80043ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d152      	bne.n	800446c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	81fb      	strh	r3, [r7, #14]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	89fb      	ldrh	r3, [r7, #14]
 80043de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3328      	adds	r3, #40	; 0x28
 80043ee:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4413      	add	r3, r2
 8004404:	3302      	adds	r3, #2
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800441c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	441a      	add	r2, r3
 8004426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004428:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800442a:	2100      	movs	r1, #0
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f006 fd5a 	bl	800aee6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 836b 	beq.w	8004b16 <PCD_EP_ISR_Handler+0x78a>
 8004440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f040 8366 	bne.w	8004b16 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004456:	b2da      	uxtb	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	b292      	uxth	r2, r2
 800445e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800446a:	e354      	b.n	8004b16 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004472:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800447e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004486:	2b00      	cmp	r3, #0
 8004488:	d034      	beq.n	80044f4 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004492:	b29b      	uxth	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	3306      	adds	r3, #6
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6812      	ldr	r2, [r2, #0]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80044c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80044c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f004 fef1 	bl	80092b0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044da:	4013      	ands	r3, r2
 80044dc:	823b      	strh	r3, [r7, #16]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	8a3a      	ldrh	r2, [r7, #16]
 80044e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044e8:	b292      	uxth	r2, r2
 80044ea:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f006 fccd 	bl	800ae8c <HAL_PCD_SetupStageCallback>
 80044f2:	e310      	b.n	8004b16 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044f4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f280 830c 	bge.w	8004b16 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29a      	uxth	r2, r3
 8004506:	f640 738f 	movw	r3, #3983	; 0xf8f
 800450a:	4013      	ands	r3, r2
 800450c:	83fb      	strh	r3, [r7, #30]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	8bfa      	ldrh	r2, [r7, #30]
 8004514:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004518:	b292      	uxth	r2, r2
 800451a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004524:	b29b      	uxth	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4413      	add	r3, r2
 8004530:	3306      	adds	r3, #6
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004546:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d019      	beq.n	8004584 <PCD_EP_ISR_Handler+0x1f8>
 8004550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d015      	beq.n	8004584 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455e:	6959      	ldr	r1, [r3, #20]
 8004560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004562:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004566:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004568:	b29b      	uxth	r3, r3
 800456a:	f004 fea1 	bl	80092b0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800456e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	441a      	add	r2, r3
 8004578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800457c:	2100      	movs	r1, #0
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f006 fc96 	bl	800aeb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800458e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004596:	2b00      	cmp	r3, #0
 8004598:	f040 82bd 	bne.w	8004b16 <PCD_EP_ISR_Handler+0x78a>
 800459c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80045a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80045a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045a8:	f000 82b5 	beq.w	8004b16 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	4413      	add	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	801a      	strh	r2, [r3, #0]
 80045dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	2b3e      	cmp	r3, #62	; 0x3e
 80045e2:	d91d      	bls.n	8004620 <PCD_EP_ISR_Handler+0x294>
 80045e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	647b      	str	r3, [r7, #68]	; 0x44
 80045ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <PCD_EP_ISR_Handler+0x272>
 80045f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fa:	3b01      	subs	r3, #1
 80045fc:	647b      	str	r3, [r7, #68]	; 0x44
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29a      	uxth	r2, r3
 8004604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004606:	b29b      	uxth	r3, r3
 8004608:	029b      	lsls	r3, r3, #10
 800460a:	b29b      	uxth	r3, r3
 800460c:	4313      	orrs	r3, r2
 800460e:	b29b      	uxth	r3, r3
 8004610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004618:	b29a      	uxth	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	801a      	strh	r2, [r3, #0]
 800461e:	e026      	b.n	800466e <PCD_EP_ISR_Handler+0x2e2>
 8004620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <PCD_EP_ISR_Handler+0x2b2>
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29b      	uxth	r3, r3
 800462e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004636:	b29a      	uxth	r2, r3
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	801a      	strh	r2, [r3, #0]
 800463c:	e017      	b.n	800466e <PCD_EP_ISR_Handler+0x2e2>
 800463e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	647b      	str	r3, [r7, #68]	; 0x44
 8004646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <PCD_EP_ISR_Handler+0x2cc>
 8004652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004654:	3301      	adds	r3, #1
 8004656:	647b      	str	r3, [r7, #68]	; 0x44
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	b29a      	uxth	r2, r3
 800465e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004660:	b29b      	uxth	r3, r3
 8004662:	029b      	lsls	r3, r3, #10
 8004664:	b29b      	uxth	r3, r3
 8004666:	4313      	orrs	r3, r2
 8004668:	b29a      	uxth	r2, r3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	b29b      	uxth	r3, r3
 8004676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800467a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467e:	827b      	strh	r3, [r7, #18]
 8004680:	8a7b      	ldrh	r3, [r7, #18]
 8004682:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004686:	827b      	strh	r3, [r7, #18]
 8004688:	8a7b      	ldrh	r3, [r7, #18]
 800468a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800468e:	827b      	strh	r3, [r7, #18]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	8a7b      	ldrh	r3, [r7, #18]
 8004696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	8013      	strh	r3, [r2, #0]
 80046aa:	e234      	b.n	8004b16 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046c0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f280 80fc 	bge.w	80048c2 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29a      	uxth	r2, r3
 80046dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80046e0:	4013      	ands	r3, r2
 80046e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80046f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046fc:	b292      	uxth	r2, r2
 80046fe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004700:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004718:	7b1b      	ldrb	r3, [r3, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d125      	bne.n	800476a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004726:	b29b      	uxth	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4413      	add	r3, r2
 8004732:	3306      	adds	r3, #6
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004746:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800474a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8092 	beq.w	8004878 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800475a:	6959      	ldr	r1, [r3, #20]
 800475c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800475e:	88da      	ldrh	r2, [r3, #6]
 8004760:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004764:	f004 fda4 	bl	80092b0 <USB_ReadPMA>
 8004768:	e086      	b.n	8004878 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800476a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800476c:	78db      	ldrb	r3, [r3, #3]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d10a      	bne.n	8004788 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004772:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004776:	461a      	mov	r2, r3
 8004778:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f9d9 	bl	8004b32 <HAL_PCD_EP_DB_Receive>
 8004780:	4603      	mov	r3, r0
 8004782:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004786:	e077      	b.n	8004878 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b29b      	uxth	r3, r3
 800479a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	441a      	add	r2, r3
 80047b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80047b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d024      	beq.n	8004830 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4413      	add	r3, r2
 80047fa:	3302      	adds	r3, #2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800480e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004812:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004816:	2b00      	cmp	r3, #0
 8004818:	d02e      	beq.n	8004878 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004820:	6959      	ldr	r1, [r3, #20]
 8004822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004824:	891a      	ldrh	r2, [r3, #8]
 8004826:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800482a:	f004 fd41 	bl	80092b0 <USB_ReadPMA>
 800482e:	e023      	b.n	8004878 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004838:	b29b      	uxth	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	3306      	adds	r3, #6
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6812      	ldr	r2, [r2, #0]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004858:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800485c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004860:	2b00      	cmp	r3, #0
 8004862:	d009      	beq.n	8004878 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800486a:	6959      	ldr	r1, [r3, #20]
 800486c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800486e:	895a      	ldrh	r2, [r3, #10]
 8004870:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004874:	f004 fd1c 	bl	80092b0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004880:	441a      	add	r2, r3
 8004882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004884:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004888:	695a      	ldr	r2, [r3, #20]
 800488a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800488e:	441a      	add	r2, r3
 8004890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004892:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <PCD_EP_ISR_Handler+0x51c>
 800489c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80048a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d206      	bcs.n	80048b6 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80048a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f006 fafe 	bl	800aeb0 <HAL_PCD_DataOutStageCallback>
 80048b4:	e005      	b.n	80048c2 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048bc:	4618      	mov	r0, r3
 80048be:	f002 ffc3 	bl	8007848 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80048c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8123 	beq.w	8004b16 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80048d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4413      	add	r3, r2
 80048e2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	441a      	add	r2, r3
 8004910:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800491c:	b29b      	uxth	r3, r3
 800491e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004922:	78db      	ldrb	r3, [r3, #3]
 8004924:	2b01      	cmp	r3, #1
 8004926:	f040 80a2 	bne.w	8004a6e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800492a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800492c:	2200      	movs	r2, #0
 800492e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004932:	7b1b      	ldrb	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8093 	beq.w	8004a60 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800493a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d046      	beq.n	80049d4 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004948:	785b      	ldrb	r3, [r3, #1]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d126      	bne.n	800499c <PCD_EP_ISR_Handler+0x610>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800495c:	b29b      	uxth	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	4413      	add	r3, r2
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
 8004966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	011a      	lsls	r2, r3, #4
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	4413      	add	r3, r2
 8004970:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004974:	623b      	str	r3, [r7, #32]
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004980:	b29a      	uxth	r2, r3
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	801a      	strh	r2, [r3, #0]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004994:	b29a      	uxth	r2, r3
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	801a      	strh	r2, [r3, #0]
 800499a:	e061      	b.n	8004a60 <PCD_EP_ISR_Handler+0x6d4>
 800499c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800499e:	785b      	ldrb	r3, [r3, #1]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d15d      	bne.n	8004a60 <PCD_EP_ISR_Handler+0x6d4>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	4413      	add	r3, r2
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	011a      	lsls	r2, r3, #4
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	4413      	add	r3, r2
 80049c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	2200      	movs	r2, #0
 80049d0:	801a      	strh	r2, [r3, #0]
 80049d2:	e045      	b.n	8004a60 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049dc:	785b      	ldrb	r3, [r3, #1]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d126      	bne.n	8004a30 <PCD_EP_ISR_Handler+0x6a4>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f6:	4413      	add	r3, r2
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34
 80049fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	011a      	lsls	r2, r3, #4
 8004a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a02:	4413      	add	r3, r2
 8004a04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a08:	633b      	str	r3, [r7, #48]	; 0x30
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	801a      	strh	r2, [r3, #0]
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	e017      	b.n	8004a60 <PCD_EP_ISR_Handler+0x6d4>
 8004a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d113      	bne.n	8004a60 <PCD_EP_ISR_Handler+0x6d4>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a46:	4413      	add	r3, r2
 8004a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	011a      	lsls	r2, r3, #4
 8004a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a52:	4413      	add	r3, r2
 8004a54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	4619      	mov	r1, r3
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f006 fa3d 	bl	800aee6 <HAL_PCD_DataInStageCallback>
 8004a6c:	e053      	b.n	8004b16 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004a6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d146      	bne.n	8004b08 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3302      	adds	r3, #2
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aa2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d907      	bls.n	8004ac2 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8004ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004aba:	1ad2      	subs	r2, r2, r3
 8004abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004abe:	619a      	str	r2, [r3, #24]
 8004ac0:	e002      	b.n	8004ac8 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8004ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d106      	bne.n	8004ade <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f006 fa05 	bl	800aee6 <HAL_PCD_DataInStageCallback>
 8004adc:	e01b      	b.n	8004b16 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ae6:	441a      	add	r2, r3
 8004ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004af4:	441a      	add	r2, r3
 8004af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b00:	4618      	mov	r0, r3
 8004b02:	f002 fea1 	bl	8007848 <USB_EPStartXfer>
 8004b06:	e006      	b.n	8004b16 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004b08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f91b 	bl	8004d4c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	b21b      	sxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f6ff ac37 	blt.w	8004396 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3758      	adds	r7, #88	; 0x58
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b088      	sub	sp, #32
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d07e      	beq.n	8004c48 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3302      	adds	r3, #2
 8004b60:	005b      	lsls	r3, r3, #1
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	8b7b      	ldrh	r3, [r7, #26]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d306      	bcc.n	8004b8c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	8b7b      	ldrh	r3, [r7, #26]
 8004b84:	1ad2      	subs	r2, r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	619a      	str	r2, [r3, #24]
 8004b8a:	e002      	b.n	8004b92 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d123      	bne.n	8004be2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb4:	833b      	strh	r3, [r7, #24]
 8004bb6:	8b3b      	ldrh	r3, [r7, #24]
 8004bb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bbc:	833b      	strh	r3, [r7, #24]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	8b3b      	ldrh	r3, [r7, #24]
 8004bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01f      	beq.n	8004c2c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	82fb      	strh	r3, [r7, #22]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	441a      	add	r2, r3
 8004c16:	8afb      	ldrh	r3, [r7, #22]
 8004c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004c2c:	8b7b      	ldrh	r3, [r7, #26]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8087 	beq.w	8004d42 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	6959      	ldr	r1, [r3, #20]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	891a      	ldrh	r2, [r3, #8]
 8004c40:	8b7b      	ldrh	r3, [r7, #26]
 8004c42:	f004 fb35 	bl	80092b0 <USB_ReadPMA>
 8004c46:	e07c      	b.n	8004d42 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3306      	adds	r3, #6
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c70:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	8b7b      	ldrh	r3, [r7, #26]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d306      	bcc.n	8004c8a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	699a      	ldr	r2, [r3, #24]
 8004c80:	8b7b      	ldrh	r3, [r7, #26]
 8004c82:	1ad2      	subs	r2, r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	619a      	str	r2, [r3, #24]
 8004c88:	e002      	b.n	8004c90 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d123      	bne.n	8004ce0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	83fb      	strh	r3, [r7, #30]
 8004cb4:	8bfb      	ldrh	r3, [r7, #30]
 8004cb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cba:	83fb      	strh	r3, [r7, #30]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	8bfb      	ldrh	r3, [r7, #30]
 8004ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d11f      	bne.n	8004d2a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d04:	83bb      	strh	r3, [r7, #28]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	441a      	add	r2, r3
 8004d14:	8bbb      	ldrh	r3, [r7, #28]
 8004d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d2a:	8b7b      	ldrh	r3, [r7, #26]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	6959      	ldr	r1, [r3, #20]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	895a      	ldrh	r2, [r3, #10]
 8004d3c:	8b7b      	ldrh	r3, [r7, #26]
 8004d3e:	f004 fab7 	bl	80092b0 <USB_ReadPMA>
    }
  }

  return count;
 8004d42:	8b7b      	ldrh	r3, [r7, #26]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3720      	adds	r7, #32
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b0a4      	sub	sp, #144	; 0x90
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	4613      	mov	r3, r2
 8004d58:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 81dd 	beq.w	8005120 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4413      	add	r3, r2
 8004d7a:	3302      	adds	r3, #2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d8e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d907      	bls.n	8004dae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004da6:	1ad2      	subs	r2, r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	619a      	str	r2, [r3, #24]
 8004dac:	e002      	b.n	8004db4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2200      	movs	r2, #0
 8004db2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 80b9 	bne.w	8004f30 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d126      	bne.n	8004e14 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	4413      	add	r3, r2
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	011a      	lsls	r2, r3, #4
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	4413      	add	r3, r2
 8004de8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	801a      	strh	r2, [r3, #0]
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	801a      	strh	r2, [r3, #0]
 8004e12:	e01a      	b.n	8004e4a <HAL_PCD_EP_DB_Transmit+0xfe>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d116      	bne.n	8004e4a <HAL_PCD_EP_DB_Transmit+0xfe>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e30:	4413      	add	r3, r2
 8004e32:	637b      	str	r3, [r7, #52]	; 0x34
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	011a      	lsls	r2, r3, #4
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e42:	633b      	str	r3, [r7, #48]	; 0x30
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	2200      	movs	r2, #0
 8004e48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d126      	bne.n	8004ea6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	61fb      	str	r3, [r7, #28]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	011a      	lsls	r2, r3, #4
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	801a      	strh	r2, [r3, #0]
 8004ea4:	e017      	b.n	8004ed6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d113      	bne.n	8004ed6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	4413      	add	r3, r2
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	011a      	lsls	r2, r3, #4
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	4413      	add	r3, r2
 8004eca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ece:	623b      	str	r3, [r7, #32]
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	4619      	mov	r1, r3
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f006 f802 	bl	800aee6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 82fc 	beq.w	80054e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f08:	82fb      	strh	r3, [r7, #22]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	441a      	add	r2, r3
 8004f18:	8afb      	ldrh	r3, [r7, #22]
 8004f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	8013      	strh	r3, [r2, #0]
 8004f2e:	e2da      	b.n	80054e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d021      	beq.n	8004f7e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	f040 82ae 	bne.w	80054e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f92:	441a      	add	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004fa0:	441a      	add	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6a1a      	ldr	r2, [r3, #32]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d30b      	bcc.n	8004fca <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fc2:	1ad2      	subs	r2, r2, r3
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	621a      	str	r2, [r3, #32]
 8004fc8:	e017      	b.n	8004ffa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d108      	bne.n	8004fe4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004fd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004fd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004fe2:	e00a      	b.n	8004ffa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d165      	bne.n	80050ce <HAL_PCD_EP_DB_Transmit+0x382>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005010:	b29b      	uxth	r3, r3
 8005012:	461a      	mov	r2, r3
 8005014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005016:	4413      	add	r3, r2
 8005018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	011a      	lsls	r2, r3, #4
 8005020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005022:	4413      	add	r3, r2
 8005024:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005028:	63bb      	str	r3, [r7, #56]	; 0x38
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005034:	b29a      	uxth	r2, r3
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800503e:	2b3e      	cmp	r3, #62	; 0x3e
 8005040:	d91d      	bls.n	800507e <HAL_PCD_EP_DB_Transmit+0x332>
 8005042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	64bb      	str	r3, [r7, #72]	; 0x48
 800504a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <HAL_PCD_EP_DB_Transmit+0x310>
 8005056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005058:	3b01      	subs	r3, #1
 800505a:	64bb      	str	r3, [r7, #72]	; 0x48
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29a      	uxth	r2, r3
 8005062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005064:	b29b      	uxth	r3, r3
 8005066:	029b      	lsls	r3, r3, #10
 8005068:	b29b      	uxth	r3, r3
 800506a:	4313      	orrs	r3, r2
 800506c:	b29b      	uxth	r3, r3
 800506e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005076:	b29a      	uxth	r2, r3
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	e044      	b.n	8005108 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800507e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <HAL_PCD_EP_DB_Transmit+0x350>
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005094:	b29a      	uxth	r2, r3
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	801a      	strh	r2, [r3, #0]
 800509a:	e035      	b.n	8005108 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800509c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_PCD_EP_DB_Transmit+0x36a>
 80050b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b2:	3301      	adds	r3, #1
 80050b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050be:	b29b      	uxth	r3, r3
 80050c0:	029b      	lsls	r3, r3, #10
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	4313      	orrs	r3, r2
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	e01c      	b.n	8005108 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d118      	bne.n	8005108 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	647b      	str	r3, [r7, #68]	; 0x44
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ea:	4413      	add	r3, r2
 80050ec:	647b      	str	r3, [r7, #68]	; 0x44
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	011a      	lsls	r2, r3, #4
 80050f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050f6:	4413      	add	r3, r2
 80050f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050fc:	643b      	str	r3, [r7, #64]	; 0x40
 80050fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005102:	b29a      	uxth	r2, r3
 8005104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005106:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6959      	ldr	r1, [r3, #20]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	891a      	ldrh	r2, [r3, #8]
 8005114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005118:	b29b      	uxth	r3, r3
 800511a:	f004 f884 	bl	8009226 <USB_WritePMA>
 800511e:	e1e2      	b.n	80054e6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005128:	b29b      	uxth	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4413      	add	r3, r2
 8005134:	3306      	adds	r3, #6
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005148:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	699a      	ldr	r2, [r3, #24]
 8005150:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005154:	429a      	cmp	r2, r3
 8005156:	d307      	bcc.n	8005168 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005160:	1ad2      	subs	r2, r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	619a      	str	r2, [r3, #24]
 8005166:	e002      	b.n	800516e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2200      	movs	r2, #0
 800516c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f040 80c0 	bne.w	80052f8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	785b      	ldrb	r3, [r3, #1]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d126      	bne.n	80051ce <HAL_PCD_EP_DB_Transmit+0x482>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518e:	b29b      	uxth	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005194:	4413      	add	r3, r2
 8005196:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	011a      	lsls	r2, r3, #4
 800519e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051a0:	4413      	add	r3, r2
 80051a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80051a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	e01a      	b.n	8005204 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d116      	bne.n	8005204 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	667b      	str	r3, [r7, #100]	; 0x64
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ea:	4413      	add	r3, r2
 80051ec:	667b      	str	r3, [r7, #100]	; 0x64
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	011a      	lsls	r2, r3, #4
 80051f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051f6:	4413      	add	r3, r2
 80051f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051fc:	663b      	str	r3, [r7, #96]	; 0x60
 80051fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005200:	2200      	movs	r2, #0
 8005202:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	677b      	str	r3, [r7, #116]	; 0x74
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d12b      	bne.n	800526a <HAL_PCD_EP_DB_Transmit+0x51e>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005220:	b29b      	uxth	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005226:	4413      	add	r3, r2
 8005228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	011a      	lsls	r2, r3, #4
 8005230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005232:	4413      	add	r3, r2
 8005234:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800523c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005248:	b29a      	uxth	r2, r3
 800524a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005260:	b29a      	uxth	r2, r3
 8005262:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	e017      	b.n	800529a <HAL_PCD_EP_DB_Transmit+0x54e>
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d113      	bne.n	800529a <HAL_PCD_EP_DB_Transmit+0x54e>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527a:	b29b      	uxth	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005280:	4413      	add	r3, r2
 8005282:	677b      	str	r3, [r7, #116]	; 0x74
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	011a      	lsls	r2, r3, #4
 800528a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800528c:	4413      	add	r3, r2
 800528e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005292:	673b      	str	r3, [r7, #112]	; 0x70
 8005294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005296:	2200      	movs	r2, #0
 8005298:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	4619      	mov	r1, r3
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f005 fe20 	bl	800aee6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 811a 	bne.w	80054e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052cc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	441a      	add	r2, r3
 80052de:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80052e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]
 80052f6:	e0f6      	b.n	80054e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d121      	bne.n	8005346 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800533e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005342:	b29b      	uxth	r3, r3
 8005344:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800534c:	2b01      	cmp	r3, #1
 800534e:	f040 80ca 	bne.w	80054e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	695a      	ldr	r2, [r3, #20]
 8005356:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800535a:	441a      	add	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005368:	441a      	add	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	6a1a      	ldr	r2, [r3, #32]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	429a      	cmp	r2, r3
 8005378:	d30b      	bcc.n	8005392 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	6a1a      	ldr	r2, [r3, #32]
 8005386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800538a:	1ad2      	subs	r2, r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	621a      	str	r2, [r3, #32]
 8005390:	e017      	b.n	80053c2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d108      	bne.n	80053ac <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800539a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800539e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053aa:	e00a      	b.n	80053c2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2200      	movs	r2, #0
 80053b8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	657b      	str	r3, [r7, #84]	; 0x54
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d165      	bne.n	800549c <HAL_PCD_EP_DB_Transmit+0x750>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053de:	b29b      	uxth	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e4:	4413      	add	r3, r2
 80053e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	011a      	lsls	r2, r3, #4
 80053ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f0:	4413      	add	r3, r2
 80053f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80053f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005402:	b29a      	uxth	r2, r3
 8005404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800540c:	2b3e      	cmp	r3, #62	; 0x3e
 800540e:	d91d      	bls.n	800544c <HAL_PCD_EP_DB_Transmit+0x700>
 8005410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	66bb      	str	r3, [r7, #104]	; 0x68
 8005418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	2b00      	cmp	r3, #0
 8005422:	d102      	bne.n	800542a <HAL_PCD_EP_DB_Transmit+0x6de>
 8005424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005426:	3b01      	subs	r3, #1
 8005428:	66bb      	str	r3, [r7, #104]	; 0x68
 800542a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29a      	uxth	r2, r3
 8005430:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005432:	b29b      	uxth	r3, r3
 8005434:	029b      	lsls	r3, r3, #10
 8005436:	b29b      	uxth	r3, r3
 8005438:	4313      	orrs	r3, r2
 800543a:	b29b      	uxth	r3, r3
 800543c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005444:	b29a      	uxth	r2, r3
 8005446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005448:	801a      	strh	r2, [r3, #0]
 800544a:	e041      	b.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800544c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <HAL_PCD_EP_DB_Transmit+0x71e>
 8005454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005462:	b29a      	uxth	r2, r3
 8005464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	e032      	b.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800546a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	66bb      	str	r3, [r7, #104]	; 0x68
 8005472:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_PCD_EP_DB_Transmit+0x738>
 800547e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005480:	3301      	adds	r3, #1
 8005482:	66bb      	str	r3, [r7, #104]	; 0x68
 8005484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29a      	uxth	r2, r3
 800548a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800548c:	b29b      	uxth	r3, r3
 800548e:	029b      	lsls	r3, r3, #10
 8005490:	b29b      	uxth	r3, r3
 8005492:	4313      	orrs	r3, r2
 8005494:	b29a      	uxth	r2, r3
 8005496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005498:	801a      	strh	r2, [r3, #0]
 800549a:	e019      	b.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d115      	bne.n	80054d0 <HAL_PCD_EP_DB_Transmit+0x784>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054b2:	4413      	add	r3, r2
 80054b4:	657b      	str	r3, [r7, #84]	; 0x54
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	011a      	lsls	r2, r3, #4
 80054bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054be:	4413      	add	r3, r2
 80054c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054c4:	653b      	str	r3, [r7, #80]	; 0x50
 80054c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ce:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6959      	ldr	r1, [r3, #20]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	895a      	ldrh	r2, [r3, #10]
 80054dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f003 fea0 	bl	8009226 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005500:	82bb      	strh	r3, [r7, #20]
 8005502:	8abb      	ldrh	r3, [r7, #20]
 8005504:	f083 0310 	eor.w	r3, r3, #16
 8005508:	82bb      	strh	r3, [r7, #20]
 800550a:	8abb      	ldrh	r3, [r7, #20]
 800550c:	f083 0320 	eor.w	r3, r3, #32
 8005510:	82bb      	strh	r3, [r7, #20]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	441a      	add	r2, r3
 8005520:	8abb      	ldrh	r3, [r7, #20]
 8005522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800552a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800552e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005532:	b29b      	uxth	r3, r3
 8005534:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3790      	adds	r7, #144	; 0x90
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	607b      	str	r3, [r7, #4]
 800554a:	460b      	mov	r3, r1
 800554c:	817b      	strh	r3, [r7, #10]
 800554e:	4613      	mov	r3, r2
 8005550:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005552:	897b      	ldrh	r3, [r7, #10]
 8005554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00b      	beq.n	8005576 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800555e:	897b      	ldrh	r3, [r7, #10]
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	e009      	b.n	800558a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005576:	897a      	ldrh	r2, [r7, #10]
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800558a:	893b      	ldrh	r3, [r7, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d107      	bne.n	80055a0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2200      	movs	r2, #0
 8005594:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	b29a      	uxth	r2, r3
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	80da      	strh	r2, [r3, #6]
 800559e:	e00b      	b.n	80055b8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2201      	movs	r2, #1
 80055a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr

080055c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e272      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8087 	beq.w	80056f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055e4:	4b92      	ldr	r3, [pc, #584]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f003 030c 	and.w	r3, r3, #12
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d00c      	beq.n	800560a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055f0:	4b8f      	ldr	r3, [pc, #572]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f003 030c 	and.w	r3, r3, #12
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d112      	bne.n	8005622 <HAL_RCC_OscConfig+0x5e>
 80055fc:	4b8c      	ldr	r3, [pc, #560]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005608:	d10b      	bne.n	8005622 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800560a:	4b89      	ldr	r3, [pc, #548]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d06c      	beq.n	80056f0 <HAL_RCC_OscConfig+0x12c>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d168      	bne.n	80056f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e24c      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562a:	d106      	bne.n	800563a <HAL_RCC_OscConfig+0x76>
 800562c:	4b80      	ldr	r3, [pc, #512]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a7f      	ldr	r2, [pc, #508]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	e02e      	b.n	8005698 <HAL_RCC_OscConfig+0xd4>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10c      	bne.n	800565c <HAL_RCC_OscConfig+0x98>
 8005642:	4b7b      	ldr	r3, [pc, #492]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a7a      	ldr	r2, [pc, #488]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	4b78      	ldr	r3, [pc, #480]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a77      	ldr	r2, [pc, #476]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	e01d      	b.n	8005698 <HAL_RCC_OscConfig+0xd4>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005664:	d10c      	bne.n	8005680 <HAL_RCC_OscConfig+0xbc>
 8005666:	4b72      	ldr	r3, [pc, #456]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a71      	ldr	r2, [pc, #452]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 800566c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	4b6f      	ldr	r3, [pc, #444]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a6e      	ldr	r2, [pc, #440]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	e00b      	b.n	8005698 <HAL_RCC_OscConfig+0xd4>
 8005680:	4b6b      	ldr	r3, [pc, #428]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a6a      	ldr	r2, [pc, #424]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	4b68      	ldr	r3, [pc, #416]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a67      	ldr	r2, [pc, #412]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005696:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d013      	beq.n	80056c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a0:	f7fc fda4 	bl	80021ec <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a8:	f7fc fda0 	bl	80021ec <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b64      	cmp	r3, #100	; 0x64
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e200      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ba:	4b5d      	ldr	r3, [pc, #372]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0xe4>
 80056c6:	e014      	b.n	80056f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c8:	f7fc fd90 	bl	80021ec <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d0:	f7fc fd8c 	bl	80021ec <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	; 0x64
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e1ec      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056e2:	4b53      	ldr	r3, [pc, #332]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x10c>
 80056ee:	e000      	b.n	80056f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d063      	beq.n	80057c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056fe:	4b4c      	ldr	r3, [pc, #304]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800570a:	4b49      	ldr	r3, [pc, #292]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	2b08      	cmp	r3, #8
 8005714:	d11c      	bne.n	8005750 <HAL_RCC_OscConfig+0x18c>
 8005716:	4b46      	ldr	r3, [pc, #280]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d116      	bne.n	8005750 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005722:	4b43      	ldr	r3, [pc, #268]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d005      	beq.n	800573a <HAL_RCC_OscConfig+0x176>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d001      	beq.n	800573a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e1c0      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573a:	4b3d      	ldr	r3, [pc, #244]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4939      	ldr	r1, [pc, #228]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 800574a:	4313      	orrs	r3, r2
 800574c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800574e:	e03a      	b.n	80057c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d020      	beq.n	800579a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005758:	4b36      	ldr	r3, [pc, #216]	; (8005834 <HAL_RCC_OscConfig+0x270>)
 800575a:	2201      	movs	r2, #1
 800575c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575e:	f7fc fd45 	bl	80021ec <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005766:	f7fc fd41 	bl	80021ec <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e1a1      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005778:	4b2d      	ldr	r3, [pc, #180]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f0      	beq.n	8005766 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005784:	4b2a      	ldr	r3, [pc, #168]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	4927      	ldr	r1, [pc, #156]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	600b      	str	r3, [r1, #0]
 8005798:	e015      	b.n	80057c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800579a:	4b26      	ldr	r3, [pc, #152]	; (8005834 <HAL_RCC_OscConfig+0x270>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a0:	f7fc fd24 	bl	80021ec <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a8:	f7fc fd20 	bl	80021ec <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e180      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ba:	4b1d      	ldr	r3, [pc, #116]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d03a      	beq.n	8005848 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d019      	beq.n	800580e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057da:	4b17      	ldr	r3, [pc, #92]	; (8005838 <HAL_RCC_OscConfig+0x274>)
 80057dc:	2201      	movs	r2, #1
 80057de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e0:	f7fc fd04 	bl	80021ec <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e8:	f7fc fd00 	bl	80021ec <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e160      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057fa:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <HAL_RCC_OscConfig+0x26c>)
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005806:	2001      	movs	r0, #1
 8005808:	f000 faba 	bl	8005d80 <RCC_Delay>
 800580c:	e01c      	b.n	8005848 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800580e:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <HAL_RCC_OscConfig+0x274>)
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005814:	f7fc fcea 	bl	80021ec <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800581a:	e00f      	b.n	800583c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800581c:	f7fc fce6 	bl	80021ec <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d908      	bls.n	800583c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e146      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000
 8005834:	42420000 	.word	0x42420000
 8005838:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800583c:	4b92      	ldr	r3, [pc, #584]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e9      	bne.n	800581c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80a6 	beq.w	80059a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800585a:	4b8b      	ldr	r3, [pc, #556]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10d      	bne.n	8005882 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005866:	4b88      	ldr	r3, [pc, #544]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	4a87      	ldr	r2, [pc, #540]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 800586c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005870:	61d3      	str	r3, [r2, #28]
 8005872:	4b85      	ldr	r3, [pc, #532]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800587e:	2301      	movs	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005882:	4b82      	ldr	r3, [pc, #520]	; (8005a8c <HAL_RCC_OscConfig+0x4c8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d118      	bne.n	80058c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800588e:	4b7f      	ldr	r3, [pc, #508]	; (8005a8c <HAL_RCC_OscConfig+0x4c8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a7e      	ldr	r2, [pc, #504]	; (8005a8c <HAL_RCC_OscConfig+0x4c8>)
 8005894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800589a:	f7fc fca7 	bl	80021ec <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a2:	f7fc fca3 	bl	80021ec <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b64      	cmp	r3, #100	; 0x64
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e103      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b4:	4b75      	ldr	r3, [pc, #468]	; (8005a8c <HAL_RCC_OscConfig+0x4c8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d106      	bne.n	80058d6 <HAL_RCC_OscConfig+0x312>
 80058c8:	4b6f      	ldr	r3, [pc, #444]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	4a6e      	ldr	r2, [pc, #440]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 80058ce:	f043 0301 	orr.w	r3, r3, #1
 80058d2:	6213      	str	r3, [r2, #32]
 80058d4:	e02d      	b.n	8005932 <HAL_RCC_OscConfig+0x36e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCC_OscConfig+0x334>
 80058de:	4b6a      	ldr	r3, [pc, #424]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	4a69      	ldr	r2, [pc, #420]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	6213      	str	r3, [r2, #32]
 80058ea:	4b67      	ldr	r3, [pc, #412]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	4a66      	ldr	r2, [pc, #408]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 80058f0:	f023 0304 	bic.w	r3, r3, #4
 80058f4:	6213      	str	r3, [r2, #32]
 80058f6:	e01c      	b.n	8005932 <HAL_RCC_OscConfig+0x36e>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	2b05      	cmp	r3, #5
 80058fe:	d10c      	bne.n	800591a <HAL_RCC_OscConfig+0x356>
 8005900:	4b61      	ldr	r3, [pc, #388]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	4a60      	ldr	r2, [pc, #384]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005906:	f043 0304 	orr.w	r3, r3, #4
 800590a:	6213      	str	r3, [r2, #32]
 800590c:	4b5e      	ldr	r3, [pc, #376]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	4a5d      	ldr	r2, [pc, #372]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	6213      	str	r3, [r2, #32]
 8005918:	e00b      	b.n	8005932 <HAL_RCC_OscConfig+0x36e>
 800591a:	4b5b      	ldr	r3, [pc, #364]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	4a5a      	ldr	r2, [pc, #360]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	6213      	str	r3, [r2, #32]
 8005926:	4b58      	ldr	r3, [pc, #352]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	4a57      	ldr	r2, [pc, #348]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 800592c:	f023 0304 	bic.w	r3, r3, #4
 8005930:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d015      	beq.n	8005966 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800593a:	f7fc fc57 	bl	80021ec <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005940:	e00a      	b.n	8005958 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005942:	f7fc fc53 	bl	80021ec <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005950:	4293      	cmp	r3, r2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e0b1      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005958:	4b4b      	ldr	r3, [pc, #300]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0ee      	beq.n	8005942 <HAL_RCC_OscConfig+0x37e>
 8005964:	e014      	b.n	8005990 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005966:	f7fc fc41 	bl	80021ec <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800596c:	e00a      	b.n	8005984 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800596e:	f7fc fc3d 	bl	80021ec <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	f241 3288 	movw	r2, #5000	; 0x1388
 800597c:	4293      	cmp	r3, r2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e09b      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005984:	4b40      	ldr	r3, [pc, #256]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1ee      	bne.n	800596e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d105      	bne.n	80059a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005996:	4b3c      	ldr	r3, [pc, #240]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	4a3b      	ldr	r2, [pc, #236]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 800599c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8087 	beq.w	8005aba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059ac:	4b36      	ldr	r3, [pc, #216]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f003 030c 	and.w	r3, r3, #12
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d061      	beq.n	8005a7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d146      	bne.n	8005a4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c0:	4b33      	ldr	r3, [pc, #204]	; (8005a90 <HAL_RCC_OscConfig+0x4cc>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c6:	f7fc fc11 	bl	80021ec <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ce:	f7fc fc0d 	bl	80021ec <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e06d      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059e0:	4b29      	ldr	r3, [pc, #164]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1f0      	bne.n	80059ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f4:	d108      	bne.n	8005a08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80059f6:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	4921      	ldr	r1, [pc, #132]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a08:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a19      	ldr	r1, [r3, #32]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	491b      	ldr	r1, [pc, #108]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a20:	4b1b      	ldr	r3, [pc, #108]	; (8005a90 <HAL_RCC_OscConfig+0x4cc>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a26:	f7fc fbe1 	bl	80021ec <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a2e:	f7fc fbdd 	bl	80021ec <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e03d      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a40:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCC_OscConfig+0x46a>
 8005a4c:	e035      	b.n	8005aba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a4e:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <HAL_RCC_OscConfig+0x4cc>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a54:	f7fc fbca 	bl	80021ec <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5c:	f7fc fbc6 	bl	80021ec <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e026      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a6e:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <HAL_RCC_OscConfig+0x4c4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <HAL_RCC_OscConfig+0x498>
 8005a7a:	e01e      	b.n	8005aba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d107      	bne.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e019      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	40007000 	.word	0x40007000
 8005a90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <HAL_RCC_OscConfig+0x500>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d001      	beq.n	8005aba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40021000 	.word	0x40021000

08005ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0d0      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005adc:	4b6a      	ldr	r3, [pc, #424]	; (8005c88 <HAL_RCC_ClockConfig+0x1c0>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d910      	bls.n	8005b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aea:	4b67      	ldr	r3, [pc, #412]	; (8005c88 <HAL_RCC_ClockConfig+0x1c0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f023 0207 	bic.w	r2, r3, #7
 8005af2:	4965      	ldr	r1, [pc, #404]	; (8005c88 <HAL_RCC_ClockConfig+0x1c0>)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afa:	4b63      	ldr	r3, [pc, #396]	; (8005c88 <HAL_RCC_ClockConfig+0x1c0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0b8      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d020      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b24:	4b59      	ldr	r3, [pc, #356]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4a58      	ldr	r2, [pc, #352]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b3c:	4b53      	ldr	r3, [pc, #332]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	4a52      	ldr	r2, [pc, #328]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b48:	4b50      	ldr	r3, [pc, #320]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	494d      	ldr	r1, [pc, #308]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d040      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d107      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b6e:	4b47      	ldr	r3, [pc, #284]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d115      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e07f      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d107      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b86:	4b41      	ldr	r3, [pc, #260]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d109      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e073      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b96:	4b3d      	ldr	r3, [pc, #244]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e06b      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ba6:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f023 0203 	bic.w	r2, r3, #3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	4936      	ldr	r1, [pc, #216]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bb8:	f7fc fb18 	bl	80021ec <HAL_GetTick>
 8005bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bbe:	e00a      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bc0:	f7fc fb14 	bl	80021ec <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e053      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd6:	4b2d      	ldr	r3, [pc, #180]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f003 020c 	and.w	r2, r3, #12
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d1eb      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005be8:	4b27      	ldr	r3, [pc, #156]	; (8005c88 <HAL_RCC_ClockConfig+0x1c0>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d210      	bcs.n	8005c18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bf6:	4b24      	ldr	r3, [pc, #144]	; (8005c88 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f023 0207 	bic.w	r2, r3, #7
 8005bfe:	4922      	ldr	r1, [pc, #136]	; (8005c88 <HAL_RCC_ClockConfig+0x1c0>)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c06:	4b20      	ldr	r3, [pc, #128]	; (8005c88 <HAL_RCC_ClockConfig+0x1c0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d001      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e032      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d008      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c24:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	4916      	ldr	r1, [pc, #88]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d009      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c42:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	490e      	ldr	r1, [pc, #56]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c56:	f000 f821 	bl	8005c9c <HAL_RCC_GetSysClockFreq>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <HAL_RCC_ClockConfig+0x1c4>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	091b      	lsrs	r3, r3, #4
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	490a      	ldr	r1, [pc, #40]	; (8005c90 <HAL_RCC_ClockConfig+0x1c8>)
 8005c68:	5ccb      	ldrb	r3, [r1, r3]
 8005c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6e:	4a09      	ldr	r2, [pc, #36]	; (8005c94 <HAL_RCC_ClockConfig+0x1cc>)
 8005c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c72:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <HAL_RCC_ClockConfig+0x1d0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fc fa76 	bl	8002168 <HAL_InitTick>

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	40022000 	.word	0x40022000
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	0800c1f4 	.word	0x0800c1f4
 8005c94:	20000020 	.word	0x20000020
 8005c98:	20000024 	.word	0x20000024

08005c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005cb6:	4b1e      	ldr	r3, [pc, #120]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d002      	beq.n	8005ccc <HAL_RCC_GetSysClockFreq+0x30>
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d003      	beq.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8005cca:	e027      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ccc:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8005cce:	613b      	str	r3, [r7, #16]
      break;
 8005cd0:	e027      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	0c9b      	lsrs	r3, r3, #18
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005cdc:	5cd3      	ldrb	r3, [r2, r3]
 8005cde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d010      	beq.n	8005d0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005cea:	4b11      	ldr	r3, [pc, #68]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	0c5b      	lsrs	r3, r3, #17
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	4a11      	ldr	r2, [pc, #68]	; (8005d3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005cf6:	5cd3      	ldrb	r3, [r2, r3]
 8005cf8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a0d      	ldr	r2, [pc, #52]	; (8005d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8005cfe:	fb03 f202 	mul.w	r2, r3, r2
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	e004      	b.n	8005d16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a0c      	ldr	r2, [pc, #48]	; (8005d40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005d10:	fb02 f303 	mul.w	r3, r2, r3
 8005d14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	613b      	str	r3, [r7, #16]
      break;
 8005d1a:	e002      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d1e:	613b      	str	r3, [r7, #16]
      break;
 8005d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d22:	693b      	ldr	r3, [r7, #16]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40021000 	.word	0x40021000
 8005d34:	007a1200 	.word	0x007a1200
 8005d38:	0800c20c 	.word	0x0800c20c
 8005d3c:	0800c21c 	.word	0x0800c21c
 8005d40:	003d0900 	.word	0x003d0900

08005d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d48:	4b02      	ldr	r3, [pc, #8]	; (8005d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr
 8005d54:	20000020 	.word	0x20000020

08005d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d5c:	f7ff fff2 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8005d60:	4602      	mov	r2, r0
 8005d62:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	4903      	ldr	r1, [pc, #12]	; (8005d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d6e:	5ccb      	ldrb	r3, [r1, r3]
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	0800c204 	.word	0x0800c204

08005d80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d88:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <RCC_Delay+0x34>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a0a      	ldr	r2, [pc, #40]	; (8005db8 <RCC_Delay+0x38>)
 8005d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d92:	0a5b      	lsrs	r3, r3, #9
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
 8005d9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d9c:	bf00      	nop
  }
  while (Delay --);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1e5a      	subs	r2, r3, #1
 8005da2:	60fa      	str	r2, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1f9      	bne.n	8005d9c <RCC_Delay+0x1c>
}
 8005da8:	bf00      	nop
 8005daa:	bf00      	nop
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr
 8005db4:	20000020 	.word	0x20000020
 8005db8:	10624dd3 	.word	0x10624dd3

08005dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d07d      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ddc:	4b4f      	ldr	r3, [pc, #316]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10d      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de8:	4b4c      	ldr	r3, [pc, #304]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	4a4b      	ldr	r2, [pc, #300]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df2:	61d3      	str	r3, [r2, #28]
 8005df4:	4b49      	ldr	r3, [pc, #292]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	60bb      	str	r3, [r7, #8]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e00:	2301      	movs	r3, #1
 8005e02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e04:	4b46      	ldr	r3, [pc, #280]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d118      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e10:	4b43      	ldr	r3, [pc, #268]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a42      	ldr	r2, [pc, #264]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e1c:	f7fc f9e6 	bl	80021ec <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e22:	e008      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e24:	f7fc f9e2 	bl	80021ec <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b64      	cmp	r3, #100	; 0x64
 8005e30:	d901      	bls.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e06d      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e36:	4b3a      	ldr	r3, [pc, #232]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e42:	4b36      	ldr	r3, [pc, #216]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d02e      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d027      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e60:	4b2e      	ldr	r3, [pc, #184]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e6a:	4b2e      	ldr	r3, [pc, #184]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e70:	4b2c      	ldr	r3, [pc, #176]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e76:	4a29      	ldr	r2, [pc, #164]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d014      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e86:	f7fc f9b1 	bl	80021ec <HAL_GetTick>
 8005e8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8c:	e00a      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e8e:	f7fc f9ad 	bl	80021ec <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e036      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea4:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0ee      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eb0:	4b1a      	ldr	r3, [pc, #104]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	4917      	ldr	r1, [pc, #92]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d105      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ec8:	4b14      	ldr	r3, [pc, #80]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d008      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ee0:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	490b      	ldr	r1, [pc, #44]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005efe:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	4904      	ldr	r1, [pc, #16]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	40007000 	.word	0x40007000
 8005f24:	42420440 	.word	0x42420440

08005f28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e076      	b.n	8006028 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d108      	bne.n	8005f54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f4a:	d009      	beq.n	8005f60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	61da      	str	r2, [r3, #28]
 8005f52:	e005      	b.n	8005f60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fb ffb0 	bl	8001ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe4:	ea42 0103 	orr.w	r1, r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	0c1a      	lsrs	r2, r3, #16
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f002 0204 	and.w	r2, r2, #4
 8006006:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69da      	ldr	r2, [r3, #28]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006016:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	4613      	mov	r3, r2
 800603e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_SPI_Transmit+0x22>
 800604e:	2302      	movs	r3, #2
 8006050:	e12d      	b.n	80062ae <HAL_SPI_Transmit+0x27e>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800605a:	f7fc f8c7 	bl	80021ec <HAL_GetTick>
 800605e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b01      	cmp	r3, #1
 800606e:	d002      	beq.n	8006076 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006070:	2302      	movs	r3, #2
 8006072:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006074:	e116      	b.n	80062a4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <HAL_SPI_Transmit+0x52>
 800607c:	88fb      	ldrh	r3, [r7, #6]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d102      	bne.n	8006088 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006086:	e10d      	b.n	80062a4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2203      	movs	r2, #3
 800608c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88fa      	ldrh	r2, [r7, #6]
 80060a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	88fa      	ldrh	r2, [r7, #6]
 80060a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ce:	d10f      	bne.n	80060f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	d007      	beq.n	800610e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800610c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006116:	d14f      	bne.n	80061b8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <HAL_SPI_Transmit+0xf6>
 8006120:	8afb      	ldrh	r3, [r7, #22]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d142      	bne.n	80061ac <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	881a      	ldrh	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	1c9a      	adds	r2, r3, #2
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800614a:	e02f      	b.n	80061ac <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b02      	cmp	r3, #2
 8006158:	d112      	bne.n	8006180 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	881a      	ldrh	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616a:	1c9a      	adds	r2, r3, #2
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	86da      	strh	r2, [r3, #54]	; 0x36
 800617e:	e015      	b.n	80061ac <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006180:	f7fc f834 	bl	80021ec <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d803      	bhi.n	8006198 <HAL_SPI_Transmit+0x168>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d102      	bne.n	800619e <HAL_SPI_Transmit+0x16e>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80061aa:	e07b      	b.n	80062a4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1ca      	bne.n	800614c <HAL_SPI_Transmit+0x11c>
 80061b6:	e050      	b.n	800625a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_SPI_Transmit+0x196>
 80061c0:	8afb      	ldrh	r3, [r7, #22]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d144      	bne.n	8006250 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	330c      	adds	r3, #12
 80061d0:	7812      	ldrb	r2, [r2, #0]
 80061d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061ec:	e030      	b.n	8006250 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d113      	bne.n	8006224 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	330c      	adds	r3, #12
 8006206:	7812      	ldrb	r2, [r2, #0]
 8006208:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	86da      	strh	r2, [r3, #54]	; 0x36
 8006222:	e015      	b.n	8006250 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006224:	f7fb ffe2 	bl	80021ec <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d803      	bhi.n	800623c <HAL_SPI_Transmit+0x20c>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623a:	d102      	bne.n	8006242 <HAL_SPI_Transmit+0x212>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800624e:	e029      	b.n	80062a4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006254:	b29b      	uxth	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1c9      	bne.n	80061ee <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f8be 	bl	80063e0 <SPI_EndRxTxTransaction>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2220      	movs	r2, #32
 800626e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006278:	2300      	movs	r3, #0
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	613b      	str	r3, [r7, #16]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	77fb      	strb	r3, [r7, #31]
 800629a:	e003      	b.n	80062a4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3720      	adds	r7, #32
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062c4:	b2db      	uxtb	r3, r3
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062e0:	f7fb ff84 	bl	80021ec <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	4413      	add	r3, r2
 80062ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062f0:	f7fb ff7c 	bl	80021ec <HAL_GetTick>
 80062f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062f6:	4b39      	ldr	r3, [pc, #228]	; (80063dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	015b      	lsls	r3, r3, #5
 80062fc:	0d1b      	lsrs	r3, r3, #20
 80062fe:	69fa      	ldr	r2, [r7, #28]
 8006300:	fb02 f303 	mul.w	r3, r2, r3
 8006304:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006306:	e054      	b.n	80063b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	d050      	beq.n	80063b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006310:	f7fb ff6c 	bl	80021ec <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	429a      	cmp	r2, r3
 800631e:	d902      	bls.n	8006326 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d13d      	bne.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006334:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800633e:	d111      	bne.n	8006364 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006348:	d004      	beq.n	8006354 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006352:	d107      	bne.n	8006364 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006362:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636c:	d10f      	bne.n	800638e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800638c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e017      	b.n	80063d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4013      	ands	r3, r2
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	429a      	cmp	r2, r3
 80063c0:	bf0c      	ite	eq
 80063c2:	2301      	moveq	r3, #1
 80063c4:	2300      	movne	r3, #0
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d19b      	bne.n	8006308 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3720      	adds	r7, #32
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000020 	.word	0x20000020

080063e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2200      	movs	r2, #0
 80063f4:	2180      	movs	r1, #128	; 0x80
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff ff6a 	bl	80062d0 <SPI_WaitFlagStateUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006406:	f043 0220 	orr.w	r2, r3, #32
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e000      	b.n	8006414 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e041      	b.n	80064b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fb fd8a 	bl	8001f5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3304      	adds	r3, #4
 8006458:	4619      	mov	r1, r3
 800645a:	4610      	mov	r0, r2
 800645c:	f000 fa74 	bl	8006948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d001      	beq.n	80064d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e03a      	b.n	800654a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a18      	ldr	r2, [pc, #96]	; (8006554 <HAL_TIM_Base_Start_IT+0x98>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00e      	beq.n	8006514 <HAL_TIM_Base_Start_IT+0x58>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fe:	d009      	beq.n	8006514 <HAL_TIM_Base_Start_IT+0x58>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a14      	ldr	r2, [pc, #80]	; (8006558 <HAL_TIM_Base_Start_IT+0x9c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <HAL_TIM_Base_Start_IT+0x58>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a13      	ldr	r2, [pc, #76]	; (800655c <HAL_TIM_Base_Start_IT+0xa0>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d111      	bne.n	8006538 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b06      	cmp	r3, #6
 8006524:	d010      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0201 	orr.w	r2, r2, #1
 8006534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006536:	e007      	b.n	8006548 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0201 	orr.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	bc80      	pop	{r7}
 8006552:	4770      	bx	lr
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40000400 	.word	0x40000400
 800655c:	40000800 	.word	0x40000800

08006560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b02      	cmp	r3, #2
 8006574:	d122      	bne.n	80065bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b02      	cmp	r3, #2
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0202 	mvn.w	r2, #2
 800658c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f9b4 	bl	8006910 <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f9a7 	bl	80068fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f9b6 	bl	8006922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d122      	bne.n	8006610 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d11b      	bne.n	8006610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0204 	mvn.w	r2, #4
 80065e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f98a 	bl	8006910 <HAL_TIM_IC_CaptureCallback>
 80065fc:	e005      	b.n	800660a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f97d 	bl	80068fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f98c 	bl	8006922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0308 	and.w	r3, r3, #8
 800661a:	2b08      	cmp	r3, #8
 800661c:	d122      	bne.n	8006664 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b08      	cmp	r3, #8
 800662a:	d11b      	bne.n	8006664 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0208 	mvn.w	r2, #8
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2204      	movs	r2, #4
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f960 	bl	8006910 <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f953 	bl	80068fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f962 	bl	8006922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b10      	cmp	r3, #16
 8006670:	d122      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	2b10      	cmp	r3, #16
 800667e:	d11b      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0210 	mvn.w	r2, #16
 8006688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2208      	movs	r2, #8
 800668e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f936 	bl	8006910 <HAL_TIM_IC_CaptureCallback>
 80066a4:	e005      	b.n	80066b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f929 	bl	80068fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 f938 	bl	8006922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d10e      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d107      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0201 	mvn.w	r2, #1
 80066dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fa fbba 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ee:	2b80      	cmp	r3, #128	; 0x80
 80066f0:	d10e      	bne.n	8006710 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fc:	2b80      	cmp	r3, #128	; 0x80
 80066fe:	d107      	bne.n	8006710 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa7b 	bl	8006c06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d10e      	bne.n	800673c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006728:	2b40      	cmp	r3, #64	; 0x40
 800672a:	d107      	bne.n	800673c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f8fc 	bl	8006934 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b20      	cmp	r3, #32
 8006748:	d10e      	bne.n	8006768 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b20      	cmp	r3, #32
 8006756:	d107      	bne.n	8006768 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0220 	mvn.w	r2, #32
 8006760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa46 	bl	8006bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_TIM_ConfigClockSource+0x1c>
 8006788:	2302      	movs	r3, #2
 800678a:	e0b4      	b.n	80068f6 <HAL_TIM_ConfigClockSource+0x186>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c4:	d03e      	beq.n	8006844 <HAL_TIM_ConfigClockSource+0xd4>
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ca:	f200 8087 	bhi.w	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d2:	f000 8086 	beq.w	80068e2 <HAL_TIM_ConfigClockSource+0x172>
 80067d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067da:	d87f      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067dc:	2b70      	cmp	r3, #112	; 0x70
 80067de:	d01a      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0xa6>
 80067e0:	2b70      	cmp	r3, #112	; 0x70
 80067e2:	d87b      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067e4:	2b60      	cmp	r3, #96	; 0x60
 80067e6:	d050      	beq.n	800688a <HAL_TIM_ConfigClockSource+0x11a>
 80067e8:	2b60      	cmp	r3, #96	; 0x60
 80067ea:	d877      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067ec:	2b50      	cmp	r3, #80	; 0x50
 80067ee:	d03c      	beq.n	800686a <HAL_TIM_ConfigClockSource+0xfa>
 80067f0:	2b50      	cmp	r3, #80	; 0x50
 80067f2:	d873      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067f4:	2b40      	cmp	r3, #64	; 0x40
 80067f6:	d058      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0x13a>
 80067f8:	2b40      	cmp	r3, #64	; 0x40
 80067fa:	d86f      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067fc:	2b30      	cmp	r3, #48	; 0x30
 80067fe:	d064      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15a>
 8006800:	2b30      	cmp	r3, #48	; 0x30
 8006802:	d86b      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 8006804:	2b20      	cmp	r3, #32
 8006806:	d060      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15a>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d867      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d05c      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15a>
 8006810:	2b10      	cmp	r3, #16
 8006812:	d05a      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15a>
 8006814:	e062      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006826:	f000 f968 	bl	8006afa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	609a      	str	r2, [r3, #8]
      break;
 8006842:	e04f      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006854:	f000 f951 	bl	8006afa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006866:	609a      	str	r2, [r3, #8]
      break;
 8006868:	e03c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006876:	461a      	mov	r2, r3
 8006878:	f000 f8c8 	bl	8006a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2150      	movs	r1, #80	; 0x50
 8006882:	4618      	mov	r0, r3
 8006884:	f000 f91f 	bl	8006ac6 <TIM_ITRx_SetConfig>
      break;
 8006888:	e02c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006896:	461a      	mov	r2, r3
 8006898:	f000 f8e6 	bl	8006a68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2160      	movs	r1, #96	; 0x60
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f90f 	bl	8006ac6 <TIM_ITRx_SetConfig>
      break;
 80068a8:	e01c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068b6:	461a      	mov	r2, r3
 80068b8:	f000 f8a8 	bl	8006a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2140      	movs	r1, #64	; 0x40
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 f8ff 	bl	8006ac6 <TIM_ITRx_SetConfig>
      break;
 80068c8:	e00c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f000 f8f6 	bl	8006ac6 <TIM_ITRx_SetConfig>
      break;
 80068da:	e003      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
      break;
 80068e0:	e000      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr

08006910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	bc80      	pop	{r7}
 8006920:	4770      	bx	lr

08006922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr

08006934 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr
	...

08006948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a29      	ldr	r2, [pc, #164]	; (8006a00 <TIM_Base_SetConfig+0xb8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00b      	beq.n	8006978 <TIM_Base_SetConfig+0x30>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006966:	d007      	beq.n	8006978 <TIM_Base_SetConfig+0x30>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a26      	ldr	r2, [pc, #152]	; (8006a04 <TIM_Base_SetConfig+0xbc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d003      	beq.n	8006978 <TIM_Base_SetConfig+0x30>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a25      	ldr	r2, [pc, #148]	; (8006a08 <TIM_Base_SetConfig+0xc0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d108      	bne.n	800698a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a1c      	ldr	r2, [pc, #112]	; (8006a00 <TIM_Base_SetConfig+0xb8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00b      	beq.n	80069aa <TIM_Base_SetConfig+0x62>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006998:	d007      	beq.n	80069aa <TIM_Base_SetConfig+0x62>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a19      	ldr	r2, [pc, #100]	; (8006a04 <TIM_Base_SetConfig+0xbc>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d003      	beq.n	80069aa <TIM_Base_SetConfig+0x62>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a18      	ldr	r2, [pc, #96]	; (8006a08 <TIM_Base_SetConfig+0xc0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d108      	bne.n	80069bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a07      	ldr	r2, [pc, #28]	; (8006a00 <TIM_Base_SetConfig+0xb8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d103      	bne.n	80069f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	615a      	str	r2, [r3, #20]
}
 80069f6:	bf00      	nop
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr
 8006a00:	40012c00 	.word	0x40012c00
 8006a04:	40000400 	.word	0x40000400
 8006a08:	40000800 	.word	0x40000800

08006a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f023 0201 	bic.w	r2, r3, #1
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f023 030a 	bic.w	r3, r3, #10
 8006a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f023 0210 	bic.w	r2, r3, #16
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	031b      	lsls	r3, r3, #12
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	621a      	str	r2, [r3, #32]
}
 8006abc:	bf00      	nop
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr

08006ac6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	f043 0307 	orr.w	r3, r3, #7
 8006ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	609a      	str	r2, [r3, #8]
}
 8006af0:	bf00      	nop
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr

08006afa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b087      	sub	sp, #28
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
 8006b06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	021a      	lsls	r2, r3, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	609a      	str	r2, [r3, #8]
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr

08006b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d101      	bne.n	8006b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e046      	b.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a16      	ldr	r2, [pc, #88]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00e      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9c:	d009      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a12      	ldr	r2, [pc, #72]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d004      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a10      	ldr	r2, [pc, #64]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d10c      	bne.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bc80      	pop	{r7}
 8006be6:	4770      	bx	lr
 8006be8:	40012c00 	.word	0x40012c00
 8006bec:	40000400 	.word	0x40000400
 8006bf0:	40000800 	.word	0x40000800

08006bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr

08006c06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c0e:	bf00      	nop
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c18:	b084      	sub	sp, #16
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	f107 0014 	add.w	r0, r7, #20
 8006c26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	b004      	add	sp, #16
 8006c36:	4770      	bx	lr

08006c38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c48:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006c4c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc80      	pop	{r7}
 8006c62:	4770      	bx	lr

08006c64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c6c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006c70:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	43db      	mvns	r3, r3
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4013      	ands	r3, r2
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr

08006c98 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	f107 0014 	add.w	r0, r7, #20
 8006cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	b004      	add	sp, #16
 8006cee:	4770      	bx	lr

08006cf0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b09d      	sub	sp, #116	; 0x74
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	78db      	ldrb	r3, [r3, #3]
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d81f      	bhi.n	8006d62 <USB_ActivateEndpoint+0x72>
 8006d22:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <USB_ActivateEndpoint+0x38>)
 8006d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d28:	08006d39 	.word	0x08006d39
 8006d2c:	08006d55 	.word	0x08006d55
 8006d30:	08006d6b 	.word	0x08006d6b
 8006d34:	08006d47 	.word	0x08006d47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006d38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006d44:	e012      	b.n	8006d6c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006d46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d4a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006d4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006d52:	e00b      	b.n	8006d6c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006d54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006d60:	e004      	b.n	8006d6c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006d68:	e000      	b.n	8006d6c <USB_ActivateEndpoint+0x7c>
      break;
 8006d6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	441a      	add	r2, r3
 8006d76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	4313      	orrs	r3, r2
 8006dae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	441a      	add	r2, r3
 8006dbc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	7b1b      	ldrb	r3, [r3, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f040 8178 	bne.w	80070ce <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	785b      	ldrb	r3, [r3, #1]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 8084 	beq.w	8006ef0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	61bb      	str	r3, [r7, #24]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	4413      	add	r3, r2
 8006dfa:	61bb      	str	r3, [r7, #24]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	011a      	lsls	r2, r3, #4
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	88db      	ldrh	r3, [r3, #6]
 8006e10:	085b      	lsrs	r3, r3, #1
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	827b      	strh	r3, [r7, #18]
 8006e2a:	8a7b      	ldrh	r3, [r7, #18]
 8006e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01b      	beq.n	8006e6c <USB_ActivateEndpoint+0x17c>
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4a:	823b      	strh	r3, [r7, #16]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	441a      	add	r2, r3
 8006e56:	8a3b      	ldrh	r3, [r7, #16]
 8006e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	78db      	ldrb	r3, [r3, #3]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d020      	beq.n	8006eb6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e8a:	81bb      	strh	r3, [r7, #12]
 8006e8c:	89bb      	ldrh	r3, [r7, #12]
 8006e8e:	f083 0320 	eor.w	r3, r3, #32
 8006e92:	81bb      	strh	r3, [r7, #12]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	441a      	add	r2, r3
 8006e9e:	89bb      	ldrh	r3, [r7, #12]
 8006ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	8013      	strh	r3, [r2, #0]
 8006eb4:	e2d5      	b.n	8007462 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ecc:	81fb      	strh	r3, [r7, #14]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	441a      	add	r2, r3
 8006ed8:	89fb      	ldrh	r3, [r7, #14]
 8006eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	8013      	strh	r3, [r2, #0]
 8006eee:	e2b8      	b.n	8007462 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	461a      	mov	r2, r3
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	4413      	add	r3, r2
 8006f02:	633b      	str	r3, [r7, #48]	; 0x30
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	011a      	lsls	r2, r3, #4
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	88db      	ldrh	r3, [r3, #6]
 8006f18:	085b      	lsrs	r3, r3, #1
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	461a      	mov	r2, r3
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	4413      	add	r3, r2
 8006f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	011a      	lsls	r2, r3, #4
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	4413      	add	r3, r2
 8006f42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	801a      	strh	r2, [r3, #0]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f5e:	d91d      	bls.n	8006f9c <USB_ActivateEndpoint+0x2ac>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f003 031f 	and.w	r3, r3, #31
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d102      	bne.n	8006f7a <USB_ActivateEndpoint+0x28a>
 8006f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f76:	3b01      	subs	r3, #1
 8006f78:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	029b      	lsls	r3, r3, #10
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	e026      	b.n	8006fea <USB_ActivateEndpoint+0x2fa>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <USB_ActivateEndpoint+0x2ca>
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	e017      	b.n	8006fea <USB_ActivateEndpoint+0x2fa>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	085b      	lsrs	r3, r3, #1
 8006fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d002      	beq.n	8006fd4 <USB_ActivateEndpoint+0x2e4>
 8006fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	029b      	lsls	r3, r3, #10
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	847b      	strh	r3, [r7, #34]	; 0x22
 8006ff8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d01b      	beq.n	800703a <USB_ActivateEndpoint+0x34a>
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007018:	843b      	strh	r3, [r7, #32]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	441a      	add	r2, r3
 8007024:	8c3b      	ldrh	r3, [r7, #32]
 8007026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800702e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007036:	b29b      	uxth	r3, r3
 8007038:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d124      	bne.n	800708c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007058:	83bb      	strh	r3, [r7, #28]
 800705a:	8bbb      	ldrh	r3, [r7, #28]
 800705c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007060:	83bb      	strh	r3, [r7, #28]
 8007062:	8bbb      	ldrh	r3, [r7, #28]
 8007064:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007068:	83bb      	strh	r3, [r7, #28]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	441a      	add	r2, r3
 8007074:	8bbb      	ldrh	r3, [r7, #28]
 8007076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800707a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800707e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007086:	b29b      	uxth	r3, r3
 8007088:	8013      	strh	r3, [r2, #0]
 800708a:	e1ea      	b.n	8007462 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	b29b      	uxth	r3, r3
 800709a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800709e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a2:	83fb      	strh	r3, [r7, #30]
 80070a4:	8bfb      	ldrh	r3, [r7, #30]
 80070a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070aa:	83fb      	strh	r3, [r7, #30]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	441a      	add	r2, r3
 80070b6:	8bfb      	ldrh	r3, [r7, #30]
 80070b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	8013      	strh	r3, [r2, #0]
 80070cc:	e1c9      	b.n	8007462 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	78db      	ldrb	r3, [r3, #3]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d11e      	bne.n	8007114 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	441a      	add	r2, r3
 80070fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80070fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007106:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800710a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800710e:	b29b      	uxth	r3, r3
 8007110:	8013      	strh	r3, [r2, #0]
 8007112:	e01d      	b.n	8007150 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
 8007122:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	441a      	add	r2, r3
 8007138:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800713c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714c:	b29b      	uxth	r3, r3
 800714e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800715a:	b29b      	uxth	r3, r3
 800715c:	461a      	mov	r2, r3
 800715e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007160:	4413      	add	r3, r2
 8007162:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	011a      	lsls	r2, r3, #4
 800716a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800716c:	4413      	add	r3, r2
 800716e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007172:	65bb      	str	r3, [r7, #88]	; 0x58
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	891b      	ldrh	r3, [r3, #8]
 8007178:	085b      	lsrs	r3, r3, #1
 800717a:	b29b      	uxth	r3, r3
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007182:	801a      	strh	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	657b      	str	r3, [r7, #84]	; 0x54
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800718e:	b29b      	uxth	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007194:	4413      	add	r3, r2
 8007196:	657b      	str	r3, [r7, #84]	; 0x54
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	011a      	lsls	r2, r3, #4
 800719e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80071a6:	653b      	str	r3, [r7, #80]	; 0x50
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	895b      	ldrh	r3, [r3, #10]
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	785b      	ldrb	r3, [r3, #1]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 8093 	bne.w	80072e8 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80071d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80071d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01b      	beq.n	8007216 <USB_ActivateEndpoint+0x526>
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	441a      	add	r2, r3
 8007200:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800720e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007212:	b29b      	uxth	r3, r3
 8007214:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007224:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01b      	beq.n	8007266 <USB_ActivateEndpoint+0x576>
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	b29b      	uxth	r3, r3
 800723c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007244:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	441a      	add	r2, r3
 8007250:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800725a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007262:	b29b      	uxth	r3, r3
 8007264:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727c:	873b      	strh	r3, [r7, #56]	; 0x38
 800727e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007280:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007284:	873b      	strh	r3, [r7, #56]	; 0x38
 8007286:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007288:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800728c:	873b      	strh	r3, [r7, #56]	; 0x38
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	441a      	add	r2, r3
 8007298:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800729a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	441a      	add	r2, r3
 80072d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80072d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	8013      	strh	r3, [r2, #0]
 80072e6:	e0bc      	b.n	8007462 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01d      	beq.n	8007340 <USB_ActivateEndpoint+0x650>
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b29b      	uxth	r3, r3
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	441a      	add	r2, r3
 8007328:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800732c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733c:	b29b      	uxth	r3, r3
 800733e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007350:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01d      	beq.n	8007398 <USB_ActivateEndpoint+0x6a8>
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007372:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	441a      	add	r2, r3
 8007380:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800738c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007390:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007394:	b29b      	uxth	r3, r3
 8007396:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	78db      	ldrb	r3, [r3, #3]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d024      	beq.n	80073ea <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80073ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80073be:	f083 0320 	eor.w	r3, r3, #32
 80073c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	441a      	add	r2, r3
 80073d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80073d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	8013      	strh	r3, [r2, #0]
 80073e8:	e01d      	b.n	8007426 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	881b      	ldrh	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007400:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	441a      	add	r2, r3
 800740e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800741a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800741e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007422:	b29b      	uxth	r3, r3
 8007424:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	441a      	add	r2, r3
 800744a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800744e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800745a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745e:	b29b      	uxth	r3, r3
 8007460:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007462:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007466:	4618      	mov	r0, r3
 8007468:	3774      	adds	r7, #116	; 0x74
 800746a:	46bd      	mov	sp, r7
 800746c:	bc80      	pop	{r7}
 800746e:	4770      	bx	lr

08007470 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007470:	b480      	push	{r7}
 8007472:	b08d      	sub	sp, #52	; 0x34
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	7b1b      	ldrb	r3, [r3, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f040 808e 	bne.w	80075a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	785b      	ldrb	r3, [r3, #1]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d044      	beq.n	8007516 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	81bb      	strh	r3, [r7, #12]
 800749a:	89bb      	ldrh	r3, [r7, #12]
 800749c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01b      	beq.n	80074dc <USB_DeactivateEndpoint+0x6c>
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	881b      	ldrh	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ba:	817b      	strh	r3, [r7, #10]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	441a      	add	r2, r3
 80074c6:	897b      	ldrh	r3, [r7, #10]
 80074c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074d8:	b29b      	uxth	r3, r3
 80074da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f2:	813b      	strh	r3, [r7, #8]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	441a      	add	r2, r3
 80074fe:	893b      	ldrh	r3, [r7, #8]
 8007500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800750c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007510:	b29b      	uxth	r3, r3
 8007512:	8013      	strh	r3, [r2, #0]
 8007514:	e192      	b.n	800783c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	827b      	strh	r3, [r7, #18]
 8007524:	8a7b      	ldrh	r3, [r7, #18]
 8007526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d01b      	beq.n	8007566 <USB_DeactivateEndpoint+0xf6>
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	b29b      	uxth	r3, r3
 800753c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007544:	823b      	strh	r3, [r7, #16]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	441a      	add	r2, r3
 8007550:	8a3b      	ldrh	r3, [r7, #16]
 8007552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800755a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800755e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007562:	b29b      	uxth	r3, r3
 8007564:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757c:	81fb      	strh	r3, [r7, #14]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	441a      	add	r2, r3
 8007588:	89fb      	ldrh	r3, [r7, #14]
 800758a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759a:	b29b      	uxth	r3, r3
 800759c:	8013      	strh	r3, [r2, #0]
 800759e:	e14d      	b.n	800783c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f040 80a5 	bne.w	80076f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	843b      	strh	r3, [r7, #32]
 80075b8:	8c3b      	ldrh	r3, [r7, #32]
 80075ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d01b      	beq.n	80075fa <USB_DeactivateEndpoint+0x18a>
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d8:	83fb      	strh	r3, [r7, #30]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	441a      	add	r2, r3
 80075e4:	8bfb      	ldrh	r3, [r7, #30]
 80075e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	83bb      	strh	r3, [r7, #28]
 8007608:	8bbb      	ldrh	r3, [r7, #28]
 800760a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d01b      	beq.n	800764a <USB_DeactivateEndpoint+0x1da>
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	b29b      	uxth	r3, r3
 8007620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007628:	837b      	strh	r3, [r7, #26]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	441a      	add	r2, r3
 8007634:	8b7b      	ldrh	r3, [r7, #26]
 8007636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800763a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007642:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007646:	b29b      	uxth	r3, r3
 8007648:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007660:	833b      	strh	r3, [r7, #24]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	441a      	add	r2, r3
 800766c:	8b3b      	ldrh	r3, [r7, #24]
 800766e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800767a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800767e:	b29b      	uxth	r3, r3
 8007680:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007698:	82fb      	strh	r3, [r7, #22]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	441a      	add	r2, r3
 80076a4:	8afb      	ldrh	r3, [r7, #22]
 80076a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d0:	82bb      	strh	r3, [r7, #20]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	441a      	add	r2, r3
 80076dc:	8abb      	ldrh	r3, [r7, #20]
 80076de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	8013      	strh	r3, [r2, #0]
 80076f2:	e0a3      	b.n	800783c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007702:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d01b      	beq.n	8007744 <USB_DeactivateEndpoint+0x2d4>
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	b29b      	uxth	r3, r3
 800771a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800771e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007722:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800773c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007740:	b29b      	uxth	r3, r3
 8007742:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007752:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01b      	beq.n	8007794 <USB_DeactivateEndpoint+0x324>
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	b29b      	uxth	r3, r3
 800776a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007772:	853b      	strh	r3, [r7, #40]	; 0x28
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	441a      	add	r2, r3
 800777e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007790:	b29b      	uxth	r3, r3
 8007792:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	441a      	add	r2, r3
 80077b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	441a      	add	r2, r3
 80077ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007800:	b29b      	uxth	r3, r3
 8007802:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781a:	847b      	strh	r3, [r7, #34]	; 0x22
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	441a      	add	r2, r3
 8007826:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800782c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007838:	b29b      	uxth	r3, r3
 800783a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3734      	adds	r7, #52	; 0x34
 8007842:	46bd      	mov	sp, r7
 8007844:	bc80      	pop	{r7}
 8007846:	4770      	bx	lr

08007848 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b0c2      	sub	sp, #264	; 0x108
 800784c:	af00      	add	r7, sp, #0
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007856:	6018      	str	r0, [r3, #0]
 8007858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007860:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	785b      	ldrb	r3, [r3, #1]
 800786e:	2b01      	cmp	r3, #1
 8007870:	f040 86b7 	bne.w	80085e2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	699a      	ldr	r2, [r3, #24]
 8007880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	429a      	cmp	r2, r3
 800788e:	d908      	bls.n	80078a2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078a0:	e007      	b.n	80078b2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80078a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80078b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	7b1b      	ldrb	r3, [r3, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d13a      	bne.n	8007938 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80078c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6959      	ldr	r1, [r3, #20]
 80078ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	88da      	ldrh	r2, [r3, #6]
 80078da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078de:	b29b      	uxth	r3, r3
 80078e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80078e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80078e8:	6800      	ldr	r0, [r0, #0]
 80078ea:	f001 fc9c 	bl	8009226 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	613b      	str	r3, [r7, #16]
 80078fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007908:	b29b      	uxth	r3, r3
 800790a:	461a      	mov	r2, r3
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	4413      	add	r3, r2
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	011a      	lsls	r2, r3, #4
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	4413      	add	r3, r2
 8007924:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800792e:	b29a      	uxth	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	801a      	strh	r2, [r3, #0]
 8007934:	f000 be1f 	b.w	8008576 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	78db      	ldrb	r3, [r3, #3]
 8007944:	2b02      	cmp	r3, #2
 8007946:	f040 8462 	bne.w	800820e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800794a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6a1a      	ldr	r2, [r3, #32]
 8007956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800795a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	429a      	cmp	r2, r3
 8007964:	f240 83df 	bls.w	8008126 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800796c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b29b      	uxth	r3, r3
 8007986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800798a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	441a      	add	r2, r3
 80079ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80079b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80079bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80079c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6a1a      	ldr	r2, [r3, #32]
 80079d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d4:	1ad2      	subs	r2, r2, r3
 80079d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 81c7 	beq.w	8007d98 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	633b      	str	r3, [r7, #48]	; 0x30
 8007a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d177      	bne.n	8007b16 <USB_EPStartXfer+0x2ce>
 8007a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	461a      	mov	r2, r3
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	4413      	add	r3, r2
 8007a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	011a      	lsls	r2, r3, #4
 8007a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a76:	2b3e      	cmp	r3, #62	; 0x3e
 8007a78:	d921      	bls.n	8007abe <USB_EPStartXfer+0x276>
 8007a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7e:	095b      	lsrs	r3, r3, #5
 8007a80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a88:	f003 031f 	and.w	r3, r3, #31
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d104      	bne.n	8007a9a <USB_EPStartXfer+0x252>
 8007a90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a94:	3b01      	subs	r3, #1
 8007a96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	029b      	lsls	r3, r3, #10
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	801a      	strh	r2, [r3, #0]
 8007abc:	e050      	b.n	8007b60 <USB_EPStartXfer+0x318>
 8007abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <USB_EPStartXfer+0x294>
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	801a      	strh	r2, [r3, #0]
 8007ada:	e041      	b.n	8007b60 <USB_EPStartXfer+0x318>
 8007adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae0:	085b      	lsrs	r3, r3, #1
 8007ae2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <USB_EPStartXfer+0x2b4>
 8007af2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007af6:	3301      	adds	r3, #1
 8007af8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	029b      	lsls	r3, r3, #10
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	801a      	strh	r2, [r3, #0]
 8007b14:	e024      	b.n	8007b60 <USB_EPStartXfer+0x318>
 8007b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d11c      	bne.n	8007b60 <USB_EPStartXfer+0x318>
 8007b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	4413      	add	r3, r2
 8007b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	011a      	lsls	r2, r3, #4
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	4413      	add	r3, r2
 8007b50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	895b      	ldrh	r3, [r3, #10]
 8007b6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6959      	ldr	r1, [r3, #20]
 8007b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b8e:	6800      	ldr	r0, [r0, #0]
 8007b90:	f001 fb49 	bl	8009226 <USB_WritePMA>
            ep->xfer_buff += len;
 8007b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	695a      	ldr	r2, [r3, #20]
 8007ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba4:	441a      	add	r2, r3
 8007ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d90f      	bls.n	8007bee <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6a1a      	ldr	r2, [r3, #32]
 8007bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	621a      	str	r2, [r3, #32]
 8007bec:	e00e      	b.n	8007c0c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	785b      	ldrb	r3, [r3, #1]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d177      	bne.n	8007d0c <USB_EPStartXfer+0x4c4>
 8007c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	61bb      	str	r3, [r7, #24]
 8007c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	461a      	mov	r2, r3
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	61bb      	str	r3, [r7, #24]
 8007c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	011a      	lsls	r2, r3, #4
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	4413      	add	r3, r2
 8007c52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	801a      	strh	r2, [r3, #0]
 8007c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c6c:	2b3e      	cmp	r3, #62	; 0x3e
 8007c6e:	d921      	bls.n	8007cb4 <USB_EPStartXfer+0x46c>
 8007c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c74:	095b      	lsrs	r3, r3, #5
 8007c76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c7e:	f003 031f 	and.w	r3, r3, #31
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d104      	bne.n	8007c90 <USB_EPStartXfer+0x448>
 8007c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	029b      	lsls	r3, r3, #10
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	801a      	strh	r2, [r3, #0]
 8007cb2:	e056      	b.n	8007d62 <USB_EPStartXfer+0x51a>
 8007cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <USB_EPStartXfer+0x48a>
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	801a      	strh	r2, [r3, #0]
 8007cd0:	e047      	b.n	8007d62 <USB_EPStartXfer+0x51a>
 8007cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd6:	085b      	lsrs	r3, r3, #1
 8007cd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d004      	beq.n	8007cf2 <USB_EPStartXfer+0x4aa>
 8007ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cec:	3301      	adds	r3, #1
 8007cee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	029b      	lsls	r3, r3, #10
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	4313      	orrs	r3, r2
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	801a      	strh	r2, [r3, #0]
 8007d0a:	e02a      	b.n	8007d62 <USB_EPStartXfer+0x51a>
 8007d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d122      	bne.n	8007d62 <USB_EPStartXfer+0x51a>
 8007d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	623b      	str	r3, [r7, #32]
 8007d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	623b      	str	r3, [r7, #32]
 8007d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	011a      	lsls	r2, r3, #4
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	4413      	add	r3, r2
 8007d52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d56:	61fb      	str	r3, [r7, #28]
 8007d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	891b      	ldrh	r3, [r3, #8]
 8007d6e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6959      	ldr	r1, [r3, #20]
 8007d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d88:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007d8c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007d90:	6800      	ldr	r0, [r0, #0]
 8007d92:	f001 fa48 	bl	8009226 <USB_WritePMA>
 8007d96:	e3ee      	b.n	8008576 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	785b      	ldrb	r3, [r3, #1]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d177      	bne.n	8007e98 <USB_EPStartXfer+0x650>
 8007da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dc8:	4413      	add	r3, r2
 8007dca:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	011a      	lsls	r2, r3, #4
 8007dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ddc:	4413      	add	r3, r2
 8007dde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007de2:	647b      	str	r3, [r7, #68]	; 0x44
 8007de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007df2:	801a      	strh	r2, [r3, #0]
 8007df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df8:	2b3e      	cmp	r3, #62	; 0x3e
 8007dfa:	d921      	bls.n	8007e40 <USB_EPStartXfer+0x5f8>
 8007dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e0a:	f003 031f 	and.w	r3, r3, #31
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d104      	bne.n	8007e1c <USB_EPStartXfer+0x5d4>
 8007e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e16:	3b01      	subs	r3, #1
 8007e18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	029b      	lsls	r3, r3, #10
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e3c:	801a      	strh	r2, [r3, #0]
 8007e3e:	e056      	b.n	8007eee <USB_EPStartXfer+0x6a6>
 8007e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <USB_EPStartXfer+0x616>
 8007e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e5a:	801a      	strh	r2, [r3, #0]
 8007e5c:	e047      	b.n	8007eee <USB_EPStartXfer+0x6a6>
 8007e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e62:	085b      	lsrs	r3, r3, #1
 8007e64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d004      	beq.n	8007e7e <USB_EPStartXfer+0x636>
 8007e74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e78:	3301      	adds	r3, #1
 8007e7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	029b      	lsls	r3, r3, #10
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	e02a      	b.n	8007eee <USB_EPStartXfer+0x6a6>
 8007e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	785b      	ldrb	r3, [r3, #1]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d122      	bne.n	8007eee <USB_EPStartXfer+0x6a6>
 8007ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8007eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec8:	4413      	add	r3, r2
 8007eca:	653b      	str	r3, [r7, #80]	; 0x50
 8007ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	011a      	lsls	r2, r3, #4
 8007eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007edc:	4413      	add	r3, r2
 8007ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	891b      	ldrh	r3, [r3, #8]
 8007efa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6959      	ldr	r1, [r3, #20]
 8007f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f14:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f18:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f1c:	6800      	ldr	r0, [r0, #0]
 8007f1e:	f001 f982 	bl	8009226 <USB_WritePMA>
            ep->xfer_buff += len;
 8007f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	695a      	ldr	r2, [r3, #20]
 8007f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f32:	441a      	add	r2, r3
 8007f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6a1a      	ldr	r2, [r3, #32]
 8007f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d90f      	bls.n	8007f7c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6a1a      	ldr	r2, [r3, #32]
 8007f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f6c:	1ad2      	subs	r2, r2, r3
 8007f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	621a      	str	r2, [r3, #32]
 8007f7a:	e00e      	b.n	8007f9a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2200      	movs	r2, #0
 8007f98:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8007fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007faa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	785b      	ldrb	r3, [r3, #1]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d177      	bne.n	80080a6 <USB_EPStartXfer+0x85e>
 8007fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	4413      	add	r3, r2
 8007fd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	011a      	lsls	r2, r3, #4
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	4413      	add	r3, r2
 8007fec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008000:	801a      	strh	r2, [r3, #0]
 8008002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008006:	2b3e      	cmp	r3, #62	; 0x3e
 8008008:	d921      	bls.n	800804e <USB_EPStartXfer+0x806>
 800800a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800800e:	095b      	lsrs	r3, r3, #5
 8008010:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008018:	f003 031f 	and.w	r3, r3, #31
 800801c:	2b00      	cmp	r3, #0
 800801e:	d104      	bne.n	800802a <USB_EPStartXfer+0x7e2>
 8008020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008024:	3b01      	subs	r3, #1
 8008026:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800802a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	b29a      	uxth	r2, r3
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008034:	b29b      	uxth	r3, r3
 8008036:	029b      	lsls	r3, r3, #10
 8008038:	b29b      	uxth	r3, r3
 800803a:	4313      	orrs	r3, r2
 800803c:	b29b      	uxth	r3, r3
 800803e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008046:	b29a      	uxth	r2, r3
 8008048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804a:	801a      	strh	r2, [r3, #0]
 800804c:	e050      	b.n	80080f0 <USB_EPStartXfer+0x8a8>
 800804e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <USB_EPStartXfer+0x824>
 8008056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008064:	b29a      	uxth	r2, r3
 8008066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008068:	801a      	strh	r2, [r3, #0]
 800806a:	e041      	b.n	80080f0 <USB_EPStartXfer+0x8a8>
 800806c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008070:	085b      	lsrs	r3, r3, #1
 8008072:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	d004      	beq.n	800808c <USB_EPStartXfer+0x844>
 8008082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008086:	3301      	adds	r3, #1
 8008088:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800808c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	b29a      	uxth	r2, r3
 8008092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008096:	b29b      	uxth	r3, r3
 8008098:	029b      	lsls	r3, r3, #10
 800809a:	b29b      	uxth	r3, r3
 800809c:	4313      	orrs	r3, r2
 800809e:	b29a      	uxth	r2, r3
 80080a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a2:	801a      	strh	r2, [r3, #0]
 80080a4:	e024      	b.n	80080f0 <USB_EPStartXfer+0x8a8>
 80080a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d11c      	bne.n	80080f0 <USB_EPStartXfer+0x8a8>
 80080b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	461a      	mov	r2, r3
 80080c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ca:	4413      	add	r3, r2
 80080cc:	643b      	str	r3, [r7, #64]	; 0x40
 80080ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	011a      	lsls	r2, r3, #4
 80080dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080de:	4413      	add	r3, r2
 80080e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	895b      	ldrh	r3, [r3, #10]
 80080fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6959      	ldr	r1, [r3, #20]
 800810c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008110:	b29b      	uxth	r3, r3
 8008112:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008116:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800811a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800811e:	6800      	ldr	r0, [r0, #0]
 8008120:	f001 f881 	bl	8009226 <USB_WritePMA>
 8008124:	e227      	b.n	8008576 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800812a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800816e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	441a      	add	r2, r3
 800817a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800817e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800818a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800818e:	b29b      	uxth	r3, r3
 8008190:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008196:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800819e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	461a      	mov	r2, r3
 80081b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081b2:	4413      	add	r3, r2
 80081b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	011a      	lsls	r2, r3, #4
 80081c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081c6:	4413      	add	r3, r2
 80081c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80081ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80081d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	891b      	ldrh	r3, [r3, #8]
 80081e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6959      	ldr	r1, [r3, #20]
 80081f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80081fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008202:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008206:	6800      	ldr	r0, [r0, #0]
 8008208:	f001 f80d 	bl	8009226 <USB_WritePMA>
 800820c:	e1b3      	b.n	8008576 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800820e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6a1a      	ldr	r2, [r3, #32]
 800821a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821e:	1ad2      	subs	r2, r2, r3
 8008220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800822c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800823a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 80c6 	beq.w	80083e0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	673b      	str	r3, [r7, #112]	; 0x70
 8008260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d177      	bne.n	8008360 <USB_EPStartXfer+0xb18>
 8008270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	66bb      	str	r3, [r7, #104]	; 0x68
 800827c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008280:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800828a:	b29b      	uxth	r3, r3
 800828c:	461a      	mov	r2, r3
 800828e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008290:	4413      	add	r3, r2
 8008292:	66bb      	str	r3, [r7, #104]	; 0x68
 8008294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	011a      	lsls	r2, r3, #4
 80082a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082a4:	4413      	add	r3, r2
 80082a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082aa:	667b      	str	r3, [r7, #100]	; 0x64
 80082ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ba:	801a      	strh	r2, [r3, #0]
 80082bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c0:	2b3e      	cmp	r3, #62	; 0x3e
 80082c2:	d921      	bls.n	8008308 <USB_EPStartXfer+0xac0>
 80082c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c8:	095b      	lsrs	r3, r3, #5
 80082ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80082ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d2:	f003 031f 	and.w	r3, r3, #31
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d104      	bne.n	80082e4 <USB_EPStartXfer+0xa9c>
 80082da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80082de:	3b01      	subs	r3, #1
 80082e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80082e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	029b      	lsls	r3, r3, #10
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	4313      	orrs	r3, r2
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008300:	b29a      	uxth	r2, r3
 8008302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008304:	801a      	strh	r2, [r3, #0]
 8008306:	e050      	b.n	80083aa <USB_EPStartXfer+0xb62>
 8008308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10a      	bne.n	8008326 <USB_EPStartXfer+0xade>
 8008310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008312:	881b      	ldrh	r3, [r3, #0]
 8008314:	b29b      	uxth	r3, r3
 8008316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800831a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800831e:	b29a      	uxth	r2, r3
 8008320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008322:	801a      	strh	r2, [r3, #0]
 8008324:	e041      	b.n	80083aa <USB_EPStartXfer+0xb62>
 8008326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800832a:	085b      	lsrs	r3, r3, #1
 800832c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	2b00      	cmp	r3, #0
 800833a:	d004      	beq.n	8008346 <USB_EPStartXfer+0xafe>
 800833c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008340:	3301      	adds	r3, #1
 8008342:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	b29a      	uxth	r2, r3
 800834c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008350:	b29b      	uxth	r3, r3
 8008352:	029b      	lsls	r3, r3, #10
 8008354:	b29b      	uxth	r3, r3
 8008356:	4313      	orrs	r3, r2
 8008358:	b29a      	uxth	r2, r3
 800835a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800835c:	801a      	strh	r2, [r3, #0]
 800835e:	e024      	b.n	80083aa <USB_EPStartXfer+0xb62>
 8008360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	785b      	ldrb	r3, [r3, #1]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d11c      	bne.n	80083aa <USB_EPStartXfer+0xb62>
 8008370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008374:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800837e:	b29b      	uxth	r3, r3
 8008380:	461a      	mov	r2, r3
 8008382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008384:	4413      	add	r3, r2
 8008386:	673b      	str	r3, [r7, #112]	; 0x70
 8008388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	011a      	lsls	r2, r3, #4
 8008396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008398:	4413      	add	r3, r2
 800839a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800839e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80083aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	895b      	ldrh	r3, [r3, #10]
 80083b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6959      	ldr	r1, [r3, #20]
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80083d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80083d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80083d8:	6800      	ldr	r0, [r0, #0]
 80083da:	f000 ff24 	bl	8009226 <USB_WritePMA>
 80083de:	e0ca      	b.n	8008576 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	785b      	ldrb	r3, [r3, #1]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d177      	bne.n	80084e0 <USB_EPStartXfer+0xc98>
 80083f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800840a:	b29b      	uxth	r3, r3
 800840c:	461a      	mov	r2, r3
 800840e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008410:	4413      	add	r3, r2
 8008412:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	011a      	lsls	r2, r3, #4
 8008422:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008424:	4413      	add	r3, r2
 8008426:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800842a:	67bb      	str	r3, [r7, #120]	; 0x78
 800842c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b29b      	uxth	r3, r3
 8008432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008436:	b29a      	uxth	r2, r3
 8008438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800843a:	801a      	strh	r2, [r3, #0]
 800843c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008440:	2b3e      	cmp	r3, #62	; 0x3e
 8008442:	d921      	bls.n	8008488 <USB_EPStartXfer+0xc40>
 8008444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008448:	095b      	lsrs	r3, r3, #5
 800844a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800844e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008452:	f003 031f 	and.w	r3, r3, #31
 8008456:	2b00      	cmp	r3, #0
 8008458:	d104      	bne.n	8008464 <USB_EPStartXfer+0xc1c>
 800845a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800845e:	3b01      	subs	r3, #1
 8008460:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	b29a      	uxth	r2, r3
 800846a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800846e:	b29b      	uxth	r3, r3
 8008470:	029b      	lsls	r3, r3, #10
 8008472:	b29b      	uxth	r3, r3
 8008474:	4313      	orrs	r3, r2
 8008476:	b29b      	uxth	r3, r3
 8008478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008480:	b29a      	uxth	r2, r3
 8008482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008484:	801a      	strh	r2, [r3, #0]
 8008486:	e05c      	b.n	8008542 <USB_EPStartXfer+0xcfa>
 8008488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800848c:	2b00      	cmp	r3, #0
 800848e:	d10a      	bne.n	80084a6 <USB_EPStartXfer+0xc5e>
 8008490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	b29b      	uxth	r3, r3
 8008496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800849a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800849e:	b29a      	uxth	r2, r3
 80084a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	e04d      	b.n	8008542 <USB_EPStartXfer+0xcfa>
 80084a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084aa:	085b      	lsrs	r3, r3, #1
 80084ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d004      	beq.n	80084c6 <USB_EPStartXfer+0xc7e>
 80084bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084c0:	3301      	adds	r3, #1
 80084c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80084c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	029b      	lsls	r3, r3, #10
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	4313      	orrs	r3, r2
 80084d8:	b29a      	uxth	r2, r3
 80084da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	e030      	b.n	8008542 <USB_EPStartXfer+0xcfa>
 80084e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d128      	bne.n	8008542 <USB_EPStartXfer+0xcfa>
 80084f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800850c:	b29b      	uxth	r3, r3
 800850e:	461a      	mov	r2, r3
 8008510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008514:	4413      	add	r3, r2
 8008516:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800851a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	011a      	lsls	r2, r3, #4
 8008528:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800852c:	4413      	add	r3, r2
 800852e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008532:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800853a:	b29a      	uxth	r2, r3
 800853c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008540:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	891b      	ldrh	r3, [r3, #8]
 800854e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6959      	ldr	r1, [r3, #20]
 800855e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008562:	b29b      	uxth	r3, r3
 8008564:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008568:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800856c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008570:	6800      	ldr	r0, [r0, #0]
 8008572:	f000 fe58 	bl	8009226 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800857a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	b29b      	uxth	r3, r3
 8008594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800859c:	817b      	strh	r3, [r7, #10]
 800859e:	897b      	ldrh	r3, [r7, #10]
 80085a0:	f083 0310 	eor.w	r3, r3, #16
 80085a4:	817b      	strh	r3, [r7, #10]
 80085a6:	897b      	ldrh	r3, [r7, #10]
 80085a8:	f083 0320 	eor.w	r3, r3, #32
 80085ac:	817b      	strh	r3, [r7, #10]
 80085ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	441a      	add	r2, r3
 80085c8:	897b      	ldrh	r3, [r7, #10]
 80085ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085da:	b29b      	uxth	r3, r3
 80085dc:	8013      	strh	r3, [r2, #0]
 80085de:	f000 bcde 	b.w	8008f9e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80085e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	7b1b      	ldrb	r3, [r3, #12]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f040 80bb 	bne.w	800876a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80085f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	699a      	ldr	r2, [r3, #24]
 8008600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	429a      	cmp	r2, r3
 800860e:	d917      	bls.n	8008640 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	699a      	ldr	r2, [r3, #24]
 800862c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008630:	1ad2      	subs	r2, r2, r3
 8008632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	619a      	str	r2, [r3, #24]
 800863e:	e00e      	b.n	800865e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2200      	movs	r2, #0
 800865c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800865e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800866c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800867a:	b29b      	uxth	r3, r3
 800867c:	461a      	mov	r2, r3
 800867e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008682:	4413      	add	r3, r2
 8008684:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	011a      	lsls	r2, r3, #4
 8008696:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800869a:	4413      	add	r3, r2
 800869c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80086a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086b6:	801a      	strh	r2, [r3, #0]
 80086b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086bc:	2b3e      	cmp	r3, #62	; 0x3e
 80086be:	d924      	bls.n	800870a <USB_EPStartXfer+0xec2>
 80086c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c4:	095b      	lsrs	r3, r3, #5
 80086c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ce:	f003 031f 	and.w	r3, r3, #31
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d104      	bne.n	80086e0 <USB_EPStartXfer+0xe98>
 80086d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086da:	3b01      	subs	r3, #1
 80086dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	029b      	lsls	r3, r3, #10
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	4313      	orrs	r3, r2
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086fe:	b29a      	uxth	r2, r3
 8008700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008704:	801a      	strh	r2, [r3, #0]
 8008706:	f000 bc10 	b.w	8008f2a <USB_EPStartXfer+0x16e2>
 800870a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10c      	bne.n	800872c <USB_EPStartXfer+0xee4>
 8008712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	b29b      	uxth	r3, r3
 800871a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800871e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008722:	b29a      	uxth	r2, r3
 8008724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008728:	801a      	strh	r2, [r3, #0]
 800872a:	e3fe      	b.n	8008f2a <USB_EPStartXfer+0x16e2>
 800872c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	d004      	beq.n	800874c <USB_EPStartXfer+0xf04>
 8008742:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008746:	3301      	adds	r3, #1
 8008748:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800874c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	b29a      	uxth	r2, r3
 8008754:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008758:	b29b      	uxth	r3, r3
 800875a:	029b      	lsls	r3, r3, #10
 800875c:	b29b      	uxth	r3, r3
 800875e:	4313      	orrs	r3, r2
 8008760:	b29a      	uxth	r2, r3
 8008762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008766:	801a      	strh	r2, [r3, #0]
 8008768:	e3df      	b.n	8008f2a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800876a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800876e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	78db      	ldrb	r3, [r3, #3]
 8008776:	2b02      	cmp	r3, #2
 8008778:	f040 8218 	bne.w	8008bac <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800877c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	785b      	ldrb	r3, [r3, #1]
 8008788:	2b00      	cmp	r3, #0
 800878a:	f040 809d 	bne.w	80088c8 <USB_EPStartXfer+0x1080>
 800878e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800879c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	461a      	mov	r2, r3
 80087ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087b2:	4413      	add	r3, r2
 80087b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	011a      	lsls	r2, r3, #4
 80087c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ca:	4413      	add	r3, r2
 80087cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087e6:	801a      	strh	r2, [r3, #0]
 80087e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	2b3e      	cmp	r3, #62	; 0x3e
 80087f6:	d92b      	bls.n	8008850 <USB_EPStartXfer+0x1008>
 80087f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	095b      	lsrs	r3, r3, #5
 8008806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800880a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800880e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	2b00      	cmp	r3, #0
 800881c:	d104      	bne.n	8008828 <USB_EPStartXfer+0xfe0>
 800881e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008822:	3b01      	subs	r3, #1
 8008824:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008828:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	b29a      	uxth	r2, r3
 8008830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008834:	b29b      	uxth	r3, r3
 8008836:	029b      	lsls	r3, r3, #10
 8008838:	b29b      	uxth	r3, r3
 800883a:	4313      	orrs	r3, r2
 800883c:	b29b      	uxth	r3, r3
 800883e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008846:	b29a      	uxth	r2, r3
 8008848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800884c:	801a      	strh	r2, [r3, #0]
 800884e:	e070      	b.n	8008932 <USB_EPStartXfer+0x10ea>
 8008850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10c      	bne.n	800887a <USB_EPStartXfer+0x1032>
 8008860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	b29b      	uxth	r3, r3
 8008868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800886c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008870:	b29a      	uxth	r2, r3
 8008872:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008876:	801a      	strh	r2, [r3, #0]
 8008878:	e05b      	b.n	8008932 <USB_EPStartXfer+0x10ea>
 800887a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	085b      	lsrs	r3, r3, #1
 8008888:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800888c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	d004      	beq.n	80088aa <USB_EPStartXfer+0x1062>
 80088a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a4:	3301      	adds	r3, #1
 80088a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	029b      	lsls	r3, r3, #10
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	4313      	orrs	r3, r2
 80088be:	b29a      	uxth	r2, r3
 80088c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088c4:	801a      	strh	r2, [r3, #0]
 80088c6:	e034      	b.n	8008932 <USB_EPStartXfer+0x10ea>
 80088c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	785b      	ldrb	r3, [r3, #1]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d12c      	bne.n	8008932 <USB_EPStartXfer+0x10ea>
 80088d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	461a      	mov	r2, r3
 80088f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088fc:	4413      	add	r3, r2
 80088fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	011a      	lsls	r2, r3, #4
 8008910:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008914:	4413      	add	r3, r2
 8008916:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800891a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800891e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	b29a      	uxth	r2, r3
 800892c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008930:	801a      	strh	r2, [r3, #0]
 8008932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	785b      	ldrb	r3, [r3, #1]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f040 809d 	bne.w	8008a8c <USB_EPStartXfer+0x1244>
 8008952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008964:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800896e:	b29b      	uxth	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008976:	4413      	add	r3, r2
 8008978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800897c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	011a      	lsls	r2, r3, #4
 800898a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800898e:	4413      	add	r3, r2
 8008990:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089aa:	801a      	strh	r2, [r3, #0]
 80089ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	2b3e      	cmp	r3, #62	; 0x3e
 80089ba:	d92b      	bls.n	8008a14 <USB_EPStartXfer+0x11cc>
 80089bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	095b      	lsrs	r3, r3, #5
 80089ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80089ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	f003 031f 	and.w	r3, r3, #31
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d104      	bne.n	80089ec <USB_EPStartXfer+0x11a4>
 80089e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089e6:	3b01      	subs	r3, #1
 80089e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80089ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	029b      	lsls	r3, r3, #10
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	4313      	orrs	r3, r2
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a10:	801a      	strh	r2, [r3, #0]
 8008a12:	e069      	b.n	8008ae8 <USB_EPStartXfer+0x12a0>
 8008a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10c      	bne.n	8008a3e <USB_EPStartXfer+0x11f6>
 8008a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a3a:	801a      	strh	r2, [r3, #0]
 8008a3c:	e054      	b.n	8008ae8 <USB_EPStartXfer+0x12a0>
 8008a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	085b      	lsrs	r3, r3, #1
 8008a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	f003 0301 	and.w	r3, r3, #1
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <USB_EPStartXfer+0x1226>
 8008a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a68:	3301      	adds	r3, #1
 8008a6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	029b      	lsls	r3, r3, #10
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	4313      	orrs	r3, r2
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a88:	801a      	strh	r2, [r3, #0]
 8008a8a:	e02d      	b.n	8008ae8 <USB_EPStartXfer+0x12a0>
 8008a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	785b      	ldrb	r3, [r3, #1]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d125      	bne.n	8008ae8 <USB_EPStartXfer+0x12a0>
 8008a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	011a      	lsls	r2, r3, #4
 8008ac6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008aca:	4413      	add	r3, r2
 8008acc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	b29a      	uxth	r2, r3
 8008ae2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ae6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 8218 	beq.w	8008f2a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008b1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d005      	beq.n	8008b32 <USB_EPStartXfer+0x12ea>
 8008b26:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10d      	bne.n	8008b4e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008b32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f040 81f5 	bne.w	8008f2a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008b40:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f040 81ee 	bne.w	8008f2a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	881b      	ldrh	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b74:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	441a      	add	r2, r3
 8008b92:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	8013      	strh	r3, [r2, #0]
 8008baa:	e1be      	b.n	8008f2a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	78db      	ldrb	r3, [r3, #3]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	f040 81b4 	bne.w	8008f26 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	699a      	ldr	r2, [r3, #24]
 8008bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d917      	bls.n	8008c0a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699a      	ldr	r2, [r3, #24]
 8008bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bfa:	1ad2      	subs	r2, r2, r3
 8008bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	619a      	str	r2, [r3, #24]
 8008c08:	e00e      	b.n	8008c28 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2200      	movs	r2, #0
 8008c26:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	785b      	ldrb	r3, [r3, #1]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f040 8085 	bne.w	8008d44 <USB_EPStartXfer+0x14fc>
 8008c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	461a      	mov	r2, r3
 8008c5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c5e:	4413      	add	r3, r2
 8008c60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	011a      	lsls	r2, r3, #4
 8008c72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008c76:	4413      	add	r3, r2
 8008c78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c92:	801a      	strh	r2, [r3, #0]
 8008c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c98:	2b3e      	cmp	r3, #62	; 0x3e
 8008c9a:	d923      	bls.n	8008ce4 <USB_EPStartXfer+0x149c>
 8008c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca0:	095b      	lsrs	r3, r3, #5
 8008ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008caa:	f003 031f 	and.w	r3, r3, #31
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d104      	bne.n	8008cbc <USB_EPStartXfer+0x1474>
 8008cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	029b      	lsls	r3, r3, #10
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ce0:	801a      	strh	r2, [r3, #0]
 8008ce2:	e060      	b.n	8008da6 <USB_EPStartXfer+0x155e>
 8008ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10c      	bne.n	8008d06 <USB_EPStartXfer+0x14be>
 8008cec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d02:	801a      	strh	r2, [r3, #0]
 8008d04:	e04f      	b.n	8008da6 <USB_EPStartXfer+0x155e>
 8008d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d0a:	085b      	lsrs	r3, r3, #1
 8008d0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d004      	beq.n	8008d26 <USB_EPStartXfer+0x14de>
 8008d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d20:	3301      	adds	r3, #1
 8008d22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	029b      	lsls	r3, r3, #10
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008d40:	801a      	strh	r2, [r3, #0]
 8008d42:	e030      	b.n	8008da6 <USB_EPStartXfer+0x155e>
 8008d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d128      	bne.n	8008da6 <USB_EPStartXfer+0x155e>
 8008d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	461a      	mov	r2, r3
 8008d74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d78:	4413      	add	r3, r2
 8008d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	011a      	lsls	r2, r3, #4
 8008d8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d90:	4413      	add	r3, r2
 8008d92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008da4:	801a      	strh	r2, [r3, #0]
 8008da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	785b      	ldrb	r3, [r3, #1]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f040 8085 	bne.w	8008ed0 <USB_EPStartXfer+0x1688>
 8008dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	461a      	mov	r2, r3
 8008de6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008dea:	4413      	add	r3, r2
 8008dec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	011a      	lsls	r2, r3, #4
 8008dfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e02:	4413      	add	r3, r2
 8008e04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e1e:	801a      	strh	r2, [r3, #0]
 8008e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e24:	2b3e      	cmp	r3, #62	; 0x3e
 8008e26:	d923      	bls.n	8008e70 <USB_EPStartXfer+0x1628>
 8008e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e2c:	095b      	lsrs	r3, r3, #5
 8008e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e36:	f003 031f 	and.w	r3, r3, #31
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d104      	bne.n	8008e48 <USB_EPStartXfer+0x1600>
 8008e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e42:	3b01      	subs	r3, #1
 8008e44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	029b      	lsls	r3, r3, #10
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e6c:	801a      	strh	r2, [r3, #0]
 8008e6e:	e05c      	b.n	8008f2a <USB_EPStartXfer+0x16e2>
 8008e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10c      	bne.n	8008e92 <USB_EPStartXfer+0x164a>
 8008e78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e8e:	801a      	strh	r2, [r3, #0]
 8008e90:	e04b      	b.n	8008f2a <USB_EPStartXfer+0x16e2>
 8008e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e96:	085b      	lsrs	r3, r3, #1
 8008e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d004      	beq.n	8008eb2 <USB_EPStartXfer+0x166a>
 8008ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008eac:	3301      	adds	r3, #1
 8008eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008eb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	029b      	lsls	r3, r3, #10
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ecc:	801a      	strh	r2, [r3, #0]
 8008ece:	e02c      	b.n	8008f2a <USB_EPStartXfer+0x16e2>
 8008ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	785b      	ldrb	r3, [r3, #1]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d124      	bne.n	8008f2a <USB_EPStartXfer+0x16e2>
 8008ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	011a      	lsls	r2, r3, #4
 8008f0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008f0e:	4413      	add	r3, r2
 8008f10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f22:	801a      	strh	r2, [r3, #0]
 8008f24:	e001      	b.n	8008f2a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e03a      	b.n	8008fa0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f50:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008f54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008f60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	441a      	add	r2, r3
 8008f86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b085      	sub	sp, #20
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	785b      	ldrb	r3, [r3, #1]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d020      	beq.n	8008ffe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fd2:	81bb      	strh	r3, [r7, #12]
 8008fd4:	89bb      	ldrh	r3, [r7, #12]
 8008fd6:	f083 0310 	eor.w	r3, r3, #16
 8008fda:	81bb      	strh	r3, [r7, #12]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	441a      	add	r2, r3
 8008fe6:	89bb      	ldrh	r3, [r7, #12]
 8008fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	8013      	strh	r3, [r2, #0]
 8008ffc:	e01f      	b.n	800903e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	881b      	ldrh	r3, [r3, #0]
 800900a:	b29b      	uxth	r3, r3
 800900c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009014:	81fb      	strh	r3, [r7, #14]
 8009016:	89fb      	ldrh	r3, [r7, #14]
 8009018:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800901c:	81fb      	strh	r3, [r7, #14]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	441a      	add	r2, r3
 8009028:	89fb      	ldrh	r3, [r7, #14]
 800902a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800902e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903a:	b29b      	uxth	r3, r3
 800903c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	bc80      	pop	{r7}
 8009048:	4770      	bx	lr

0800904a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800904a:	b480      	push	{r7}
 800904c:	b087      	sub	sp, #28
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	7b1b      	ldrb	r3, [r3, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	f040 809d 	bne.w	8009198 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d04c      	beq.n	8009100 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	823b      	strh	r3, [r7, #16]
 8009074:	8a3b      	ldrh	r3, [r7, #16]
 8009076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907a:	2b00      	cmp	r3, #0
 800907c:	d01b      	beq.n	80090b6 <USB_EPClearStall+0x6c>
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	b29b      	uxth	r3, r3
 800908c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009094:	81fb      	strh	r3, [r7, #14]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	441a      	add	r2, r3
 80090a0:	89fb      	ldrh	r3, [r7, #14]
 80090a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	78db      	ldrb	r3, [r3, #3]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d06c      	beq.n	8009198 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090d4:	81bb      	strh	r3, [r7, #12]
 80090d6:	89bb      	ldrh	r3, [r7, #12]
 80090d8:	f083 0320 	eor.w	r3, r3, #32
 80090dc:	81bb      	strh	r3, [r7, #12]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	441a      	add	r2, r3
 80090e8:	89bb      	ldrh	r3, [r7, #12]
 80090ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	8013      	strh	r3, [r2, #0]
 80090fe:	e04b      	b.n	8009198 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	82fb      	strh	r3, [r7, #22]
 800910e:	8afb      	ldrh	r3, [r7, #22]
 8009110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01b      	beq.n	8009150 <USB_EPClearStall+0x106>
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800912a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912e:	82bb      	strh	r3, [r7, #20]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	441a      	add	r2, r3
 800913a:	8abb      	ldrh	r3, [r7, #20]
 800913c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800914c:	b29b      	uxth	r3, r3
 800914e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	b29b      	uxth	r3, r3
 800915e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009166:	827b      	strh	r3, [r7, #18]
 8009168:	8a7b      	ldrh	r3, [r7, #18]
 800916a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800916e:	827b      	strh	r3, [r7, #18]
 8009170:	8a7b      	ldrh	r3, [r7, #18]
 8009172:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009176:	827b      	strh	r3, [r7, #18]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	441a      	add	r2, r3
 8009182:	8a7b      	ldrh	r3, [r7, #18]
 8009184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800918c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009194:	b29b      	uxth	r3, r3
 8009196:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	bc80      	pop	{r7}
 80091a2:	4770      	bx	lr

080091a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d103      	bne.n	80091be <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2280      	movs	r2, #128	; 0x80
 80091ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bc80      	pop	{r7}
 80091c8:	4770      	bx	lr

080091ca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b083      	sub	sp, #12
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	bc80      	pop	{r7}
 80091dc:	4770      	bx	lr

080091de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bc80      	pop	{r7}
 80091f0:	4770      	bx	lr

080091f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80091f2:	b480      	push	{r7}
 80091f4:	b085      	sub	sp, #20
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009200:	b29b      	uxth	r3, r3
 8009202:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009204:	68fb      	ldr	r3, [r7, #12]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	bc80      	pop	{r7}
 800920e:	4770      	bx	lr

08009210 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	bc80      	pop	{r7}
 8009224:	4770      	bx	lr

08009226 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009226:	b480      	push	{r7}
 8009228:	b08b      	sub	sp, #44	; 0x2c
 800922a:	af00      	add	r7, sp, #0
 800922c:	60f8      	str	r0, [r7, #12]
 800922e:	60b9      	str	r1, [r7, #8]
 8009230:	4611      	mov	r1, r2
 8009232:	461a      	mov	r2, r3
 8009234:	460b      	mov	r3, r1
 8009236:	80fb      	strh	r3, [r7, #6]
 8009238:	4613      	mov	r3, r2
 800923a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800923c:	88bb      	ldrh	r3, [r7, #4]
 800923e:	3301      	adds	r3, #1
 8009240:	085b      	lsrs	r3, r3, #1
 8009242:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800924c:	88fb      	ldrh	r3, [r7, #6]
 800924e:	005a      	lsls	r2, r3, #1
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009258:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
 800925e:	e01e      	b.n	800929e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	3301      	adds	r3, #1
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	021b      	lsls	r3, r3, #8
 800926e:	b21a      	sxth	r2, r3
 8009270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009274:	4313      	orrs	r3, r2
 8009276:	b21b      	sxth	r3, r3
 8009278:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	8a7a      	ldrh	r2, [r7, #18]
 800927e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009280:	6a3b      	ldr	r3, [r7, #32]
 8009282:	3302      	adds	r3, #2
 8009284:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	3302      	adds	r3, #2
 800928a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	3301      	adds	r3, #1
 8009290:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	3301      	adds	r3, #1
 8009296:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	3b01      	subs	r3, #1
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1dd      	bne.n	8009260 <USB_WritePMA+0x3a>
  }
}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop
 80092a8:	372c      	adds	r7, #44	; 0x2c
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bc80      	pop	{r7}
 80092ae:	4770      	bx	lr

080092b0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b08b      	sub	sp, #44	; 0x2c
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	4611      	mov	r1, r2
 80092bc:	461a      	mov	r2, r3
 80092be:	460b      	mov	r3, r1
 80092c0:	80fb      	strh	r3, [r7, #6]
 80092c2:	4613      	mov	r3, r2
 80092c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80092c6:	88bb      	ldrh	r3, [r7, #4]
 80092c8:	085b      	lsrs	r3, r3, #1
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80092d6:	88fb      	ldrh	r3, [r7, #6]
 80092d8:	005a      	lsls	r2, r3, #1
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092e2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24
 80092e8:	e01b      	b.n	8009322 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	881b      	ldrh	r3, [r3, #0]
 80092ee:	b29b      	uxth	r3, r3
 80092f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	3302      	adds	r3, #2
 80092f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	3301      	adds	r3, #1
 8009304:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	0a1b      	lsrs	r3, r3, #8
 800930a:	b2da      	uxtb	r2, r3
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	3301      	adds	r3, #1
 8009314:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	3302      	adds	r3, #2
 800931a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	3b01      	subs	r3, #1
 8009320:	627b      	str	r3, [r7, #36]	; 0x24
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e0      	bne.n	80092ea <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009328:	88bb      	ldrh	r3, [r7, #4]
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	b29b      	uxth	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	d007      	beq.n	8009344 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b29b      	uxth	r3, r3
 800933a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	b2da      	uxtb	r2, r3
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	701a      	strb	r2, [r3, #0]
  }
}
 8009344:	bf00      	nop
 8009346:	372c      	adds	r7, #44	; 0x2c
 8009348:	46bd      	mov	sp, r7
 800934a:	bc80      	pop	{r7}
 800934c:	4770      	bx	lr

0800934e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	7c1b      	ldrb	r3, [r3, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d115      	bne.n	8009392 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800936a:	2202      	movs	r2, #2
 800936c:	2181      	movs	r1, #129	; 0x81
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f001 fe9d 	bl	800b0ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800937a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800937e:	2202      	movs	r2, #2
 8009380:	2101      	movs	r1, #1
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 fe93 	bl	800b0ae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009390:	e012      	b.n	80093b8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009392:	2340      	movs	r3, #64	; 0x40
 8009394:	2202      	movs	r2, #2
 8009396:	2181      	movs	r1, #129	; 0x81
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 fe88 	bl	800b0ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80093a4:	2340      	movs	r3, #64	; 0x40
 80093a6:	2202      	movs	r2, #2
 80093a8:	2101      	movs	r1, #1
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f001 fe7f 	bl	800b0ae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80093b8:	2308      	movs	r3, #8
 80093ba:	2203      	movs	r2, #3
 80093bc:	2182      	movs	r1, #130	; 0x82
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f001 fe75 	bl	800b0ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80093ca:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80093ce:	f001 ff95 	bl	800b2fc <USBD_static_malloc>
 80093d2:	4602      	mov	r2, r0
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d102      	bne.n	80093ea <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80093e4:	2301      	movs	r3, #1
 80093e6:	73fb      	strb	r3, [r7, #15]
 80093e8:	e026      	b.n	8009438 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2200      	movs	r2, #0
 8009400:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2200      	movs	r2, #0
 8009408:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	7c1b      	ldrb	r3, [r3, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d109      	bne.n	8009428 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800941a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800941e:	2101      	movs	r1, #1
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f001 ff35 	bl	800b290 <USBD_LL_PrepareReceive>
 8009426:	e007      	b.n	8009438 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800942e:	2340      	movs	r3, #64	; 0x40
 8009430:	2101      	movs	r1, #1
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f001 ff2c 	bl	800b290 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009438:	7bfb      	ldrb	r3, [r7, #15]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	460b      	mov	r3, r1
 800944c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800944e:	2300      	movs	r3, #0
 8009450:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009452:	2181      	movs	r1, #129	; 0x81
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 fe50 	bl	800b0fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009460:	2101      	movs	r1, #1
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f001 fe49 	bl	800b0fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009470:	2182      	movs	r1, #130	; 0x82
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f001 fe41 	bl	800b0fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00e      	beq.n	80094a6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009498:	4618      	mov	r0, r3
 800949a:	f001 ff3b 	bl	800b314 <USBD_static_free>
    pdev->pClassData = NULL;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d039      	beq.n	800954e <USBD_CDC_Setup+0x9e>
 80094da:	2b20      	cmp	r3, #32
 80094dc:	d17f      	bne.n	80095de <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	88db      	ldrh	r3, [r3, #6]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d029      	beq.n	800953a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	b25b      	sxtb	r3, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	da11      	bge.n	8009514 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80094fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	88d2      	ldrh	r2, [r2, #6]
 8009502:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009504:	6939      	ldr	r1, [r7, #16]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	88db      	ldrh	r3, [r3, #6]
 800950a:	461a      	mov	r2, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 fa0a 	bl	800a926 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009512:	e06b      	b.n	80095ec <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	785a      	ldrb	r2, [r3, #1]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	88db      	ldrh	r3, [r3, #6]
 8009522:	b2da      	uxtb	r2, r3
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800952a:	6939      	ldr	r1, [r7, #16]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	88db      	ldrh	r3, [r3, #6]
 8009530:	461a      	mov	r2, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 fa25 	bl	800a982 <USBD_CtlPrepareRx>
      break;
 8009538:	e058      	b.n	80095ec <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	7850      	ldrb	r0, [r2, #1]
 8009546:	2200      	movs	r2, #0
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	4798      	blx	r3
      break;
 800954c:	e04e      	b.n	80095ec <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	785b      	ldrb	r3, [r3, #1]
 8009552:	2b0b      	cmp	r3, #11
 8009554:	d02e      	beq.n	80095b4 <USBD_CDC_Setup+0x104>
 8009556:	2b0b      	cmp	r3, #11
 8009558:	dc38      	bgt.n	80095cc <USBD_CDC_Setup+0x11c>
 800955a:	2b00      	cmp	r3, #0
 800955c:	d002      	beq.n	8009564 <USBD_CDC_Setup+0xb4>
 800955e:	2b0a      	cmp	r3, #10
 8009560:	d014      	beq.n	800958c <USBD_CDC_Setup+0xdc>
 8009562:	e033      	b.n	80095cc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800956a:	2b03      	cmp	r3, #3
 800956c:	d107      	bne.n	800957e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800956e:	f107 030c 	add.w	r3, r7, #12
 8009572:	2202      	movs	r2, #2
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f001 f9d5 	bl	800a926 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800957c:	e02e      	b.n	80095dc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f001 f966 	bl	800a852 <USBD_CtlError>
            ret = USBD_FAIL;
 8009586:	2302      	movs	r3, #2
 8009588:	75fb      	strb	r3, [r7, #23]
          break;
 800958a:	e027      	b.n	80095dc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009592:	2b03      	cmp	r3, #3
 8009594:	d107      	bne.n	80095a6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009596:	f107 030f 	add.w	r3, r7, #15
 800959a:	2201      	movs	r2, #1
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f001 f9c1 	bl	800a926 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095a4:	e01a      	b.n	80095dc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f001 f952 	bl	800a852 <USBD_CtlError>
            ret = USBD_FAIL;
 80095ae:	2302      	movs	r3, #2
 80095b0:	75fb      	strb	r3, [r7, #23]
          break;
 80095b2:	e013      	b.n	80095dc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d00d      	beq.n	80095da <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 f946 	bl	800a852 <USBD_CtlError>
            ret = USBD_FAIL;
 80095c6:	2302      	movs	r3, #2
 80095c8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80095ca:	e006      	b.n	80095da <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f001 f93f 	bl	800a852 <USBD_CtlError>
          ret = USBD_FAIL;
 80095d4:	2302      	movs	r3, #2
 80095d6:	75fb      	strb	r3, [r7, #23]
          break;
 80095d8:	e000      	b.n	80095dc <USBD_CDC_Setup+0x12c>
          break;
 80095da:	bf00      	nop
      }
      break;
 80095dc:	e006      	b.n	80095ec <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f001 f936 	bl	800a852 <USBD_CtlError>
      ret = USBD_FAIL;
 80095e6:	2302      	movs	r3, #2
 80095e8:	75fb      	strb	r3, [r7, #23]
      break;
 80095ea:	bf00      	nop
  }

  return ret;
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3718      	adds	r7, #24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	460b      	mov	r3, r1
 8009600:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009608:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009610:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009618:	2b00      	cmp	r3, #0
 800961a:	d03a      	beq.n	8009692 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800961c:	78fa      	ldrb	r2, [r7, #3]
 800961e:	6879      	ldr	r1, [r7, #4]
 8009620:	4613      	mov	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	440b      	add	r3, r1
 800962a:	331c      	adds	r3, #28
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d029      	beq.n	8009686 <USBD_CDC_DataIn+0x90>
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	331c      	adds	r3, #28
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	78f9      	ldrb	r1, [r7, #3]
 8009646:	68b8      	ldr	r0, [r7, #8]
 8009648:	460b      	mov	r3, r1
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	440b      	add	r3, r1
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	4403      	add	r3, r0
 8009652:	3338      	adds	r3, #56	; 0x38
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	fbb2 f1f3 	udiv	r1, r2, r3
 800965a:	fb01 f303 	mul.w	r3, r1, r3
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	2b00      	cmp	r3, #0
 8009662:	d110      	bne.n	8009686 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009664:	78fa      	ldrb	r2, [r7, #3]
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	331c      	adds	r3, #28
 8009674:	2200      	movs	r2, #0
 8009676:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009678:	78f9      	ldrb	r1, [r7, #3]
 800967a:	2300      	movs	r3, #0
 800967c:	2200      	movs	r2, #0
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 fde3 	bl	800b24a <USBD_LL_Transmit>
 8009684:	e003      	b.n	800968e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	e000      	b.n	8009694 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009692:	2302      	movs	r3, #2
  }
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f001 fe0e 	bl	800b2d6 <USBD_LL_GetRxDataSize>
 80096ba:	4602      	mov	r2, r0
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00d      	beq.n	80096e8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80096e0:	4611      	mov	r1, r2
 80096e2:	4798      	blx	r3

    return USBD_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	e000      	b.n	80096ea <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80096e8:	2302      	movs	r3, #2
  }
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009700:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009708:	2b00      	cmp	r3, #0
 800970a:	d015      	beq.n	8009738 <USBD_CDC_EP0_RxReady+0x46>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009712:	2bff      	cmp	r3, #255	; 0xff
 8009714:	d010      	beq.n	8009738 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009724:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800972c:	b292      	uxth	r2, r2
 800972e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	22ff      	movs	r2, #255	; 0xff
 8009734:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2243      	movs	r2, #67	; 0x43
 8009750:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009752:	4b03      	ldr	r3, [pc, #12]	; (8009760 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	bc80      	pop	{r7}
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	200000b4 	.word	0x200000b4

08009764 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2243      	movs	r2, #67	; 0x43
 8009770:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009772:	4b03      	ldr	r3, [pc, #12]	; (8009780 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	bc80      	pop	{r7}
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	20000070 	.word	0x20000070

08009784 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2243      	movs	r2, #67	; 0x43
 8009790:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009792:	4b03      	ldr	r3, [pc, #12]	; (80097a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009794:	4618      	mov	r0, r3
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	bc80      	pop	{r7}
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	200000f8 	.word	0x200000f8

080097a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	220a      	movs	r2, #10
 80097b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80097b2:	4b03      	ldr	r3, [pc, #12]	; (80097c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bc80      	pop	{r7}
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	2000002c 	.word	0x2000002c

080097c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80097ce:	2302      	movs	r3, #2
 80097d0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bc80      	pop	{r7}
 80097ee:	4770      	bx	lr

080097f0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	4613      	mov	r3, r2
 80097fc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009804:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800980e:	88fa      	ldrh	r2, [r7, #6]
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	371c      	adds	r7, #28
 800981c:	46bd      	mov	sp, r7
 800981e:	bc80      	pop	{r7}
 8009820:	4770      	bx	lr

08009822 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009822:	b480      	push	{r7}
 8009824:	b085      	sub	sp, #20
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009832:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	bc80      	pop	{r7}
 8009846:	4770      	bx	lr

08009848 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009856:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800985e:	2b00      	cmp	r3, #0
 8009860:	d01c      	beq.n	800989c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009868:	2b00      	cmp	r3, #0
 800986a:	d115      	bne.n	8009898 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2201      	movs	r2, #1
 8009870:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800988a:	b29b      	uxth	r3, r3
 800988c:	2181      	movs	r1, #129	; 0x81
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f001 fcdb 	bl	800b24a <USBD_LL_Transmit>

      return USBD_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	e002      	b.n	800989e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009898:	2301      	movs	r3, #1
 800989a:	e000      	b.n	800989e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800989c:	2302      	movs	r3, #2
  }
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d017      	beq.n	80098f0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	7c1b      	ldrb	r3, [r3, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d109      	bne.n	80098dc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098d2:	2101      	movs	r1, #1
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f001 fcdb 	bl	800b290 <USBD_LL_PrepareReceive>
 80098da:	e007      	b.n	80098ec <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098e2:	2340      	movs	r3, #64	; 0x40
 80098e4:	2101      	movs	r1, #1
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 fcd2 	bl	800b290 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	e000      	b.n	80098f2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80098f0:	2302      	movs	r3, #2
  }
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	60f8      	str	r0, [r7, #12]
 8009902:	60b9      	str	r1, [r7, #8]
 8009904:	4613      	mov	r3, r2
 8009906:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800990e:	2302      	movs	r3, #2
 8009910:	e01a      	b.n	8009948 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009918:	2b00      	cmp	r3, #0
 800991a:	d003      	beq.n	8009924 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	79fa      	ldrb	r2, [r7, #7]
 800993e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f001 fb3f 	bl	800afc4 <USBD_LL_Init>

  return USBD_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d006      	beq.n	8009972 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	73fb      	strb	r3, [r7, #15]
 8009970:	e001      	b.n	8009976 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009972:	2302      	movs	r3, #2
 8009974:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009976:	7bfb      	ldrb	r3, [r7, #15]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	bc80      	pop	{r7}
 8009980:	4770      	bx	lr

08009982 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b082      	sub	sp, #8
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 fb74 	bl	800b078 <USBD_LL_Start>

  return USBD_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800999a:	b480      	push	{r7}
 800999c:	b083      	sub	sp, #12
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr

080099ae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	460b      	mov	r3, r1
 80099b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80099ba:	2302      	movs	r3, #2
 80099bc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00c      	beq.n	80099e2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	78fa      	ldrb	r2, [r7, #3]
 80099d2:	4611      	mov	r1, r2
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	4798      	blx	r3
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	78fa      	ldrb	r2, [r7, #3]
 8009a02:	4611      	mov	r1, r2
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	4798      	blx	r3

  return USBD_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b082      	sub	sp, #8
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 fed8 	bl	800a7da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009a38:	461a      	mov	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a46:	f003 031f 	and.w	r3, r3, #31
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d016      	beq.n	8009a7c <USBD_LL_SetupStage+0x6a>
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d81c      	bhi.n	8009a8c <USBD_LL_SetupStage+0x7a>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <USBD_LL_SetupStage+0x4a>
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d008      	beq.n	8009a6c <USBD_LL_SetupStage+0x5a>
 8009a5a:	e017      	b.n	8009a8c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f9cb 	bl	8009e00 <USBD_StdDevReq>
      break;
 8009a6a:	e01a      	b.n	8009aa2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fa2d 	bl	8009ed4 <USBD_StdItfReq>
      break;
 8009a7a:	e012      	b.n	8009aa2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fa6d 	bl	8009f64 <USBD_StdEPReq>
      break;
 8009a8a:	e00a      	b.n	8009aa2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 fb4c 	bl	800b138 <USBD_LL_StallEP>
      break;
 8009aa0:	bf00      	nop
  }

  return USBD_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	607a      	str	r2, [r7, #4]
 8009ab8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009aba:	7afb      	ldrb	r3, [r7, #11]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d14b      	bne.n	8009b58 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009ac6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d134      	bne.n	8009b3c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	68da      	ldr	r2, [r3, #12]
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d919      	bls.n	8009b12 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	1ad2      	subs	r2, r2, r3
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	68da      	ldr	r2, [r3, #12]
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d203      	bcs.n	8009b00 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	e002      	b.n	8009b06 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	461a      	mov	r2, r3
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 ff57 	bl	800a9be <USBD_CtlContinueRx>
 8009b10:	e038      	b.n	8009b84 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00a      	beq.n	8009b34 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d105      	bne.n	8009b34 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 ff54 	bl	800a9e2 <USBD_CtlSendStatus>
 8009b3a:	e023      	b.n	8009b84 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b42:	2b05      	cmp	r3, #5
 8009b44:	d11e      	bne.n	8009b84 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009b4e:	2100      	movs	r1, #0
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f001 faf1 	bl	800b138 <USBD_LL_StallEP>
 8009b56:	e015      	b.n	8009b84 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00d      	beq.n	8009b80 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d108      	bne.n	8009b80 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	7afa      	ldrb	r2, [r7, #11]
 8009b78:	4611      	mov	r1, r2
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	4798      	blx	r3
 8009b7e:	e001      	b.n	8009b84 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009b80:	2302      	movs	r3, #2
 8009b82:	e000      	b.n	8009b86 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b086      	sub	sp, #24
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	460b      	mov	r3, r1
 8009b98:	607a      	str	r2, [r7, #4]
 8009b9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b9c:	7afb      	ldrb	r3, [r7, #11]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d17f      	bne.n	8009ca2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3314      	adds	r3, #20
 8009ba6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d15c      	bne.n	8009c6c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d915      	bls.n	8009bea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	1ad2      	subs	r2, r2, r3
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	6879      	ldr	r1, [r7, #4]
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 fec1 	bl	800a95e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bdc:	2300      	movs	r3, #0
 8009bde:	2200      	movs	r2, #0
 8009be0:	2100      	movs	r1, #0
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f001 fb54 	bl	800b290 <USBD_LL_PrepareReceive>
 8009be8:	e04e      	b.n	8009c88 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	6912      	ldr	r2, [r2, #16]
 8009bf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bf6:	fb01 f202 	mul.w	r2, r1, r2
 8009bfa:	1a9b      	subs	r3, r3, r2
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d11c      	bne.n	8009c3a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	689a      	ldr	r2, [r3, #8]
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d316      	bcc.n	8009c3a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d20f      	bcs.n	8009c3a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 fe9d 	bl	800a95e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2100      	movs	r1, #0
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f001 fb2c 	bl	800b290 <USBD_LL_PrepareReceive>
 8009c38:	e026      	b.n	8009c88 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00a      	beq.n	8009c5c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009c4c:	2b03      	cmp	r3, #3
 8009c4e:	d105      	bne.n	8009c5c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009c5c:	2180      	movs	r1, #128	; 0x80
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f001 fa6a 	bl	800b138 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 fecf 	bl	800aa08 <USBD_CtlReceiveStatus>
 8009c6a:	e00d      	b.n	8009c88 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c72:	2b04      	cmp	r3, #4
 8009c74:	d004      	beq.n	8009c80 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d103      	bne.n	8009c88 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009c80:	2180      	movs	r1, #128	; 0x80
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f001 fa58 	bl	800b138 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d11d      	bne.n	8009cce <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f7ff fe81 	bl	800999a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ca0:	e015      	b.n	8009cce <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00d      	beq.n	8009cca <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009cb4:	2b03      	cmp	r3, #3
 8009cb6:	d108      	bne.n	8009cca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	7afa      	ldrb	r2, [r7, #11]
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	4798      	blx	r3
 8009cc8:	e001      	b.n	8009cce <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009cca:	2302      	movs	r3, #2
 8009ccc:	e000      	b.n	8009cd0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3718      	adds	r7, #24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ce0:	2340      	movs	r3, #64	; 0x40
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 f9e1 	bl	800b0ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2240      	movs	r2, #64	; 0x40
 8009cf8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009cfc:	2340      	movs	r3, #64	; 0x40
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2180      	movs	r1, #128	; 0x80
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 f9d3 	bl	800b0ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2240      	movs	r2, #64	; 0x40
 8009d12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d009      	beq.n	8009d50 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	6852      	ldr	r2, [r2, #4]
 8009d48:	b2d2      	uxtb	r2, r2
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	4798      	blx	r3
  }

  return USBD_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	460b      	mov	r3, r1
 8009d64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	78fa      	ldrb	r2, [r7, #3]
 8009d6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bc80      	pop	{r7}
 8009d76:	4770      	bx	lr

08009d78 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2204      	movs	r2, #4
 8009d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bc80      	pop	{r7}
 8009d9e:	4770      	bx	lr

08009da0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dae:	2b04      	cmp	r3, #4
 8009db0:	d105      	bne.n	8009dbe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bc80      	pop	{r7}
 8009dc8:	4770      	bx	lr

08009dca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d10b      	bne.n	8009df4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de2:	69db      	ldr	r3, [r3, #28]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d005      	beq.n	8009df4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
	...

08009e00 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e16:	2b40      	cmp	r3, #64	; 0x40
 8009e18:	d005      	beq.n	8009e26 <USBD_StdDevReq+0x26>
 8009e1a:	2b40      	cmp	r3, #64	; 0x40
 8009e1c:	d84f      	bhi.n	8009ebe <USBD_StdDevReq+0xbe>
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d009      	beq.n	8009e36 <USBD_StdDevReq+0x36>
 8009e22:	2b20      	cmp	r3, #32
 8009e24:	d14b      	bne.n	8009ebe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	6839      	ldr	r1, [r7, #0]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	4798      	blx	r3
      break;
 8009e34:	e048      	b.n	8009ec8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	785b      	ldrb	r3, [r3, #1]
 8009e3a:	2b09      	cmp	r3, #9
 8009e3c:	d839      	bhi.n	8009eb2 <USBD_StdDevReq+0xb2>
 8009e3e:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <USBD_StdDevReq+0x44>)
 8009e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e44:	08009e95 	.word	0x08009e95
 8009e48:	08009ea9 	.word	0x08009ea9
 8009e4c:	08009eb3 	.word	0x08009eb3
 8009e50:	08009e9f 	.word	0x08009e9f
 8009e54:	08009eb3 	.word	0x08009eb3
 8009e58:	08009e77 	.word	0x08009e77
 8009e5c:	08009e6d 	.word	0x08009e6d
 8009e60:	08009eb3 	.word	0x08009eb3
 8009e64:	08009e8b 	.word	0x08009e8b
 8009e68:	08009e81 	.word	0x08009e81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f9dc 	bl	800a22c <USBD_GetDescriptor>
          break;
 8009e74:	e022      	b.n	8009ebc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fb3f 	bl	800a4fc <USBD_SetAddress>
          break;
 8009e7e:	e01d      	b.n	8009ebc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fb7e 	bl	800a584 <USBD_SetConfig>
          break;
 8009e88:	e018      	b.n	8009ebc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e8a:	6839      	ldr	r1, [r7, #0]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fc07 	bl	800a6a0 <USBD_GetConfig>
          break;
 8009e92:	e013      	b.n	8009ebc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fc37 	bl	800a70a <USBD_GetStatus>
          break;
 8009e9c:	e00e      	b.n	8009ebc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e9e:	6839      	ldr	r1, [r7, #0]
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fc65 	bl	800a770 <USBD_SetFeature>
          break;
 8009ea6:	e009      	b.n	8009ebc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fc74 	bl	800a798 <USBD_ClrFeature>
          break;
 8009eb0:	e004      	b.n	8009ebc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fccc 	bl	800a852 <USBD_CtlError>
          break;
 8009eba:	bf00      	nop
      }
      break;
 8009ebc:	e004      	b.n	8009ec8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fcc6 	bl	800a852 <USBD_CtlError>
      break;
 8009ec6:	bf00      	nop
  }

  return ret;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop

08009ed4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009eea:	2b40      	cmp	r3, #64	; 0x40
 8009eec:	d005      	beq.n	8009efa <USBD_StdItfReq+0x26>
 8009eee:	2b40      	cmp	r3, #64	; 0x40
 8009ef0:	d82e      	bhi.n	8009f50 <USBD_StdItfReq+0x7c>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <USBD_StdItfReq+0x26>
 8009ef6:	2b20      	cmp	r3, #32
 8009ef8:	d12a      	bne.n	8009f50 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f00:	3b01      	subs	r3, #1
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d81d      	bhi.n	8009f42 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	889b      	ldrh	r3, [r3, #4]
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d813      	bhi.n	8009f38 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	4798      	blx	r3
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	88db      	ldrh	r3, [r3, #6]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d110      	bne.n	8009f4c <USBD_StdItfReq+0x78>
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10d      	bne.n	8009f4c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fd56 	bl	800a9e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f36:	e009      	b.n	8009f4c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fc89 	bl	800a852 <USBD_CtlError>
          break;
 8009f40:	e004      	b.n	8009f4c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009f42:	6839      	ldr	r1, [r7, #0]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fc84 	bl	800a852 <USBD_CtlError>
          break;
 8009f4a:	e000      	b.n	8009f4e <USBD_StdItfReq+0x7a>
          break;
 8009f4c:	bf00      	nop
      }
      break;
 8009f4e:	e004      	b.n	8009f5a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 fc7d 	bl	800a852 <USBD_CtlError>
      break;
 8009f58:	bf00      	nop
  }

  return USBD_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	889b      	ldrh	r3, [r3, #4]
 8009f76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f80:	2b40      	cmp	r3, #64	; 0x40
 8009f82:	d007      	beq.n	8009f94 <USBD_StdEPReq+0x30>
 8009f84:	2b40      	cmp	r3, #64	; 0x40
 8009f86:	f200 8146 	bhi.w	800a216 <USBD_StdEPReq+0x2b2>
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00a      	beq.n	8009fa4 <USBD_StdEPReq+0x40>
 8009f8e:	2b20      	cmp	r3, #32
 8009f90:	f040 8141 	bne.w	800a216 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	4798      	blx	r3
      break;
 8009fa2:	e13d      	b.n	800a220 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fac:	2b20      	cmp	r3, #32
 8009fae:	d10a      	bne.n	8009fc6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	4798      	blx	r3
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
 8009fc4:	e12d      	b.n	800a222 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	785b      	ldrb	r3, [r3, #1]
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d007      	beq.n	8009fde <USBD_StdEPReq+0x7a>
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	f300 811b 	bgt.w	800a20a <USBD_StdEPReq+0x2a6>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d072      	beq.n	800a0be <USBD_StdEPReq+0x15a>
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d03a      	beq.n	800a052 <USBD_StdEPReq+0xee>
 8009fdc:	e115      	b.n	800a20a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d002      	beq.n	8009fee <USBD_StdEPReq+0x8a>
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d015      	beq.n	800a018 <USBD_StdEPReq+0xb4>
 8009fec:	e02b      	b.n	800a046 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fee:	7bbb      	ldrb	r3, [r7, #14]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00c      	beq.n	800a00e <USBD_StdEPReq+0xaa>
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	2b80      	cmp	r3, #128	; 0x80
 8009ff8:	d009      	beq.n	800a00e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009ffa:	7bbb      	ldrb	r3, [r7, #14]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f001 f89a 	bl	800b138 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a004:	2180      	movs	r1, #128	; 0x80
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f001 f896 	bl	800b138 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a00c:	e020      	b.n	800a050 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fc1e 	bl	800a852 <USBD_CtlError>
              break;
 800a016:	e01b      	b.n	800a050 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	885b      	ldrh	r3, [r3, #2]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10e      	bne.n	800a03e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00b      	beq.n	800a03e <USBD_StdEPReq+0xda>
 800a026:	7bbb      	ldrb	r3, [r7, #14]
 800a028:	2b80      	cmp	r3, #128	; 0x80
 800a02a:	d008      	beq.n	800a03e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	88db      	ldrh	r3, [r3, #6]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a034:	7bbb      	ldrb	r3, [r7, #14]
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f001 f87d 	bl	800b138 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fccf 	bl	800a9e2 <USBD_CtlSendStatus>

              break;
 800a044:	e004      	b.n	800a050 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fc02 	bl	800a852 <USBD_CtlError>
              break;
 800a04e:	bf00      	nop
          }
          break;
 800a050:	e0e0      	b.n	800a214 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d002      	beq.n	800a062 <USBD_StdEPReq+0xfe>
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d015      	beq.n	800a08c <USBD_StdEPReq+0x128>
 800a060:	e026      	b.n	800a0b0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a062:	7bbb      	ldrb	r3, [r7, #14]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00c      	beq.n	800a082 <USBD_StdEPReq+0x11e>
 800a068:	7bbb      	ldrb	r3, [r7, #14]
 800a06a:	2b80      	cmp	r3, #128	; 0x80
 800a06c:	d009      	beq.n	800a082 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 f860 	bl	800b138 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a078:	2180      	movs	r1, #128	; 0x80
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 f85c 	bl	800b138 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a080:	e01c      	b.n	800a0bc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fbe4 	bl	800a852 <USBD_CtlError>
              break;
 800a08a:	e017      	b.n	800a0bc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	885b      	ldrh	r3, [r3, #2]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d112      	bne.n	800a0ba <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d004      	beq.n	800a0a8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f001 f867 	bl	800b176 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fc9a 	bl	800a9e2 <USBD_CtlSendStatus>
              }
              break;
 800a0ae:	e004      	b.n	800a0ba <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 fbcd 	bl	800a852 <USBD_CtlError>
              break;
 800a0b8:	e000      	b.n	800a0bc <USBD_StdEPReq+0x158>
              break;
 800a0ba:	bf00      	nop
          }
          break;
 800a0bc:	e0aa      	b.n	800a214 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d002      	beq.n	800a0ce <USBD_StdEPReq+0x16a>
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d032      	beq.n	800a132 <USBD_StdEPReq+0x1ce>
 800a0cc:	e097      	b.n	800a1fe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d007      	beq.n	800a0e4 <USBD_StdEPReq+0x180>
 800a0d4:	7bbb      	ldrb	r3, [r7, #14]
 800a0d6:	2b80      	cmp	r3, #128	; 0x80
 800a0d8:	d004      	beq.n	800a0e4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fbb8 	bl	800a852 <USBD_CtlError>
                break;
 800a0e2:	e091      	b.n	800a208 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	da0b      	bge.n	800a104 <USBD_StdEPReq+0x1a0>
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	3310      	adds	r3, #16
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	4413      	add	r3, r2
 800a100:	3304      	adds	r3, #4
 800a102:	e00b      	b.n	800a11c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a104:	7bbb      	ldrb	r3, [r7, #14]
 800a106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a10a:	4613      	mov	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4413      	add	r3, r2
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	4413      	add	r3, r2
 800a11a:	3304      	adds	r3, #4
 800a11c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2200      	movs	r2, #0
 800a122:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	2202      	movs	r2, #2
 800a128:	4619      	mov	r1, r3
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fbfb 	bl	800a926 <USBD_CtlSendData>
              break;
 800a130:	e06a      	b.n	800a208 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a136:	2b00      	cmp	r3, #0
 800a138:	da11      	bge.n	800a15e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	f003 020f 	and.w	r2, r3, #15
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	4613      	mov	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	440b      	add	r3, r1
 800a14c:	3318      	adds	r3, #24
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d117      	bne.n	800a184 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fb7b 	bl	800a852 <USBD_CtlError>
                  break;
 800a15c:	e054      	b.n	800a208 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a15e:	7bbb      	ldrb	r3, [r7, #14]
 800a160:	f003 020f 	and.w	r2, r3, #15
 800a164:	6879      	ldr	r1, [r7, #4]
 800a166:	4613      	mov	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	440b      	add	r3, r1
 800a170:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d104      	bne.n	800a184 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fb68 	bl	800a852 <USBD_CtlError>
                  break;
 800a182:	e041      	b.n	800a208 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	da0b      	bge.n	800a1a4 <USBD_StdEPReq+0x240>
 800a18c:	7bbb      	ldrb	r3, [r7, #14]
 800a18e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	3310      	adds	r3, #16
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	4413      	add	r3, r2
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	e00b      	b.n	800a1bc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
 800a1a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <USBD_StdEPReq+0x266>
 800a1c4:	7bbb      	ldrb	r3, [r7, #14]
 800a1c6:	2b80      	cmp	r3, #128	; 0x80
 800a1c8:	d103      	bne.n	800a1d2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	e00e      	b.n	800a1f0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a1d2:	7bbb      	ldrb	r3, [r7, #14]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 ffec 	bl	800b1b4 <USBD_LL_IsStallEP>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d003      	beq.n	800a1ea <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	e002      	b.n	800a1f0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fb95 	bl	800a926 <USBD_CtlSendData>
              break;
 800a1fc:	e004      	b.n	800a208 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fb26 	bl	800a852 <USBD_CtlError>
              break;
 800a206:	bf00      	nop
          }
          break;
 800a208:	e004      	b.n	800a214 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fb20 	bl	800a852 <USBD_CtlError>
          break;
 800a212:	bf00      	nop
      }
      break;
 800a214:	e004      	b.n	800a220 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fb1a 	bl	800a852 <USBD_CtlError>
      break;
 800a21e:	bf00      	nop
  }

  return ret;
 800a220:	7bfb      	ldrb	r3, [r7, #15]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
	...

0800a22c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a23e:	2300      	movs	r3, #0
 800a240:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	885b      	ldrh	r3, [r3, #2]
 800a246:	0a1b      	lsrs	r3, r3, #8
 800a248:	b29b      	uxth	r3, r3
 800a24a:	3b01      	subs	r3, #1
 800a24c:	2b06      	cmp	r3, #6
 800a24e:	f200 8128 	bhi.w	800a4a2 <USBD_GetDescriptor+0x276>
 800a252:	a201      	add	r2, pc, #4	; (adr r2, 800a258 <USBD_GetDescriptor+0x2c>)
 800a254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a258:	0800a275 	.word	0x0800a275
 800a25c:	0800a28d 	.word	0x0800a28d
 800a260:	0800a2cd 	.word	0x0800a2cd
 800a264:	0800a4a3 	.word	0x0800a4a3
 800a268:	0800a4a3 	.word	0x0800a4a3
 800a26c:	0800a443 	.word	0x0800a443
 800a270:	0800a46f 	.word	0x0800a46f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	7c12      	ldrb	r2, [r2, #16]
 800a280:	f107 0108 	add.w	r1, r7, #8
 800a284:	4610      	mov	r0, r2
 800a286:	4798      	blx	r3
 800a288:	60f8      	str	r0, [r7, #12]
      break;
 800a28a:	e112      	b.n	800a4b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	7c1b      	ldrb	r3, [r3, #16]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10d      	bne.n	800a2b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29c:	f107 0208 	add.w	r2, r7, #8
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	4798      	blx	r3
 800a2a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a2ae:	e100      	b.n	800a4b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b8:	f107 0208 	add.w	r2, r7, #8
 800a2bc:	4610      	mov	r0, r2
 800a2be:	4798      	blx	r3
 800a2c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	701a      	strb	r2, [r3, #0]
      break;
 800a2ca:	e0f2      	b.n	800a4b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	885b      	ldrh	r3, [r3, #2]
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	2b05      	cmp	r3, #5
 800a2d4:	f200 80ac 	bhi.w	800a430 <USBD_GetDescriptor+0x204>
 800a2d8:	a201      	add	r2, pc, #4	; (adr r2, 800a2e0 <USBD_GetDescriptor+0xb4>)
 800a2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2de:	bf00      	nop
 800a2e0:	0800a2f9 	.word	0x0800a2f9
 800a2e4:	0800a32d 	.word	0x0800a32d
 800a2e8:	0800a361 	.word	0x0800a361
 800a2ec:	0800a395 	.word	0x0800a395
 800a2f0:	0800a3c9 	.word	0x0800a3c9
 800a2f4:	0800a3fd 	.word	0x0800a3fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00b      	beq.n	800a31c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	7c12      	ldrb	r2, [r2, #16]
 800a310:	f107 0108 	add.w	r1, r7, #8
 800a314:	4610      	mov	r0, r2
 800a316:	4798      	blx	r3
 800a318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a31a:	e091      	b.n	800a440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fa97 	bl	800a852 <USBD_CtlError>
            err++;
 800a324:	7afb      	ldrb	r3, [r7, #11]
 800a326:	3301      	adds	r3, #1
 800a328:	72fb      	strb	r3, [r7, #11]
          break;
 800a32a:	e089      	b.n	800a440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00b      	beq.n	800a350 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	7c12      	ldrb	r2, [r2, #16]
 800a344:	f107 0108 	add.w	r1, r7, #8
 800a348:	4610      	mov	r0, r2
 800a34a:	4798      	blx	r3
 800a34c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a34e:	e077      	b.n	800a440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a350:	6839      	ldr	r1, [r7, #0]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fa7d 	bl	800a852 <USBD_CtlError>
            err++;
 800a358:	7afb      	ldrb	r3, [r7, #11]
 800a35a:	3301      	adds	r3, #1
 800a35c:	72fb      	strb	r3, [r7, #11]
          break;
 800a35e:	e06f      	b.n	800a440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00b      	beq.n	800a384 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	7c12      	ldrb	r2, [r2, #16]
 800a378:	f107 0108 	add.w	r1, r7, #8
 800a37c:	4610      	mov	r0, r2
 800a37e:	4798      	blx	r3
 800a380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a382:	e05d      	b.n	800a440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fa63 	bl	800a852 <USBD_CtlError>
            err++;
 800a38c:	7afb      	ldrb	r3, [r7, #11]
 800a38e:	3301      	adds	r3, #1
 800a390:	72fb      	strb	r3, [r7, #11]
          break;
 800a392:	e055      	b.n	800a440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00b      	beq.n	800a3b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	7c12      	ldrb	r2, [r2, #16]
 800a3ac:	f107 0108 	add.w	r1, r7, #8
 800a3b0:	4610      	mov	r0, r2
 800a3b2:	4798      	blx	r3
 800a3b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3b6:	e043      	b.n	800a440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fa49 	bl	800a852 <USBD_CtlError>
            err++;
 800a3c0:	7afb      	ldrb	r3, [r7, #11]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a3c6:	e03b      	b.n	800a440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00b      	beq.n	800a3ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	7c12      	ldrb	r2, [r2, #16]
 800a3e0:	f107 0108 	add.w	r1, r7, #8
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	4798      	blx	r3
 800a3e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ea:	e029      	b.n	800a440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3ec:	6839      	ldr	r1, [r7, #0]
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fa2f 	bl	800a852 <USBD_CtlError>
            err++;
 800a3f4:	7afb      	ldrb	r3, [r7, #11]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a3fa:	e021      	b.n	800a440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00b      	beq.n	800a420 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	7c12      	ldrb	r2, [r2, #16]
 800a414:	f107 0108 	add.w	r1, r7, #8
 800a418:	4610      	mov	r0, r2
 800a41a:	4798      	blx	r3
 800a41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a41e:	e00f      	b.n	800a440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fa15 	bl	800a852 <USBD_CtlError>
            err++;
 800a428:	7afb      	ldrb	r3, [r7, #11]
 800a42a:	3301      	adds	r3, #1
 800a42c:	72fb      	strb	r3, [r7, #11]
          break;
 800a42e:	e007      	b.n	800a440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fa0d 	bl	800a852 <USBD_CtlError>
          err++;
 800a438:	7afb      	ldrb	r3, [r7, #11]
 800a43a:	3301      	adds	r3, #1
 800a43c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a43e:	e038      	b.n	800a4b2 <USBD_GetDescriptor+0x286>
 800a440:	e037      	b.n	800a4b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	7c1b      	ldrb	r3, [r3, #16]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d109      	bne.n	800a45e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a452:	f107 0208 	add.w	r2, r7, #8
 800a456:	4610      	mov	r0, r2
 800a458:	4798      	blx	r3
 800a45a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a45c:	e029      	b.n	800a4b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a45e:	6839      	ldr	r1, [r7, #0]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f9f6 	bl	800a852 <USBD_CtlError>
        err++;
 800a466:	7afb      	ldrb	r3, [r7, #11]
 800a468:	3301      	adds	r3, #1
 800a46a:	72fb      	strb	r3, [r7, #11]
      break;
 800a46c:	e021      	b.n	800a4b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	7c1b      	ldrb	r3, [r3, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10d      	bne.n	800a492 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47e:	f107 0208 	add.w	r2, r7, #8
 800a482:	4610      	mov	r0, r2
 800a484:	4798      	blx	r3
 800a486:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3301      	adds	r3, #1
 800a48c:	2207      	movs	r2, #7
 800a48e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a490:	e00f      	b.n	800a4b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f9dc 	bl	800a852 <USBD_CtlError>
        err++;
 800a49a:	7afb      	ldrb	r3, [r7, #11]
 800a49c:	3301      	adds	r3, #1
 800a49e:	72fb      	strb	r3, [r7, #11]
      break;
 800a4a0:	e007      	b.n	800a4b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f9d4 	bl	800a852 <USBD_CtlError>
      err++;
 800a4aa:	7afb      	ldrb	r3, [r7, #11]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a4b0:	bf00      	nop
  }

  if (err != 0U)
 800a4b2:	7afb      	ldrb	r3, [r7, #11]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d11c      	bne.n	800a4f2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a4b8:	893b      	ldrh	r3, [r7, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d011      	beq.n	800a4e2 <USBD_GetDescriptor+0x2b6>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	88db      	ldrh	r3, [r3, #6]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00d      	beq.n	800a4e2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	88da      	ldrh	r2, [r3, #6]
 800a4ca:	893b      	ldrh	r3, [r7, #8]
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	bf28      	it	cs
 800a4d0:	4613      	movcs	r3, r2
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a4d6:	893b      	ldrh	r3, [r7, #8]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	68f9      	ldr	r1, [r7, #12]
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 fa22 	bl	800a926 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	88db      	ldrh	r3, [r3, #6]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d104      	bne.n	800a4f4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 fa79 	bl	800a9e2 <USBD_CtlSendStatus>
 800a4f0:	e000      	b.n	800a4f4 <USBD_GetDescriptor+0x2c8>
    return;
 800a4f2:	bf00      	nop
    }
  }
}
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop

0800a4fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	889b      	ldrh	r3, [r3, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d130      	bne.n	800a570 <USBD_SetAddress+0x74>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	88db      	ldrh	r3, [r3, #6]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d12c      	bne.n	800a570 <USBD_SetAddress+0x74>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	885b      	ldrh	r3, [r3, #2]
 800a51a:	2b7f      	cmp	r3, #127	; 0x7f
 800a51c:	d828      	bhi.n	800a570 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	885b      	ldrh	r3, [r3, #2]
 800a522:	b2db      	uxtb	r3, r3
 800a524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a528:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a530:	2b03      	cmp	r3, #3
 800a532:	d104      	bne.n	800a53e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f98b 	bl	800a852 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a53c:	e01d      	b.n	800a57a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	7bfa      	ldrb	r2, [r7, #15]
 800a542:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a546:	7bfb      	ldrb	r3, [r7, #15]
 800a548:	4619      	mov	r1, r3
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fe5e 	bl	800b20c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fa46 	bl	800a9e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a556:	7bfb      	ldrb	r3, [r7, #15]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d004      	beq.n	800a566 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a564:	e009      	b.n	800a57a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a56e:	e004      	b.n	800a57a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f96d 	bl	800a852 <USBD_CtlError>
  }
}
 800a578:	bf00      	nop
 800a57a:	bf00      	nop
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
	...

0800a584 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	885b      	ldrh	r3, [r3, #2]
 800a592:	b2da      	uxtb	r2, r3
 800a594:	4b41      	ldr	r3, [pc, #260]	; (800a69c <USBD_SetConfig+0x118>)
 800a596:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a598:	4b40      	ldr	r3, [pc, #256]	; (800a69c <USBD_SetConfig+0x118>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d904      	bls.n	800a5aa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f955 	bl	800a852 <USBD_CtlError>
 800a5a8:	e075      	b.n	800a696 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d002      	beq.n	800a5ba <USBD_SetConfig+0x36>
 800a5b4:	2b03      	cmp	r3, #3
 800a5b6:	d023      	beq.n	800a600 <USBD_SetConfig+0x7c>
 800a5b8:	e062      	b.n	800a680 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a5ba:	4b38      	ldr	r3, [pc, #224]	; (800a69c <USBD_SetConfig+0x118>)
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d01a      	beq.n	800a5f8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a5c2:	4b36      	ldr	r3, [pc, #216]	; (800a69c <USBD_SetConfig+0x118>)
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a5d4:	4b31      	ldr	r3, [pc, #196]	; (800a69c <USBD_SetConfig+0x118>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff f9e7 	bl	80099ae <USBD_SetClassConfig>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d104      	bne.n	800a5f0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a5e6:	6839      	ldr	r1, [r7, #0]
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f932 	bl	800a852 <USBD_CtlError>
            return;
 800a5ee:	e052      	b.n	800a696 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f9f6 	bl	800a9e2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a5f6:	e04e      	b.n	800a696 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f9f2 	bl	800a9e2 <USBD_CtlSendStatus>
        break;
 800a5fe:	e04a      	b.n	800a696 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a600:	4b26      	ldr	r3, [pc, #152]	; (800a69c <USBD_SetConfig+0x118>)
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d112      	bne.n	800a62e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2202      	movs	r2, #2
 800a60c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a610:	4b22      	ldr	r3, [pc, #136]	; (800a69c <USBD_SetConfig+0x118>)
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	461a      	mov	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a61a:	4b20      	ldr	r3, [pc, #128]	; (800a69c <USBD_SetConfig+0x118>)
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7ff f9e3 	bl	80099ec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f9db 	bl	800a9e2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a62c:	e033      	b.n	800a696 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a62e:	4b1b      	ldr	r3, [pc, #108]	; (800a69c <USBD_SetConfig+0x118>)
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	461a      	mov	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d01d      	beq.n	800a678 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	b2db      	uxtb	r3, r3
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff f9d1 	bl	80099ec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a64a:	4b14      	ldr	r3, [pc, #80]	; (800a69c <USBD_SetConfig+0x118>)
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a654:	4b11      	ldr	r3, [pc, #68]	; (800a69c <USBD_SetConfig+0x118>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f7ff f9a7 	bl	80099ae <USBD_SetClassConfig>
 800a660:	4603      	mov	r3, r0
 800a662:	2b02      	cmp	r3, #2
 800a664:	d104      	bne.n	800a670 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f8f2 	bl	800a852 <USBD_CtlError>
            return;
 800a66e:	e012      	b.n	800a696 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f9b6 	bl	800a9e2 <USBD_CtlSendStatus>
        break;
 800a676:	e00e      	b.n	800a696 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f9b2 	bl	800a9e2 <USBD_CtlSendStatus>
        break;
 800a67e:	e00a      	b.n	800a696 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f8e5 	bl	800a852 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a688:	4b04      	ldr	r3, [pc, #16]	; (800a69c <USBD_SetConfig+0x118>)
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff f9ac 	bl	80099ec <USBD_ClrClassConfig>
        break;
 800a694:	bf00      	nop
    }
  }
}
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20000448 	.word	0x20000448

0800a6a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	88db      	ldrh	r3, [r3, #6]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d004      	beq.n	800a6bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f8cc 	bl	800a852 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a6ba:	e022      	b.n	800a702 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	dc02      	bgt.n	800a6cc <USBD_GetConfig+0x2c>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	dc03      	bgt.n	800a6d2 <USBD_GetConfig+0x32>
 800a6ca:	e015      	b.n	800a6f8 <USBD_GetConfig+0x58>
 800a6cc:	2b03      	cmp	r3, #3
 800a6ce:	d00b      	beq.n	800a6e8 <USBD_GetConfig+0x48>
 800a6d0:	e012      	b.n	800a6f8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	3308      	adds	r3, #8
 800a6dc:	2201      	movs	r2, #1
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f920 	bl	800a926 <USBD_CtlSendData>
        break;
 800a6e6:	e00c      	b.n	800a702 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3304      	adds	r3, #4
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f918 	bl	800a926 <USBD_CtlSendData>
        break;
 800a6f6:	e004      	b.n	800a702 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f8a9 	bl	800a852 <USBD_CtlError>
        break;
 800a700:	bf00      	nop
}
 800a702:	bf00      	nop
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b082      	sub	sp, #8
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a71a:	3b01      	subs	r3, #1
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d81e      	bhi.n	800a75e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	88db      	ldrh	r3, [r3, #6]
 800a724:	2b02      	cmp	r3, #2
 800a726:	d004      	beq.n	800a732 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f891 	bl	800a852 <USBD_CtlError>
        break;
 800a730:	e01a      	b.n	800a768 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2201      	movs	r2, #1
 800a736:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d005      	beq.n	800a74e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	f043 0202 	orr.w	r2, r3, #2
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	330c      	adds	r3, #12
 800a752:	2202      	movs	r2, #2
 800a754:	4619      	mov	r1, r3
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f8e5 	bl	800a926 <USBD_CtlSendData>
      break;
 800a75c:	e004      	b.n	800a768 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f876 	bl	800a852 <USBD_CtlError>
      break;
 800a766:	bf00      	nop
  }
}
 800a768:	bf00      	nop
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	885b      	ldrh	r3, [r3, #2]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d106      	bne.n	800a790 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2201      	movs	r2, #1
 800a786:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f929 	bl	800a9e2 <USBD_CtlSendStatus>
  }
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d80b      	bhi.n	800a7c6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	885b      	ldrh	r3, [r3, #2]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d10c      	bne.n	800a7d0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 f90f 	bl	800a9e2 <USBD_CtlSendStatus>
      }
      break;
 800a7c4:	e004      	b.n	800a7d0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f842 	bl	800a852 <USBD_CtlError>
      break;
 800a7ce:	e000      	b.n	800a7d2 <USBD_ClrFeature+0x3a>
      break;
 800a7d0:	bf00      	nop
  }
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b083      	sub	sp, #12
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	781a      	ldrb	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	785a      	ldrb	r2, [r3, #1]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	3302      	adds	r3, #2
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	3303      	adds	r3, #3
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	b29b      	uxth	r3, r3
 800a804:	021b      	lsls	r3, r3, #8
 800a806:	b29b      	uxth	r3, r3
 800a808:	4413      	add	r3, r2
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	3304      	adds	r3, #4
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	b29a      	uxth	r2, r3
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	3305      	adds	r3, #5
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	b29b      	uxth	r3, r3
 800a820:	021b      	lsls	r3, r3, #8
 800a822:	b29b      	uxth	r3, r3
 800a824:	4413      	add	r3, r2
 800a826:	b29a      	uxth	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	3306      	adds	r3, #6
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	b29a      	uxth	r2, r3
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	3307      	adds	r3, #7
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	021b      	lsls	r3, r3, #8
 800a83e:	b29b      	uxth	r3, r3
 800a840:	4413      	add	r3, r2
 800a842:	b29a      	uxth	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	80da      	strh	r2, [r3, #6]

}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bc80      	pop	{r7}
 800a850:	4770      	bx	lr

0800a852 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b082      	sub	sp, #8
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a85c:	2180      	movs	r1, #128	; 0x80
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fc6a 	bl	800b138 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a864:	2100      	movs	r1, #0
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fc66 	bl	800b138 <USBD_LL_StallEP>
}
 800a86c:	bf00      	nop
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a880:	2300      	movs	r3, #0
 800a882:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d032      	beq.n	800a8f0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f000 f834 	bl	800a8f8 <USBD_GetLen>
 800a890:	4603      	mov	r3, r0
 800a892:	3301      	adds	r3, #1
 800a894:	b29b      	uxth	r3, r3
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	b29a      	uxth	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a89e:	7dfb      	ldrb	r3, [r7, #23]
 800a8a0:	1c5a      	adds	r2, r3, #1
 800a8a2:	75fa      	strb	r2, [r7, #23]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	7812      	ldrb	r2, [r2, #0]
 800a8ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
 800a8b2:	1c5a      	adds	r2, r3, #1
 800a8b4:	75fa      	strb	r2, [r7, #23]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	2203      	movs	r2, #3
 800a8be:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a8c0:	e012      	b.n	800a8e8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	60fa      	str	r2, [r7, #12]
 800a8c8:	7dfa      	ldrb	r2, [r7, #23]
 800a8ca:	1c51      	adds	r1, r2, #1
 800a8cc:	75f9      	strb	r1, [r7, #23]
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	440a      	add	r2, r1
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	75fa      	strb	r2, [r7, #23]
 800a8de:	461a      	mov	r2, r3
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1e8      	bne.n	800a8c2 <USBD_GetString+0x4e>
    }
  }
}
 800a8f0:	bf00      	nop
 800a8f2:	3718      	adds	r7, #24
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a900:	2300      	movs	r3, #0
 800a902:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a904:	e005      	b.n	800a912 <USBD_GetLen+0x1a>
  {
    len++;
 800a906:	7bfb      	ldrb	r3, [r7, #15]
 800a908:	3301      	adds	r3, #1
 800a90a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	3301      	adds	r3, #1
 800a910:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1f5      	bne.n	800a906 <USBD_GetLen+0xe>
  }

  return len;
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3714      	adds	r7, #20
 800a920:	46bd      	mov	sp, r7
 800a922:	bc80      	pop	{r7}
 800a924:	4770      	bx	lr

0800a926 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b084      	sub	sp, #16
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	60f8      	str	r0, [r7, #12]
 800a92e:	60b9      	str	r1, [r7, #8]
 800a930:	4613      	mov	r3, r2
 800a932:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2202      	movs	r2, #2
 800a938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a93c:	88fa      	ldrh	r2, [r7, #6]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a942:	88fa      	ldrh	r2, [r7, #6]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a948:	88fb      	ldrh	r3, [r7, #6]
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	2100      	movs	r1, #0
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f000 fc7b 	bl	800b24a <USBD_LL_Transmit>

  return USBD_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	60f8      	str	r0, [r7, #12]
 800a966:	60b9      	str	r1, [r7, #8]
 800a968:	4613      	mov	r3, r2
 800a96a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a96c:	88fb      	ldrh	r3, [r7, #6]
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	2100      	movs	r1, #0
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f000 fc69 	bl	800b24a <USBD_LL_Transmit>

  return USBD_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	60b9      	str	r1, [r7, #8]
 800a98c:	4613      	mov	r3, r2
 800a98e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2203      	movs	r2, #3
 800a994:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a998:	88fa      	ldrh	r2, [r7, #6]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a9a0:	88fa      	ldrh	r2, [r7, #6]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9a8:	88fb      	ldrh	r3, [r7, #6]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f000 fc6e 	bl	800b290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	60f8      	str	r0, [r7, #12]
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9cc:	88fb      	ldrh	r3, [r7, #6]
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f000 fc5c 	bl	800b290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b082      	sub	sp, #8
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2204      	movs	r2, #4
 800a9ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fc26 	bl	800b24a <USBD_LL_Transmit>

  return USBD_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2205      	movs	r2, #5
 800aa14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa18:	2300      	movs	r3, #0
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fc36 	bl	800b290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
	...

0800aa30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aa34:	2200      	movs	r2, #0
 800aa36:	4912      	ldr	r1, [pc, #72]	; (800aa80 <MX_USB_DEVICE_Init+0x50>)
 800aa38:	4812      	ldr	r0, [pc, #72]	; (800aa84 <MX_USB_DEVICE_Init+0x54>)
 800aa3a:	f7fe ff5e 	bl	80098fa <USBD_Init>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d001      	beq.n	800aa48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aa44:	f7f7 f96e 	bl	8001d24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aa48:	490f      	ldr	r1, [pc, #60]	; (800aa88 <MX_USB_DEVICE_Init+0x58>)
 800aa4a:	480e      	ldr	r0, [pc, #56]	; (800aa84 <MX_USB_DEVICE_Init+0x54>)
 800aa4c:	f7fe ff80 	bl	8009950 <USBD_RegisterClass>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aa56:	f7f7 f965 	bl	8001d24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aa5a:	490c      	ldr	r1, [pc, #48]	; (800aa8c <MX_USB_DEVICE_Init+0x5c>)
 800aa5c:	4809      	ldr	r0, [pc, #36]	; (800aa84 <MX_USB_DEVICE_Init+0x54>)
 800aa5e:	f7fe feb1 	bl	80097c4 <USBD_CDC_RegisterInterface>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aa68:	f7f7 f95c 	bl	8001d24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aa6c:	4805      	ldr	r0, [pc, #20]	; (800aa84 <MX_USB_DEVICE_Init+0x54>)
 800aa6e:	f7fe ff88 	bl	8009982 <USBD_Start>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa78:	f7f7 f954 	bl	8001d24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa7c:	bf00      	nop
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	2000014c 	.word	0x2000014c
 800aa84:	2000044c 	.word	0x2000044c
 800aa88:	20000038 	.word	0x20000038
 800aa8c:	2000013c 	.word	0x2000013c

0800aa90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa94:	2200      	movs	r2, #0
 800aa96:	4905      	ldr	r1, [pc, #20]	; (800aaac <CDC_Init_FS+0x1c>)
 800aa98:	4805      	ldr	r0, [pc, #20]	; (800aab0 <CDC_Init_FS+0x20>)
 800aa9a:	f7fe fea9 	bl	80097f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa9e:	4905      	ldr	r1, [pc, #20]	; (800aab4 <CDC_Init_FS+0x24>)
 800aaa0:	4803      	ldr	r0, [pc, #12]	; (800aab0 <CDC_Init_FS+0x20>)
 800aaa2:	f7fe febe 	bl	8009822 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aaa6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	20000b10 	.word	0x20000b10
 800aab0:	2000044c 	.word	0x2000044c
 800aab4:	20000710 	.word	0x20000710

0800aab8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aab8:	b480      	push	{r7}
 800aaba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aabc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bc80      	pop	{r7}
 800aac4:	4770      	bx	lr
	...

0800aac8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	4603      	mov	r3, r0
 800aad0:	6039      	str	r1, [r7, #0]
 800aad2:	71fb      	strb	r3, [r7, #7]
 800aad4:	4613      	mov	r3, r2
 800aad6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aad8:	79fb      	ldrb	r3, [r7, #7]
 800aada:	2b23      	cmp	r3, #35	; 0x23
 800aadc:	d84a      	bhi.n	800ab74 <CDC_Control_FS+0xac>
 800aade:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <CDC_Control_FS+0x1c>)
 800aae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae4:	0800ab75 	.word	0x0800ab75
 800aae8:	0800ab75 	.word	0x0800ab75
 800aaec:	0800ab75 	.word	0x0800ab75
 800aaf0:	0800ab75 	.word	0x0800ab75
 800aaf4:	0800ab75 	.word	0x0800ab75
 800aaf8:	0800ab75 	.word	0x0800ab75
 800aafc:	0800ab75 	.word	0x0800ab75
 800ab00:	0800ab75 	.word	0x0800ab75
 800ab04:	0800ab75 	.word	0x0800ab75
 800ab08:	0800ab75 	.word	0x0800ab75
 800ab0c:	0800ab75 	.word	0x0800ab75
 800ab10:	0800ab75 	.word	0x0800ab75
 800ab14:	0800ab75 	.word	0x0800ab75
 800ab18:	0800ab75 	.word	0x0800ab75
 800ab1c:	0800ab75 	.word	0x0800ab75
 800ab20:	0800ab75 	.word	0x0800ab75
 800ab24:	0800ab75 	.word	0x0800ab75
 800ab28:	0800ab75 	.word	0x0800ab75
 800ab2c:	0800ab75 	.word	0x0800ab75
 800ab30:	0800ab75 	.word	0x0800ab75
 800ab34:	0800ab75 	.word	0x0800ab75
 800ab38:	0800ab75 	.word	0x0800ab75
 800ab3c:	0800ab75 	.word	0x0800ab75
 800ab40:	0800ab75 	.word	0x0800ab75
 800ab44:	0800ab75 	.word	0x0800ab75
 800ab48:	0800ab75 	.word	0x0800ab75
 800ab4c:	0800ab75 	.word	0x0800ab75
 800ab50:	0800ab75 	.word	0x0800ab75
 800ab54:	0800ab75 	.word	0x0800ab75
 800ab58:	0800ab75 	.word	0x0800ab75
 800ab5c:	0800ab75 	.word	0x0800ab75
 800ab60:	0800ab75 	.word	0x0800ab75
 800ab64:	0800ab75 	.word	0x0800ab75
 800ab68:	0800ab75 	.word	0x0800ab75
 800ab6c:	0800ab75 	.word	0x0800ab75
 800ab70:	0800ab75 	.word	0x0800ab75
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab74:	bf00      	nop
  }

  return (USBD_OK);
 800ab76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bc80      	pop	{r7}
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop

0800ab84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab8e:	6879      	ldr	r1, [r7, #4]
 800ab90:	480f      	ldr	r0, [pc, #60]	; (800abd0 <CDC_Receive_FS+0x4c>)
 800ab92:	f7fe fe46 	bl	8009822 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab96:	480e      	ldr	r0, [pc, #56]	; (800abd0 <CDC_Receive_FS+0x4c>)
 800ab98:	f7fe fe85 	bl	80098a6 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	73fb      	strb	r3, [r7, #15]
  memset(buffer_usb, '\0',64);
 800aba2:	2240      	movs	r2, #64	; 0x40
 800aba4:	2100      	movs	r1, #0
 800aba6:	480b      	ldr	r0, [pc, #44]	; (800abd4 <CDC_Receive_FS+0x50>)
 800aba8:	f000 fcd4 	bl	800b554 <memset>
  memcpy(buffer_usb, Buf, len);
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	461a      	mov	r2, r3
 800abb0:	6879      	ldr	r1, [r7, #4]
 800abb2:	4808      	ldr	r0, [pc, #32]	; (800abd4 <CDC_Receive_FS+0x50>)
 800abb4:	f000 fd02 	bl	800b5bc <memcpy>
  memset(Buf, '\0', len);
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	461a      	mov	r2, r3
 800abbc:	2100      	movs	r1, #0
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fcc8 	bl	800b554 <memset>
  return (USBD_OK);
 800abc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	2000044c 	.word	0x2000044c
 800abd4:	200003e0 	.word	0x200003e0

0800abd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	460b      	mov	r3, r1
 800abe2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800abe8:	4b0d      	ldr	r3, [pc, #52]	; (800ac20 <CDC_Transmit_FS+0x48>)
 800abea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d001      	beq.n	800abfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e00b      	b.n	800ac16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800abfe:	887b      	ldrh	r3, [r7, #2]
 800ac00:	461a      	mov	r2, r3
 800ac02:	6879      	ldr	r1, [r7, #4]
 800ac04:	4806      	ldr	r0, [pc, #24]	; (800ac20 <CDC_Transmit_FS+0x48>)
 800ac06:	f7fe fdf3 	bl	80097f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ac0a:	4805      	ldr	r0, [pc, #20]	; (800ac20 <CDC_Transmit_FS+0x48>)
 800ac0c:	f7fe fe1c 	bl	8009848 <USBD_CDC_TransmitPacket>
 800ac10:	4603      	mov	r3, r0
 800ac12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	2000044c 	.word	0x2000044c

0800ac24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	6039      	str	r1, [r7, #0]
 800ac2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2212      	movs	r2, #18
 800ac34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ac36:	4b03      	ldr	r3, [pc, #12]	; (800ac44 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bc80      	pop	{r7}
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	20000168 	.word	0x20000168

0800ac48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	4603      	mov	r3, r0
 800ac50:	6039      	str	r1, [r7, #0]
 800ac52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	2204      	movs	r2, #4
 800ac58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac5a:	4b03      	ldr	r3, [pc, #12]	; (800ac68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bc80      	pop	{r7}
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	2000017c 	.word	0x2000017c

0800ac6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	4603      	mov	r3, r0
 800ac74:	6039      	str	r1, [r7, #0]
 800ac76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac78:	79fb      	ldrb	r3, [r7, #7]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d105      	bne.n	800ac8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	4907      	ldr	r1, [pc, #28]	; (800aca0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac82:	4808      	ldr	r0, [pc, #32]	; (800aca4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac84:	f7ff fdf6 	bl	800a874 <USBD_GetString>
 800ac88:	e004      	b.n	800ac94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	4904      	ldr	r1, [pc, #16]	; (800aca0 <USBD_FS_ProductStrDescriptor+0x34>)
 800ac8e:	4805      	ldr	r0, [pc, #20]	; (800aca4 <USBD_FS_ProductStrDescriptor+0x38>)
 800ac90:	f7ff fdf0 	bl	800a874 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac94:	4b02      	ldr	r3, [pc, #8]	; (800aca0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	20000f10 	.word	0x20000f10
 800aca4:	0800c1ac 	.word	0x0800c1ac

0800aca8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	4603      	mov	r3, r0
 800acb0:	6039      	str	r1, [r7, #0]
 800acb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	4904      	ldr	r1, [pc, #16]	; (800acc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800acb8:	4804      	ldr	r0, [pc, #16]	; (800accc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800acba:	f7ff fddb 	bl	800a874 <USBD_GetString>
  return USBD_StrDesc;
 800acbe:	4b02      	ldr	r3, [pc, #8]	; (800acc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	20000f10 	.word	0x20000f10
 800accc:	0800c1c4 	.word	0x0800c1c4

0800acd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	4603      	mov	r3, r0
 800acd8:	6039      	str	r1, [r7, #0]
 800acda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	221a      	movs	r2, #26
 800ace0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ace2:	f000 f843 	bl	800ad6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ace6:	4b02      	ldr	r3, [pc, #8]	; (800acf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	20000180 	.word	0x20000180

0800acf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	4603      	mov	r3, r0
 800acfc:	6039      	str	r1, [r7, #0]
 800acfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad00:	79fb      	ldrb	r3, [r7, #7]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d105      	bne.n	800ad12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad06:	683a      	ldr	r2, [r7, #0]
 800ad08:	4907      	ldr	r1, [pc, #28]	; (800ad28 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad0a:	4808      	ldr	r0, [pc, #32]	; (800ad2c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad0c:	f7ff fdb2 	bl	800a874 <USBD_GetString>
 800ad10:	e004      	b.n	800ad1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	4904      	ldr	r1, [pc, #16]	; (800ad28 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad16:	4805      	ldr	r0, [pc, #20]	; (800ad2c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad18:	f7ff fdac 	bl	800a874 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad1c:	4b02      	ldr	r3, [pc, #8]	; (800ad28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20000f10 	.word	0x20000f10
 800ad2c:	0800c1d8 	.word	0x0800c1d8

0800ad30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	4603      	mov	r3, r0
 800ad38:	6039      	str	r1, [r7, #0]
 800ad3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad3c:	79fb      	ldrb	r3, [r7, #7]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d105      	bne.n	800ad4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	4907      	ldr	r1, [pc, #28]	; (800ad64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad46:	4808      	ldr	r0, [pc, #32]	; (800ad68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad48:	f7ff fd94 	bl	800a874 <USBD_GetString>
 800ad4c:	e004      	b.n	800ad58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	4904      	ldr	r1, [pc, #16]	; (800ad64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad52:	4805      	ldr	r0, [pc, #20]	; (800ad68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad54:	f7ff fd8e 	bl	800a874 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad58:	4b02      	ldr	r3, [pc, #8]	; (800ad64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20000f10 	.word	0x20000f10
 800ad68:	0800c1e4 	.word	0x0800c1e4

0800ad6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad72:	4b0f      	ldr	r3, [pc, #60]	; (800adb0 <Get_SerialNum+0x44>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad78:	4b0e      	ldr	r3, [pc, #56]	; (800adb4 <Get_SerialNum+0x48>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad7e:	4b0e      	ldr	r3, [pc, #56]	; (800adb8 <Get_SerialNum+0x4c>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4413      	add	r3, r2
 800ad8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d009      	beq.n	800ada6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad92:	2208      	movs	r2, #8
 800ad94:	4909      	ldr	r1, [pc, #36]	; (800adbc <Get_SerialNum+0x50>)
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 f814 	bl	800adc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad9c:	2204      	movs	r2, #4
 800ad9e:	4908      	ldr	r1, [pc, #32]	; (800adc0 <Get_SerialNum+0x54>)
 800ada0:	68b8      	ldr	r0, [r7, #8]
 800ada2:	f000 f80f 	bl	800adc4 <IntToUnicode>
  }
}
 800ada6:	bf00      	nop
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	1ffff7e8 	.word	0x1ffff7e8
 800adb4:	1ffff7ec 	.word	0x1ffff7ec
 800adb8:	1ffff7f0 	.word	0x1ffff7f0
 800adbc:	20000182 	.word	0x20000182
 800adc0:	20000192 	.word	0x20000192

0800adc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	4613      	mov	r3, r2
 800add0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800add2:	2300      	movs	r3, #0
 800add4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800add6:	2300      	movs	r3, #0
 800add8:	75fb      	strb	r3, [r7, #23]
 800adda:	e027      	b.n	800ae2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	0f1b      	lsrs	r3, r3, #28
 800ade0:	2b09      	cmp	r3, #9
 800ade2:	d80b      	bhi.n	800adfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	0f1b      	lsrs	r3, r3, #28
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	7dfb      	ldrb	r3, [r7, #23]
 800adec:	005b      	lsls	r3, r3, #1
 800adee:	4619      	mov	r1, r3
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	440b      	add	r3, r1
 800adf4:	3230      	adds	r2, #48	; 0x30
 800adf6:	b2d2      	uxtb	r2, r2
 800adf8:	701a      	strb	r2, [r3, #0]
 800adfa:	e00a      	b.n	800ae12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	0f1b      	lsrs	r3, r3, #28
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	7dfb      	ldrb	r3, [r7, #23]
 800ae04:	005b      	lsls	r3, r3, #1
 800ae06:	4619      	mov	r1, r3
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	440b      	add	r3, r1
 800ae0c:	3237      	adds	r2, #55	; 0x37
 800ae0e:	b2d2      	uxtb	r2, r2
 800ae10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	011b      	lsls	r3, r3, #4
 800ae16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ae18:	7dfb      	ldrb	r3, [r7, #23]
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	4413      	add	r3, r2
 800ae22:	2200      	movs	r2, #0
 800ae24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	75fb      	strb	r3, [r7, #23]
 800ae2c:	7dfa      	ldrb	r2, [r7, #23]
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d3d3      	bcc.n	800addc <IntToUnicode+0x18>
  }
}
 800ae34:	bf00      	nop
 800ae36:	bf00      	nop
 800ae38:	371c      	adds	r7, #28
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bc80      	pop	{r7}
 800ae3e:	4770      	bx	lr

0800ae40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a0d      	ldr	r2, [pc, #52]	; (800ae84 <HAL_PCD_MspInit+0x44>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d113      	bne.n	800ae7a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae52:	4b0d      	ldr	r3, [pc, #52]	; (800ae88 <HAL_PCD_MspInit+0x48>)
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	4a0c      	ldr	r2, [pc, #48]	; (800ae88 <HAL_PCD_MspInit+0x48>)
 800ae58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae5c:	61d3      	str	r3, [r2, #28]
 800ae5e:	4b0a      	ldr	r3, [pc, #40]	; (800ae88 <HAL_PCD_MspInit+0x48>)
 800ae60:	69db      	ldr	r3, [r3, #28]
 800ae62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae66:	60fb      	str	r3, [r7, #12]
 800ae68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	2014      	movs	r0, #20
 800ae70:	f7f7 fe8d 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ae74:	2014      	movs	r0, #20
 800ae76:	f7f7 fea6 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ae7a:	bf00      	nop
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	40005c00 	.word	0x40005c00
 800ae88:	40021000 	.word	0x40021000

0800ae8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f7fe fdb5 	bl	8009a12 <USBD_LL_SetupStage>
}
 800aea8:	bf00      	nop
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800aec2:	78fa      	ldrb	r2, [r7, #3]
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	4613      	mov	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	440b      	add	r3, r1
 800aed0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	78fb      	ldrb	r3, [r7, #3]
 800aed8:	4619      	mov	r1, r3
 800aeda:	f7fe fde7 	bl	8009aac <USBD_LL_DataOutStage>
}
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	460b      	mov	r3, r1
 800aef0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800aef8:	78fa      	ldrb	r2, [r7, #3]
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	4613      	mov	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	00db      	lsls	r3, r3, #3
 800af04:	440b      	add	r3, r1
 800af06:	333c      	adds	r3, #60	; 0x3c
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	78fb      	ldrb	r3, [r7, #3]
 800af0c:	4619      	mov	r1, r3
 800af0e:	f7fe fe3e 	bl	8009b8e <USBD_LL_DataInStage>
}
 800af12:	bf00      	nop
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b082      	sub	sp, #8
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fe ff4e 	bl	8009dca <USBD_LL_SOF>
}
 800af2e:	bf00      	nop
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b084      	sub	sp, #16
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af3e:	2301      	movs	r3, #1
 800af40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d001      	beq.n	800af4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800af4a:	f7f6 feeb 	bl	8001d24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800af54:	7bfa      	ldrb	r2, [r7, #15]
 800af56:	4611      	mov	r1, r2
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fe fefe 	bl	8009d5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800af64:	4618      	mov	r0, r3
 800af66:	f7fe feb7 	bl	8009cd8 <USBD_LL_Reset>
}
 800af6a:	bf00      	nop
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
	...

0800af74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800af82:	4618      	mov	r0, r3
 800af84:	f7fe fef8 	bl	8009d78 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	699b      	ldr	r3, [r3, #24]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d005      	beq.n	800af9c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af90:	4b04      	ldr	r3, [pc, #16]	; (800afa4 <HAL_PCD_SuspendCallback+0x30>)
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	4a03      	ldr	r2, [pc, #12]	; (800afa4 <HAL_PCD_SuspendCallback+0x30>)
 800af96:	f043 0306 	orr.w	r3, r3, #6
 800af9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	e000ed00 	.word	0xe000ed00

0800afa8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe fef2 	bl	8009da0 <USBD_LL_Resume>
}
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800afcc:	4a28      	ldr	r2, [pc, #160]	; (800b070 <USBD_LL_Init+0xac>)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a26      	ldr	r2, [pc, #152]	; (800b070 <USBD_LL_Init+0xac>)
 800afd8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800afdc:	4b24      	ldr	r3, [pc, #144]	; (800b070 <USBD_LL_Init+0xac>)
 800afde:	4a25      	ldr	r2, [pc, #148]	; (800b074 <USBD_LL_Init+0xb0>)
 800afe0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800afe2:	4b23      	ldr	r3, [pc, #140]	; (800b070 <USBD_LL_Init+0xac>)
 800afe4:	2208      	movs	r2, #8
 800afe6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800afe8:	4b21      	ldr	r3, [pc, #132]	; (800b070 <USBD_LL_Init+0xac>)
 800afea:	2202      	movs	r2, #2
 800afec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800afee:	4b20      	ldr	r3, [pc, #128]	; (800b070 <USBD_LL_Init+0xac>)
 800aff0:	2200      	movs	r2, #0
 800aff2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aff4:	4b1e      	ldr	r3, [pc, #120]	; (800b070 <USBD_LL_Init+0xac>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800affa:	4b1d      	ldr	r3, [pc, #116]	; (800b070 <USBD_LL_Init+0xac>)
 800affc:	2200      	movs	r2, #0
 800affe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b000:	481b      	ldr	r0, [pc, #108]	; (800b070 <USBD_LL_Init+0xac>)
 800b002:	f7f8 fd71 	bl	8003ae8 <HAL_PCD_Init>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b00c:	f7f6 fe8a 	bl	8001d24 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b016:	2318      	movs	r3, #24
 800b018:	2200      	movs	r2, #0
 800b01a:	2100      	movs	r1, #0
 800b01c:	f7fa fa90 	bl	8005540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b026:	2358      	movs	r3, #88	; 0x58
 800b028:	2200      	movs	r2, #0
 800b02a:	2180      	movs	r1, #128	; 0x80
 800b02c:	f7fa fa88 	bl	8005540 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b036:	23c0      	movs	r3, #192	; 0xc0
 800b038:	2200      	movs	r2, #0
 800b03a:	2181      	movs	r1, #129	; 0x81
 800b03c:	f7fa fa80 	bl	8005540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b046:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b04a:	2200      	movs	r2, #0
 800b04c:	2101      	movs	r1, #1
 800b04e:	f7fa fa77 	bl	8005540 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b05c:	2200      	movs	r2, #0
 800b05e:	2182      	movs	r1, #130	; 0x82
 800b060:	f7fa fa6e 	bl	8005540 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	20001110 	.word	0x20001110
 800b074:	40005c00 	.word	0x40005c00

0800b078 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b08e:	4618      	mov	r0, r3
 800b090:	f7f8 fe29 	bl	8003ce6 <HAL_PCD_Start>
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b098:	7bfb      	ldrb	r3, [r7, #15]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 f94e 	bl	800b33c <USBD_Get_USB_Status>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	4608      	mov	r0, r1
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	4603      	mov	r3, r0
 800b0be:	70fb      	strb	r3, [r7, #3]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	70bb      	strb	r3, [r7, #2]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b0d6:	78bb      	ldrb	r3, [r7, #2]
 800b0d8:	883a      	ldrh	r2, [r7, #0]
 800b0da:	78f9      	ldrb	r1, [r7, #3]
 800b0dc:	f7f8 ff7e 	bl	8003fdc <HAL_PCD_EP_Open>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 f928 	bl	800b33c <USBD_Get_USB_Status>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b084      	sub	sp, #16
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	460b      	mov	r3, r1
 800b104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b106:	2300      	movs	r3, #0
 800b108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b114:	78fa      	ldrb	r2, [r7, #3]
 800b116:	4611      	mov	r1, r2
 800b118:	4618      	mov	r0, r3
 800b11a:	f7f8 ffbc 	bl	8004096 <HAL_PCD_EP_Close>
 800b11e:	4603      	mov	r3, r0
 800b120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b122:	7bfb      	ldrb	r3, [r7, #15]
 800b124:	4618      	mov	r0, r3
 800b126:	f000 f909 	bl	800b33c <USBD_Get_USB_Status>
 800b12a:	4603      	mov	r3, r0
 800b12c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	460b      	mov	r3, r1
 800b142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b148:	2300      	movs	r3, #0
 800b14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b152:	78fa      	ldrb	r2, [r7, #3]
 800b154:	4611      	mov	r1, r2
 800b156:	4618      	mov	r0, r3
 800b158:	f7f9 f864 	bl	8004224 <HAL_PCD_EP_SetStall>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	4618      	mov	r0, r3
 800b164:	f000 f8ea 	bl	800b33c <USBD_Get_USB_Status>
 800b168:	4603      	mov	r3, r0
 800b16a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b084      	sub	sp, #16
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	460b      	mov	r3, r1
 800b180:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b186:	2300      	movs	r3, #0
 800b188:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b190:	78fa      	ldrb	r2, [r7, #3]
 800b192:	4611      	mov	r1, r2
 800b194:	4618      	mov	r0, r3
 800b196:	f7f9 f8a5 	bl	80042e4 <HAL_PCD_EP_ClrStall>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 f8cb 	bl	800b33c <USBD_Get_USB_Status>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	da0c      	bge.n	800b1ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1d0:	78fb      	ldrb	r3, [r7, #3]
 800b1d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1d6:	68f9      	ldr	r1, [r7, #12]
 800b1d8:	1c5a      	adds	r2, r3, #1
 800b1da:	4613      	mov	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4413      	add	r3, r2
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	440b      	add	r3, r1
 800b1e4:	3302      	adds	r3, #2
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	e00b      	b.n	800b202 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1ea:	78fb      	ldrb	r3, [r7, #3]
 800b1ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1f0:	68f9      	ldr	r1, [r7, #12]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4413      	add	r3, r2
 800b1f8:	00db      	lsls	r3, r3, #3
 800b1fa:	440b      	add	r3, r1
 800b1fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b200:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b202:	4618      	mov	r0, r3
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	bc80      	pop	{r7}
 800b20a:	4770      	bx	lr

0800b20c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	460b      	mov	r3, r1
 800b216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b218:	2300      	movs	r3, #0
 800b21a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b21c:	2300      	movs	r3, #0
 800b21e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b226:	78fa      	ldrb	r2, [r7, #3]
 800b228:	4611      	mov	r1, r2
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7f8 feb1 	bl	8003f92 <HAL_PCD_SetAddress>
 800b230:	4603      	mov	r3, r0
 800b232:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b234:	7bfb      	ldrb	r3, [r7, #15]
 800b236:	4618      	mov	r0, r3
 800b238:	f000 f880 	bl	800b33c <USBD_Get_USB_Status>
 800b23c:	4603      	mov	r3, r0
 800b23e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b240:	7bbb      	ldrb	r3, [r7, #14]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b086      	sub	sp, #24
 800b24e:	af00      	add	r7, sp, #0
 800b250:	60f8      	str	r0, [r7, #12]
 800b252:	607a      	str	r2, [r7, #4]
 800b254:	461a      	mov	r2, r3
 800b256:	460b      	mov	r3, r1
 800b258:	72fb      	strb	r3, [r7, #11]
 800b25a:	4613      	mov	r3, r2
 800b25c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b262:	2300      	movs	r3, #0
 800b264:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b26c:	893b      	ldrh	r3, [r7, #8]
 800b26e:	7af9      	ldrb	r1, [r7, #11]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	f7f8 ffa0 	bl	80041b6 <HAL_PCD_EP_Transmit>
 800b276:	4603      	mov	r3, r0
 800b278:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b27a:	7dfb      	ldrb	r3, [r7, #23]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 f85d 	bl	800b33c <USBD_Get_USB_Status>
 800b282:	4603      	mov	r3, r0
 800b284:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b286:	7dbb      	ldrb	r3, [r7, #22]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3718      	adds	r7, #24
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	607a      	str	r2, [r7, #4]
 800b29a:	461a      	mov	r2, r3
 800b29c:	460b      	mov	r3, r1
 800b29e:	72fb      	strb	r3, [r7, #11]
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b2b2:	893b      	ldrh	r3, [r7, #8]
 800b2b4:	7af9      	ldrb	r1, [r7, #11]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	f7f8 ff35 	bl	8004126 <HAL_PCD_EP_Receive>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f000 f83a 	bl	800b33c <USBD_Get_USB_Status>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3718      	adds	r7, #24
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b082      	sub	sp, #8
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	460b      	mov	r3, r1
 800b2e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2e8:	78fa      	ldrb	r2, [r7, #3]
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7f8 ff4b 	bl	8004188 <HAL_PCD_EP_GetRxCount>
 800b2f2:	4603      	mov	r3, r0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b304:	4b02      	ldr	r3, [pc, #8]	; (800b310 <USBD_static_malloc+0x14>)
}
 800b306:	4618      	mov	r0, r3
 800b308:	370c      	adds	r7, #12
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bc80      	pop	{r7}
 800b30e:	4770      	bx	lr
 800b310:	20001400 	.word	0x20001400

0800b314 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]

}
 800b31c:	bf00      	nop
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	bc80      	pop	{r7}
 800b324:	4770      	bx	lr

0800b326 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	460b      	mov	r3, r1
 800b330:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b332:	bf00      	nop
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	bc80      	pop	{r7}
 800b33a:	4770      	bx	lr

0800b33c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
 800b342:	4603      	mov	r3, r0
 800b344:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	2b03      	cmp	r3, #3
 800b34e:	d817      	bhi.n	800b380 <USBD_Get_USB_Status+0x44>
 800b350:	a201      	add	r2, pc, #4	; (adr r2, 800b358 <USBD_Get_USB_Status+0x1c>)
 800b352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b356:	bf00      	nop
 800b358:	0800b369 	.word	0x0800b369
 800b35c:	0800b36f 	.word	0x0800b36f
 800b360:	0800b375 	.word	0x0800b375
 800b364:	0800b37b 	.word	0x0800b37b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b368:	2300      	movs	r3, #0
 800b36a:	73fb      	strb	r3, [r7, #15]
    break;
 800b36c:	e00b      	b.n	800b386 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b36e:	2302      	movs	r3, #2
 800b370:	73fb      	strb	r3, [r7, #15]
    break;
 800b372:	e008      	b.n	800b386 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b374:	2301      	movs	r3, #1
 800b376:	73fb      	strb	r3, [r7, #15]
    break;
 800b378:	e005      	b.n	800b386 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b37a:	2302      	movs	r3, #2
 800b37c:	73fb      	strb	r3, [r7, #15]
    break;
 800b37e:	e002      	b.n	800b386 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b380:	2302      	movs	r3, #2
 800b382:	73fb      	strb	r3, [r7, #15]
    break;
 800b384:	bf00      	nop
  }
  return usb_status;
 800b386:	7bfb      	ldrb	r3, [r7, #15]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bc80      	pop	{r7}
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop

0800b394 <atoi>:
 800b394:	220a      	movs	r2, #10
 800b396:	2100      	movs	r1, #0
 800b398:	f000 b87e 	b.w	800b498 <strtol>

0800b39c <_strtol_l.constprop.0>:
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a2:	4686      	mov	lr, r0
 800b3a4:	4690      	mov	r8, r2
 800b3a6:	d001      	beq.n	800b3ac <_strtol_l.constprop.0+0x10>
 800b3a8:	2b24      	cmp	r3, #36	; 0x24
 800b3aa:	d906      	bls.n	800b3ba <_strtol_l.constprop.0+0x1e>
 800b3ac:	f000 f8da 	bl	800b564 <__errno>
 800b3b0:	2316      	movs	r3, #22
 800b3b2:	6003      	str	r3, [r0, #0]
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ba:	460d      	mov	r5, r1
 800b3bc:	4835      	ldr	r0, [pc, #212]	; (800b494 <_strtol_l.constprop.0+0xf8>)
 800b3be:	462a      	mov	r2, r5
 800b3c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3c4:	5d06      	ldrb	r6, [r0, r4]
 800b3c6:	f016 0608 	ands.w	r6, r6, #8
 800b3ca:	d1f8      	bne.n	800b3be <_strtol_l.constprop.0+0x22>
 800b3cc:	2c2d      	cmp	r4, #45	; 0x2d
 800b3ce:	d12e      	bne.n	800b42e <_strtol_l.constprop.0+0x92>
 800b3d0:	2601      	movs	r6, #1
 800b3d2:	782c      	ldrb	r4, [r5, #0]
 800b3d4:	1c95      	adds	r5, r2, #2
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d057      	beq.n	800b48a <_strtol_l.constprop.0+0xee>
 800b3da:	2b10      	cmp	r3, #16
 800b3dc:	d109      	bne.n	800b3f2 <_strtol_l.constprop.0+0x56>
 800b3de:	2c30      	cmp	r4, #48	; 0x30
 800b3e0:	d107      	bne.n	800b3f2 <_strtol_l.constprop.0+0x56>
 800b3e2:	782a      	ldrb	r2, [r5, #0]
 800b3e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b3e8:	2a58      	cmp	r2, #88	; 0x58
 800b3ea:	d149      	bne.n	800b480 <_strtol_l.constprop.0+0xe4>
 800b3ec:	2310      	movs	r3, #16
 800b3ee:	786c      	ldrb	r4, [r5, #1]
 800b3f0:	3502      	adds	r5, #2
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800b3f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b3fc:	fbbc f9f3 	udiv	r9, ip, r3
 800b400:	4610      	mov	r0, r2
 800b402:	fb03 ca19 	mls	sl, r3, r9, ip
 800b406:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b40a:	2f09      	cmp	r7, #9
 800b40c:	d814      	bhi.n	800b438 <_strtol_l.constprop.0+0x9c>
 800b40e:	463c      	mov	r4, r7
 800b410:	42a3      	cmp	r3, r4
 800b412:	dd20      	ble.n	800b456 <_strtol_l.constprop.0+0xba>
 800b414:	1c57      	adds	r7, r2, #1
 800b416:	d007      	beq.n	800b428 <_strtol_l.constprop.0+0x8c>
 800b418:	4581      	cmp	r9, r0
 800b41a:	d319      	bcc.n	800b450 <_strtol_l.constprop.0+0xb4>
 800b41c:	d101      	bne.n	800b422 <_strtol_l.constprop.0+0x86>
 800b41e:	45a2      	cmp	sl, r4
 800b420:	db16      	blt.n	800b450 <_strtol_l.constprop.0+0xb4>
 800b422:	2201      	movs	r2, #1
 800b424:	fb00 4003 	mla	r0, r0, r3, r4
 800b428:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b42c:	e7eb      	b.n	800b406 <_strtol_l.constprop.0+0x6a>
 800b42e:	2c2b      	cmp	r4, #43	; 0x2b
 800b430:	bf04      	itt	eq
 800b432:	782c      	ldrbeq	r4, [r5, #0]
 800b434:	1c95      	addeq	r5, r2, #2
 800b436:	e7ce      	b.n	800b3d6 <_strtol_l.constprop.0+0x3a>
 800b438:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b43c:	2f19      	cmp	r7, #25
 800b43e:	d801      	bhi.n	800b444 <_strtol_l.constprop.0+0xa8>
 800b440:	3c37      	subs	r4, #55	; 0x37
 800b442:	e7e5      	b.n	800b410 <_strtol_l.constprop.0+0x74>
 800b444:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b448:	2f19      	cmp	r7, #25
 800b44a:	d804      	bhi.n	800b456 <_strtol_l.constprop.0+0xba>
 800b44c:	3c57      	subs	r4, #87	; 0x57
 800b44e:	e7df      	b.n	800b410 <_strtol_l.constprop.0+0x74>
 800b450:	f04f 32ff 	mov.w	r2, #4294967295
 800b454:	e7e8      	b.n	800b428 <_strtol_l.constprop.0+0x8c>
 800b456:	1c53      	adds	r3, r2, #1
 800b458:	d108      	bne.n	800b46c <_strtol_l.constprop.0+0xd0>
 800b45a:	2322      	movs	r3, #34	; 0x22
 800b45c:	4660      	mov	r0, ip
 800b45e:	f8ce 3000 	str.w	r3, [lr]
 800b462:	f1b8 0f00 	cmp.w	r8, #0
 800b466:	d0a6      	beq.n	800b3b6 <_strtol_l.constprop.0+0x1a>
 800b468:	1e69      	subs	r1, r5, #1
 800b46a:	e006      	b.n	800b47a <_strtol_l.constprop.0+0xde>
 800b46c:	b106      	cbz	r6, 800b470 <_strtol_l.constprop.0+0xd4>
 800b46e:	4240      	negs	r0, r0
 800b470:	f1b8 0f00 	cmp.w	r8, #0
 800b474:	d09f      	beq.n	800b3b6 <_strtol_l.constprop.0+0x1a>
 800b476:	2a00      	cmp	r2, #0
 800b478:	d1f6      	bne.n	800b468 <_strtol_l.constprop.0+0xcc>
 800b47a:	f8c8 1000 	str.w	r1, [r8]
 800b47e:	e79a      	b.n	800b3b6 <_strtol_l.constprop.0+0x1a>
 800b480:	2430      	movs	r4, #48	; 0x30
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1b5      	bne.n	800b3f2 <_strtol_l.constprop.0+0x56>
 800b486:	2308      	movs	r3, #8
 800b488:	e7b3      	b.n	800b3f2 <_strtol_l.constprop.0+0x56>
 800b48a:	2c30      	cmp	r4, #48	; 0x30
 800b48c:	d0a9      	beq.n	800b3e2 <_strtol_l.constprop.0+0x46>
 800b48e:	230a      	movs	r3, #10
 800b490:	e7af      	b.n	800b3f2 <_strtol_l.constprop.0+0x56>
 800b492:	bf00      	nop
 800b494:	0800c21f 	.word	0x0800c21f

0800b498 <strtol>:
 800b498:	4613      	mov	r3, r2
 800b49a:	460a      	mov	r2, r1
 800b49c:	4601      	mov	r1, r0
 800b49e:	4802      	ldr	r0, [pc, #8]	; (800b4a8 <strtol+0x10>)
 800b4a0:	6800      	ldr	r0, [r0, #0]
 800b4a2:	f7ff bf7b 	b.w	800b39c <_strtol_l.constprop.0>
 800b4a6:	bf00      	nop
 800b4a8:	200001e8 	.word	0x200001e8

0800b4ac <sniprintf>:
 800b4ac:	b40c      	push	{r2, r3}
 800b4ae:	b530      	push	{r4, r5, lr}
 800b4b0:	4b17      	ldr	r3, [pc, #92]	; (800b510 <sniprintf+0x64>)
 800b4b2:	1e0c      	subs	r4, r1, #0
 800b4b4:	681d      	ldr	r5, [r3, #0]
 800b4b6:	b09d      	sub	sp, #116	; 0x74
 800b4b8:	da08      	bge.n	800b4cc <sniprintf+0x20>
 800b4ba:	238b      	movs	r3, #139	; 0x8b
 800b4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c0:	602b      	str	r3, [r5, #0]
 800b4c2:	b01d      	add	sp, #116	; 0x74
 800b4c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4c8:	b002      	add	sp, #8
 800b4ca:	4770      	bx	lr
 800b4cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b4d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b4d4:	bf0c      	ite	eq
 800b4d6:	4623      	moveq	r3, r4
 800b4d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b4dc:	9304      	str	r3, [sp, #16]
 800b4de:	9307      	str	r3, [sp, #28]
 800b4e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4e4:	9002      	str	r0, [sp, #8]
 800b4e6:	9006      	str	r0, [sp, #24]
 800b4e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	ab21      	add	r3, sp, #132	; 0x84
 800b4f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b4f2:	a902      	add	r1, sp, #8
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	f000 f9bd 	bl	800b874 <_svfiprintf_r>
 800b4fa:	1c43      	adds	r3, r0, #1
 800b4fc:	bfbc      	itt	lt
 800b4fe:	238b      	movlt	r3, #139	; 0x8b
 800b500:	602b      	strlt	r3, [r5, #0]
 800b502:	2c00      	cmp	r4, #0
 800b504:	d0dd      	beq.n	800b4c2 <sniprintf+0x16>
 800b506:	2200      	movs	r2, #0
 800b508:	9b02      	ldr	r3, [sp, #8]
 800b50a:	701a      	strb	r2, [r3, #0]
 800b50c:	e7d9      	b.n	800b4c2 <sniprintf+0x16>
 800b50e:	bf00      	nop
 800b510:	200001e8 	.word	0x200001e8

0800b514 <siprintf>:
 800b514:	b40e      	push	{r1, r2, r3}
 800b516:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b51a:	b500      	push	{lr}
 800b51c:	b09c      	sub	sp, #112	; 0x70
 800b51e:	ab1d      	add	r3, sp, #116	; 0x74
 800b520:	9002      	str	r0, [sp, #8]
 800b522:	9006      	str	r0, [sp, #24]
 800b524:	9107      	str	r1, [sp, #28]
 800b526:	9104      	str	r1, [sp, #16]
 800b528:	4808      	ldr	r0, [pc, #32]	; (800b54c <siprintf+0x38>)
 800b52a:	4909      	ldr	r1, [pc, #36]	; (800b550 <siprintf+0x3c>)
 800b52c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b530:	9105      	str	r1, [sp, #20]
 800b532:	6800      	ldr	r0, [r0, #0]
 800b534:	a902      	add	r1, sp, #8
 800b536:	9301      	str	r3, [sp, #4]
 800b538:	f000 f99c 	bl	800b874 <_svfiprintf_r>
 800b53c:	2200      	movs	r2, #0
 800b53e:	9b02      	ldr	r3, [sp, #8]
 800b540:	701a      	strb	r2, [r3, #0]
 800b542:	b01c      	add	sp, #112	; 0x70
 800b544:	f85d eb04 	ldr.w	lr, [sp], #4
 800b548:	b003      	add	sp, #12
 800b54a:	4770      	bx	lr
 800b54c:	200001e8 	.word	0x200001e8
 800b550:	ffff0208 	.word	0xffff0208

0800b554 <memset>:
 800b554:	4603      	mov	r3, r0
 800b556:	4402      	add	r2, r0
 800b558:	4293      	cmp	r3, r2
 800b55a:	d100      	bne.n	800b55e <memset+0xa>
 800b55c:	4770      	bx	lr
 800b55e:	f803 1b01 	strb.w	r1, [r3], #1
 800b562:	e7f9      	b.n	800b558 <memset+0x4>

0800b564 <__errno>:
 800b564:	4b01      	ldr	r3, [pc, #4]	; (800b56c <__errno+0x8>)
 800b566:	6818      	ldr	r0, [r3, #0]
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	200001e8 	.word	0x200001e8

0800b570 <__libc_init_array>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	2600      	movs	r6, #0
 800b574:	4d0c      	ldr	r5, [pc, #48]	; (800b5a8 <__libc_init_array+0x38>)
 800b576:	4c0d      	ldr	r4, [pc, #52]	; (800b5ac <__libc_init_array+0x3c>)
 800b578:	1b64      	subs	r4, r4, r5
 800b57a:	10a4      	asrs	r4, r4, #2
 800b57c:	42a6      	cmp	r6, r4
 800b57e:	d109      	bne.n	800b594 <__libc_init_array+0x24>
 800b580:	f000 fc7a 	bl	800be78 <_init>
 800b584:	2600      	movs	r6, #0
 800b586:	4d0a      	ldr	r5, [pc, #40]	; (800b5b0 <__libc_init_array+0x40>)
 800b588:	4c0a      	ldr	r4, [pc, #40]	; (800b5b4 <__libc_init_array+0x44>)
 800b58a:	1b64      	subs	r4, r4, r5
 800b58c:	10a4      	asrs	r4, r4, #2
 800b58e:	42a6      	cmp	r6, r4
 800b590:	d105      	bne.n	800b59e <__libc_init_array+0x2e>
 800b592:	bd70      	pop	{r4, r5, r6, pc}
 800b594:	f855 3b04 	ldr.w	r3, [r5], #4
 800b598:	4798      	blx	r3
 800b59a:	3601      	adds	r6, #1
 800b59c:	e7ee      	b.n	800b57c <__libc_init_array+0xc>
 800b59e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5a2:	4798      	blx	r3
 800b5a4:	3601      	adds	r6, #1
 800b5a6:	e7f2      	b.n	800b58e <__libc_init_array+0x1e>
 800b5a8:	0800c354 	.word	0x0800c354
 800b5ac:	0800c354 	.word	0x0800c354
 800b5b0:	0800c354 	.word	0x0800c354
 800b5b4:	0800c358 	.word	0x0800c358

0800b5b8 <__retarget_lock_acquire_recursive>:
 800b5b8:	4770      	bx	lr

0800b5ba <__retarget_lock_release_recursive>:
 800b5ba:	4770      	bx	lr

0800b5bc <memcpy>:
 800b5bc:	440a      	add	r2, r1
 800b5be:	4291      	cmp	r1, r2
 800b5c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5c4:	d100      	bne.n	800b5c8 <memcpy+0xc>
 800b5c6:	4770      	bx	lr
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ce:	4291      	cmp	r1, r2
 800b5d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5d4:	d1f9      	bne.n	800b5ca <memcpy+0xe>
 800b5d6:	bd10      	pop	{r4, pc}

0800b5d8 <_free_r>:
 800b5d8:	b538      	push	{r3, r4, r5, lr}
 800b5da:	4605      	mov	r5, r0
 800b5dc:	2900      	cmp	r1, #0
 800b5de:	d040      	beq.n	800b662 <_free_r+0x8a>
 800b5e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5e4:	1f0c      	subs	r4, r1, #4
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	bfb8      	it	lt
 800b5ea:	18e4      	addlt	r4, r4, r3
 800b5ec:	f000 f8dc 	bl	800b7a8 <__malloc_lock>
 800b5f0:	4a1c      	ldr	r2, [pc, #112]	; (800b664 <_free_r+0x8c>)
 800b5f2:	6813      	ldr	r3, [r2, #0]
 800b5f4:	b933      	cbnz	r3, 800b604 <_free_r+0x2c>
 800b5f6:	6063      	str	r3, [r4, #4]
 800b5f8:	6014      	str	r4, [r2, #0]
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b600:	f000 b8d8 	b.w	800b7b4 <__malloc_unlock>
 800b604:	42a3      	cmp	r3, r4
 800b606:	d908      	bls.n	800b61a <_free_r+0x42>
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	1821      	adds	r1, r4, r0
 800b60c:	428b      	cmp	r3, r1
 800b60e:	bf01      	itttt	eq
 800b610:	6819      	ldreq	r1, [r3, #0]
 800b612:	685b      	ldreq	r3, [r3, #4]
 800b614:	1809      	addeq	r1, r1, r0
 800b616:	6021      	streq	r1, [r4, #0]
 800b618:	e7ed      	b.n	800b5f6 <_free_r+0x1e>
 800b61a:	461a      	mov	r2, r3
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	b10b      	cbz	r3, 800b624 <_free_r+0x4c>
 800b620:	42a3      	cmp	r3, r4
 800b622:	d9fa      	bls.n	800b61a <_free_r+0x42>
 800b624:	6811      	ldr	r1, [r2, #0]
 800b626:	1850      	adds	r0, r2, r1
 800b628:	42a0      	cmp	r0, r4
 800b62a:	d10b      	bne.n	800b644 <_free_r+0x6c>
 800b62c:	6820      	ldr	r0, [r4, #0]
 800b62e:	4401      	add	r1, r0
 800b630:	1850      	adds	r0, r2, r1
 800b632:	4283      	cmp	r3, r0
 800b634:	6011      	str	r1, [r2, #0]
 800b636:	d1e0      	bne.n	800b5fa <_free_r+0x22>
 800b638:	6818      	ldr	r0, [r3, #0]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	4408      	add	r0, r1
 800b63e:	6010      	str	r0, [r2, #0]
 800b640:	6053      	str	r3, [r2, #4]
 800b642:	e7da      	b.n	800b5fa <_free_r+0x22>
 800b644:	d902      	bls.n	800b64c <_free_r+0x74>
 800b646:	230c      	movs	r3, #12
 800b648:	602b      	str	r3, [r5, #0]
 800b64a:	e7d6      	b.n	800b5fa <_free_r+0x22>
 800b64c:	6820      	ldr	r0, [r4, #0]
 800b64e:	1821      	adds	r1, r4, r0
 800b650:	428b      	cmp	r3, r1
 800b652:	bf01      	itttt	eq
 800b654:	6819      	ldreq	r1, [r3, #0]
 800b656:	685b      	ldreq	r3, [r3, #4]
 800b658:	1809      	addeq	r1, r1, r0
 800b65a:	6021      	streq	r1, [r4, #0]
 800b65c:	6063      	str	r3, [r4, #4]
 800b65e:	6054      	str	r4, [r2, #4]
 800b660:	e7cb      	b.n	800b5fa <_free_r+0x22>
 800b662:	bd38      	pop	{r3, r4, r5, pc}
 800b664:	20001760 	.word	0x20001760

0800b668 <sbrk_aligned>:
 800b668:	b570      	push	{r4, r5, r6, lr}
 800b66a:	4e0e      	ldr	r6, [pc, #56]	; (800b6a4 <sbrk_aligned+0x3c>)
 800b66c:	460c      	mov	r4, r1
 800b66e:	6831      	ldr	r1, [r6, #0]
 800b670:	4605      	mov	r5, r0
 800b672:	b911      	cbnz	r1, 800b67a <sbrk_aligned+0x12>
 800b674:	f000 fbaa 	bl	800bdcc <_sbrk_r>
 800b678:	6030      	str	r0, [r6, #0]
 800b67a:	4621      	mov	r1, r4
 800b67c:	4628      	mov	r0, r5
 800b67e:	f000 fba5 	bl	800bdcc <_sbrk_r>
 800b682:	1c43      	adds	r3, r0, #1
 800b684:	d00a      	beq.n	800b69c <sbrk_aligned+0x34>
 800b686:	1cc4      	adds	r4, r0, #3
 800b688:	f024 0403 	bic.w	r4, r4, #3
 800b68c:	42a0      	cmp	r0, r4
 800b68e:	d007      	beq.n	800b6a0 <sbrk_aligned+0x38>
 800b690:	1a21      	subs	r1, r4, r0
 800b692:	4628      	mov	r0, r5
 800b694:	f000 fb9a 	bl	800bdcc <_sbrk_r>
 800b698:	3001      	adds	r0, #1
 800b69a:	d101      	bne.n	800b6a0 <sbrk_aligned+0x38>
 800b69c:	f04f 34ff 	mov.w	r4, #4294967295
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	20001764 	.word	0x20001764

0800b6a8 <_malloc_r>:
 800b6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ac:	1ccd      	adds	r5, r1, #3
 800b6ae:	f025 0503 	bic.w	r5, r5, #3
 800b6b2:	3508      	adds	r5, #8
 800b6b4:	2d0c      	cmp	r5, #12
 800b6b6:	bf38      	it	cc
 800b6b8:	250c      	movcc	r5, #12
 800b6ba:	2d00      	cmp	r5, #0
 800b6bc:	4607      	mov	r7, r0
 800b6be:	db01      	blt.n	800b6c4 <_malloc_r+0x1c>
 800b6c0:	42a9      	cmp	r1, r5
 800b6c2:	d905      	bls.n	800b6d0 <_malloc_r+0x28>
 800b6c4:	230c      	movs	r3, #12
 800b6c6:	2600      	movs	r6, #0
 800b6c8:	603b      	str	r3, [r7, #0]
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b7a4 <_malloc_r+0xfc>
 800b6d4:	f000 f868 	bl	800b7a8 <__malloc_lock>
 800b6d8:	f8d8 3000 	ldr.w	r3, [r8]
 800b6dc:	461c      	mov	r4, r3
 800b6de:	bb5c      	cbnz	r4, 800b738 <_malloc_r+0x90>
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	f7ff ffc0 	bl	800b668 <sbrk_aligned>
 800b6e8:	1c43      	adds	r3, r0, #1
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	d155      	bne.n	800b79a <_malloc_r+0xf2>
 800b6ee:	f8d8 4000 	ldr.w	r4, [r8]
 800b6f2:	4626      	mov	r6, r4
 800b6f4:	2e00      	cmp	r6, #0
 800b6f6:	d145      	bne.n	800b784 <_malloc_r+0xdc>
 800b6f8:	2c00      	cmp	r4, #0
 800b6fa:	d048      	beq.n	800b78e <_malloc_r+0xe6>
 800b6fc:	6823      	ldr	r3, [r4, #0]
 800b6fe:	4631      	mov	r1, r6
 800b700:	4638      	mov	r0, r7
 800b702:	eb04 0903 	add.w	r9, r4, r3
 800b706:	f000 fb61 	bl	800bdcc <_sbrk_r>
 800b70a:	4581      	cmp	r9, r0
 800b70c:	d13f      	bne.n	800b78e <_malloc_r+0xe6>
 800b70e:	6821      	ldr	r1, [r4, #0]
 800b710:	4638      	mov	r0, r7
 800b712:	1a6d      	subs	r5, r5, r1
 800b714:	4629      	mov	r1, r5
 800b716:	f7ff ffa7 	bl	800b668 <sbrk_aligned>
 800b71a:	3001      	adds	r0, #1
 800b71c:	d037      	beq.n	800b78e <_malloc_r+0xe6>
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	442b      	add	r3, r5
 800b722:	6023      	str	r3, [r4, #0]
 800b724:	f8d8 3000 	ldr.w	r3, [r8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d038      	beq.n	800b79e <_malloc_r+0xf6>
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	42a2      	cmp	r2, r4
 800b730:	d12b      	bne.n	800b78a <_malloc_r+0xe2>
 800b732:	2200      	movs	r2, #0
 800b734:	605a      	str	r2, [r3, #4]
 800b736:	e00f      	b.n	800b758 <_malloc_r+0xb0>
 800b738:	6822      	ldr	r2, [r4, #0]
 800b73a:	1b52      	subs	r2, r2, r5
 800b73c:	d41f      	bmi.n	800b77e <_malloc_r+0xd6>
 800b73e:	2a0b      	cmp	r2, #11
 800b740:	d917      	bls.n	800b772 <_malloc_r+0xca>
 800b742:	1961      	adds	r1, r4, r5
 800b744:	42a3      	cmp	r3, r4
 800b746:	6025      	str	r5, [r4, #0]
 800b748:	bf18      	it	ne
 800b74a:	6059      	strne	r1, [r3, #4]
 800b74c:	6863      	ldr	r3, [r4, #4]
 800b74e:	bf08      	it	eq
 800b750:	f8c8 1000 	streq.w	r1, [r8]
 800b754:	5162      	str	r2, [r4, r5]
 800b756:	604b      	str	r3, [r1, #4]
 800b758:	4638      	mov	r0, r7
 800b75a:	f104 060b 	add.w	r6, r4, #11
 800b75e:	f000 f829 	bl	800b7b4 <__malloc_unlock>
 800b762:	f026 0607 	bic.w	r6, r6, #7
 800b766:	1d23      	adds	r3, r4, #4
 800b768:	1af2      	subs	r2, r6, r3
 800b76a:	d0ae      	beq.n	800b6ca <_malloc_r+0x22>
 800b76c:	1b9b      	subs	r3, r3, r6
 800b76e:	50a3      	str	r3, [r4, r2]
 800b770:	e7ab      	b.n	800b6ca <_malloc_r+0x22>
 800b772:	42a3      	cmp	r3, r4
 800b774:	6862      	ldr	r2, [r4, #4]
 800b776:	d1dd      	bne.n	800b734 <_malloc_r+0x8c>
 800b778:	f8c8 2000 	str.w	r2, [r8]
 800b77c:	e7ec      	b.n	800b758 <_malloc_r+0xb0>
 800b77e:	4623      	mov	r3, r4
 800b780:	6864      	ldr	r4, [r4, #4]
 800b782:	e7ac      	b.n	800b6de <_malloc_r+0x36>
 800b784:	4634      	mov	r4, r6
 800b786:	6876      	ldr	r6, [r6, #4]
 800b788:	e7b4      	b.n	800b6f4 <_malloc_r+0x4c>
 800b78a:	4613      	mov	r3, r2
 800b78c:	e7cc      	b.n	800b728 <_malloc_r+0x80>
 800b78e:	230c      	movs	r3, #12
 800b790:	4638      	mov	r0, r7
 800b792:	603b      	str	r3, [r7, #0]
 800b794:	f000 f80e 	bl	800b7b4 <__malloc_unlock>
 800b798:	e797      	b.n	800b6ca <_malloc_r+0x22>
 800b79a:	6025      	str	r5, [r4, #0]
 800b79c:	e7dc      	b.n	800b758 <_malloc_r+0xb0>
 800b79e:	605b      	str	r3, [r3, #4]
 800b7a0:	deff      	udf	#255	; 0xff
 800b7a2:	bf00      	nop
 800b7a4:	20001760 	.word	0x20001760

0800b7a8 <__malloc_lock>:
 800b7a8:	4801      	ldr	r0, [pc, #4]	; (800b7b0 <__malloc_lock+0x8>)
 800b7aa:	f7ff bf05 	b.w	800b5b8 <__retarget_lock_acquire_recursive>
 800b7ae:	bf00      	nop
 800b7b0:	2000175c 	.word	0x2000175c

0800b7b4 <__malloc_unlock>:
 800b7b4:	4801      	ldr	r0, [pc, #4]	; (800b7bc <__malloc_unlock+0x8>)
 800b7b6:	f7ff bf00 	b.w	800b5ba <__retarget_lock_release_recursive>
 800b7ba:	bf00      	nop
 800b7bc:	2000175c 	.word	0x2000175c

0800b7c0 <__ssputs_r>:
 800b7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7c4:	461f      	mov	r7, r3
 800b7c6:	688e      	ldr	r6, [r1, #8]
 800b7c8:	4682      	mov	sl, r0
 800b7ca:	42be      	cmp	r6, r7
 800b7cc:	460c      	mov	r4, r1
 800b7ce:	4690      	mov	r8, r2
 800b7d0:	680b      	ldr	r3, [r1, #0]
 800b7d2:	d82c      	bhi.n	800b82e <__ssputs_r+0x6e>
 800b7d4:	898a      	ldrh	r2, [r1, #12]
 800b7d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b7da:	d026      	beq.n	800b82a <__ssputs_r+0x6a>
 800b7dc:	6965      	ldr	r5, [r4, #20]
 800b7de:	6909      	ldr	r1, [r1, #16]
 800b7e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7e4:	eba3 0901 	sub.w	r9, r3, r1
 800b7e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7ec:	1c7b      	adds	r3, r7, #1
 800b7ee:	444b      	add	r3, r9
 800b7f0:	106d      	asrs	r5, r5, #1
 800b7f2:	429d      	cmp	r5, r3
 800b7f4:	bf38      	it	cc
 800b7f6:	461d      	movcc	r5, r3
 800b7f8:	0553      	lsls	r3, r2, #21
 800b7fa:	d527      	bpl.n	800b84c <__ssputs_r+0x8c>
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	f7ff ff53 	bl	800b6a8 <_malloc_r>
 800b802:	4606      	mov	r6, r0
 800b804:	b360      	cbz	r0, 800b860 <__ssputs_r+0xa0>
 800b806:	464a      	mov	r2, r9
 800b808:	6921      	ldr	r1, [r4, #16]
 800b80a:	f7ff fed7 	bl	800b5bc <memcpy>
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b818:	81a3      	strh	r3, [r4, #12]
 800b81a:	6126      	str	r6, [r4, #16]
 800b81c:	444e      	add	r6, r9
 800b81e:	6026      	str	r6, [r4, #0]
 800b820:	463e      	mov	r6, r7
 800b822:	6165      	str	r5, [r4, #20]
 800b824:	eba5 0509 	sub.w	r5, r5, r9
 800b828:	60a5      	str	r5, [r4, #8]
 800b82a:	42be      	cmp	r6, r7
 800b82c:	d900      	bls.n	800b830 <__ssputs_r+0x70>
 800b82e:	463e      	mov	r6, r7
 800b830:	4632      	mov	r2, r6
 800b832:	4641      	mov	r1, r8
 800b834:	6820      	ldr	r0, [r4, #0]
 800b836:	f000 faaf 	bl	800bd98 <memmove>
 800b83a:	2000      	movs	r0, #0
 800b83c:	68a3      	ldr	r3, [r4, #8]
 800b83e:	1b9b      	subs	r3, r3, r6
 800b840:	60a3      	str	r3, [r4, #8]
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	4433      	add	r3, r6
 800b846:	6023      	str	r3, [r4, #0]
 800b848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b84c:	462a      	mov	r2, r5
 800b84e:	f000 fadb 	bl	800be08 <_realloc_r>
 800b852:	4606      	mov	r6, r0
 800b854:	2800      	cmp	r0, #0
 800b856:	d1e0      	bne.n	800b81a <__ssputs_r+0x5a>
 800b858:	4650      	mov	r0, sl
 800b85a:	6921      	ldr	r1, [r4, #16]
 800b85c:	f7ff febc 	bl	800b5d8 <_free_r>
 800b860:	230c      	movs	r3, #12
 800b862:	f8ca 3000 	str.w	r3, [sl]
 800b866:	89a3      	ldrh	r3, [r4, #12]
 800b868:	f04f 30ff 	mov.w	r0, #4294967295
 800b86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b870:	81a3      	strh	r3, [r4, #12]
 800b872:	e7e9      	b.n	800b848 <__ssputs_r+0x88>

0800b874 <_svfiprintf_r>:
 800b874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b878:	4698      	mov	r8, r3
 800b87a:	898b      	ldrh	r3, [r1, #12]
 800b87c:	4607      	mov	r7, r0
 800b87e:	061b      	lsls	r3, r3, #24
 800b880:	460d      	mov	r5, r1
 800b882:	4614      	mov	r4, r2
 800b884:	b09d      	sub	sp, #116	; 0x74
 800b886:	d50e      	bpl.n	800b8a6 <_svfiprintf_r+0x32>
 800b888:	690b      	ldr	r3, [r1, #16]
 800b88a:	b963      	cbnz	r3, 800b8a6 <_svfiprintf_r+0x32>
 800b88c:	2140      	movs	r1, #64	; 0x40
 800b88e:	f7ff ff0b 	bl	800b6a8 <_malloc_r>
 800b892:	6028      	str	r0, [r5, #0]
 800b894:	6128      	str	r0, [r5, #16]
 800b896:	b920      	cbnz	r0, 800b8a2 <_svfiprintf_r+0x2e>
 800b898:	230c      	movs	r3, #12
 800b89a:	603b      	str	r3, [r7, #0]
 800b89c:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a0:	e0d0      	b.n	800ba44 <_svfiprintf_r+0x1d0>
 800b8a2:	2340      	movs	r3, #64	; 0x40
 800b8a4:	616b      	str	r3, [r5, #20]
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b8aa:	2320      	movs	r3, #32
 800b8ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8b0:	2330      	movs	r3, #48	; 0x30
 800b8b2:	f04f 0901 	mov.w	r9, #1
 800b8b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8ba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ba5c <_svfiprintf_r+0x1e8>
 800b8be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8c2:	4623      	mov	r3, r4
 800b8c4:	469a      	mov	sl, r3
 800b8c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8ca:	b10a      	cbz	r2, 800b8d0 <_svfiprintf_r+0x5c>
 800b8cc:	2a25      	cmp	r2, #37	; 0x25
 800b8ce:	d1f9      	bne.n	800b8c4 <_svfiprintf_r+0x50>
 800b8d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b8d4:	d00b      	beq.n	800b8ee <_svfiprintf_r+0x7a>
 800b8d6:	465b      	mov	r3, fp
 800b8d8:	4622      	mov	r2, r4
 800b8da:	4629      	mov	r1, r5
 800b8dc:	4638      	mov	r0, r7
 800b8de:	f7ff ff6f 	bl	800b7c0 <__ssputs_r>
 800b8e2:	3001      	adds	r0, #1
 800b8e4:	f000 80a9 	beq.w	800ba3a <_svfiprintf_r+0x1c6>
 800b8e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8ea:	445a      	add	r2, fp
 800b8ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b8ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f000 80a1 	beq.w	800ba3a <_svfiprintf_r+0x1c6>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b8fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b902:	f10a 0a01 	add.w	sl, sl, #1
 800b906:	9304      	str	r3, [sp, #16]
 800b908:	9307      	str	r3, [sp, #28]
 800b90a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b90e:	931a      	str	r3, [sp, #104]	; 0x68
 800b910:	4654      	mov	r4, sl
 800b912:	2205      	movs	r2, #5
 800b914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b918:	4850      	ldr	r0, [pc, #320]	; (800ba5c <_svfiprintf_r+0x1e8>)
 800b91a:	f000 fa67 	bl	800bdec <memchr>
 800b91e:	9a04      	ldr	r2, [sp, #16]
 800b920:	b9d8      	cbnz	r0, 800b95a <_svfiprintf_r+0xe6>
 800b922:	06d0      	lsls	r0, r2, #27
 800b924:	bf44      	itt	mi
 800b926:	2320      	movmi	r3, #32
 800b928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b92c:	0711      	lsls	r1, r2, #28
 800b92e:	bf44      	itt	mi
 800b930:	232b      	movmi	r3, #43	; 0x2b
 800b932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b936:	f89a 3000 	ldrb.w	r3, [sl]
 800b93a:	2b2a      	cmp	r3, #42	; 0x2a
 800b93c:	d015      	beq.n	800b96a <_svfiprintf_r+0xf6>
 800b93e:	4654      	mov	r4, sl
 800b940:	2000      	movs	r0, #0
 800b942:	f04f 0c0a 	mov.w	ip, #10
 800b946:	9a07      	ldr	r2, [sp, #28]
 800b948:	4621      	mov	r1, r4
 800b94a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b94e:	3b30      	subs	r3, #48	; 0x30
 800b950:	2b09      	cmp	r3, #9
 800b952:	d94d      	bls.n	800b9f0 <_svfiprintf_r+0x17c>
 800b954:	b1b0      	cbz	r0, 800b984 <_svfiprintf_r+0x110>
 800b956:	9207      	str	r2, [sp, #28]
 800b958:	e014      	b.n	800b984 <_svfiprintf_r+0x110>
 800b95a:	eba0 0308 	sub.w	r3, r0, r8
 800b95e:	fa09 f303 	lsl.w	r3, r9, r3
 800b962:	4313      	orrs	r3, r2
 800b964:	46a2      	mov	sl, r4
 800b966:	9304      	str	r3, [sp, #16]
 800b968:	e7d2      	b.n	800b910 <_svfiprintf_r+0x9c>
 800b96a:	9b03      	ldr	r3, [sp, #12]
 800b96c:	1d19      	adds	r1, r3, #4
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	9103      	str	r1, [sp, #12]
 800b972:	2b00      	cmp	r3, #0
 800b974:	bfbb      	ittet	lt
 800b976:	425b      	neglt	r3, r3
 800b978:	f042 0202 	orrlt.w	r2, r2, #2
 800b97c:	9307      	strge	r3, [sp, #28]
 800b97e:	9307      	strlt	r3, [sp, #28]
 800b980:	bfb8      	it	lt
 800b982:	9204      	strlt	r2, [sp, #16]
 800b984:	7823      	ldrb	r3, [r4, #0]
 800b986:	2b2e      	cmp	r3, #46	; 0x2e
 800b988:	d10c      	bne.n	800b9a4 <_svfiprintf_r+0x130>
 800b98a:	7863      	ldrb	r3, [r4, #1]
 800b98c:	2b2a      	cmp	r3, #42	; 0x2a
 800b98e:	d134      	bne.n	800b9fa <_svfiprintf_r+0x186>
 800b990:	9b03      	ldr	r3, [sp, #12]
 800b992:	3402      	adds	r4, #2
 800b994:	1d1a      	adds	r2, r3, #4
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	9203      	str	r2, [sp, #12]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	bfb8      	it	lt
 800b99e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9a2:	9305      	str	r3, [sp, #20]
 800b9a4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ba60 <_svfiprintf_r+0x1ec>
 800b9a8:	2203      	movs	r2, #3
 800b9aa:	4650      	mov	r0, sl
 800b9ac:	7821      	ldrb	r1, [r4, #0]
 800b9ae:	f000 fa1d 	bl	800bdec <memchr>
 800b9b2:	b138      	cbz	r0, 800b9c4 <_svfiprintf_r+0x150>
 800b9b4:	2240      	movs	r2, #64	; 0x40
 800b9b6:	9b04      	ldr	r3, [sp, #16]
 800b9b8:	eba0 000a 	sub.w	r0, r0, sl
 800b9bc:	4082      	lsls	r2, r0
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	3401      	adds	r4, #1
 800b9c2:	9304      	str	r3, [sp, #16]
 800b9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c8:	2206      	movs	r2, #6
 800b9ca:	4826      	ldr	r0, [pc, #152]	; (800ba64 <_svfiprintf_r+0x1f0>)
 800b9cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9d0:	f000 fa0c 	bl	800bdec <memchr>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d038      	beq.n	800ba4a <_svfiprintf_r+0x1d6>
 800b9d8:	4b23      	ldr	r3, [pc, #140]	; (800ba68 <_svfiprintf_r+0x1f4>)
 800b9da:	bb1b      	cbnz	r3, 800ba24 <_svfiprintf_r+0x1b0>
 800b9dc:	9b03      	ldr	r3, [sp, #12]
 800b9de:	3307      	adds	r3, #7
 800b9e0:	f023 0307 	bic.w	r3, r3, #7
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	9303      	str	r3, [sp, #12]
 800b9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ea:	4433      	add	r3, r6
 800b9ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ee:	e768      	b.n	800b8c2 <_svfiprintf_r+0x4e>
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9f8:	e7a6      	b.n	800b948 <_svfiprintf_r+0xd4>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	f04f 0c0a 	mov.w	ip, #10
 800ba00:	4619      	mov	r1, r3
 800ba02:	3401      	adds	r4, #1
 800ba04:	9305      	str	r3, [sp, #20]
 800ba06:	4620      	mov	r0, r4
 800ba08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba0c:	3a30      	subs	r2, #48	; 0x30
 800ba0e:	2a09      	cmp	r2, #9
 800ba10:	d903      	bls.n	800ba1a <_svfiprintf_r+0x1a6>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d0c6      	beq.n	800b9a4 <_svfiprintf_r+0x130>
 800ba16:	9105      	str	r1, [sp, #20]
 800ba18:	e7c4      	b.n	800b9a4 <_svfiprintf_r+0x130>
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba22:	e7f0      	b.n	800ba06 <_svfiprintf_r+0x192>
 800ba24:	ab03      	add	r3, sp, #12
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	462a      	mov	r2, r5
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	4b0f      	ldr	r3, [pc, #60]	; (800ba6c <_svfiprintf_r+0x1f8>)
 800ba2e:	a904      	add	r1, sp, #16
 800ba30:	f3af 8000 	nop.w
 800ba34:	1c42      	adds	r2, r0, #1
 800ba36:	4606      	mov	r6, r0
 800ba38:	d1d6      	bne.n	800b9e8 <_svfiprintf_r+0x174>
 800ba3a:	89ab      	ldrh	r3, [r5, #12]
 800ba3c:	065b      	lsls	r3, r3, #25
 800ba3e:	f53f af2d 	bmi.w	800b89c <_svfiprintf_r+0x28>
 800ba42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba44:	b01d      	add	sp, #116	; 0x74
 800ba46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba4a:	ab03      	add	r3, sp, #12
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	462a      	mov	r2, r5
 800ba50:	4638      	mov	r0, r7
 800ba52:	4b06      	ldr	r3, [pc, #24]	; (800ba6c <_svfiprintf_r+0x1f8>)
 800ba54:	a904      	add	r1, sp, #16
 800ba56:	f000 f87d 	bl	800bb54 <_printf_i>
 800ba5a:	e7eb      	b.n	800ba34 <_svfiprintf_r+0x1c0>
 800ba5c:	0800c31f 	.word	0x0800c31f
 800ba60:	0800c325 	.word	0x0800c325
 800ba64:	0800c329 	.word	0x0800c329
 800ba68:	00000000 	.word	0x00000000
 800ba6c:	0800b7c1 	.word	0x0800b7c1

0800ba70 <_printf_common>:
 800ba70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba74:	4616      	mov	r6, r2
 800ba76:	4699      	mov	r9, r3
 800ba78:	688a      	ldr	r2, [r1, #8]
 800ba7a:	690b      	ldr	r3, [r1, #16]
 800ba7c:	4607      	mov	r7, r0
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	bfb8      	it	lt
 800ba82:	4613      	movlt	r3, r2
 800ba84:	6033      	str	r3, [r6, #0]
 800ba86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba8a:	460c      	mov	r4, r1
 800ba8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba90:	b10a      	cbz	r2, 800ba96 <_printf_common+0x26>
 800ba92:	3301      	adds	r3, #1
 800ba94:	6033      	str	r3, [r6, #0]
 800ba96:	6823      	ldr	r3, [r4, #0]
 800ba98:	0699      	lsls	r1, r3, #26
 800ba9a:	bf42      	ittt	mi
 800ba9c:	6833      	ldrmi	r3, [r6, #0]
 800ba9e:	3302      	addmi	r3, #2
 800baa0:	6033      	strmi	r3, [r6, #0]
 800baa2:	6825      	ldr	r5, [r4, #0]
 800baa4:	f015 0506 	ands.w	r5, r5, #6
 800baa8:	d106      	bne.n	800bab8 <_printf_common+0x48>
 800baaa:	f104 0a19 	add.w	sl, r4, #25
 800baae:	68e3      	ldr	r3, [r4, #12]
 800bab0:	6832      	ldr	r2, [r6, #0]
 800bab2:	1a9b      	subs	r3, r3, r2
 800bab4:	42ab      	cmp	r3, r5
 800bab6:	dc2b      	bgt.n	800bb10 <_printf_common+0xa0>
 800bab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800babc:	1e13      	subs	r3, r2, #0
 800babe:	6822      	ldr	r2, [r4, #0]
 800bac0:	bf18      	it	ne
 800bac2:	2301      	movne	r3, #1
 800bac4:	0692      	lsls	r2, r2, #26
 800bac6:	d430      	bmi.n	800bb2a <_printf_common+0xba>
 800bac8:	4649      	mov	r1, r9
 800baca:	4638      	mov	r0, r7
 800bacc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bad0:	47c0      	blx	r8
 800bad2:	3001      	adds	r0, #1
 800bad4:	d023      	beq.n	800bb1e <_printf_common+0xae>
 800bad6:	6823      	ldr	r3, [r4, #0]
 800bad8:	6922      	ldr	r2, [r4, #16]
 800bada:	f003 0306 	and.w	r3, r3, #6
 800bade:	2b04      	cmp	r3, #4
 800bae0:	bf14      	ite	ne
 800bae2:	2500      	movne	r5, #0
 800bae4:	6833      	ldreq	r3, [r6, #0]
 800bae6:	f04f 0600 	mov.w	r6, #0
 800baea:	bf08      	it	eq
 800baec:	68e5      	ldreq	r5, [r4, #12]
 800baee:	f104 041a 	add.w	r4, r4, #26
 800baf2:	bf08      	it	eq
 800baf4:	1aed      	subeq	r5, r5, r3
 800baf6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bafa:	bf08      	it	eq
 800bafc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb00:	4293      	cmp	r3, r2
 800bb02:	bfc4      	itt	gt
 800bb04:	1a9b      	subgt	r3, r3, r2
 800bb06:	18ed      	addgt	r5, r5, r3
 800bb08:	42b5      	cmp	r5, r6
 800bb0a:	d11a      	bne.n	800bb42 <_printf_common+0xd2>
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	e008      	b.n	800bb22 <_printf_common+0xb2>
 800bb10:	2301      	movs	r3, #1
 800bb12:	4652      	mov	r2, sl
 800bb14:	4649      	mov	r1, r9
 800bb16:	4638      	mov	r0, r7
 800bb18:	47c0      	blx	r8
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	d103      	bne.n	800bb26 <_printf_common+0xb6>
 800bb1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb26:	3501      	adds	r5, #1
 800bb28:	e7c1      	b.n	800baae <_printf_common+0x3e>
 800bb2a:	2030      	movs	r0, #48	; 0x30
 800bb2c:	18e1      	adds	r1, r4, r3
 800bb2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb32:	1c5a      	adds	r2, r3, #1
 800bb34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb38:	4422      	add	r2, r4
 800bb3a:	3302      	adds	r3, #2
 800bb3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb40:	e7c2      	b.n	800bac8 <_printf_common+0x58>
 800bb42:	2301      	movs	r3, #1
 800bb44:	4622      	mov	r2, r4
 800bb46:	4649      	mov	r1, r9
 800bb48:	4638      	mov	r0, r7
 800bb4a:	47c0      	blx	r8
 800bb4c:	3001      	adds	r0, #1
 800bb4e:	d0e6      	beq.n	800bb1e <_printf_common+0xae>
 800bb50:	3601      	adds	r6, #1
 800bb52:	e7d9      	b.n	800bb08 <_printf_common+0x98>

0800bb54 <_printf_i>:
 800bb54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb58:	7e0f      	ldrb	r7, [r1, #24]
 800bb5a:	4691      	mov	r9, r2
 800bb5c:	2f78      	cmp	r7, #120	; 0x78
 800bb5e:	4680      	mov	r8, r0
 800bb60:	460c      	mov	r4, r1
 800bb62:	469a      	mov	sl, r3
 800bb64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb6a:	d807      	bhi.n	800bb7c <_printf_i+0x28>
 800bb6c:	2f62      	cmp	r7, #98	; 0x62
 800bb6e:	d80a      	bhi.n	800bb86 <_printf_i+0x32>
 800bb70:	2f00      	cmp	r7, #0
 800bb72:	f000 80d5 	beq.w	800bd20 <_printf_i+0x1cc>
 800bb76:	2f58      	cmp	r7, #88	; 0x58
 800bb78:	f000 80c1 	beq.w	800bcfe <_printf_i+0x1aa>
 800bb7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb84:	e03a      	b.n	800bbfc <_printf_i+0xa8>
 800bb86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb8a:	2b15      	cmp	r3, #21
 800bb8c:	d8f6      	bhi.n	800bb7c <_printf_i+0x28>
 800bb8e:	a101      	add	r1, pc, #4	; (adr r1, 800bb94 <_printf_i+0x40>)
 800bb90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb94:	0800bbed 	.word	0x0800bbed
 800bb98:	0800bc01 	.word	0x0800bc01
 800bb9c:	0800bb7d 	.word	0x0800bb7d
 800bba0:	0800bb7d 	.word	0x0800bb7d
 800bba4:	0800bb7d 	.word	0x0800bb7d
 800bba8:	0800bb7d 	.word	0x0800bb7d
 800bbac:	0800bc01 	.word	0x0800bc01
 800bbb0:	0800bb7d 	.word	0x0800bb7d
 800bbb4:	0800bb7d 	.word	0x0800bb7d
 800bbb8:	0800bb7d 	.word	0x0800bb7d
 800bbbc:	0800bb7d 	.word	0x0800bb7d
 800bbc0:	0800bd07 	.word	0x0800bd07
 800bbc4:	0800bc2d 	.word	0x0800bc2d
 800bbc8:	0800bcc1 	.word	0x0800bcc1
 800bbcc:	0800bb7d 	.word	0x0800bb7d
 800bbd0:	0800bb7d 	.word	0x0800bb7d
 800bbd4:	0800bd29 	.word	0x0800bd29
 800bbd8:	0800bb7d 	.word	0x0800bb7d
 800bbdc:	0800bc2d 	.word	0x0800bc2d
 800bbe0:	0800bb7d 	.word	0x0800bb7d
 800bbe4:	0800bb7d 	.word	0x0800bb7d
 800bbe8:	0800bcc9 	.word	0x0800bcc9
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	1d1a      	adds	r2, r3, #4
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	602a      	str	r2, [r5, #0]
 800bbf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e0a0      	b.n	800bd42 <_printf_i+0x1ee>
 800bc00:	6820      	ldr	r0, [r4, #0]
 800bc02:	682b      	ldr	r3, [r5, #0]
 800bc04:	0607      	lsls	r7, r0, #24
 800bc06:	f103 0104 	add.w	r1, r3, #4
 800bc0a:	6029      	str	r1, [r5, #0]
 800bc0c:	d501      	bpl.n	800bc12 <_printf_i+0xbe>
 800bc0e:	681e      	ldr	r6, [r3, #0]
 800bc10:	e003      	b.n	800bc1a <_printf_i+0xc6>
 800bc12:	0646      	lsls	r6, r0, #25
 800bc14:	d5fb      	bpl.n	800bc0e <_printf_i+0xba>
 800bc16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bc1a:	2e00      	cmp	r6, #0
 800bc1c:	da03      	bge.n	800bc26 <_printf_i+0xd2>
 800bc1e:	232d      	movs	r3, #45	; 0x2d
 800bc20:	4276      	negs	r6, r6
 800bc22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc26:	230a      	movs	r3, #10
 800bc28:	4859      	ldr	r0, [pc, #356]	; (800bd90 <_printf_i+0x23c>)
 800bc2a:	e012      	b.n	800bc52 <_printf_i+0xfe>
 800bc2c:	682b      	ldr	r3, [r5, #0]
 800bc2e:	6820      	ldr	r0, [r4, #0]
 800bc30:	1d19      	adds	r1, r3, #4
 800bc32:	6029      	str	r1, [r5, #0]
 800bc34:	0605      	lsls	r5, r0, #24
 800bc36:	d501      	bpl.n	800bc3c <_printf_i+0xe8>
 800bc38:	681e      	ldr	r6, [r3, #0]
 800bc3a:	e002      	b.n	800bc42 <_printf_i+0xee>
 800bc3c:	0641      	lsls	r1, r0, #25
 800bc3e:	d5fb      	bpl.n	800bc38 <_printf_i+0xe4>
 800bc40:	881e      	ldrh	r6, [r3, #0]
 800bc42:	2f6f      	cmp	r7, #111	; 0x6f
 800bc44:	bf0c      	ite	eq
 800bc46:	2308      	moveq	r3, #8
 800bc48:	230a      	movne	r3, #10
 800bc4a:	4851      	ldr	r0, [pc, #324]	; (800bd90 <_printf_i+0x23c>)
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc52:	6865      	ldr	r5, [r4, #4]
 800bc54:	2d00      	cmp	r5, #0
 800bc56:	bfa8      	it	ge
 800bc58:	6821      	ldrge	r1, [r4, #0]
 800bc5a:	60a5      	str	r5, [r4, #8]
 800bc5c:	bfa4      	itt	ge
 800bc5e:	f021 0104 	bicge.w	r1, r1, #4
 800bc62:	6021      	strge	r1, [r4, #0]
 800bc64:	b90e      	cbnz	r6, 800bc6a <_printf_i+0x116>
 800bc66:	2d00      	cmp	r5, #0
 800bc68:	d04b      	beq.n	800bd02 <_printf_i+0x1ae>
 800bc6a:	4615      	mov	r5, r2
 800bc6c:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc70:	fb03 6711 	mls	r7, r3, r1, r6
 800bc74:	5dc7      	ldrb	r7, [r0, r7]
 800bc76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc7a:	4637      	mov	r7, r6
 800bc7c:	42bb      	cmp	r3, r7
 800bc7e:	460e      	mov	r6, r1
 800bc80:	d9f4      	bls.n	800bc6c <_printf_i+0x118>
 800bc82:	2b08      	cmp	r3, #8
 800bc84:	d10b      	bne.n	800bc9e <_printf_i+0x14a>
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	07de      	lsls	r6, r3, #31
 800bc8a:	d508      	bpl.n	800bc9e <_printf_i+0x14a>
 800bc8c:	6923      	ldr	r3, [r4, #16]
 800bc8e:	6861      	ldr	r1, [r4, #4]
 800bc90:	4299      	cmp	r1, r3
 800bc92:	bfde      	ittt	le
 800bc94:	2330      	movle	r3, #48	; 0x30
 800bc96:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc9e:	1b52      	subs	r2, r2, r5
 800bca0:	6122      	str	r2, [r4, #16]
 800bca2:	464b      	mov	r3, r9
 800bca4:	4621      	mov	r1, r4
 800bca6:	4640      	mov	r0, r8
 800bca8:	f8cd a000 	str.w	sl, [sp]
 800bcac:	aa03      	add	r2, sp, #12
 800bcae:	f7ff fedf 	bl	800ba70 <_printf_common>
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	d14a      	bne.n	800bd4c <_printf_i+0x1f8>
 800bcb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcba:	b004      	add	sp, #16
 800bcbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	f043 0320 	orr.w	r3, r3, #32
 800bcc6:	6023      	str	r3, [r4, #0]
 800bcc8:	2778      	movs	r7, #120	; 0x78
 800bcca:	4832      	ldr	r0, [pc, #200]	; (800bd94 <_printf_i+0x240>)
 800bccc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	6829      	ldr	r1, [r5, #0]
 800bcd4:	061f      	lsls	r7, r3, #24
 800bcd6:	f851 6b04 	ldr.w	r6, [r1], #4
 800bcda:	d402      	bmi.n	800bce2 <_printf_i+0x18e>
 800bcdc:	065f      	lsls	r7, r3, #25
 800bcde:	bf48      	it	mi
 800bce0:	b2b6      	uxthmi	r6, r6
 800bce2:	07df      	lsls	r7, r3, #31
 800bce4:	bf48      	it	mi
 800bce6:	f043 0320 	orrmi.w	r3, r3, #32
 800bcea:	6029      	str	r1, [r5, #0]
 800bcec:	bf48      	it	mi
 800bcee:	6023      	strmi	r3, [r4, #0]
 800bcf0:	b91e      	cbnz	r6, 800bcfa <_printf_i+0x1a6>
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	f023 0320 	bic.w	r3, r3, #32
 800bcf8:	6023      	str	r3, [r4, #0]
 800bcfa:	2310      	movs	r3, #16
 800bcfc:	e7a6      	b.n	800bc4c <_printf_i+0xf8>
 800bcfe:	4824      	ldr	r0, [pc, #144]	; (800bd90 <_printf_i+0x23c>)
 800bd00:	e7e4      	b.n	800bccc <_printf_i+0x178>
 800bd02:	4615      	mov	r5, r2
 800bd04:	e7bd      	b.n	800bc82 <_printf_i+0x12e>
 800bd06:	682b      	ldr	r3, [r5, #0]
 800bd08:	6826      	ldr	r6, [r4, #0]
 800bd0a:	1d18      	adds	r0, r3, #4
 800bd0c:	6961      	ldr	r1, [r4, #20]
 800bd0e:	6028      	str	r0, [r5, #0]
 800bd10:	0635      	lsls	r5, r6, #24
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	d501      	bpl.n	800bd1a <_printf_i+0x1c6>
 800bd16:	6019      	str	r1, [r3, #0]
 800bd18:	e002      	b.n	800bd20 <_printf_i+0x1cc>
 800bd1a:	0670      	lsls	r0, r6, #25
 800bd1c:	d5fb      	bpl.n	800bd16 <_printf_i+0x1c2>
 800bd1e:	8019      	strh	r1, [r3, #0]
 800bd20:	2300      	movs	r3, #0
 800bd22:	4615      	mov	r5, r2
 800bd24:	6123      	str	r3, [r4, #16]
 800bd26:	e7bc      	b.n	800bca2 <_printf_i+0x14e>
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	1d1a      	adds	r2, r3, #4
 800bd2e:	602a      	str	r2, [r5, #0]
 800bd30:	681d      	ldr	r5, [r3, #0]
 800bd32:	6862      	ldr	r2, [r4, #4]
 800bd34:	4628      	mov	r0, r5
 800bd36:	f000 f859 	bl	800bdec <memchr>
 800bd3a:	b108      	cbz	r0, 800bd40 <_printf_i+0x1ec>
 800bd3c:	1b40      	subs	r0, r0, r5
 800bd3e:	6060      	str	r0, [r4, #4]
 800bd40:	6863      	ldr	r3, [r4, #4]
 800bd42:	6123      	str	r3, [r4, #16]
 800bd44:	2300      	movs	r3, #0
 800bd46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd4a:	e7aa      	b.n	800bca2 <_printf_i+0x14e>
 800bd4c:	462a      	mov	r2, r5
 800bd4e:	4649      	mov	r1, r9
 800bd50:	4640      	mov	r0, r8
 800bd52:	6923      	ldr	r3, [r4, #16]
 800bd54:	47d0      	blx	sl
 800bd56:	3001      	adds	r0, #1
 800bd58:	d0ad      	beq.n	800bcb6 <_printf_i+0x162>
 800bd5a:	6823      	ldr	r3, [r4, #0]
 800bd5c:	079b      	lsls	r3, r3, #30
 800bd5e:	d413      	bmi.n	800bd88 <_printf_i+0x234>
 800bd60:	68e0      	ldr	r0, [r4, #12]
 800bd62:	9b03      	ldr	r3, [sp, #12]
 800bd64:	4298      	cmp	r0, r3
 800bd66:	bfb8      	it	lt
 800bd68:	4618      	movlt	r0, r3
 800bd6a:	e7a6      	b.n	800bcba <_printf_i+0x166>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	4632      	mov	r2, r6
 800bd70:	4649      	mov	r1, r9
 800bd72:	4640      	mov	r0, r8
 800bd74:	47d0      	blx	sl
 800bd76:	3001      	adds	r0, #1
 800bd78:	d09d      	beq.n	800bcb6 <_printf_i+0x162>
 800bd7a:	3501      	adds	r5, #1
 800bd7c:	68e3      	ldr	r3, [r4, #12]
 800bd7e:	9903      	ldr	r1, [sp, #12]
 800bd80:	1a5b      	subs	r3, r3, r1
 800bd82:	42ab      	cmp	r3, r5
 800bd84:	dcf2      	bgt.n	800bd6c <_printf_i+0x218>
 800bd86:	e7eb      	b.n	800bd60 <_printf_i+0x20c>
 800bd88:	2500      	movs	r5, #0
 800bd8a:	f104 0619 	add.w	r6, r4, #25
 800bd8e:	e7f5      	b.n	800bd7c <_printf_i+0x228>
 800bd90:	0800c330 	.word	0x0800c330
 800bd94:	0800c341 	.word	0x0800c341

0800bd98 <memmove>:
 800bd98:	4288      	cmp	r0, r1
 800bd9a:	b510      	push	{r4, lr}
 800bd9c:	eb01 0402 	add.w	r4, r1, r2
 800bda0:	d902      	bls.n	800bda8 <memmove+0x10>
 800bda2:	4284      	cmp	r4, r0
 800bda4:	4623      	mov	r3, r4
 800bda6:	d807      	bhi.n	800bdb8 <memmove+0x20>
 800bda8:	1e43      	subs	r3, r0, #1
 800bdaa:	42a1      	cmp	r1, r4
 800bdac:	d008      	beq.n	800bdc0 <memmove+0x28>
 800bdae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdb6:	e7f8      	b.n	800bdaa <memmove+0x12>
 800bdb8:	4601      	mov	r1, r0
 800bdba:	4402      	add	r2, r0
 800bdbc:	428a      	cmp	r2, r1
 800bdbe:	d100      	bne.n	800bdc2 <memmove+0x2a>
 800bdc0:	bd10      	pop	{r4, pc}
 800bdc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdca:	e7f7      	b.n	800bdbc <memmove+0x24>

0800bdcc <_sbrk_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	2300      	movs	r3, #0
 800bdd0:	4d05      	ldr	r5, [pc, #20]	; (800bde8 <_sbrk_r+0x1c>)
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	4608      	mov	r0, r1
 800bdd6:	602b      	str	r3, [r5, #0]
 800bdd8:	f7f6 f94e 	bl	8002078 <_sbrk>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_sbrk_r+0x1a>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_sbrk_r+0x1a>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	20001758 	.word	0x20001758

0800bdec <memchr>:
 800bdec:	4603      	mov	r3, r0
 800bdee:	b510      	push	{r4, lr}
 800bdf0:	b2c9      	uxtb	r1, r1
 800bdf2:	4402      	add	r2, r0
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	d101      	bne.n	800bdfe <memchr+0x12>
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	e003      	b.n	800be06 <memchr+0x1a>
 800bdfe:	7804      	ldrb	r4, [r0, #0]
 800be00:	3301      	adds	r3, #1
 800be02:	428c      	cmp	r4, r1
 800be04:	d1f6      	bne.n	800bdf4 <memchr+0x8>
 800be06:	bd10      	pop	{r4, pc}

0800be08 <_realloc_r>:
 800be08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be0c:	4680      	mov	r8, r0
 800be0e:	4614      	mov	r4, r2
 800be10:	460e      	mov	r6, r1
 800be12:	b921      	cbnz	r1, 800be1e <_realloc_r+0x16>
 800be14:	4611      	mov	r1, r2
 800be16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be1a:	f7ff bc45 	b.w	800b6a8 <_malloc_r>
 800be1e:	b92a      	cbnz	r2, 800be2c <_realloc_r+0x24>
 800be20:	f7ff fbda 	bl	800b5d8 <_free_r>
 800be24:	4625      	mov	r5, r4
 800be26:	4628      	mov	r0, r5
 800be28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be2c:	f000 f81b 	bl	800be66 <_malloc_usable_size_r>
 800be30:	4284      	cmp	r4, r0
 800be32:	4607      	mov	r7, r0
 800be34:	d802      	bhi.n	800be3c <_realloc_r+0x34>
 800be36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be3a:	d812      	bhi.n	800be62 <_realloc_r+0x5a>
 800be3c:	4621      	mov	r1, r4
 800be3e:	4640      	mov	r0, r8
 800be40:	f7ff fc32 	bl	800b6a8 <_malloc_r>
 800be44:	4605      	mov	r5, r0
 800be46:	2800      	cmp	r0, #0
 800be48:	d0ed      	beq.n	800be26 <_realloc_r+0x1e>
 800be4a:	42bc      	cmp	r4, r7
 800be4c:	4622      	mov	r2, r4
 800be4e:	4631      	mov	r1, r6
 800be50:	bf28      	it	cs
 800be52:	463a      	movcs	r2, r7
 800be54:	f7ff fbb2 	bl	800b5bc <memcpy>
 800be58:	4631      	mov	r1, r6
 800be5a:	4640      	mov	r0, r8
 800be5c:	f7ff fbbc 	bl	800b5d8 <_free_r>
 800be60:	e7e1      	b.n	800be26 <_realloc_r+0x1e>
 800be62:	4635      	mov	r5, r6
 800be64:	e7df      	b.n	800be26 <_realloc_r+0x1e>

0800be66 <_malloc_usable_size_r>:
 800be66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be6a:	1f18      	subs	r0, r3, #4
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	bfbc      	itt	lt
 800be70:	580b      	ldrlt	r3, [r1, r0]
 800be72:	18c0      	addlt	r0, r0, r3
 800be74:	4770      	bx	lr
	...

0800be78 <_init>:
 800be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7a:	bf00      	nop
 800be7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7e:	bc08      	pop	{r3}
 800be80:	469e      	mov	lr, r3
 800be82:	4770      	bx	lr

0800be84 <_fini>:
 800be84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be86:	bf00      	nop
 800be88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be8a:	bc08      	pop	{r3}
 800be8c:	469e      	mov	lr, r3
 800be8e:	4770      	bx	lr
