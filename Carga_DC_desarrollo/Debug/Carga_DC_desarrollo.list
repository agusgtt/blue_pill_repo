
Carga_DC_desarrollo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d8  080055d8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080055d8  080055d8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055d8  080055d8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d8  080055d8  000155d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080055e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  2000007c  0800565c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  0800565c  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b5f  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aec  00000000  00000000  00032c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00035738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8a  00000000  00000000  000369e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000196f1  00000000  00000000  0003786a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016199  00000000  00000000  00050f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094984  00000000  00000000  000670f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005494  00000000  00000000  000fba78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00100f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	080053e4 	.word	0x080053e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	080053e4 	.word	0x080053e4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_I2C_cmd>:
#define SLAVE_ADDRESS_LCD  0x4e	//0x4E // change this according to ur setup 0x7e

/* Envia comando por LCD ---------------------------------------*/

void LCD_I2C_cmd(char cmd)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f023 030f 	bic.w	r3, r3, #15
 800016c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	011b      	lsls	r3, r3, #4
 8000172:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	f043 030c 	orr.w	r3, r3, #12
 800017a:	b2db      	uxtb	r3, r3
 800017c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800017e:	7bfb      	ldrb	r3, [r7, #15]
 8000180:	f043 0308 	orr.w	r3, r3, #8
 8000184:	b2db      	uxtb	r3, r3
 8000186:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000188:	7bbb      	ldrb	r3, [r7, #14]
 800018a:	f043 030c 	orr.w	r3, r3, #12
 800018e:	b2db      	uxtb	r3, r3
 8000190:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000192:	7bbb      	ldrb	r3, [r7, #14]
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	b2db      	uxtb	r3, r3
 800019a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800019c:	f107 0208 	add.w	r2, r7, #8
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	9300      	str	r3, [sp, #0]
 80001a4:	2304      	movs	r3, #4
 80001a6:	214e      	movs	r1, #78	; 0x4e
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <LCD_I2C_cmd+0x60>)
 80001aa:	f002 fba9 	bl	8002900 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80001ae:	2001      	movs	r0, #1
 80001b0:	f001 fa72 	bl	8001698 <HAL_Delay>
}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	200000c8 	.word	0x200000c8

080001c0 <LCD_I2C_char>:

/* Envia dato por LCD ------------------------------------------*/

void LCD_I2C_char(char data)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	f023 030f 	bic.w	r3, r3, #15
 80001d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	011b      	lsls	r3, r3, #4
 80001d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80001ec:	7bbb      	ldrb	r3, [r7, #14]
 80001ee:	f043 030d 	orr.w	r3, r3, #13
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80001f6:	7bbb      	ldrb	r3, [r7, #14]
 80001f8:	f043 0309 	orr.w	r3, r3, #9
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000200:	f107 0208 	add.w	r2, r7, #8
 8000204:	2364      	movs	r3, #100	; 0x64
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2304      	movs	r3, #4
 800020a:	214e      	movs	r1, #78	; 0x4e
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <LCD_I2C_char+0x60>)
 800020e:	f002 fb77 	bl	8002900 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000212:	2001      	movs	r0, #1
 8000214:	f001 fa40 	bl	8001698 <HAL_Delay>
}
 8000218:	bf00      	nop
 800021a:	3710      	adds	r7, #16
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	200000c8 	.word	0x200000c8

08000224 <LCD_I2C_init>:

/* Inicializa LCD -----------------------------------------------*/

void LCD_I2C_init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	LCD_I2C_cmd(0x02);
 8000228:	2002      	movs	r0, #2
 800022a:	f7ff ff97 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x28);
 800022e:	2028      	movs	r0, #40	; 0x28
 8000230:	f7ff ff94 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x0c);
 8000234:	200c      	movs	r0, #12
 8000236:	f7ff ff91 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x80);
 800023a:	2080      	movs	r0, #128	; 0x80
 800023c:	f7ff ff8e 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_CLEAR);
 8000240:	2001      	movs	r0, #1
 8000242:	f7ff ff8b 	bl	800015c <LCD_I2C_cmd>
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}

0800024a <LCD_I2C_write_text>:

/* Envia cadena de caracteres al LCD -----------------------------*/

void LCD_I2C_write_text(char *str)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
	while (*str) LCD_I2C_char(*str++);
 8000252:	e006      	b.n	8000262 <LCD_I2C_write_text+0x18>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	1c5a      	adds	r2, r3, #1
 8000258:	607a      	str	r2, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ffaf 	bl	80001c0 <LCD_I2C_char>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d1f4      	bne.n	8000254 <LCD_I2C_write_text+0xa>
}
 800026a:	bf00      	nop
 800026c:	bf00      	nop
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <keypad_init>:
GPIO_TypeDef* COL_3_Port = GPIOB;
GPIO_TypeDef* COL_4_Port = GPIOB;


void keypad_init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
  // Configure GPIO pins for keypad matrix
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027a:	463b      	mov	r3, r7
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = ROW_1_Pin | ROW_2_Pin | ROW_3_Pin | ROW_4_Pin;
 8000286:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800028a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800028c:	2300      	movs	r3, #0
 800028e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000290:	2301      	movs	r3, #1
 8000292:	60bb      	str	r3, [r7, #8]
  	  HAL_GPIO_Init(ROW_1_Port, &GPIO_InitStruct);
 8000294:	4b21      	ldr	r3, [pc, #132]	; (800031c <keypad_init+0xa8>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	463a      	mov	r2, r7
 800029a:	4611      	mov	r1, r2
 800029c:	4618      	mov	r0, r3
 800029e:	f002 f807 	bl	80022b0 <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_2_Port, &GPIO_InitStruct);
 80002a2:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <keypad_init+0xac>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	463a      	mov	r2, r7
 80002a8:	4611      	mov	r1, r2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 f800 	bl	80022b0 <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_3_Port, &GPIO_InitStruct);
 80002b0:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <keypad_init+0xb0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	463a      	mov	r2, r7
 80002b6:	4611      	mov	r1, r2
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 fff9 	bl	80022b0 <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_4_Port, &GPIO_InitStruct);
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <keypad_init+0xb4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	463a      	mov	r2, r7
 80002c4:	4611      	mov	r1, r2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fff2 	bl	80022b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = COL_1_Pin | COL_2_Pin | COL_3_Pin | COL_4_Pin;
 80002cc:	f640 4303 	movw	r3, #3075	; 0xc03
 80002d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d6:	2302      	movs	r3, #2
 80002d8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(COL_1_Port, &GPIO_InitStruct);
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <keypad_init+0xb8>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	463a      	mov	r2, r7
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 ffe4 	bl	80022b0 <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_2_Port, &GPIO_InitStruct);
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <keypad_init+0xbc>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	463a      	mov	r2, r7
 80002ee:	4611      	mov	r1, r2
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 ffdd 	bl	80022b0 <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_3_Port, &GPIO_InitStruct);
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <keypad_init+0xc0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	463a      	mov	r2, r7
 80002fc:	4611      	mov	r1, r2
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 ffd6 	bl	80022b0 <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_4_Port, &GPIO_InitStruct);
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <keypad_init+0xc4>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	463a      	mov	r2, r7
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f001 ffcf 	bl	80022b0 <HAL_GPIO_Init>
}
 8000312:	bf00      	nop
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000000 	.word	0x20000000
 8000320:	20000004 	.word	0x20000004
 8000324:	20000008 	.word	0x20000008
 8000328:	2000000c 	.word	0x2000000c
 800032c:	20000010 	.word	0x20000010
 8000330:	20000014 	.word	0x20000014
 8000334:	20000018 	.word	0x20000018
 8000338:	2000001c 	.word	0x2000001c

0800033c <keypad_scan>:
char keypad_scan(void)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b087      	sub	sp, #28
 8000340:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'C'},
 8000342:	4b6f      	ldr	r3, [pc, #444]	; (8000500 <keypad_scan+0x1c4>)
 8000344:	1d3c      	adds	r4, r7, #4
 8000346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'V'},
                     {'7', '8', '9', 'R'},
                     {'D', '0', 'K', 'P'}};

  for(int i = 0; i < 4; i++)
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e0cc      	b.n	80004ec <keypad_scan+0x1b0>
  {
    // Set current column as output and low
    switch(i)
 8000352:	697b      	ldr	r3, [r7, #20]
 8000354:	2b03      	cmp	r3, #3
 8000356:	f200 8087 	bhi.w	8000468 <keypad_scan+0x12c>
 800035a:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <keypad_scan+0x24>)
 800035c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000360:	08000371 	.word	0x08000371
 8000364:	080003af 	.word	0x080003af
 8000368:	080003ed 	.word	0x080003ed
 800036c:	0800042b 	.word	0x0800042b
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 8000370:	4b64      	ldr	r3, [pc, #400]	; (8000504 <keypad_scan+0x1c8>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2200      	movs	r2, #0
 8000376:	2101      	movs	r1, #1
 8000378:	4618      	mov	r0, r3
 800037a:	f002 f934 	bl	80025e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 800037e:	4b62      	ldr	r3, [pc, #392]	; (8000508 <keypad_scan+0x1cc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2201      	movs	r2, #1
 8000384:	2102      	movs	r1, #2
 8000386:	4618      	mov	r0, r3
 8000388:	f002 f92d 	bl	80025e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 800038c:	4b5f      	ldr	r3, [pc, #380]	; (800050c <keypad_scan+0x1d0>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000396:	4618      	mov	r0, r3
 8000398:	f002 f925 	bl	80025e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 800039c:	4b5c      	ldr	r3, [pc, #368]	; (8000510 <keypad_scan+0x1d4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2201      	movs	r2, #1
 80003a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 f91d 	bl	80025e6 <HAL_GPIO_WritePin>
        break;
 80003ac:	e05c      	b.n	8000468 <keypad_scan+0x12c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003ae:	4b55      	ldr	r3, [pc, #340]	; (8000504 <keypad_scan+0x1c8>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2201      	movs	r2, #1
 80003b4:	2101      	movs	r1, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 f915 	bl	80025e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 80003bc:	4b52      	ldr	r3, [pc, #328]	; (8000508 <keypad_scan+0x1cc>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2200      	movs	r2, #0
 80003c2:	2102      	movs	r1, #2
 80003c4:	4618      	mov	r0, r3
 80003c6:	f002 f90e 	bl	80025e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80003ca:	4b50      	ldr	r3, [pc, #320]	; (800050c <keypad_scan+0x1d0>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d4:	4618      	mov	r0, r3
 80003d6:	f002 f906 	bl	80025e6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80003da:	4b4d      	ldr	r3, [pc, #308]	; (8000510 <keypad_scan+0x1d4>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2201      	movs	r2, #1
 80003e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003e4:	4618      	mov	r0, r3
 80003e6:	f002 f8fe 	bl	80025e6 <HAL_GPIO_WritePin>
        break;
 80003ea:	e03d      	b.n	8000468 <keypad_scan+0x12c>

      case 2:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003ec:	4b45      	ldr	r3, [pc, #276]	; (8000504 <keypad_scan+0x1c8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2201      	movs	r2, #1
 80003f2:	2101      	movs	r1, #1
 80003f4:	4618      	mov	r0, r3
 80003f6:	f002 f8f6 	bl	80025e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 80003fa:	4b43      	ldr	r3, [pc, #268]	; (8000508 <keypad_scan+0x1cc>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2201      	movs	r2, #1
 8000400:	2102      	movs	r1, #2
 8000402:	4618      	mov	r0, r3
 8000404:	f002 f8ef 	bl	80025e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 8000408:	4b40      	ldr	r3, [pc, #256]	; (800050c <keypad_scan+0x1d0>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000412:	4618      	mov	r0, r3
 8000414:	f002 f8e7 	bl	80025e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8000418:	4b3d      	ldr	r3, [pc, #244]	; (8000510 <keypad_scan+0x1d4>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000422:	4618      	mov	r0, r3
 8000424:	f002 f8df 	bl	80025e6 <HAL_GPIO_WritePin>
		break;
 8000428:	e01e      	b.n	8000468 <keypad_scan+0x12c>

	  case 3:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 800042a:	4b36      	ldr	r3, [pc, #216]	; (8000504 <keypad_scan+0x1c8>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	2201      	movs	r2, #1
 8000430:	2101      	movs	r1, #1
 8000432:	4618      	mov	r0, r3
 8000434:	f002 f8d7 	bl	80025e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8000438:	4b33      	ldr	r3, [pc, #204]	; (8000508 <keypad_scan+0x1cc>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2201      	movs	r2, #1
 800043e:	2102      	movs	r1, #2
 8000440:	4618      	mov	r0, r3
 8000442:	f002 f8d0 	bl	80025e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8000446:	4b31      	ldr	r3, [pc, #196]	; (800050c <keypad_scan+0x1d0>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2201      	movs	r2, #1
 800044c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000450:	4618      	mov	r0, r3
 8000452:	f002 f8c8 	bl	80025e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 8000456:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <keypad_scan+0x1d4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000460:	4618      	mov	r0, r3
 8000462:	f002 f8c0 	bl	80025e6 <HAL_GPIO_WritePin>
		break;
 8000466:	bf00      	nop
    }
// Read current rows
	if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 8000468:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <keypad_scan+0x1d8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000470:	4618      	mov	r0, r3
 8000472:	f002 f8a1 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d104      	bne.n	8000486 <keypad_scan+0x14a>
	  return keys[0][i];
 800047c:	1d3a      	adds	r2, r7, #4
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	4413      	add	r3, r2
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	e037      	b.n	80004f6 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 8000486:	4b24      	ldr	r3, [pc, #144]	; (8000518 <keypad_scan+0x1dc>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048e:	4618      	mov	r0, r3
 8000490:	f002 f892 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d105      	bne.n	80004a6 <keypad_scan+0x16a>
	  return keys[1][i];
 800049a:	f107 0208 	add.w	r2, r7, #8
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	4413      	add	r3, r2
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	e027      	b.n	80004f6 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 80004a6:	4b1d      	ldr	r3, [pc, #116]	; (800051c <keypad_scan+0x1e0>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 f882 	bl	80025b8 <HAL_GPIO_ReadPin>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d105      	bne.n	80004c6 <keypad_scan+0x18a>
	  return keys[2][i];
 80004ba:	f107 020c 	add.w	r2, r7, #12
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	4413      	add	r3, r2
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	e017      	b.n	80004f6 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 80004c6:	4b16      	ldr	r3, [pc, #88]	; (8000520 <keypad_scan+0x1e4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ce:	4618      	mov	r0, r3
 80004d0:	f002 f872 	bl	80025b8 <HAL_GPIO_ReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d105      	bne.n	80004e6 <keypad_scan+0x1aa>
	  return keys[3][i];
 80004da:	f107 0210 	add.w	r2, r7, #16
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	4413      	add	r3, r2
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	e007      	b.n	80004f6 <keypad_scan+0x1ba>
  for(int i = 0; i < 4; i++)
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	3301      	adds	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	2b03      	cmp	r3, #3
 80004f0:	f77f af2f 	ble.w	8000352 <keypad_scan+0x16>
  }
return 0; // No key pressed
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	371c      	adds	r7, #28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd90      	pop	{r4, r7, pc}
 80004fe:	bf00      	nop
 8000500:	080053fc 	.word	0x080053fc
 8000504:	20000010 	.word	0x20000010
 8000508:	20000014 	.word	0x20000014
 800050c:	20000018 	.word	0x20000018
 8000510:	2000001c 	.word	0x2000001c
 8000514:	20000000 	.word	0x20000000
 8000518:	20000004 	.word	0x20000004
 800051c:	20000008 	.word	0x20000008
 8000520:	2000000c 	.word	0x2000000c

08000524 <tipo_dato>:


uint8_t tipo_dato(char input){
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
	if(input=='C'||input=='V'||input=='R'||input=='P')
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	2b43      	cmp	r3, #67	; 0x43
 8000532:	d008      	beq.n	8000546 <tipo_dato+0x22>
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b56      	cmp	r3, #86	; 0x56
 8000538:	d005      	beq.n	8000546 <tipo_dato+0x22>
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b52      	cmp	r3, #82	; 0x52
 800053e:	d002      	beq.n	8000546 <tipo_dato+0x22>
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b50      	cmp	r3, #80	; 0x50
 8000544:	d101      	bne.n	800054a <tipo_dato+0x26>
		return 2;
 8000546:	2302      	movs	r3, #2
 8000548:	e012      	b.n	8000570 <tipo_dato+0x4c>
	if(input=='K')
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b4b      	cmp	r3, #75	; 0x4b
 800054e:	d101      	bne.n	8000554 <tipo_dato+0x30>
		return 3;
 8000550:	2303      	movs	r3, #3
 8000552:	e00d      	b.n	8000570 <tipo_dato+0x4c>
	if(input=='D')
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b44      	cmp	r3, #68	; 0x44
 8000558:	d101      	bne.n	800055e <tipo_dato+0x3a>
		return 4;
 800055a:	2304      	movs	r3, #4
 800055c:	e008      	b.n	8000570 <tipo_dato+0x4c>
	if(input>='0'&&input<='9')
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b2f      	cmp	r3, #47	; 0x2f
 8000562:	d904      	bls.n	800056e <tipo_dato+0x4a>
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b39      	cmp	r3, #57	; 0x39
 8000568:	d801      	bhi.n	800056e <tipo_dato+0x4a>
		return 1;
 800056a:	2301      	movs	r3, #1
 800056c:	e000      	b.n	8000570 <tipo_dato+0x4c>
	else
		return 0;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
	...

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f001 f827 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f91f 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 fa9d 	bl	8000ac8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800058e:	f000 f979 	bl	8000884 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000592:	f000 f9c3 	bl	800091c <MX_I2C1_Init>
  MX_USB_PCD_Init();
 8000596:	f000 fa75 	bl	8000a84 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800059a:	f000 fa25 	bl	80009e8 <MX_TIM2_Init>
  MX_SPI1_Init();
 800059e:	f000 f9eb 	bl	8000978 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  enviar_spi_dac(0);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 fbce 	bl	8000d44 <enviar_spi_dac>
  keypad_init();
 80005a8:	f7ff fe64 	bl	8000274 <keypad_init>
  LCD_I2C_init();
 80005ac:	f7ff fe3a 	bl	8000224 <LCD_I2C_init>

	//esto podria estar encapsulado
  	  LCD_I2C_cmd(LCD_LINEA1);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f7ff fdd3 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   UTN FRP   ");
 80005b6:	4879      	ldr	r0, [pc, #484]	; (800079c <main+0x220>)
 80005b8:	f7ff fe47 	bl	800024a <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA2);
 80005bc:	20c0      	movs	r0, #192	; 0xc0
 80005be:	f7ff fdcd 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   Carga DC   ");
 80005c2:	4877      	ldr	r0, [pc, #476]	; (80007a0 <main+0x224>)
 80005c4:	f7ff fe41 	bl	800024a <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA4);
 80005c8:	20d4      	movs	r0, #212	; 0xd4
 80005ca:	f7ff fdc7 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   A.Gotte/A.Jose   ");
 80005ce:	4875      	ldr	r0, [pc, #468]	; (80007a4 <main+0x228>)
 80005d0:	f7ff fe3b 	bl	800024a <LCD_I2C_write_text>
	  HAL_Delay(3000);
 80005d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005d8:	f001 f85e 	bl	8001698 <HAL_Delay>
	  LCD_I2C_cmd(LCD_CLEAR);
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff fdbd 	bl	800015c <LCD_I2C_cmd>


  HAL_TIM_Base_Start_IT(&htim2);
 80005e2:	4871      	ldr	r0, [pc, #452]	; (80007a8 <main+0x22c>)
 80005e4:	f003 fe2a 	bl	800423c <HAL_TIM_Base_Start_IT>

  //HAL_ADC_Start_DMA(&hadc1, input_adc, 2);//cuelga el programa
  HAL_ADCEx_Calibration_Start(&hadc1);
 80005e8:	4870      	ldr	r0, [pc, #448]	; (80007ac <main+0x230>)
 80005ea:	f001 fca5 	bl	8001f38 <HAL_ADCEx_Calibration_Start>



	//se deberia hacer un POST

  char modo_carga = 'C';
 80005ee:	2343      	movs	r3, #67	; 0x43
 80005f0:	73fb      	strb	r3, [r7, #15]
  char input_valor[5]="";
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	2300      	movs	r3, #0
 80005f8:	723b      	strb	r3, [r7, #8]
  //char buffer_val[20]="val:  NNNN [utm]";

  uint8_t cont_digitos_input_val = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
  uint8_t flag_update_display = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	737b      	strb	r3, [r7, #13]
  uint16_t control_spi = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	817b      	strh	r3, [r7, #10]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_update_control){
 8000606:	4b6a      	ldr	r3, [pc, #424]	; (80007b0 <main+0x234>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d026      	beq.n	800065c <main+0xe0>
		  display_update_stat(modo_carga,input_valor,input_adc[0]);
 800060e:	4b69      	ldr	r3, [pc, #420]	; (80007b4 <main+0x238>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	1d39      	adds	r1, r7, #4
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fc64 	bl	8000ee4 <display_update_stat>
		  flag_update_control=0;
 800061c:	4b64      	ldr	r3, [pc, #400]	; (80007b0 <main+0x234>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
		  //HAL_ADC_Start(&hadc1);
		  //AL_ADC_PollForConversion(&hadc1, 1);
		  //AD_RES = HAL_ADC_GetValue(&hadc1);
		  HAL_ADC_Start(&hadc1);
 8000622:	4862      	ldr	r0, [pc, #392]	; (80007ac <main+0x230>)
 8000624:	f001 f934 	bl	8001890 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1);
 8000628:	2101      	movs	r1, #1
 800062a:	4860      	ldr	r0, [pc, #384]	; (80007ac <main+0x230>)
 800062c:	f001 f9de 	bl	80019ec <HAL_ADC_PollForConversion>
		  input_adc[0]=HAL_ADC_GetValue(&hadc1);
 8000630:	485e      	ldr	r0, [pc, #376]	; (80007ac <main+0x230>)
 8000632:	f001 fae1 	bl	8001bf8 <HAL_ADC_GetValue>
 8000636:	4603      	mov	r3, r0
 8000638:	4a5e      	ldr	r2, [pc, #376]	; (80007b4 <main+0x238>)
 800063a:	6013      	str	r3, [r2, #0]
		  HAL_ADC_PollForConversion(&hadc1, 1);
 800063c:	2101      	movs	r1, #1
 800063e:	485b      	ldr	r0, [pc, #364]	; (80007ac <main+0x230>)
 8000640:	f001 f9d4 	bl	80019ec <HAL_ADC_PollForConversion>
		  input_adc[1]=HAL_ADC_GetValue(&hadc1);
 8000644:	4859      	ldr	r0, [pc, #356]	; (80007ac <main+0x230>)
 8000646:	f001 fad7 	bl	8001bf8 <HAL_ADC_GetValue>
 800064a:	4603      	mov	r3, r0
 800064c:	4a59      	ldr	r2, [pc, #356]	; (80007b4 <main+0x238>)
 800064e:	6053      	str	r3, [r2, #4]
		  enviar_spi_dac(input_adc[0]);
 8000650:	4b58      	ldr	r3, [pc, #352]	; (80007b4 <main+0x238>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fb74 	bl	8000d44 <enviar_spi_dac>
	  }
	  if(tipo_dato(input_keypad)==2){//tipo_dato()=2 si input es C,V,P,R
 800065c:	4b56      	ldr	r3, [pc, #344]	; (80007b8 <main+0x23c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff5f 	bl	8000524 <tipo_dato>
 8000666:	4603      	mov	r3, r0
 8000668:	2b02      	cmp	r3, #2
 800066a:	d15f      	bne.n	800072c <main+0x1b0>
		  //ingresa a la configuracion de modo
		  //modo_carga=input_keypad;//guardar el modo que se selecciono
		  flag_config=1;
 800066c:	4b53      	ldr	r3, [pc, #332]	; (80007bc <main+0x240>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]

		  while(flag_config){
 8000672:	e057      	b.n	8000724 <main+0x1a8>
			  if(tipo_dato(input_keypad)==1 && cont_digitos_input_val<4){//tipo_dato()=1 si input es >=0 y <=9
 8000674:	4b50      	ldr	r3, [pc, #320]	; (80007b8 <main+0x23c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff53 	bl	8000524 <tipo_dato>
 800067e:	4603      	mov	r3, r0
 8000680:	2b01      	cmp	r3, #1
 8000682:	d112      	bne.n	80006aa <main+0x12e>
 8000684:	7bbb      	ldrb	r3, [r7, #14]
 8000686:	2b03      	cmp	r3, #3
 8000688:	d80f      	bhi.n	80006aa <main+0x12e>
				  //input_valor[cont_digitos_input_val]=input_keypad;
				  agregar_digito(input_valor, input_keypad);
 800068a:	4b4b      	ldr	r3, [pc, #300]	; (80007b8 <main+0x23c>)
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fb24 	bl	8000ce0 <agregar_digito>
				  input_keypad=0;
 8000698:	4b47      	ldr	r3, [pc, #284]	; (80007b8 <main+0x23c>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
				  cont_digitos_input_val++;
 800069e:	7bbb      	ldrb	r3, [r7, #14]
 80006a0:	3301      	adds	r3, #1
 80006a2:	73bb      	strb	r3, [r7, #14]
				  flag_update_display=1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	737b      	strb	r3, [r7, #13]
 80006a8:	e031      	b.n	800070e <main+0x192>
			  }
			  else if(input_keypad=='D'&&cont_digitos_input_val>0){
 80006aa:	4b43      	ldr	r3, [pc, #268]	; (80007b8 <main+0x23c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b44      	cmp	r3, #68	; 0x44
 80006b0:	d10f      	bne.n	80006d2 <main+0x156>
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00c      	beq.n	80006d2 <main+0x156>
				  borrar_ultimo_digito(input_valor);
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fb2c 	bl	8000d18 <borrar_ultimo_digito>
				  input_keypad=0;
 80006c0:	4b3d      	ldr	r3, [pc, #244]	; (80007b8 <main+0x23c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
				  cont_digitos_input_val--;
 80006c6:	7bbb      	ldrb	r3, [r7, #14]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	73bb      	strb	r3, [r7, #14]
				  flag_update_display=1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	737b      	strb	r3, [r7, #13]
 80006d0:	e01d      	b.n	800070e <main+0x192>
			  }
			  else if(input_keypad=='K'){
 80006d2:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <main+0x23c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b4b      	cmp	r3, #75	; 0x4b
 80006d8:	d109      	bne.n	80006ee <main+0x172>
				  input_keypad=0;
 80006da:	4b37      	ldr	r3, [pc, #220]	; (80007b8 <main+0x23c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
				  flag_config=0;//sale del while y vuelve al super loop
 80006e0:	4b36      	ldr	r3, [pc, #216]	; (80007bc <main+0x240>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
				  flag_update_control=1;
 80006e6:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <main+0x234>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	e00f      	b.n	800070e <main+0x192>
				  //validar parametro ingresado
			  }
			  else if(tipo_dato(input_keypad)==2){
 80006ee:	4b32      	ldr	r3, [pc, #200]	; (80007b8 <main+0x23c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff16 	bl	8000524 <tipo_dato>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d107      	bne.n	800070e <main+0x192>
				  modo_carga=input_keypad;//guardar el modo que se selecciono
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <main+0x23c>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	73fb      	strb	r3, [r7, #15]
				  input_keypad=0;
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <main+0x23c>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
				  //borrar buffer
				  flag_update_display=1;
 800070a:	2301      	movs	r3, #1
 800070c:	737b      	strb	r3, [r7, #13]
			  }
		  if(flag_update_display){
 800070e:	7b7b      	ldrb	r3, [r7, #13]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d007      	beq.n	8000724 <main+0x1a8>
			  display_update_conf(modo_carga,input_valor);
 8000714:	1d3a      	adds	r2, r7, #4
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fb42 	bl	8000da4 <display_update_conf>
			  flag_update_display=0;
 8000720:	2300      	movs	r3, #0
 8000722:	737b      	strb	r3, [r7, #13]
		  while(flag_config){
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <main+0x240>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1a3      	bne.n	8000674 <main+0xf8>
		  }
		}//fin while config
	  }//fin if config
	  if(flag_on_off){
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <main+0x244>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	f43f af68 	beq.w	8000606 <main+0x8a>
		  //switch con los cuatro case y los modos de control
		  while(flag_on_off){
 8000736:	e02c      	b.n	8000792 <main+0x216>
				  buffer[10]='\0';
				  input_keypad=0;
			  }*/
			  //LCD_I2C_cmd(LCD_LINEA4);
			  //LCD_I2C_write_text("   flag_on_off   ");
			  if(flag_update_adc){
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <main+0x248>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d019      	beq.n	8000774 <main+0x1f8>
				 HAL_ADC_Start(&hadc1);
 8000740:	481a      	ldr	r0, [pc, #104]	; (80007ac <main+0x230>)
 8000742:	f001 f8a5 	bl	8001890 <HAL_ADC_Start>
				 HAL_ADC_PollForConversion(&hadc1, 1);
 8000746:	2101      	movs	r1, #1
 8000748:	4818      	ldr	r0, [pc, #96]	; (80007ac <main+0x230>)
 800074a:	f001 f94f 	bl	80019ec <HAL_ADC_PollForConversion>
				 input_adc[0]=HAL_ADC_GetValue(&hadc1);
 800074e:	4817      	ldr	r0, [pc, #92]	; (80007ac <main+0x230>)
 8000750:	f001 fa52 	bl	8001bf8 <HAL_ADC_GetValue>
 8000754:	4603      	mov	r3, r0
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <main+0x238>)
 8000758:	6013      	str	r3, [r2, #0]
				 HAL_ADC_PollForConversion(&hadc1, 1);
 800075a:	2101      	movs	r1, #1
 800075c:	4813      	ldr	r0, [pc, #76]	; (80007ac <main+0x230>)
 800075e:	f001 f945 	bl	80019ec <HAL_ADC_PollForConversion>
				 input_adc[1]=HAL_ADC_GetValue(&hadc1);
 8000762:	4812      	ldr	r0, [pc, #72]	; (80007ac <main+0x230>)
 8000764:	f001 fa48 	bl	8001bf8 <HAL_ADC_GetValue>
 8000768:	4603      	mov	r3, r0
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <main+0x238>)
 800076c:	6053      	str	r3, [r2, #4]
				 flag_update_adc=0;
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <main+0x248>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
			  }

			  if(flag_update_control){
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <main+0x234>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00a      	beq.n	8000792 <main+0x216>
			  display_update_running(modo_carga,input_adc[0],input_adc[1]);
 800077c:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <main+0x238>)
 800077e:	6819      	ldr	r1, [r3, #0]
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <main+0x238>)
 8000782:	685a      	ldr	r2, [r3, #4]
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fcce 	bl	8001128 <display_update_running>
			  flag_update_control=0;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <main+0x234>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
		  while(flag_on_off){
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <main+0x244>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1ce      	bne.n	8000738 <main+0x1bc>
	  if(flag_update_control){
 800079a:	e734      	b.n	8000606 <main+0x8a>
 800079c:	0800540c 	.word	0x0800540c
 80007a0:	0800541c 	.word	0x0800541c
 80007a4:	0800542c 	.word	0x0800542c
 80007a8:	20000174 	.word	0x20000174
 80007ac:	20000098 	.word	0x20000098
 80007b0:	200004ae 	.word	0x200004ae
 80007b4:	200004b4 	.word	0x200004b4
 80007b8:	200004bc 	.word	0x200004bc
 80007bc:	200004ad 	.word	0x200004ad
 80007c0:	200004ac 	.word	0x200004ac
 80007c4:	200004af 	.word	0x200004af

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	; 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d2:	2228      	movs	r2, #40	; 0x28
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 f972 	bl	8004ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000806:	2301      	movs	r3, #1
 8000808:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000814:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000818:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fcc6 	bl	80031b0 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800082a:	f000 fd05 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2102      	movs	r1, #2
 800084a:	4618      	mov	r0, r3
 800084c:	f002 ff32 	bl	80036b4 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000856:	f000 fcef 	bl	8001238 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800085a:	2312      	movs	r3, #18
 800085c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800085e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000862:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4618      	mov	r0, r3
 800086c:	f003 f8b0 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000876:	f000 fcdf 	bl	8001238 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3750      	adds	r7, #80	; 0x50
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_ADC1_Init+0x90>)
 8000896:	4a20      	ldr	r2, [pc, #128]	; (8000918 <MX_ADC1_Init+0x94>)
 8000898:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800089a:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <MX_ADC1_Init+0x90>)
 800089c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_ADC1_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_ADC1_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_ADC1_Init+0x90>)
 80008b0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_ADC1_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_ADC1_Init+0x90>)
 80008be:	2202      	movs	r2, #2
 80008c0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c2:	4814      	ldr	r0, [pc, #80]	; (8000914 <MX_ADC1_Init+0x90>)
 80008c4:	f000 ff0c 	bl	80016e0 <HAL_ADC_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80008ce:	f000 fcb3 	bl	8001238 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d6:	2301      	movs	r3, #1
 80008d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	480c      	ldr	r0, [pc, #48]	; (8000914 <MX_ADC1_Init+0x90>)
 80008e4:	f001 f994 	bl	8001c10 <HAL_ADC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f000 fca3 	bl	8001238 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_ADC1_Init+0x90>)
 80008fc:	f001 f988 	bl	8001c10 <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000906:	f000 fc97 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000098 	.word	0x20000098
 8000918:	40012400 	.word	0x40012400

0800091c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_I2C1_Init+0x50>)
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <MX_I2C1_Init+0x54>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_I2C1_Init+0x50>)
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_I2C1_Init+0x58>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_I2C1_Init+0x50>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_I2C1_Init+0x50>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_I2C1_Init+0x50>)
 800093a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800093e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_I2C1_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_I2C1_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_I2C1_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_I2C1_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_I2C1_Init+0x50>)
 800095a:	f001 fe8d 	bl	8002678 <HAL_I2C_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000964:	f000 fc68 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000c8 	.word	0x200000c8
 8000970:	40005400 	.word	0x40005400
 8000974:	000186a0 	.word	0x000186a0

08000978 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_SPI1_Init+0x68>)
 800097e:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <MX_SPI1_Init+0x6c>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_SPI1_Init+0x68>)
 8000984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000988:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_SPI1_Init+0x68>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_SPI1_Init+0x68>)
 8000992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000996:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_SPI1_Init+0x68>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009ae:	2228      	movs	r2, #40	; 0x28
 80009b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009c6:	220a      	movs	r2, #10
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_SPI1_Init+0x68>)
 80009cc:	f003 f96c 	bl	8003ca8 <HAL_SPI_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80009d6:	f000 fc2f 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000011c 	.word	0x2000011c
 80009e4:	40013000 	.word	0x40013000

080009e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a0e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000a12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a1c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000a20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a2e:	4814      	ldr	r0, [pc, #80]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a30:	f003 fbb4 	bl	800419c <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a3a:	f000 fbfd 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a4c:	f003 fd50 	bl	80044f0 <HAL_TIM_ConfigClockSource>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a56:	f000 fbef 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	; (8000a80 <MX_TIM2_Init+0x98>)
 8000a68:	f003 ff26 	bl	80048b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a72:	f000 fbe1 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000174 	.word	0x20000174

08000a84 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MX_USB_PCD_Init+0x3c>)
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <MX_USB_PCD_Init+0x40>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_USB_PCD_Init+0x3c>)
 8000a90:	2208      	movs	r2, #8
 8000a92:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_USB_PCD_Init+0x3c>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_USB_PCD_Init+0x3c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <MX_USB_PCD_Init+0x3c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_USB_PCD_Init+0x3c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_USB_PCD_Init+0x3c>)
 8000aae:	f002 fa7f 	bl	8002fb0 <HAL_PCD_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000ab8:	f000 fbbe 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200001bc 	.word	0x200001bc
 8000ac4:	40005c00 	.word	0x40005c00

08000ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000adc:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a48      	ldr	r2, [pc, #288]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b46      	ldr	r3, [pc, #280]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0310 	and.w	r3, r3, #16
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af4:	4b43      	ldr	r3, [pc, #268]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a42      	ldr	r2, [pc, #264]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000afa:	f043 0320 	orr.w	r3, r3, #32
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b40      	ldr	r3, [pc, #256]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0320 	and.w	r3, r3, #32
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b3d      	ldr	r3, [pc, #244]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a3c      	ldr	r2, [pc, #240]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b37      	ldr	r3, [pc, #220]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a36      	ldr	r2, [pc, #216]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b2a:	f043 0308 	orr.w	r3, r3, #8
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b34      	ldr	r3, [pc, #208]	; (8000c04 <MX_GPIO_Init+0x13c>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b42:	4831      	ldr	r0, [pc, #196]	; (8000c08 <MX_GPIO_Init+0x140>)
 8000b44:	f001 fd4f 	bl	80025e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2140      	movs	r1, #64	; 0x40
 8000b4c:	482f      	ldr	r0, [pc, #188]	; (8000c0c <MX_GPIO_Init+0x144>)
 8000b4e:	f001 fd4a 	bl	80025e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f640 4103 	movw	r1, #3075	; 0xc03
 8000b58:	482d      	ldr	r0, [pc, #180]	; (8000c10 <MX_GPIO_Init+0x148>)
 8000b5a:	f001 fd44 	bl	80025e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000b5e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	4824      	ldr	r0, [pc, #144]	; (8000c08 <MX_GPIO_Init+0x140>)
 8000b78:	f001 fb9a 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b7c:	2340      	movs	r3, #64	; 0x40
 8000b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	481e      	ldr	r0, [pc, #120]	; (8000c0c <MX_GPIO_Init+0x144>)
 8000b94:	f001 fb8c 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8000b98:	f640 4303 	movw	r3, #3075	; 0xc03
 8000b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4817      	ldr	r0, [pc, #92]	; (8000c10 <MX_GPIO_Init+0x148>)
 8000bb2:	f001 fb7d 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bb6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4811      	ldr	r0, [pc, #68]	; (8000c10 <MX_GPIO_Init+0x148>)
 8000bcc:	f001 fb70 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_GPIO_Init+0x14c>)
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	4619      	mov	r1, r3
 8000be4:	4809      	ldr	r0, [pc, #36]	; (8000c0c <MX_GPIO_Init+0x144>)
 8000be6:	f001 fb63 	bl	80022b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2017      	movs	r0, #23
 8000bf0:	f001 fb27 	bl	8002242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bf4:	2017      	movs	r0, #23
 8000bf6:	f001 fb40 	bl	800227a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	40010800 	.word	0x40010800
 8000c10:	40010c00 	.word	0x40010c00
 8000c14:	10110000 	.word	0x10110000

08000c18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//definiciones de los callback y funciones
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // INT Source is pin A9
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c28:	d11a      	bne.n	8000c60 <HAL_GPIO_EXTI_Callback+0x48>
    {
    //if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET&&!flag_config){
    if(!flag_on_off && !flag_config){
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10d      	bne.n	8000c4e <HAL_GPIO_EXTI_Callback+0x36>
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x54>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d109      	bne.n	8000c4e <HAL_GPIO_EXTI_Callback+0x36>
    		flag_on_off=1;// conecta la carga
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
    		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x58>)
 8000c48:	f001 fccd 	bl	80025e6 <HAL_GPIO_WritePin>
    	flag_on_off=0;// desconecta la carga
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
    }

    }
}
 8000c4c:	e008      	b.n	8000c60 <HAL_GPIO_EXTI_Callback+0x48>
    	flag_on_off=0;// desconecta la carga
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x58>)
 8000c5c:	f001 fcc3 	bl	80025e6 <HAL_GPIO_WritePin>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200004ac 	.word	0x200004ac
 8000c6c:	200004ad 	.word	0x200004ad
 8000c70:	40011000 	.word	0x40011000

08000c74 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM2){
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c84:	d11e      	bne.n	8000cc4 <HAL_TIM_PeriodElapsedCallback+0x50>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8a:	4810      	ldr	r0, [pc, #64]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c8c:	f001 fcc3 	bl	8002616 <HAL_GPIO_TogglePin>
	 input_keypad=keypad_scan();//condicionar la lectura a que no este en modo activo la carga
 8000c90:	f7ff fb54 	bl	800033c <keypad_scan>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000c9a:	701a      	strb	r2, [r3, #0]
	 flag_update_adc=1;
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]

	 if(cont_timer_update>=5){
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d906      	bls.n	8000cb8 <HAL_TIM_PeriodElapsedCallback+0x44>
		 flag_update_control=1;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
		 cont_timer_update=0;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
	 }
	 else cont_timer_update++;
 }
}
 8000cb6:	e005      	b.n	8000cc4 <HAL_TIM_PeriodElapsedCallback+0x50>
	 else cont_timer_update++;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000cc2:	701a      	strb	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40011000 	.word	0x40011000
 8000cd0:	200004bc 	.word	0x200004bc
 8000cd4:	200004af 	.word	0x200004af
 8000cd8:	200004b0 	.word	0x200004b0
 8000cdc:	200004ae 	.word	0x200004ae

08000ce0 <agregar_digito>:

void agregar_digito(char *buffer, char digito) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
    size_t longitud = strlen(buffer);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fa2d 	bl	800014c <strlen>
 8000cf2:	60f8      	str	r0, [r7, #12]

    if (longitud < BUFFER_SIZE_input) {
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d80a      	bhi.n	8000d10 <agregar_digito+0x30>
        buffer[longitud] = digito;
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	78fa      	ldrb	r2, [r7, #3]
 8000d02:	701a      	strb	r2, [r3, #0]
        buffer[longitud + 1] = '\0';
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3301      	adds	r3, #1
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
    }
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <borrar_ultimo_digito>:

void borrar_ultimo_digito(char *buffer) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    size_t longitud = strlen(buffer);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fa13 	bl	800014c <strlen>
 8000d26:	60f8      	str	r0, [r7, #12]

    if (longitud > 0) {
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d005      	beq.n	8000d3a <borrar_ultimo_digito+0x22>
        buffer[longitud - 1] = '\0';
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
    }
}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <enviar_spi_dac>:
void enviar_spi_dac(uint16_t dato){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
	if(dato<=0x0FFF){
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d54:	d21f      	bcs.n	8000d96 <enviar_spi_dac+0x52>
		uint16_t send = 0x3000;
 8000d56:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d5a:	81fb      	strh	r3, [r7, #14]
		send = send|dato;
 8000d5c:	89fa      	ldrh	r2, [r7, #14]
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2140      	movs	r1, #64	; 0x40
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <enviar_spi_dac+0x58>)
 8000d6c:	f001 fc3b 	bl	80025e6 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &send, 2, 10);
 8000d70:	f107 010e 	add.w	r1, r7, #14
 8000d74:	230a      	movs	r3, #10
 8000d76:	2202      	movs	r2, #2
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <enviar_spi_dac+0x5c>)
 8000d7a:	f003 f819 	bl	8003db0 <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&hspi1)!=HAL_SPI_STATE_READY);
 8000d7e:	bf00      	nop
 8000d80:	4807      	ldr	r0, [pc, #28]	; (8000da0 <enviar_spi_dac+0x5c>)
 8000d82:	f003 f958 	bl	8004036 <HAL_SPI_GetState>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d1f9      	bne.n	8000d80 <enviar_spi_dac+0x3c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2140      	movs	r1, #64	; 0x40
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <enviar_spi_dac+0x58>)
 8000d92:	f001 fc28 	bl	80025e6 <HAL_GPIO_WritePin>
		return;
	}
}
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40010800 	.word	0x40010800
 8000da0:	2000011c 	.word	0x2000011c

08000da4 <display_update_conf>:
void display_update_conf(char modo_op, char *dato){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]

	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
 8000dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
	snprintf(buffer_fun, sizeof(buffer_fun), "Config Modo C%s:", char_as_str);
 8000de0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000de4:	f107 0020 	add.w	r0, r7, #32
 8000de8:	4a38      	ldr	r2, [pc, #224]	; (8000ecc <display_update_conf+0x128>)
 8000dea:	2114      	movs	r1, #20
 8000dec:	f003 fe34 	bl	8004a58 <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff f9b3 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff f9b0 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 8000dfc:	f107 0320 	add.w	r3, r7, #32
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fa22 	bl	800024a <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA3);
 8000e06:	2094      	movs	r0, #148	; 0x94
 8000e08:	f7ff f9a8 	bl	800015c <LCD_I2C_cmd>
	switch(modo_op){//print del modo
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	3b43      	subs	r3, #67	; 0x43
 8000e10:	2b13      	cmp	r3, #19
 8000e12:	d84b      	bhi.n	8000eac <display_update_conf+0x108>
 8000e14:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <display_update_conf+0x78>)
 8000e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1a:	bf00      	nop
 8000e1c:	08000e6d 	.word	0x08000e6d
 8000e20:	08000ead 	.word	0x08000ead
 8000e24:	08000ead 	.word	0x08000ead
 8000e28:	08000ead 	.word	0x08000ead
 8000e2c:	08000ead 	.word	0x08000ead
 8000e30:	08000ead 	.word	0x08000ead
 8000e34:	08000ead 	.word	0x08000ead
 8000e38:	08000ead 	.word	0x08000ead
 8000e3c:	08000ead 	.word	0x08000ead
 8000e40:	08000ead 	.word	0x08000ead
 8000e44:	08000ead 	.word	0x08000ead
 8000e48:	08000ead 	.word	0x08000ead
 8000e4c:	08000ead 	.word	0x08000ead
 8000e50:	08000e9d 	.word	0x08000e9d
 8000e54:	08000ead 	.word	0x08000ead
 8000e58:	08000e8d 	.word	0x08000e8d
 8000e5c:	08000ead 	.word	0x08000ead
 8000e60:	08000ead 	.word	0x08000ead
 8000e64:	08000ead 	.word	0x08000ead
 8000e68:	08000e7d 	.word	0x08000e7d

	case 'C':
		snprintf(buffer_dato, sizeof(buffer_dato), "Current: %s0 [mA]", dato);
 8000e6c:	f107 000c 	add.w	r0, r7, #12
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <display_update_conf+0x12c>)
 8000e74:	2114      	movs	r1, #20
 8000e76:	f003 fdef 	bl	8004a58 <sniprintf>
		break;
 8000e7a:	e01e      	b.n	8000eba <display_update_conf+0x116>
	case 'V':
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %s0 [mV]", dato);
 8000e7c:	f107 000c 	add.w	r0, r7, #12
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <display_update_conf+0x130>)
 8000e84:	2114      	movs	r1, #20
 8000e86:	f003 fde7 	bl	8004a58 <sniprintf>
		break;
 8000e8a:	e016      	b.n	8000eba <display_update_conf+0x116>
	case 'R':
		snprintf(buffer_dato, sizeof(buffer_dato), "Resist.: %s [mR]", dato);
 8000e8c:	f107 000c 	add.w	r0, r7, #12
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <display_update_conf+0x134>)
 8000e94:	2114      	movs	r1, #20
 8000e96:	f003 fddf 	bl	8004a58 <sniprintf>
		break;
 8000e9a:	e00e      	b.n	8000eba <display_update_conf+0x116>
	case 'P':
		snprintf(buffer_dato, sizeof(buffer_dato), "Power.: %s00 [W]", dato);
 8000e9c:	f107 000c 	add.w	r0, r7, #12
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <display_update_conf+0x138>)
 8000ea4:	2114      	movs	r1, #20
 8000ea6:	f003 fdd7 	bl	8004a58 <sniprintf>
		break;
 8000eaa:	e006      	b.n	8000eba <display_update_conf+0x116>
	default:
		snprintf(buffer_dato, sizeof(buffer_dato), "Error: case def");
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <display_update_conf+0x13c>)
 8000eb2:	2114      	movs	r1, #20
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 fdcf 	bl	8004a58 <sniprintf>
	}
	LCD_I2C_write_text(buffer_dato);
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff f9c3 	bl	800024a <LCD_I2C_write_text>

}
 8000ec4:	bf00      	nop
 8000ec6:	3738      	adds	r7, #56	; 0x38
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	08005444 	.word	0x08005444
 8000ed0:	08005458 	.word	0x08005458
 8000ed4:	0800546c 	.word	0x0800546c
 8000ed8:	08005480 	.word	0x08005480
 8000edc:	08005494 	.word	0x08005494
 8000ee0:	080054a8 	.word	0x080054a8

08000ee4 <display_update_stat>:

void display_update_stat(char modo_op, char *dato,uint32_t volt){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b090      	sub	sp, #64	; 0x40
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	73fb      	strb	r3, [r7, #15]
	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
 8000f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
	uint32_t volt_convertido = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63fb      	str	r3, [r7, #60]	; 0x3c
	volt_convertido=volt*6600;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	63fb      	str	r3, [r7, #60]	; 0x3c
	volt_convertido=volt_convertido/4096;
 8000f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f34:	0b1b      	lsrs	r3, r3, #12
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
	snprintf(buffer_fun, sizeof(buffer_fun), "Modo C%s:", char_as_str);
 8000f38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f3c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000f40:	4a70      	ldr	r2, [pc, #448]	; (8001104 <display_update_stat+0x220>)
 8000f42:	2114      	movs	r1, #20
 8000f44:	f003 fd88 	bl	8004a58 <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff f907 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff f904 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff f976 	bl	800024a <LCD_I2C_write_text>

	switch(modo_op){//print del modo
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	3b43      	subs	r3, #67	; 0x43
 8000f62:	2b13      	cmp	r3, #19
 8000f64:	f200 80bf 	bhi.w	80010e6 <display_update_stat+0x202>
 8000f68:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <display_update_stat+0x8c>)
 8000f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6e:	bf00      	nop
 8000f70:	08000fc1 	.word	0x08000fc1
 8000f74:	080010e7 	.word	0x080010e7
 8000f78:	080010e7 	.word	0x080010e7
 8000f7c:	080010e7 	.word	0x080010e7
 8000f80:	080010e7 	.word	0x080010e7
 8000f84:	080010e7 	.word	0x080010e7
 8000f88:	080010e7 	.word	0x080010e7
 8000f8c:	080010e7 	.word	0x080010e7
 8000f90:	080010e7 	.word	0x080010e7
 8000f94:	080010e7 	.word	0x080010e7
 8000f98:	080010e7 	.word	0x080010e7
 8000f9c:	080010e7 	.word	0x080010e7
 8000fa0:	080010e7 	.word	0x080010e7
 8000fa4:	0800109d 	.word	0x0800109d
 8000fa8:	080010e7 	.word	0x080010e7
 8000fac:	08001043 	.word	0x08001043
 8000fb0:	080010e7 	.word	0x080010e7
 8000fb4:	080010e7 	.word	0x080010e7
 8000fb8:	080010e7 	.word	0x080010e7
 8000fbc:	0800100b 	.word	0x0800100b

	case 'C':
		LCD_I2C_cmd(LCD_LINEA2);
 8000fc0:	20c0      	movs	r0, #192	; 0xc0
 8000fc2:	f7ff f8cb 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d0 [mV]", volt_convertido);//
 8000fc6:	f107 0010 	add.w	r0, r7, #16
 8000fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fcc:	4a4e      	ldr	r2, [pc, #312]	; (8001108 <display_update_stat+0x224>)
 8000fce:	2114      	movs	r1, #20
 8000fd0:	f003 fd42 	bl	8004a58 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff f936 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8000fde:	2094      	movs	r0, #148	; 0x94
 8000fe0:	f7ff f8bc 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Current: %s0 [mA]", dato);
 8000fe4:	f107 0010 	add.w	r0, r7, #16
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4a48      	ldr	r2, [pc, #288]	; (800110c <display_update_stat+0x228>)
 8000fec:	2114      	movs	r1, #20
 8000fee:	f003 fd33 	bl	8004a58 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff f927 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8000ffc:	20d4      	movs	r0, #212	; 0xd4
 8000ffe:	f7ff f8ad 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[mW]");
 8001002:	4843      	ldr	r0, [pc, #268]	; (8001110 <display_update_stat+0x22c>)
 8001004:	f7ff f921 	bl	800024a <LCD_I2C_write_text>

		break;
 8001008:	e078      	b.n	80010fc <display_update_stat+0x218>
	case 'V':
		LCD_I2C_cmd(LCD_LINEA2);
 800100a:	20c0      	movs	r0, #192	; 0xc0
 800100c:	f7ff f8a6 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %s0 [mV]", dato);
 8001010:	f107 0010 	add.w	r0, r7, #16
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4a3f      	ldr	r2, [pc, #252]	; (8001114 <display_update_stat+0x230>)
 8001018:	2114      	movs	r1, #20
 800101a:	f003 fd1d 	bl	8004a58 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f911 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8001028:	2094      	movs	r0, #148	; 0x94
 800102a:	f7ff f897 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 800102e:	483a      	ldr	r0, [pc, #232]	; (8001118 <display_update_stat+0x234>)
 8001030:	f7ff f90b 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8001034:	20d4      	movs	r0, #212	; 0xd4
 8001036:	f7ff f891 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[mW]");
 800103a:	4835      	ldr	r0, [pc, #212]	; (8001110 <display_update_stat+0x22c>)
 800103c:	f7ff f905 	bl	800024a <LCD_I2C_write_text>
		break;
 8001040:	e05c      	b.n	80010fc <display_update_stat+0x218>
	case 'R':
		LCD_I2C_cmd(LCD_CLEAR);
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff f88a 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_cmd(LCD_LINEA1);
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff f887 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Res: %s[mohm]", dato);
 800104e:	f107 0010 	add.w	r0, r7, #16
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4a31      	ldr	r2, [pc, #196]	; (800111c <display_update_stat+0x238>)
 8001056:	2114      	movs	r1, #20
 8001058:	f003 fcfe 	bl	8004a58 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f8f2 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA2);
 8001066:	20c0      	movs	r0, #192	; 0xc0
 8001068:	f7ff f878 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d0 [mV]", volt_convertido);//
 800106c:	f107 0010 	add.w	r0, r7, #16
 8001070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001072:	4a25      	ldr	r2, [pc, #148]	; (8001108 <display_update_stat+0x224>)
 8001074:	2114      	movs	r1, #20
 8001076:	f003 fcef 	bl	8004a58 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f8e3 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8001084:	2094      	movs	r0, #148	; 0x94
 8001086:	f7ff f869 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 800108a:	4823      	ldr	r0, [pc, #140]	; (8001118 <display_update_stat+0x234>)
 800108c:	f7ff f8dd 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8001090:	20d4      	movs	r0, #212	; 0xd4
 8001092:	f7ff f863 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[mW]");
 8001096:	481e      	ldr	r0, [pc, #120]	; (8001110 <display_update_stat+0x22c>)
 8001098:	f7ff f8d7 	bl	800024a <LCD_I2C_write_text>
	case 'P':
		LCD_I2C_cmd(LCD_LINEA2);
 800109c:	20c0      	movs	r0, #192	; 0xc0
 800109e:	f7ff f85d 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d0 [mV]", volt_convertido);//
 80010a2:	f107 0010 	add.w	r0, r7, #16
 80010a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <display_update_stat+0x224>)
 80010aa:	2114      	movs	r1, #20
 80010ac:	f003 fcd4 	bl	8004a58 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f8c8 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 80010ba:	2094      	movs	r0, #148	; 0x94
 80010bc:	f7ff f84e 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 80010c0:	4815      	ldr	r0, [pc, #84]	; (8001118 <display_update_stat+0x234>)
 80010c2:	f7ff f8c2 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 80010c6:	20d4      	movs	r0, #212	; 0xd4
 80010c8:	f7ff f848 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Power: %s00 [mW]", dato);
 80010cc:	f107 0010 	add.w	r0, r7, #16
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <display_update_stat+0x23c>)
 80010d4:	2114      	movs	r1, #20
 80010d6:	f003 fcbf 	bl	8004a58 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f8b3 	bl	800024a <LCD_I2C_write_text>

		break;
 80010e4:	e00a      	b.n	80010fc <display_update_stat+0x218>
	default:
		LCD_I2C_cmd(LCD_LINEA1);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff f838 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Error: monit");
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <display_update_stat+0x240>)
 80010f2:	2114      	movs	r1, #20
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fcaf 	bl	8004a58 <sniprintf>
	}

}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	3740      	adds	r7, #64	; 0x40
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	080054b8 	.word	0x080054b8
 8001108:	080054c4 	.word	0x080054c4
 800110c:	08005458 	.word	0x08005458
 8001110:	080054d8 	.word	0x080054d8
 8001114:	0800546c 	.word	0x0800546c
 8001118:	080054e8 	.word	0x080054e8
 800111c:	080054f8 	.word	0x080054f8
 8001120:	08005508 	.word	0x08005508
 8001124:	0800551c 	.word	0x0800551c

08001128 <display_update_running>:

void display_update_running(char modo_op,uint32_t volt, uint32_t corriente){
 8001128:	b580      	push	{r7, lr}
 800112a:	b092      	sub	sp, #72	; 0x48
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	73fb      	strb	r3, [r7, #15]
	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800113c:	2300      	movs	r3, #0
 800113e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
 8001146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
	uint32_t volt_convertido = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t corriente_convertido = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t potencia =0;
 800116e:	2300      	movs	r3, #0
 8001170:	63fb      	str	r3, [r7, #60]	; 0x3c
	volt_convertido=volt*6600;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	647b      	str	r3, [r7, #68]	; 0x44
	volt_convertido=volt_convertido/4096;
 800117e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001180:	0b1b      	lsrs	r3, r3, #12
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
	corriente_convertido=corriente*3000;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
	corriente_convertido=corriente_convertido/4096;
 8001190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001192:	0b1b      	lsrs	r3, r3, #12
 8001194:	643b      	str	r3, [r7, #64]	; 0x40
	potencia = volt_convertido*corriente_convertido;
 8001196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001198:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c

	snprintf(buffer_fun, sizeof(buffer_fun), "Running Modo C%s:", char_as_str);
 80011a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011a4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80011a8:	4a1f      	ldr	r2, [pc, #124]	; (8001228 <display_update_running+0x100>)
 80011aa:	2114      	movs	r1, #20
 80011ac:	f003 fc54 	bl	8004a58 <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7fe ffd3 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7fe ffd0 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f842 	bl	800024a <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA2);
 80011c6:	20c0      	movs	r0, #192	; 0xc0
 80011c8:	f7fe ffc8 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d0 [mV]", volt_convertido);//
 80011cc:	f107 0010 	add.w	r0, r7, #16
 80011d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011d2:	4a16      	ldr	r2, [pc, #88]	; (800122c <display_update_running+0x104>)
 80011d4:	2114      	movs	r1, #20
 80011d6:	f003 fc3f 	bl	8004a58 <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f833 	bl	800024a <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA3);
 80011e4:	2094      	movs	r0, #148	; 0x94
 80011e6:	f7fe ffb9 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Current: %d0 [mA]", corriente_convertido);//
 80011ea:	f107 0010 	add.w	r0, r7, #16
 80011ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <display_update_running+0x108>)
 80011f2:	2114      	movs	r1, #20
 80011f4:	f003 fc30 	bl	8004a58 <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f824 	bl	800024a <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA4);
 8001202:	20d4      	movs	r0, #212	; 0xd4
 8001204:	f7fe ffaa 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Pot: %d00 [mW]", potencia);//
 8001208:	f107 0010 	add.w	r0, r7, #16
 800120c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800120e:	4a09      	ldr	r2, [pc, #36]	; (8001234 <display_update_running+0x10c>)
 8001210:	2114      	movs	r1, #20
 8001212:	f003 fc21 	bl	8004a58 <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f815 	bl	800024a <LCD_I2C_write_text>
}
 8001220:	bf00      	nop
 8001222:	3748      	adds	r7, #72	; 0x48
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	0800552c 	.word	0x0800552c
 800122c:	080054c4 	.word	0x080054c4
 8001230:	08005540 	.word	0x08005540
 8001234:	08005554 	.word	0x08005554

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	e7fe      	b.n	8001240 <Error_Handler+0x8>
	...

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_MspInit+0x5c>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <HAL_MspInit+0x5c>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6193      	str	r3, [r2, #24]
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_MspInit+0x5c>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_MspInit+0x5c>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_MspInit+0x5c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_MspInit+0x5c>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_MspInit+0x60>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_MspInit+0x60>)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010000 	.word	0x40010000

080012a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <HAL_ADC_MspInit+0x6c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d121      	bne.n	800130c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_ADC_MspInit+0x70>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_ADC_MspInit+0x70>)
 80012ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_ADC_MspInit+0x70>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_ADC_MspInit+0x70>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <HAL_ADC_MspInit+0x70>)
 80012e6:	f043 0304 	orr.w	r3, r3, #4
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_ADC_MspInit+0x70>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80012f8:	2306      	movs	r3, #6
 80012fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_ADC_MspInit+0x74>)
 8001308:	f000 ffd2 	bl	80022b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40012400 	.word	0x40012400
 8001318:	40021000 	.word	0x40021000
 800131c:	40010800 	.word	0x40010800

08001320 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <HAL_I2C_MspInit+0x70>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d123      	bne.n	8001388 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_I2C_MspInit+0x74>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_I2C_MspInit+0x74>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_I2C_MspInit+0x74>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001358:	23c0      	movs	r3, #192	; 0xc0
 800135a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135c:	2312      	movs	r3, #18
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4619      	mov	r1, r3
 800136a:	480b      	ldr	r0, [pc, #44]	; (8001398 <HAL_I2C_MspInit+0x78>)
 800136c:	f000 ffa0 	bl	80022b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_I2C_MspInit+0x74>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_I2C_MspInit+0x74>)
 8001376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137a:	61d3      	str	r3, [r2, #28]
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_I2C_MspInit+0x74>)
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40005400 	.word	0x40005400
 8001394:	40021000 	.word	0x40021000
 8001398:	40010c00 	.word	0x40010c00

0800139c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a15      	ldr	r2, [pc, #84]	; (800140c <HAL_SPI_MspInit+0x70>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d123      	bne.n	8001404 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_SPI_MspInit+0x74>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a13      	ldr	r2, [pc, #76]	; (8001410 <HAL_SPI_MspInit+0x74>)
 80013c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_SPI_MspInit+0x74>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_SPI_MspInit+0x74>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_SPI_MspInit+0x74>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_SPI_MspInit+0x74>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013ec:	23a0      	movs	r3, #160	; 0xa0
 80013ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_SPI_MspInit+0x78>)
 8001400:	f000 ff56 	bl	80022b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40013000 	.word	0x40013000
 8001410:	40021000 	.word	0x40021000
 8001414:	40010800 	.word	0x40010800

08001418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d113      	bne.n	8001452 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_TIM_Base_MspInit+0x44>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a0b      	ldr	r2, [pc, #44]	; (800145c <HAL_TIM_Base_MspInit+0x44>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_TIM_Base_MspInit+0x44>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	201c      	movs	r0, #28
 8001448:	f000 fefb 	bl	8002242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800144c:	201c      	movs	r0, #28
 800144e:	f000 ff14 	bl	800227a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a09      	ldr	r2, [pc, #36]	; (8001494 <HAL_PCD_MspInit+0x34>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10b      	bne.n	800148a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_PCD_MspInit+0x38>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_PCD_MspInit+0x38>)
 8001478:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800147c:	61d3      	str	r3, [r2, #28]
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_PCD_MspInit+0x38>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40005c00 	.word	0x40005c00
 8001498:	40021000 	.word	0x40021000

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e2:	f000 f8bd 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}

080014ea <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80014ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014f2:	f001 f8a9 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <TIM2_IRQHandler+0x10>)
 8001502:	f002 feed 	bl	80042e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000174 	.word	0x20000174

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f003 fac6 	bl	8004ad0 <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20005000 	.word	0x20005000
 8001570:	00000400 	.word	0x00000400
 8001574:	200004c0 	.word	0x200004c0
 8001578:	20000610 	.word	0x20000610

0800157c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001588:	f7ff fff8 	bl	800157c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800158c:	480b      	ldr	r0, [pc, #44]	; (80015bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800158e:	490c      	ldr	r1, [pc, #48]	; (80015c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001590:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015a4:	4c09      	ldr	r4, [pc, #36]	; (80015cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b2:	f003 fa93 	bl	8004adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015b6:	f7fe ffe1 	bl	800057c <main>
  bx lr
 80015ba:	4770      	bx	lr
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80015c4:	080055e0 	.word	0x080055e0
  ldr r2, =_sbss
 80015c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80015cc:	20000610 	.word	0x20000610

080015d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC1_2_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_Init+0x28>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_Init+0x28>)
 80015de:	f043 0310 	orr.w	r3, r3, #16
 80015e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 fe21 	bl	800222c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	200f      	movs	r0, #15
 80015ec:	f000 f808 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff fe28 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40022000 	.word	0x40022000

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x54>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fe39 	bl	8002296 <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 fe01 	bl	8002242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_InitTick+0x5c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000020 	.word	0x20000020
 8001658:	20000028 	.word	0x20000028
 800165c:	20000024 	.word	0x20000024

08001660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_IncTick+0x1c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_IncTick+0x20>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a03      	ldr	r2, [pc, #12]	; (8001680 <HAL_IncTick+0x20>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	20000028 	.word	0x20000028
 8001680:	200004c4 	.word	0x200004c4

08001684 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <HAL_GetTick+0x10>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	200004c4 	.word	0x200004c4

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff fff0 	bl	8001684 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffe0 	bl	8001684 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000028 	.word	0x20000028

080016e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0be      	b.n	8001880 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	d109      	bne.n	8001724 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fdc2 	bl	80012a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fbc5 	bl	8001eb4 <ADC_ConversionStop_Disable>
 800172a:	4603      	mov	r3, r0
 800172c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 8099 	bne.w	800186e <HAL_ADC_Init+0x18e>
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f040 8095 	bne.w	800186e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800174c:	f023 0302 	bic.w	r3, r3, #2
 8001750:	f043 0202 	orr.w	r2, r3, #2
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001760:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7b1b      	ldrb	r3, [r3, #12]
 8001766:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001768:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	4313      	orrs	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001778:	d003      	beq.n	8001782 <HAL_ADC_Init+0xa2>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d102      	bne.n	8001788 <HAL_ADC_Init+0xa8>
 8001782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001786:	e000      	b.n	800178a <HAL_ADC_Init+0xaa>
 8001788:	2300      	movs	r3, #0
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7d1b      	ldrb	r3, [r3, #20]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d119      	bne.n	80017cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7b1b      	ldrb	r3, [r3, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	035a      	lsls	r2, r3, #13
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	e00b      	b.n	80017cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	f043 0220 	orr.w	r2, r3, #32
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	f043 0201 	orr.w	r2, r3, #1
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	430a      	orrs	r2, r1
 80017de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <HAL_ADC_Init+0x1a8>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	430b      	orrs	r3, r1
 80017f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017fc:	d003      	beq.n	8001806 <HAL_ADC_Init+0x126>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d104      	bne.n	8001810 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	3b01      	subs	r3, #1
 800180c:	051b      	lsls	r3, r3, #20
 800180e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	430a      	orrs	r2, r1
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_ADC_Init+0x1ac>)
 800182c:	4013      	ands	r3, r2
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	429a      	cmp	r2, r3
 8001832:	d10b      	bne.n	800184c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	f023 0303 	bic.w	r3, r3, #3
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800184a:	e018      	b.n	800187e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	f023 0312 	bic.w	r3, r3, #18
 8001854:	f043 0210 	orr.w	r2, r3, #16
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	f043 0201 	orr.w	r2, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800186c:	e007      	b.n	800187e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	f043 0210 	orr.w	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800187e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	ffe1f7fd 	.word	0xffe1f7fd
 800188c:	ff1f0efe 	.word	0xff1f0efe

08001890 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_Start+0x1a>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e098      	b.n	80019dc <HAL_ADC_Start+0x14c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 faa4 	bl	8001e00 <ADC_Enable>
 80018b8:	4603      	mov	r3, r0
 80018ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 8087 	bne.w	80019d2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a41      	ldr	r2, [pc, #260]	; (80019e4 <HAL_ADC_Start+0x154>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d105      	bne.n	80018ee <HAL_ADC_Start+0x5e>
 80018e2:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_ADC_Start+0x158>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d115      	bne.n	800191a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d026      	beq.n	8001956 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001910:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001918:	e01d      	b.n	8001956 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a2f      	ldr	r2, [pc, #188]	; (80019e8 <HAL_ADC_Start+0x158>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d004      	beq.n	800193a <HAL_ADC_Start+0xaa>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a2b      	ldr	r2, [pc, #172]	; (80019e4 <HAL_ADC_Start+0x154>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d10d      	bne.n	8001956 <HAL_ADC_Start+0xc6>
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_ADC_Start+0x158>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800194e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d006      	beq.n	8001970 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	f023 0206 	bic.w	r2, r3, #6
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c
 800196e:	e002      	b.n	8001976 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f06f 0202 	mvn.w	r2, #2
 8001986:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001992:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001996:	d113      	bne.n	80019c0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800199c:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <HAL_ADC_Start+0x154>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d105      	bne.n	80019ae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_ADC_Start+0x158>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d108      	bne.n	80019c0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	e00c      	b.n	80019da <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	e003      	b.n	80019da <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40012800 	.word	0x40012800
 80019e8:	40012400 	.word	0x40012400

080019ec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b087      	sub	sp, #28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a02:	f7ff fe3f 	bl	8001684 <HAL_GetTick>
 8001a06:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	f043 0220 	orr.w	r2, r3, #32
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0d3      	b.n	8001bd6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d131      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d12a      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a4a:	e021      	b.n	8001a90 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a52:	d01d      	beq.n	8001a90 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <HAL_ADC_PollForConversion+0x7e>
 8001a5a:	f7ff fe13 	bl	8001684 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d212      	bcs.n	8001a90 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10b      	bne.n	8001a90 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	f043 0204 	orr.w	r2, r3, #4
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0a2      	b.n	8001bd6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0d6      	beq.n	8001a4c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a9e:	e070      	b.n	8001b82 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <HAL_ADC_PollForConversion+0x1f4>)
 8001aa2:	681c      	ldr	r4, [r3, #0]
 8001aa4:	2002      	movs	r0, #2
 8001aa6:	f002 f849 	bl	8003b3c <HAL_RCCEx_GetPeriphCLKFreq>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6919      	ldr	r1, [r3, #16]
 8001ab6:	4b4b      	ldr	r3, [pc, #300]	; (8001be4 <HAL_ADC_PollForConversion+0x1f8>)
 8001ab8:	400b      	ands	r3, r1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d118      	bne.n	8001af0 <HAL_ADC_PollForConversion+0x104>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68d9      	ldr	r1, [r3, #12]
 8001ac4:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <HAL_ADC_PollForConversion+0x1fc>)
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d111      	bne.n	8001af0 <HAL_ADC_PollForConversion+0x104>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6919      	ldr	r1, [r3, #16]
 8001ad2:	4b46      	ldr	r3, [pc, #280]	; (8001bec <HAL_ADC_PollForConversion+0x200>)
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d108      	bne.n	8001aec <HAL_ADC_PollForConversion+0x100>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68d9      	ldr	r1, [r3, #12]
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_ADC_PollForConversion+0x204>)
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_ADC_PollForConversion+0x100>
 8001ae8:	2314      	movs	r3, #20
 8001aea:	e020      	b.n	8001b2e <HAL_ADC_PollForConversion+0x142>
 8001aec:	2329      	movs	r3, #41	; 0x29
 8001aee:	e01e      	b.n	8001b2e <HAL_ADC_PollForConversion+0x142>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6919      	ldr	r1, [r3, #16]
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_ADC_PollForConversion+0x200>)
 8001af8:	400b      	ands	r3, r1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_ADC_PollForConversion+0x120>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68d9      	ldr	r1, [r3, #12]
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_ADC_PollForConversion+0x204>)
 8001b06:	400b      	ands	r3, r1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00d      	beq.n	8001b28 <HAL_ADC_PollForConversion+0x13c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6919      	ldr	r1, [r3, #16]
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_ADC_PollForConversion+0x208>)
 8001b14:	400b      	ands	r3, r1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d108      	bne.n	8001b2c <HAL_ADC_PollForConversion+0x140>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68d9      	ldr	r1, [r3, #12]
 8001b20:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_ADC_PollForConversion+0x208>)
 8001b22:	400b      	ands	r3, r1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_PollForConversion+0x140>
 8001b28:	2354      	movs	r3, #84	; 0x54
 8001b2a:	e000      	b.n	8001b2e <HAL_ADC_PollForConversion+0x142>
 8001b2c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b34:	e021      	b.n	8001b7a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d01a      	beq.n	8001b74 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <HAL_ADC_PollForConversion+0x168>
 8001b44:	f7ff fd9e 	bl	8001684 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d20f      	bcs.n	8001b74 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d90b      	bls.n	8001b74 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	f043 0204 	orr.w	r2, r3, #4
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e030      	b.n	8001bd6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3301      	adds	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d8d9      	bhi.n	8001b36 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f06f 0212 	mvn.w	r2, #18
 8001b8a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ba2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ba6:	d115      	bne.n	8001bd4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d111      	bne.n	8001bd4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	371c      	adds	r7, #28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000020 	.word	0x20000020
 8001be4:	24924924 	.word	0x24924924
 8001be8:	00924924 	.word	0x00924924
 8001bec:	12492492 	.word	0x12492492
 8001bf0:	00492492 	.word	0x00492492
 8001bf4:	00249249 	.word	0x00249249

08001bf8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x20>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e0dc      	b.n	8001dea <HAL_ADC_ConfigChannel+0x1da>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b06      	cmp	r3, #6
 8001c3e:	d81c      	bhi.n	8001c7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b05      	subs	r3, #5
 8001c52:	221f      	movs	r2, #31
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4019      	ands	r1, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	3b05      	subs	r3, #5
 8001c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	635a      	str	r2, [r3, #52]	; 0x34
 8001c78:	e03c      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d81c      	bhi.n	8001cbc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	3b23      	subs	r3, #35	; 0x23
 8001c94:	221f      	movs	r2, #31
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	4019      	ands	r1, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	3b23      	subs	r3, #35	; 0x23
 8001cae:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cba:	e01b      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	3b41      	subs	r3, #65	; 0x41
 8001cce:	221f      	movs	r2, #31
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	4019      	ands	r1, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3b41      	subs	r3, #65	; 0x41
 8001ce8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b09      	cmp	r3, #9
 8001cfa:	d91c      	bls.n	8001d36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68d9      	ldr	r1, [r3, #12]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3b1e      	subs	r3, #30
 8001d0e:	2207      	movs	r2, #7
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4019      	ands	r1, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6898      	ldr	r0, [r3, #8]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	3b1e      	subs	r3, #30
 8001d28:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	e019      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6919      	ldr	r1, [r3, #16]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	2207      	movs	r2, #7
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	4019      	ands	r1, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	6898      	ldr	r0, [r3, #8]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d003      	beq.n	8001d7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d76:	2b11      	cmp	r3, #17
 8001d78:	d132      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d125      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d126      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001da0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d11a      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <HAL_ADC_ConfigChannel+0x1ec>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	0c9a      	lsrs	r2, r3, #18
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dc0:	e002      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f9      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x1b2>
 8001dce:	e007      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	40012400 	.word	0x40012400
 8001df8:	20000020 	.word	0x20000020
 8001dfc:	431bde83 	.word	0x431bde83

08001e00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d040      	beq.n	8001ea0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <ADC_Enable+0xac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1f      	ldr	r2, [pc, #124]	; (8001eb0 <ADC_Enable+0xb0>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	0c9b      	lsrs	r3, r3, #18
 8001e3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e3c:	e002      	b.n	8001e44 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f9      	bne.n	8001e3e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e4a:	f7ff fc1b 	bl	8001684 <HAL_GetTick>
 8001e4e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e50:	e01f      	b.n	8001e92 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e52:	f7ff fc17 	bl	8001684 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d918      	bls.n	8001e92 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d011      	beq.n	8001e92 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	f043 0210 	orr.w	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e007      	b.n	8001ea2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d1d8      	bne.n	8001e52 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000020 	.word	0x20000020
 8001eb0:	431bde83 	.word	0x431bde83

08001eb4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d12e      	bne.n	8001f2c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ede:	f7ff fbd1 	bl	8001684 <HAL_GetTick>
 8001ee2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ee4:	e01b      	b.n	8001f1e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ee6:	f7ff fbcd 	bl	8001684 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d914      	bls.n	8001f1e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10d      	bne.n	8001f1e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	f043 0210 	orr.w	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e007      	b.n	8001f2e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d0dc      	beq.n	8001ee6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADCEx_Calibration_Start+0x1e>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e097      	b.n	8002086 <HAL_ADCEx_Calibration_Start+0x14e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa8 	bl	8001eb4 <ADC_ConversionStop_Disable>
 8001f64:	4603      	mov	r3, r0
 8001f66:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff49 	bl	8001e00 <ADC_Enable>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f040 8081 	bne.w	800207c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f82:	f023 0302 	bic.w	r3, r3, #2
 8001f86:	f043 0202 	orr.w	r2, r3, #2
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f8e:	4b40      	ldr	r3, [pc, #256]	; (8002090 <HAL_ADCEx_Calibration_Start+0x158>)
 8001f90:	681c      	ldr	r4, [r3, #0]
 8001f92:	2002      	movs	r0, #2
 8001f94:	f001 fdd2 	bl	8003b3c <HAL_RCCEx_GetPeriphCLKFreq>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001f9e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001fa0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001fa2:	e002      	b.n	8001faa <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f9      	bne.n	8001fa4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0208 	orr.w	r2, r2, #8
 8001fbe:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001fc0:	f7ff fb60 	bl	8001684 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001fc6:	e01b      	b.n	8002000 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001fc8:	f7ff fb5c 	bl	8001684 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b0a      	cmp	r3, #10
 8001fd4:	d914      	bls.n	8002000 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00d      	beq.n	8002000 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	f023 0312 	bic.w	r3, r3, #18
 8001fec:	f043 0210 	orr.w	r2, r3, #16
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e042      	b.n	8002086 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1dc      	bne.n	8001fc8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0204 	orr.w	r2, r2, #4
 800201c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800201e:	f7ff fb31 	bl	8001684 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002024:	e01b      	b.n	800205e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002026:	f7ff fb2d 	bl	8001684 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b0a      	cmp	r3, #10
 8002032:	d914      	bls.n	800205e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00d      	beq.n	800205e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	f023 0312 	bic.w	r3, r3, #18
 800204a:	f043 0210 	orr.w	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e013      	b.n	8002086 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1dc      	bne.n	8002026 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f023 0303 	bic.w	r3, r3, #3
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002084:	7dfb      	ldrb	r3, [r7, #23]
}
 8002086:	4618      	mov	r0, r3
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd90      	pop	{r4, r7, pc}
 800208e:	bf00      	nop
 8002090:	20000020 	.word	0x20000020

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4906      	ldr	r1, [pc, #24]	; (800212c <__NVIC_EnableIRQ+0x34>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	; (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	; (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f8:	d301      	bcc.n	80021fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <SysTick_Config+0x40>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002206:	210f      	movs	r1, #15
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f7ff ff90 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <SysTick_Config+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <SysTick_Config+0x40>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff2d 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002254:	f7ff ff42 	bl	80020dc <__NVIC_GetPriorityGrouping>
 8002258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7ff ff90 	bl	8002184 <NVIC_EncodePriority>
 8002264:	4602      	mov	r2, r0
 8002266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5f 	bl	8002130 <__NVIC_SetPriority>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff35 	bl	80020f8 <__NVIC_EnableIRQ>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffa2 	bl	80021e8 <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b08b      	sub	sp, #44	; 0x2c
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c2:	e169      	b.n	8002598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022c4:	2201      	movs	r2, #1
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69fa      	ldr	r2, [r7, #28]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	429a      	cmp	r2, r3
 80022de:	f040 8158 	bne.w	8002592 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4a9a      	ldr	r2, [pc, #616]	; (8002550 <HAL_GPIO_Init+0x2a0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d05e      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 80022ec:	4a98      	ldr	r2, [pc, #608]	; (8002550 <HAL_GPIO_Init+0x2a0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d875      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 80022f2:	4a98      	ldr	r2, [pc, #608]	; (8002554 <HAL_GPIO_Init+0x2a4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d058      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 80022f8:	4a96      	ldr	r2, [pc, #600]	; (8002554 <HAL_GPIO_Init+0x2a4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d86f      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 80022fe:	4a96      	ldr	r2, [pc, #600]	; (8002558 <HAL_GPIO_Init+0x2a8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d052      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 8002304:	4a94      	ldr	r2, [pc, #592]	; (8002558 <HAL_GPIO_Init+0x2a8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d869      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 800230a:	4a94      	ldr	r2, [pc, #592]	; (800255c <HAL_GPIO_Init+0x2ac>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d04c      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 8002310:	4a92      	ldr	r2, [pc, #584]	; (800255c <HAL_GPIO_Init+0x2ac>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d863      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 8002316:	4a92      	ldr	r2, [pc, #584]	; (8002560 <HAL_GPIO_Init+0x2b0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d046      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
 800231c:	4a90      	ldr	r2, [pc, #576]	; (8002560 <HAL_GPIO_Init+0x2b0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d85d      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 8002322:	2b12      	cmp	r3, #18
 8002324:	d82a      	bhi.n	800237c <HAL_GPIO_Init+0xcc>
 8002326:	2b12      	cmp	r3, #18
 8002328:	d859      	bhi.n	80023de <HAL_GPIO_Init+0x12e>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <HAL_GPIO_Init+0x80>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	080023ab 	.word	0x080023ab
 8002334:	08002385 	.word	0x08002385
 8002338:	08002397 	.word	0x08002397
 800233c:	080023d9 	.word	0x080023d9
 8002340:	080023df 	.word	0x080023df
 8002344:	080023df 	.word	0x080023df
 8002348:	080023df 	.word	0x080023df
 800234c:	080023df 	.word	0x080023df
 8002350:	080023df 	.word	0x080023df
 8002354:	080023df 	.word	0x080023df
 8002358:	080023df 	.word	0x080023df
 800235c:	080023df 	.word	0x080023df
 8002360:	080023df 	.word	0x080023df
 8002364:	080023df 	.word	0x080023df
 8002368:	080023df 	.word	0x080023df
 800236c:	080023df 	.word	0x080023df
 8002370:	080023df 	.word	0x080023df
 8002374:	0800238d 	.word	0x0800238d
 8002378:	080023a1 	.word	0x080023a1
 800237c:	4a79      	ldr	r2, [pc, #484]	; (8002564 <HAL_GPIO_Init+0x2b4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d013      	beq.n	80023aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002382:	e02c      	b.n	80023de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	623b      	str	r3, [r7, #32]
          break;
 800238a:	e029      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	3304      	adds	r3, #4
 8002392:	623b      	str	r3, [r7, #32]
          break;
 8002394:	e024      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	3308      	adds	r3, #8
 800239c:	623b      	str	r3, [r7, #32]
          break;
 800239e:	e01f      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	330c      	adds	r3, #12
 80023a6:	623b      	str	r3, [r7, #32]
          break;
 80023a8:	e01a      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d102      	bne.n	80023b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023b2:	2304      	movs	r3, #4
 80023b4:	623b      	str	r3, [r7, #32]
          break;
 80023b6:	e013      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c0:	2308      	movs	r3, #8
 80023c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	611a      	str	r2, [r3, #16]
          break;
 80023ca:	e009      	b.n	80023e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023cc:	2308      	movs	r3, #8
 80023ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	615a      	str	r2, [r3, #20]
          break;
 80023d6:	e003      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023d8:	2300      	movs	r3, #0
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e000      	b.n	80023e0 <HAL_GPIO_Init+0x130>
          break;
 80023de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2bff      	cmp	r3, #255	; 0xff
 80023e4:	d801      	bhi.n	80023ea <HAL_GPIO_Init+0x13a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	e001      	b.n	80023ee <HAL_GPIO_Init+0x13e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2bff      	cmp	r3, #255	; 0xff
 80023f4:	d802      	bhi.n	80023fc <HAL_GPIO_Init+0x14c>
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	e002      	b.n	8002402 <HAL_GPIO_Init+0x152>
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	3b08      	subs	r3, #8
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	210f      	movs	r1, #15
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	401a      	ands	r2, r3
 8002414:	6a39      	ldr	r1, [r7, #32]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80b1 	beq.w	8002592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002430:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <HAL_GPIO_Init+0x2b8>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	4a4c      	ldr	r2, [pc, #304]	; (8002568 <HAL_GPIO_Init+0x2b8>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6193      	str	r3, [r2, #24]
 800243c:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <HAL_GPIO_Init+0x2b8>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002448:	4a48      	ldr	r2, [pc, #288]	; (800256c <HAL_GPIO_Init+0x2bc>)
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002454:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	220f      	movs	r2, #15
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a40      	ldr	r2, [pc, #256]	; (8002570 <HAL_GPIO_Init+0x2c0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_GPIO_Init+0x1ec>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3f      	ldr	r2, [pc, #252]	; (8002574 <HAL_GPIO_Init+0x2c4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00d      	beq.n	8002498 <HAL_GPIO_Init+0x1e8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a3e      	ldr	r2, [pc, #248]	; (8002578 <HAL_GPIO_Init+0x2c8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <HAL_GPIO_Init+0x1e4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3d      	ldr	r2, [pc, #244]	; (800257c <HAL_GPIO_Init+0x2cc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_GPIO_Init+0x1e0>
 800248c:	2303      	movs	r3, #3
 800248e:	e006      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 8002490:	2304      	movs	r3, #4
 8002492:	e004      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 8002494:	2302      	movs	r3, #2
 8002496:	e002      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 800249c:	2300      	movs	r3, #0
 800249e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a0:	f002 0203 	and.w	r2, r2, #3
 80024a4:	0092      	lsls	r2, r2, #2
 80024a6:	4093      	lsls	r3, r2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ae:	492f      	ldr	r1, [pc, #188]	; (800256c <HAL_GPIO_Init+0x2bc>)
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	3302      	adds	r3, #2
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	492c      	ldr	r1, [pc, #176]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024d6:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	43db      	mvns	r3, r3
 80024de:	4928      	ldr	r1, [pc, #160]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024f0:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	4922      	ldr	r1, [pc, #136]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60cb      	str	r3, [r1, #12]
 80024fc:	e006      	b.n	800250c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	43db      	mvns	r3, r3
 8002506:	491e      	ldr	r1, [pc, #120]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002508:	4013      	ands	r3, r2
 800250a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d006      	beq.n	8002526 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4918      	ldr	r1, [pc, #96]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002526:	4b16      	ldr	r3, [pc, #88]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	43db      	mvns	r3, r3
 800252e:	4914      	ldr	r1, [pc, #80]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002530:	4013      	ands	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d021      	beq.n	8002584 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	490e      	ldr	r1, [pc, #56]	; (8002580 <HAL_GPIO_Init+0x2d0>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
 800254c:	e021      	b.n	8002592 <HAL_GPIO_Init+0x2e2>
 800254e:	bf00      	nop
 8002550:	10320000 	.word	0x10320000
 8002554:	10310000 	.word	0x10310000
 8002558:	10220000 	.word	0x10220000
 800255c:	10210000 	.word	0x10210000
 8002560:	10120000 	.word	0x10120000
 8002564:	10110000 	.word	0x10110000
 8002568:	40021000 	.word	0x40021000
 800256c:	40010000 	.word	0x40010000
 8002570:	40010800 	.word	0x40010800
 8002574:	40010c00 	.word	0x40010c00
 8002578:	40011000 	.word	0x40011000
 800257c:	40011400 	.word	0x40011400
 8002580:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_GPIO_Init+0x304>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	43db      	mvns	r3, r3
 800258c:	4909      	ldr	r1, [pc, #36]	; (80025b4 <HAL_GPIO_Init+0x304>)
 800258e:	4013      	ands	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	3301      	adds	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	fa22 f303 	lsr.w	r3, r2, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f47f ae8e 	bne.w	80022c4 <HAL_GPIO_Init+0x14>
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	372c      	adds	r7, #44	; 0x2c
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	40010400 	.word	0x40010400

080025b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	807b      	strh	r3, [r7, #2]
 80025f2:	4613      	mov	r3, r2
 80025f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025f6:	787b      	ldrb	r3, [r7, #1]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fc:	887a      	ldrh	r2, [r7, #2]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002602:	e003      	b.n	800260c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002604:	887b      	ldrh	r3, [r7, #2]
 8002606:	041a      	lsls	r2, r3, #16
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	611a      	str	r2, [r3, #16]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002628:	887a      	ldrh	r2, [r7, #2]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	041a      	lsls	r2, r3, #16
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	43d9      	mvns	r1, r3
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	400b      	ands	r3, r1
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	611a      	str	r2, [r3, #16]
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fad6 	bl	8000c18 <HAL_GPIO_EXTI_Callback>
  }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40010400 	.word	0x40010400

08002678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e12b      	b.n	80028e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fe3e 	bl	8001320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2224      	movs	r2, #36	; 0x24
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026dc:	f001 f932 	bl	8003944 <HAL_RCC_GetPCLK1Freq>
 80026e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	4a81      	ldr	r2, [pc, #516]	; (80028ec <HAL_I2C_Init+0x274>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d807      	bhi.n	80026fc <HAL_I2C_Init+0x84>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4a80      	ldr	r2, [pc, #512]	; (80028f0 <HAL_I2C_Init+0x278>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	bf94      	ite	ls
 80026f4:	2301      	movls	r3, #1
 80026f6:	2300      	movhi	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e006      	b.n	800270a <HAL_I2C_Init+0x92>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4a7d      	ldr	r2, [pc, #500]	; (80028f4 <HAL_I2C_Init+0x27c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	bf94      	ite	ls
 8002704:	2301      	movls	r3, #1
 8002706:	2300      	movhi	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0e7      	b.n	80028e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4a78      	ldr	r2, [pc, #480]	; (80028f8 <HAL_I2C_Init+0x280>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	0c9b      	lsrs	r3, r3, #18
 800271c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	430a      	orrs	r2, r1
 8002730:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a6a      	ldr	r2, [pc, #424]	; (80028ec <HAL_I2C_Init+0x274>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d802      	bhi.n	800274c <HAL_I2C_Init+0xd4>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	3301      	adds	r3, #1
 800274a:	e009      	b.n	8002760 <HAL_I2C_Init+0xe8>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	4a69      	ldr	r2, [pc, #420]	; (80028fc <HAL_I2C_Init+0x284>)
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	099b      	lsrs	r3, r3, #6
 800275e:	3301      	adds	r3, #1
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	430b      	orrs	r3, r1
 8002766:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002772:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	495c      	ldr	r1, [pc, #368]	; (80028ec <HAL_I2C_Init+0x274>)
 800277c:	428b      	cmp	r3, r1
 800277e:	d819      	bhi.n	80027b4 <HAL_I2C_Init+0x13c>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1e59      	subs	r1, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	fbb1 f3f3 	udiv	r3, r1, r3
 800278e:	1c59      	adds	r1, r3, #1
 8002790:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002794:	400b      	ands	r3, r1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_I2C_Init+0x138>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1e59      	subs	r1, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ae:	e051      	b.n	8002854 <HAL_I2C_Init+0x1dc>
 80027b0:	2304      	movs	r3, #4
 80027b2:	e04f      	b.n	8002854 <HAL_I2C_Init+0x1dc>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d111      	bne.n	80027e0 <HAL_I2C_Init+0x168>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e58      	subs	r0, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	440b      	add	r3, r1
 80027ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e012      	b.n	8002806 <HAL_I2C_Init+0x18e>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1e58      	subs	r0, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	0099      	lsls	r1, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f6:	3301      	adds	r3, #1
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_Init+0x196>
 800280a:	2301      	movs	r3, #1
 800280c:	e022      	b.n	8002854 <HAL_I2C_Init+0x1dc>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10e      	bne.n	8002834 <HAL_I2C_Init+0x1bc>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1e58      	subs	r0, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	460b      	mov	r3, r1
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	440b      	add	r3, r1
 8002824:	fbb0 f3f3 	udiv	r3, r0, r3
 8002828:	3301      	adds	r3, #1
 800282a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002832:	e00f      	b.n	8002854 <HAL_I2C_Init+0x1dc>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1e58      	subs	r0, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	0099      	lsls	r1, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	fbb0 f3f3 	udiv	r3, r0, r3
 800284a:	3301      	adds	r3, #1
 800284c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	6809      	ldr	r1, [r1, #0]
 8002858:	4313      	orrs	r3, r2
 800285a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002882:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6911      	ldr	r1, [r2, #16]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68d2      	ldr	r2, [r2, #12]
 800288e:	4311      	orrs	r1, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	430b      	orrs	r3, r1
 8002896:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	000186a0 	.word	0x000186a0
 80028f0:	001e847f 	.word	0x001e847f
 80028f4:	003d08ff 	.word	0x003d08ff
 80028f8:	431bde83 	.word	0x431bde83
 80028fc:	10624dd3 	.word	0x10624dd3

08002900 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	461a      	mov	r2, r3
 800290c:	460b      	mov	r3, r1
 800290e:	817b      	strh	r3, [r7, #10]
 8002910:	4613      	mov	r3, r2
 8002912:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7fe feb6 	bl	8001684 <HAL_GetTick>
 8002918:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b20      	cmp	r3, #32
 8002924:	f040 80e0 	bne.w	8002ae8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2319      	movs	r3, #25
 800292e:	2201      	movs	r2, #1
 8002930:	4970      	ldr	r1, [pc, #448]	; (8002af4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f964 	bl	8002c00 <I2C_WaitOnFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
 8002940:	e0d3      	b.n	8002aea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_I2C_Master_Transmit+0x50>
 800294c:	2302      	movs	r3, #2
 800294e:	e0cc      	b.n	8002aea <HAL_I2C_Master_Transmit+0x1ea>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d007      	beq.n	8002976 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002984:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2221      	movs	r2, #33	; 0x21
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2210      	movs	r2, #16
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	893a      	ldrh	r2, [r7, #8]
 80029a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a50      	ldr	r2, [pc, #320]	; (8002af8 <HAL_I2C_Master_Transmit+0x1f8>)
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029b8:	8979      	ldrh	r1, [r7, #10]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	6a3a      	ldr	r2, [r7, #32]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f89c 	bl	8002afc <I2C_MasterRequestWrite>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e08d      	b.n	8002aea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029e4:	e066      	b.n	8002ab4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	6a39      	ldr	r1, [r7, #32]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fa22 	bl	8002e34 <I2C_WaitOnTXEFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00d      	beq.n	8002a12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d107      	bne.n	8002a0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e06b      	b.n	8002aea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d11b      	bne.n	8002a88 <HAL_I2C_Master_Transmit+0x188>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d017      	beq.n	8002a88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	6a39      	ldr	r1, [r7, #32]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fa19 	bl	8002ec4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d107      	bne.n	8002ab0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e01a      	b.n	8002aea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d194      	bne.n	80029e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e000      	b.n	8002aea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ae8:	2302      	movs	r3, #2
  }
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	00100002 	.word	0x00100002
 8002af8:	ffff0000 	.word	0xffff0000

08002afc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d006      	beq.n	8002b26 <I2C_MasterRequestWrite+0x2a>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d003      	beq.n	8002b26 <I2C_MasterRequestWrite+0x2a>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b24:	d108      	bne.n	8002b38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e00b      	b.n	8002b50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	2b12      	cmp	r3, #18
 8002b3e:	d107      	bne.n	8002b50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f84f 	bl	8002c00 <I2C_WaitOnFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00d      	beq.n	8002b84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b76:	d103      	bne.n	8002b80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e035      	b.n	8002bf0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b8c:	d108      	bne.n	8002ba0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b8e:	897b      	ldrh	r3, [r7, #10]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b9c:	611a      	str	r2, [r3, #16]
 8002b9e:	e01b      	b.n	8002bd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ba0:	897b      	ldrh	r3, [r7, #10]
 8002ba2:	11db      	asrs	r3, r3, #7
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f003 0306 	and.w	r3, r3, #6
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f063 030f 	orn	r3, r3, #15
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	490e      	ldr	r1, [pc, #56]	; (8002bf8 <I2C_MasterRequestWrite+0xfc>)
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f898 	bl	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e010      	b.n	8002bf0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bce:	897b      	ldrh	r3, [r7, #10]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4907      	ldr	r1, [pc, #28]	; (8002bfc <I2C_MasterRequestWrite+0x100>)
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f888 	bl	8002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	00010008 	.word	0x00010008
 8002bfc:	00010002 	.word	0x00010002

08002c00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c10:	e048      	b.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c18:	d044      	beq.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1a:	f7fe fd33 	bl	8001684 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d139      	bne.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	0c1b      	lsrs	r3, r3, #16
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d10d      	bne.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	43da      	mvns	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4013      	ands	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	e00c      	b.n	8002c70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4013      	ands	r3, r2
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d116      	bne.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e023      	b.n	8002cec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	0c1b      	lsrs	r3, r3, #16
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10d      	bne.n	8002cca <I2C_WaitOnFlagUntilTimeout+0xca>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	43da      	mvns	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	e00c      	b.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	43da      	mvns	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d093      	beq.n	8002c12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d02:	e071      	b.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d12:	d123      	bne.n	8002d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f043 0204 	orr.w	r2, r3, #4
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e067      	b.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d041      	beq.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d64:	f7fe fc8e 	bl	8001684 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d302      	bcc.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d136      	bne.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d10c      	bne.n	8002d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bf14      	ite	ne
 8002d96:	2301      	movne	r3, #1
 8002d98:	2300      	moveq	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	e00b      	b.n	8002db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	43da      	mvns	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4013      	ands	r3, r2
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf14      	ite	ne
 8002db0:	2301      	movne	r3, #1
 8002db2:	2300      	moveq	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e021      	b.n	8002e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d10c      	bne.n	8002e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e00b      	b.n	8002e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4013      	ands	r3, r2
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bf14      	ite	ne
 8002e1e:	2301      	movne	r3, #1
 8002e20:	2300      	moveq	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f47f af6d 	bne.w	8002d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e40:	e034      	b.n	8002eac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f886 	bl	8002f54 <I2C_IsAcknowledgeFailed>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e034      	b.n	8002ebc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d028      	beq.n	8002eac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5a:	f7fe fc13 	bl	8001684 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d302      	bcc.n	8002e70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11d      	bne.n	8002eac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	2b80      	cmp	r3, #128	; 0x80
 8002e7c:	d016      	beq.n	8002eac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f043 0220 	orr.w	r2, r3, #32
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e007      	b.n	8002ebc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb6:	2b80      	cmp	r3, #128	; 0x80
 8002eb8:	d1c3      	bne.n	8002e42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ed0:	e034      	b.n	8002f3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f83e 	bl	8002f54 <I2C_IsAcknowledgeFailed>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e034      	b.n	8002f4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d028      	beq.n	8002f3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe fbcb 	bl	8001684 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d11d      	bne.n	8002f3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d016      	beq.n	8002f3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e007      	b.n	8002f4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d1c3      	bne.n	8002ed2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d11b      	bne.n	8002fa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f043 0204 	orr.w	r2, r3, #4
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e000      	b.n	8002fa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb2:	b08b      	sub	sp, #44	; 0x2c
 8002fb4:	af06      	add	r7, sp, #24
 8002fb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e0f1      	b.n	80031a6 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fa42 	bl	8001460 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2203      	movs	r2, #3
 8002fe0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f001 fce5 	bl	80049b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	687e      	ldr	r6, [r7, #4]
 8002ff6:	466d      	mov	r5, sp
 8002ff8:	f106 0410 	add.w	r4, r6, #16
 8002ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	602b      	str	r3, [r5, #0]
 8003004:	1d33      	adds	r3, r6, #4
 8003006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003008:	6838      	ldr	r0, [r7, #0]
 800300a:	f001 fcc5 	bl	8004998 <USB_CoreInit>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0c2      	b.n	80031a6 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f001 fce0 	bl	80049ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	e040      	b.n	80030b4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	440b      	add	r3, r1
 8003042:	3301      	adds	r3, #1
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	440b      	add	r3, r1
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	440b      	add	r3, r1
 800306c:	3303      	adds	r3, #3
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	440b      	add	r3, r1
 8003080:	3338      	adds	r3, #56	; 0x38
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	333c      	adds	r3, #60	; 0x3c
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	440b      	add	r3, r1
 80030a8:	3340      	adds	r3, #64	; 0x40
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	3301      	adds	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d3b9      	bcc.n	8003032 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	e044      	b.n	800314e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	440b      	add	r3, r1
 80030e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	440b      	add	r3, r1
 80030fe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	440b      	add	r3, r1
 8003114:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	440b      	add	r3, r1
 800312a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	440b      	add	r3, r1
 8003140:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	3301      	adds	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	d3b5      	bcc.n	80030c4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	687e      	ldr	r6, [r7, #4]
 8003160:	466d      	mov	r5, sp
 8003162:	f106 0410 	add.w	r4, r6, #16
 8003166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	602b      	str	r3, [r5, #0]
 800316e:	1d33      	adds	r3, r6, #4
 8003170:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003172:	6838      	ldr	r0, [r7, #0]
 8003174:	f001 fc46 	bl	8004a04 <USB_DevInit>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e00d      	b.n	80031a6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 fc50 	bl	8004a44 <USB_DevDisconnect>

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080031b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e272      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8087 	beq.w	80032de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031d0:	4b92      	ldr	r3, [pc, #584]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d00c      	beq.n	80031f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031dc:	4b8f      	ldr	r3, [pc, #572]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d112      	bne.n	800320e <HAL_RCC_OscConfig+0x5e>
 80031e8:	4b8c      	ldr	r3, [pc, #560]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f4:	d10b      	bne.n	800320e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f6:	4b89      	ldr	r3, [pc, #548]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d06c      	beq.n	80032dc <HAL_RCC_OscConfig+0x12c>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d168      	bne.n	80032dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e24c      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x76>
 8003218:	4b80      	ldr	r3, [pc, #512]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a7f      	ldr	r2, [pc, #508]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 800321e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	e02e      	b.n	8003284 <HAL_RCC_OscConfig+0xd4>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x98>
 800322e:	4b7b      	ldr	r3, [pc, #492]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a7a      	ldr	r2, [pc, #488]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4b78      	ldr	r3, [pc, #480]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a77      	ldr	r2, [pc, #476]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e01d      	b.n	8003284 <HAL_RCC_OscConfig+0xd4>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003250:	d10c      	bne.n	800326c <HAL_RCC_OscConfig+0xbc>
 8003252:	4b72      	ldr	r3, [pc, #456]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a71      	ldr	r2, [pc, #452]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b6f      	ldr	r3, [pc, #444]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6e      	ldr	r2, [pc, #440]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e00b      	b.n	8003284 <HAL_RCC_OscConfig+0xd4>
 800326c:	4b6b      	ldr	r3, [pc, #428]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a6a      	ldr	r2, [pc, #424]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b68      	ldr	r3, [pc, #416]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a67      	ldr	r2, [pc, #412]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 800327e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003282:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328c:	f7fe f9fa 	bl	8001684 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003294:	f7fe f9f6 	bl	8001684 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e200      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	4b5d      	ldr	r3, [pc, #372]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0xe4>
 80032b2:	e014      	b.n	80032de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe f9e6 	bl	8001684 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032bc:	f7fe f9e2 	bl	8001684 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e1ec      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ce:	4b53      	ldr	r3, [pc, #332]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x10c>
 80032da:	e000      	b.n	80032de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d063      	beq.n	80033b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ea:	4b4c      	ldr	r3, [pc, #304]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032f6:	4b49      	ldr	r3, [pc, #292]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d11c      	bne.n	800333c <HAL_RCC_OscConfig+0x18c>
 8003302:	4b46      	ldr	r3, [pc, #280]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d116      	bne.n	800333c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	4b43      	ldr	r3, [pc, #268]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_RCC_OscConfig+0x176>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d001      	beq.n	8003326 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e1c0      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003326:	4b3d      	ldr	r3, [pc, #244]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4939      	ldr	r1, [pc, #228]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	e03a      	b.n	80033b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003344:	4b36      	ldr	r3, [pc, #216]	; (8003420 <HAL_RCC_OscConfig+0x270>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fe f99b 	bl	8001684 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003352:	f7fe f997 	bl	8001684 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e1a1      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003364:	4b2d      	ldr	r3, [pc, #180]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	4b2a      	ldr	r3, [pc, #168]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4927      	ldr	r1, [pc, #156]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]
 8003384:	e015      	b.n	80033b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003386:	4b26      	ldr	r3, [pc, #152]	; (8003420 <HAL_RCC_OscConfig+0x270>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fe f97a 	bl	8001684 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003394:	f7fe f976 	bl	8001684 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e180      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a6:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d03a      	beq.n	8003434 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d019      	beq.n	80033fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c6:	4b17      	ldr	r3, [pc, #92]	; (8003424 <HAL_RCC_OscConfig+0x274>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033cc:	f7fe f95a 	bl	8001684 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d4:	f7fe f956 	bl	8001684 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e160      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_RCC_OscConfig+0x26c>)
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033f2:	2001      	movs	r0, #1
 80033f4:	f000 face 	bl	8003994 <RCC_Delay>
 80033f8:	e01c      	b.n	8003434 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_RCC_OscConfig+0x274>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003400:	f7fe f940 	bl	8001684 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003406:	e00f      	b.n	8003428 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003408:	f7fe f93c 	bl	8001684 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d908      	bls.n	8003428 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e146      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	42420000 	.word	0x42420000
 8003424:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003428:	4b92      	ldr	r3, [pc, #584]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e9      	bne.n	8003408 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a6 	beq.w	800358e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003446:	4b8b      	ldr	r3, [pc, #556]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10d      	bne.n	800346e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	4b88      	ldr	r3, [pc, #544]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4a87      	ldr	r2, [pc, #540]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345c:	61d3      	str	r3, [r2, #28]
 800345e:	4b85      	ldr	r3, [pc, #532]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346a:	2301      	movs	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346e:	4b82      	ldr	r3, [pc, #520]	; (8003678 <HAL_RCC_OscConfig+0x4c8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d118      	bne.n	80034ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800347a:	4b7f      	ldr	r3, [pc, #508]	; (8003678 <HAL_RCC_OscConfig+0x4c8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a7e      	ldr	r2, [pc, #504]	; (8003678 <HAL_RCC_OscConfig+0x4c8>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003486:	f7fe f8fd 	bl	8001684 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348e:	f7fe f8f9 	bl	8001684 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b64      	cmp	r3, #100	; 0x64
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e103      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	4b75      	ldr	r3, [pc, #468]	; (8003678 <HAL_RCC_OscConfig+0x4c8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x312>
 80034b4:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a6e      	ldr	r2, [pc, #440]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6213      	str	r3, [r2, #32]
 80034c0:	e02d      	b.n	800351e <HAL_RCC_OscConfig+0x36e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x334>
 80034ca:	4b6a      	ldr	r3, [pc, #424]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4a69      	ldr	r2, [pc, #420]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	6213      	str	r3, [r2, #32]
 80034d6:	4b67      	ldr	r3, [pc, #412]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	4a66      	ldr	r2, [pc, #408]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	f023 0304 	bic.w	r3, r3, #4
 80034e0:	6213      	str	r3, [r2, #32]
 80034e2:	e01c      	b.n	800351e <HAL_RCC_OscConfig+0x36e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b05      	cmp	r3, #5
 80034ea:	d10c      	bne.n	8003506 <HAL_RCC_OscConfig+0x356>
 80034ec:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4a60      	ldr	r2, [pc, #384]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	f043 0304 	orr.w	r3, r3, #4
 80034f6:	6213      	str	r3, [r2, #32]
 80034f8:	4b5e      	ldr	r3, [pc, #376]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4a5d      	ldr	r2, [pc, #372]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6213      	str	r3, [r2, #32]
 8003504:	e00b      	b.n	800351e <HAL_RCC_OscConfig+0x36e>
 8003506:	4b5b      	ldr	r3, [pc, #364]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4a5a      	ldr	r2, [pc, #360]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	6213      	str	r3, [r2, #32]
 8003512:	4b58      	ldr	r3, [pc, #352]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	4a57      	ldr	r2, [pc, #348]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	f023 0304 	bic.w	r3, r3, #4
 800351c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d015      	beq.n	8003552 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003526:	f7fe f8ad 	bl	8001684 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352e:	f7fe f8a9 	bl	8001684 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	; 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e0b1      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003544:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0ee      	beq.n	800352e <HAL_RCC_OscConfig+0x37e>
 8003550:	e014      	b.n	800357c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003552:	f7fe f897 	bl	8001684 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fe f893 	bl	8001684 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e09b      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003570:	4b40      	ldr	r3, [pc, #256]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ee      	bne.n	800355a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800357c:	7dfb      	ldrb	r3, [r7, #23]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d105      	bne.n	800358e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003582:	4b3c      	ldr	r3, [pc, #240]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	4a3b      	ldr	r2, [pc, #236]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800358c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8087 	beq.w	80036a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d061      	beq.n	8003668 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d146      	bne.n	800363a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ac:	4b33      	ldr	r3, [pc, #204]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b2:	f7fe f867 	bl	8001684 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fe f863 	bl	8001684 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e06d      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035cc:	4b29      	ldr	r3, [pc, #164]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f0      	bne.n	80035ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e0:	d108      	bne.n	80035f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035e2:	4b24      	ldr	r3, [pc, #144]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	4921      	ldr	r1, [pc, #132]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f4:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a19      	ldr	r1, [r3, #32]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	430b      	orrs	r3, r1
 8003606:	491b      	ldr	r1, [pc, #108]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800360e:	2201      	movs	r2, #1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fe f837 	bl	8001684 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361a:	f7fe f833 	bl	8001684 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e03d      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x46a>
 8003638:	e035      	b.n	80036a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <HAL_RCC_OscConfig+0x4cc>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe f820 	bl	8001684 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe f81c 	bl	8001684 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e026      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x498>
 8003666:	e01e      	b.n	80036a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d107      	bne.n	8003680 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e019      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
 8003674:	40021000 	.word	0x40021000
 8003678:	40007000 	.word	0x40007000
 800367c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_OscConfig+0x500>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	429a      	cmp	r2, r3
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000

080036b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0d0      	b.n	800386a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c8:	4b6a      	ldr	r3, [pc, #424]	; (8003874 <HAL_RCC_ClockConfig+0x1c0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d910      	bls.n	80036f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d6:	4b67      	ldr	r3, [pc, #412]	; (8003874 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 0207 	bic.w	r2, r3, #7
 80036de:	4965      	ldr	r1, [pc, #404]	; (8003874 <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b63      	ldr	r3, [pc, #396]	; (8003874 <HAL_RCC_ClockConfig+0x1c0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0b8      	b.n	800386a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d020      	beq.n	8003746 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003710:	4b59      	ldr	r3, [pc, #356]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a58      	ldr	r2, [pc, #352]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800371a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003728:	4b53      	ldr	r3, [pc, #332]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a52      	ldr	r2, [pc, #328]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003732:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003734:	4b50      	ldr	r3, [pc, #320]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	494d      	ldr	r1, [pc, #308]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d040      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d115      	bne.n	8003792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e07f      	b.n	800386a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d107      	bne.n	8003782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003772:	4b41      	ldr	r3, [pc, #260]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e073      	b.n	800386a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003782:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e06b      	b.n	800386a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003792:	4b39      	ldr	r3, [pc, #228]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f023 0203 	bic.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4936      	ldr	r1, [pc, #216]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a4:	f7fd ff6e 	bl	8001684 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ac:	f7fd ff6a 	bl	8001684 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e053      	b.n	800386a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 020c 	and.w	r2, r3, #12
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d1eb      	bne.n	80037ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d4:	4b27      	ldr	r3, [pc, #156]	; (8003874 <HAL_RCC_ClockConfig+0x1c0>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d210      	bcs.n	8003804 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b24      	ldr	r3, [pc, #144]	; (8003874 <HAL_RCC_ClockConfig+0x1c0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 0207 	bic.w	r2, r3, #7
 80037ea:	4922      	ldr	r1, [pc, #136]	; (8003874 <HAL_RCC_ClockConfig+0x1c0>)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b20      	ldr	r3, [pc, #128]	; (8003874 <HAL_RCC_ClockConfig+0x1c0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e032      	b.n	800386a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003810:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4916      	ldr	r1, [pc, #88]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	490e      	ldr	r1, [pc, #56]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003842:	f000 f821 	bl	8003888 <HAL_RCC_GetSysClockFreq>
 8003846:	4602      	mov	r2, r0
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	490a      	ldr	r1, [pc, #40]	; (800387c <HAL_RCC_ClockConfig+0x1c8>)
 8003854:	5ccb      	ldrb	r3, [r1, r3]
 8003856:	fa22 f303 	lsr.w	r3, r2, r3
 800385a:	4a09      	ldr	r2, [pc, #36]	; (8003880 <HAL_RCC_ClockConfig+0x1cc>)
 800385c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_RCC_ClockConfig+0x1d0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fecc 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40022000 	.word	0x40022000
 8003878:	40021000 	.word	0x40021000
 800387c:	08005564 	.word	0x08005564
 8003880:	20000020 	.word	0x20000020
 8003884:	20000024 	.word	0x20000024

08003888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	2300      	movs	r3, #0
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038a2:	4b1e      	ldr	r3, [pc, #120]	; (800391c <HAL_RCC_GetSysClockFreq+0x94>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x30>
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d003      	beq.n	80038be <HAL_RCC_GetSysClockFreq+0x36>
 80038b6:	e027      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038b8:	4b19      	ldr	r3, [pc, #100]	; (8003920 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ba:	613b      	str	r3, [r7, #16]
      break;
 80038bc:	e027      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	0c9b      	lsrs	r3, r3, #18
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	4a17      	ldr	r2, [pc, #92]	; (8003924 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038c8:	5cd3      	ldrb	r3, [r2, r3]
 80038ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d010      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038d6:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_RCC_GetSysClockFreq+0x94>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	0c5b      	lsrs	r3, r3, #17
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	4a11      	ldr	r2, [pc, #68]	; (8003928 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
 80038e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a0d      	ldr	r2, [pc, #52]	; (8003920 <HAL_RCC_GetSysClockFreq+0x98>)
 80038ea:	fb03 f202 	mul.w	r2, r3, r2
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e004      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a0c      	ldr	r2, [pc, #48]	; (800392c <HAL_RCC_GetSysClockFreq+0xa4>)
 80038fc:	fb02 f303 	mul.w	r3, r2, r3
 8003900:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	613b      	str	r3, [r7, #16]
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetSysClockFreq+0x98>)
 800390a:	613b      	str	r3, [r7, #16]
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	693b      	ldr	r3, [r7, #16]
}
 8003910:	4618      	mov	r0, r3
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40021000 	.word	0x40021000
 8003920:	007a1200 	.word	0x007a1200
 8003924:	0800557c 	.word	0x0800557c
 8003928:	0800558c 	.word	0x0800558c
 800392c:	003d0900 	.word	0x003d0900

08003930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003934:	4b02      	ldr	r3, [pc, #8]	; (8003940 <HAL_RCC_GetHCLKFreq+0x10>)
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr
 8003940:	20000020 	.word	0x20000020

08003944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003948:	f7ff fff2 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 800394c:	4602      	mov	r2, r0
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	4903      	ldr	r1, [pc, #12]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800395a:	5ccb      	ldrb	r3, [r1, r3]
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	08005574 	.word	0x08005574

0800396c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003970:	f7ff ffde 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	0adb      	lsrs	r3, r3, #11
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4903      	ldr	r1, [pc, #12]	; (8003990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000
 8003990:	08005574 	.word	0x08005574

08003994 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <RCC_Delay+0x34>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <RCC_Delay+0x38>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	0a5b      	lsrs	r3, r3, #9
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039b0:	bf00      	nop
  }
  while (Delay --);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1e5a      	subs	r2, r3, #1
 80039b6:	60fa      	str	r2, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f9      	bne.n	80039b0 <RCC_Delay+0x1c>
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	20000020 	.word	0x20000020
 80039cc:	10624dd3 	.word	0x10624dd3

080039d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d07d      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039ec:	2300      	movs	r3, #0
 80039ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f0:	4b4f      	ldr	r3, [pc, #316]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	4b4c      	ldr	r3, [pc, #304]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	4a4b      	ldr	r2, [pc, #300]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a06:	61d3      	str	r3, [r2, #28]
 8003a08:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a14:	2301      	movs	r3, #1
 8003a16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	4b46      	ldr	r3, [pc, #280]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d118      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a24:	4b43      	ldr	r3, [pc, #268]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a42      	ldr	r2, [pc, #264]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a30:	f7fd fe28 	bl	8001684 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a36:	e008      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a38:	f7fd fe24 	bl	8001684 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e06d      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4a:	4b3a      	ldr	r3, [pc, #232]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a56:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d02e      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d027      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a74:	4b2e      	ldr	r3, [pc, #184]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a7e:	4b2e      	ldr	r3, [pc, #184]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a84:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a8a:	4a29      	ldr	r2, [pc, #164]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d014      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9a:	f7fd fdf3 	bl	8001684 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fd fdef 	bl	8001684 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e036      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ee      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	4917      	ldr	r1, [pc, #92]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d105      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003adc:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003af4:	4b0e      	ldr	r3, [pc, #56]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	490b      	ldr	r1, [pc, #44]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4904      	ldr	r1, [pc, #16]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40007000 	.word	0x40007000
 8003b38:	42420440 	.word	0x42420440

08003b3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d00a      	beq.n	8003b74 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	f200 808a 	bhi.w	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d045      	beq.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d075      	beq.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b72:	e082      	b.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003b74:	4b46      	ldr	r3, [pc, #280]	; (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b7a:	4b45      	ldr	r3, [pc, #276]	; (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d07b      	beq.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	0c9b      	lsrs	r3, r3, #18
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	4a41      	ldr	r2, [pc, #260]	; (8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003b90:	5cd3      	ldrb	r3, [r2, r3]
 8003b92:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d015      	beq.n	8003bca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b9e:	4b3c      	ldr	r3, [pc, #240]	; (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	0c5b      	lsrs	r3, r3, #17
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	4a3b      	ldr	r2, [pc, #236]	; (8003c98 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003baa:	5cd3      	ldrb	r3, [r2, r3]
 8003bac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bb8:	4a38      	ldr	r2, [pc, #224]	; (8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4a34      	ldr	r2, [pc, #208]	; (8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bd4:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be0:	d102      	bne.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	61bb      	str	r3, [r7, #24]
      break;
 8003be6:	e04a      	b.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	085b      	lsrs	r3, r3, #1
 8003bf4:	61bb      	str	r3, [r7, #24]
      break;
 8003bf6:	e042      	b.n	8003c7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c08:	d108      	bne.n	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	e01f      	b.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c26:	d109      	bne.n	8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c28:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003c34:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	e00f      	b.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c46:	d11c      	bne.n	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d016      	beq.n	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003c54:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003c58:	61bb      	str	r3, [r7, #24]
      break;
 8003c5a:	e012      	b.n	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c5c:	e011      	b.n	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c5e:	f7ff fe85 	bl	800396c <HAL_RCC_GetPCLK2Freq>
 8003c62:	4602      	mov	r2, r0
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	0b9b      	lsrs	r3, r3, #14
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	3301      	adds	r3, #1
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	61bb      	str	r3, [r7, #24]
      break;
 8003c78:	e004      	b.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e002      	b.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e000      	b.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c82:	bf00      	nop
    }
  }
  return (frequency);
 8003c84:	69bb      	ldr	r3, [r7, #24]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
 8003c94:	08005590 	.word	0x08005590
 8003c98:	080055a0 	.word	0x080055a0
 8003c9c:	007a1200 	.word	0x007a1200
 8003ca0:	003d0900 	.word	0x003d0900
 8003ca4:	aaaaaaab 	.word	0xaaaaaaab

08003ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e076      	b.n	8003da8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d108      	bne.n	8003cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cca:	d009      	beq.n	8003ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	61da      	str	r2, [r3, #28]
 8003cd2:	e005      	b.n	8003ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd fb4e 	bl	800139c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d64:	ea42 0103 	orr.w	r1, r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	0c1a      	lsrs	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f002 0204 	and.w	r2, r2, #4
 8003d86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	69da      	ldr	r2, [r3, #28]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_SPI_Transmit+0x22>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e12d      	b.n	800402e <HAL_SPI_Transmit+0x27e>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dda:	f7fd fc53 	bl	8001684 <HAL_GetTick>
 8003dde:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d002      	beq.n	8003df6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003df0:	2302      	movs	r3, #2
 8003df2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003df4:	e116      	b.n	8004024 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_SPI_Transmit+0x52>
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e06:	e10d      	b.n	8004024 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	88fa      	ldrh	r2, [r7, #6]
 8003e20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	88fa      	ldrh	r2, [r7, #6]
 8003e26:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4e:	d10f      	bne.n	8003e70 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7a:	2b40      	cmp	r3, #64	; 0x40
 8003e7c:	d007      	beq.n	8003e8e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e96:	d14f      	bne.n	8003f38 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_SPI_Transmit+0xf6>
 8003ea0:	8afb      	ldrh	r3, [r7, #22]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d142      	bne.n	8003f2c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	881a      	ldrh	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	1c9a      	adds	r2, r3, #2
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eca:	e02f      	b.n	8003f2c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d112      	bne.n	8003f00 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	881a      	ldrh	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	1c9a      	adds	r2, r3, #2
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003efe:	e015      	b.n	8003f2c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f00:	f7fd fbc0 	bl	8001684 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d803      	bhi.n	8003f18 <HAL_SPI_Transmit+0x168>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d102      	bne.n	8003f1e <HAL_SPI_Transmit+0x16e>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f2a:	e07b      	b.n	8004024 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1ca      	bne.n	8003ecc <HAL_SPI_Transmit+0x11c>
 8003f36:	e050      	b.n	8003fda <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_SPI_Transmit+0x196>
 8003f40:	8afb      	ldrh	r3, [r7, #22]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d144      	bne.n	8003fd0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	7812      	ldrb	r2, [r2, #0]
 8003f52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f6c:	e030      	b.n	8003fd0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d113      	bne.n	8003fa4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	7812      	ldrb	r2, [r2, #0]
 8003f88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fa2:	e015      	b.n	8003fd0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fa4:	f7fd fb6e 	bl	8001684 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d803      	bhi.n	8003fbc <HAL_SPI_Transmit+0x20c>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fba:	d102      	bne.n	8003fc2 <HAL_SPI_Transmit+0x212>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003fce:	e029      	b.n	8004024 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1c9      	bne.n	8003f6e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	6839      	ldr	r1, [r7, #0]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f8be 	bl	8004160 <SPI_EndRxTxTransaction>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10a      	bne.n	800400e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e003      	b.n	8004024 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800402c:	7ffb      	ldrb	r3, [r7, #31]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3720      	adds	r7, #32
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004044:	b2db      	uxtb	r3, r3
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004060:	f7fd fb10 	bl	8001684 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	4413      	add	r3, r2
 800406e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004070:	f7fd fb08 	bl	8001684 <HAL_GetTick>
 8004074:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004076:	4b39      	ldr	r3, [pc, #228]	; (800415c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	015b      	lsls	r3, r3, #5
 800407c:	0d1b      	lsrs	r3, r3, #20
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004086:	e054      	b.n	8004132 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d050      	beq.n	8004132 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004090:	f7fd faf8 	bl	8001684 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	429a      	cmp	r2, r3
 800409e:	d902      	bls.n	80040a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d13d      	bne.n	8004122 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040be:	d111      	bne.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c8:	d004      	beq.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d2:	d107      	bne.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ec:	d10f      	bne.n	800410e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800410c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e017      	b.n	8004152 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3b01      	subs	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	429a      	cmp	r2, r3
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	429a      	cmp	r2, r3
 800414e:	d19b      	bne.n	8004088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000020 	.word	0x20000020

08004160 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af02      	add	r7, sp, #8
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2200      	movs	r2, #0
 8004174:	2180      	movs	r1, #128	; 0x80
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff ff6a 	bl	8004050 <SPI_WaitFlagStateUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	f043 0220 	orr.w	r2, r3, #32
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e000      	b.n	8004194 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e041      	b.n	8004232 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd f928 	bl	8001418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f000 fa74 	bl	80046c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d001      	beq.n	8004254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e03a      	b.n	80042ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a18      	ldr	r2, [pc, #96]	; (80042d4 <HAL_TIM_Base_Start_IT+0x98>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00e      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x58>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427e:	d009      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x58>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_TIM_Base_Start_IT+0x58>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a13      	ldr	r2, [pc, #76]	; (80042dc <HAL_TIM_Base_Start_IT+0xa0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d111      	bne.n	80042b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d010      	beq.n	80042c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	e007      	b.n	80042c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800

080042e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d122      	bne.n	800433c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b02      	cmp	r3, #2
 8004302:	d11b      	bne.n	800433c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0202 	mvn.w	r2, #2
 800430c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f9b4 	bl	8004690 <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f9a7 	bl	800467e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f9b6 	bl	80046a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b04      	cmp	r3, #4
 8004348:	d122      	bne.n	8004390 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b04      	cmp	r3, #4
 8004356:	d11b      	bne.n	8004390 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0204 	mvn.w	r2, #4
 8004360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f98a 	bl	8004690 <HAL_TIM_IC_CaptureCallback>
 800437c:	e005      	b.n	800438a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f97d 	bl	800467e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f98c 	bl	80046a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b08      	cmp	r3, #8
 800439c:	d122      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d11b      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0208 	mvn.w	r2, #8
 80043b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2204      	movs	r2, #4
 80043ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f960 	bl	8004690 <HAL_TIM_IC_CaptureCallback>
 80043d0:	e005      	b.n	80043de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f953 	bl	800467e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f962 	bl	80046a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	2b10      	cmp	r3, #16
 80043f0:	d122      	bne.n	8004438 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b10      	cmp	r3, #16
 80043fe:	d11b      	bne.n	8004438 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0210 	mvn.w	r2, #16
 8004408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2208      	movs	r2, #8
 800440e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f936 	bl	8004690 <HAL_TIM_IC_CaptureCallback>
 8004424:	e005      	b.n	8004432 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f929 	bl	800467e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f938 	bl	80046a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b01      	cmp	r3, #1
 8004444:	d10e      	bne.n	8004464 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b01      	cmp	r3, #1
 8004452:	d107      	bne.n	8004464 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0201 	mvn.w	r2, #1
 800445c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc fc08 	bl	8000c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446e:	2b80      	cmp	r3, #128	; 0x80
 8004470:	d10e      	bne.n	8004490 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447c:	2b80      	cmp	r3, #128	; 0x80
 800447e:	d107      	bne.n	8004490 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa7b 	bl	8004986 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d10e      	bne.n	80044bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d107      	bne.n	80044bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f8fc 	bl	80046b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d10e      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d107      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0220 	mvn.w	r2, #32
 80044e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fa46 	bl	8004974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_TIM_ConfigClockSource+0x1c>
 8004508:	2302      	movs	r3, #2
 800450a:	e0b4      	b.n	8004676 <HAL_TIM_ConfigClockSource+0x186>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800452a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004544:	d03e      	beq.n	80045c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454a:	f200 8087 	bhi.w	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800454e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004552:	f000 8086 	beq.w	8004662 <HAL_TIM_ConfigClockSource+0x172>
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455a:	d87f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800455c:	2b70      	cmp	r3, #112	; 0x70
 800455e:	d01a      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0xa6>
 8004560:	2b70      	cmp	r3, #112	; 0x70
 8004562:	d87b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004564:	2b60      	cmp	r3, #96	; 0x60
 8004566:	d050      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x11a>
 8004568:	2b60      	cmp	r3, #96	; 0x60
 800456a:	d877      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b50      	cmp	r3, #80	; 0x50
 800456e:	d03c      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0xfa>
 8004570:	2b50      	cmp	r3, #80	; 0x50
 8004572:	d873      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d058      	beq.n	800462a <HAL_TIM_ConfigClockSource+0x13a>
 8004578:	2b40      	cmp	r3, #64	; 0x40
 800457a:	d86f      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800457c:	2b30      	cmp	r3, #48	; 0x30
 800457e:	d064      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004580:	2b30      	cmp	r3, #48	; 0x30
 8004582:	d86b      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b20      	cmp	r3, #32
 8004586:	d060      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004588:	2b20      	cmp	r3, #32
 800458a:	d867      	bhi.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d05c      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004590:	2b10      	cmp	r3, #16
 8004592:	d05a      	beq.n	800464a <HAL_TIM_ConfigClockSource+0x15a>
 8004594:	e062      	b.n	800465c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	f000 f968 	bl	800487a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	609a      	str	r2, [r3, #8]
      break;
 80045c2:	e04f      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045d4:	f000 f951 	bl	800487a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045e6:	609a      	str	r2, [r3, #8]
      break;
 80045e8:	e03c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f6:	461a      	mov	r2, r3
 80045f8:	f000 f8c8 	bl	800478c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2150      	movs	r1, #80	; 0x50
 8004602:	4618      	mov	r0, r3
 8004604:	f000 f91f 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 8004608:	e02c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004616:	461a      	mov	r2, r3
 8004618:	f000 f8e6 	bl	80047e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2160      	movs	r1, #96	; 0x60
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f90f 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 8004628:	e01c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	461a      	mov	r2, r3
 8004638:	f000 f8a8 	bl	800478c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2140      	movs	r1, #64	; 0x40
 8004642:	4618      	mov	r0, r3
 8004644:	f000 f8ff 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 8004648:	e00c      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f000 f8f6 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 800465a:	e003      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	e000      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr

080046a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr
	...

080046c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a29      	ldr	r2, [pc, #164]	; (8004780 <TIM_Base_SetConfig+0xb8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00b      	beq.n	80046f8 <TIM_Base_SetConfig+0x30>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e6:	d007      	beq.n	80046f8 <TIM_Base_SetConfig+0x30>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a26      	ldr	r2, [pc, #152]	; (8004784 <TIM_Base_SetConfig+0xbc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_Base_SetConfig+0x30>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a25      	ldr	r2, [pc, #148]	; (8004788 <TIM_Base_SetConfig+0xc0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d108      	bne.n	800470a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <TIM_Base_SetConfig+0xb8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00b      	beq.n	800472a <TIM_Base_SetConfig+0x62>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004718:	d007      	beq.n	800472a <TIM_Base_SetConfig+0x62>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a19      	ldr	r2, [pc, #100]	; (8004784 <TIM_Base_SetConfig+0xbc>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d003      	beq.n	800472a <TIM_Base_SetConfig+0x62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a18      	ldr	r2, [pc, #96]	; (8004788 <TIM_Base_SetConfig+0xc0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d108      	bne.n	800473c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a07      	ldr	r2, [pc, #28]	; (8004780 <TIM_Base_SetConfig+0xb8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d103      	bne.n	8004770 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	615a      	str	r2, [r3, #20]
}
 8004776:	bf00      	nop
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800

0800478c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0201 	bic.w	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f023 030a 	bic.w	r3, r3, #10
 80047c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	bf00      	nop
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f023 0210 	bic.w	r2, r3, #16
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	031b      	lsls	r3, r3, #12
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004824:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	621a      	str	r2, [r3, #32]
}
 800483c:	bf00      	nop
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	f043 0307 	orr.w	r3, r3, #7
 8004868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	609a      	str	r2, [r3, #8]
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr

0800487a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800487a:	b480      	push	{r7}
 800487c:	b087      	sub	sp, #28
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004894:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	021a      	lsls	r2, r3, #8
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	431a      	orrs	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	609a      	str	r2, [r3, #8]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e046      	b.n	800495e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a16      	ldr	r2, [pc, #88]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00e      	beq.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491c:	d009      	beq.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a12      	ldr	r2, [pc, #72]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d004      	beq.n	8004932 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a10      	ldr	r2, [pc, #64]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d10c      	bne.n	800494c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4313      	orrs	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	40012c00 	.word	0x40012c00
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800

08004974 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004998:	b084      	sub	sp, #16
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	f107 0014 	add.w	r0, r7, #20
 80049a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	b004      	add	sp, #16
 80049b6:	4770      	bx	lr

080049b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80049c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	4013      	ands	r3, r2
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr

08004a04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a04:	b084      	sub	sp, #16
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	f107 0014 	add.w	r0, r7, #20
 8004a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	b004      	add	sp, #16
 8004a42:	4770      	bx	lr

08004a44 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr

08004a58 <sniprintf>:
 8004a58:	b40c      	push	{r2, r3}
 8004a5a:	b530      	push	{r4, r5, lr}
 8004a5c:	4b17      	ldr	r3, [pc, #92]	; (8004abc <sniprintf+0x64>)
 8004a5e:	1e0c      	subs	r4, r1, #0
 8004a60:	681d      	ldr	r5, [r3, #0]
 8004a62:	b09d      	sub	sp, #116	; 0x74
 8004a64:	da08      	bge.n	8004a78 <sniprintf+0x20>
 8004a66:	238b      	movs	r3, #139	; 0x8b
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	602b      	str	r3, [r5, #0]
 8004a6e:	b01d      	add	sp, #116	; 0x74
 8004a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a74:	b002      	add	sp, #8
 8004a76:	4770      	bx	lr
 8004a78:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004a7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004a80:	bf0c      	ite	eq
 8004a82:	4623      	moveq	r3, r4
 8004a84:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004a88:	9304      	str	r3, [sp, #16]
 8004a8a:	9307      	str	r3, [sp, #28]
 8004a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a90:	9002      	str	r0, [sp, #8]
 8004a92:	9006      	str	r0, [sp, #24]
 8004a94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a98:	4628      	mov	r0, r5
 8004a9a:	ab21      	add	r3, sp, #132	; 0x84
 8004a9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a9e:	a902      	add	r1, sp, #8
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	f000 f98f 	bl	8004dc4 <_svfiprintf_r>
 8004aa6:	1c43      	adds	r3, r0, #1
 8004aa8:	bfbc      	itt	lt
 8004aaa:	238b      	movlt	r3, #139	; 0x8b
 8004aac:	602b      	strlt	r3, [r5, #0]
 8004aae:	2c00      	cmp	r4, #0
 8004ab0:	d0dd      	beq.n	8004a6e <sniprintf+0x16>
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	9b02      	ldr	r3, [sp, #8]
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	e7d9      	b.n	8004a6e <sniprintf+0x16>
 8004aba:	bf00      	nop
 8004abc:	20000078 	.word	0x20000078

08004ac0 <memset>:
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4402      	add	r2, r0
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d100      	bne.n	8004aca <memset+0xa>
 8004ac8:	4770      	bx	lr
 8004aca:	f803 1b01 	strb.w	r1, [r3], #1
 8004ace:	e7f9      	b.n	8004ac4 <memset+0x4>

08004ad0 <__errno>:
 8004ad0:	4b01      	ldr	r3, [pc, #4]	; (8004ad8 <__errno+0x8>)
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000078 	.word	0x20000078

08004adc <__libc_init_array>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	2600      	movs	r6, #0
 8004ae0:	4d0c      	ldr	r5, [pc, #48]	; (8004b14 <__libc_init_array+0x38>)
 8004ae2:	4c0d      	ldr	r4, [pc, #52]	; (8004b18 <__libc_init_array+0x3c>)
 8004ae4:	1b64      	subs	r4, r4, r5
 8004ae6:	10a4      	asrs	r4, r4, #2
 8004ae8:	42a6      	cmp	r6, r4
 8004aea:	d109      	bne.n	8004b00 <__libc_init_array+0x24>
 8004aec:	f000 fc7a 	bl	80053e4 <_init>
 8004af0:	2600      	movs	r6, #0
 8004af2:	4d0a      	ldr	r5, [pc, #40]	; (8004b1c <__libc_init_array+0x40>)
 8004af4:	4c0a      	ldr	r4, [pc, #40]	; (8004b20 <__libc_init_array+0x44>)
 8004af6:	1b64      	subs	r4, r4, r5
 8004af8:	10a4      	asrs	r4, r4, #2
 8004afa:	42a6      	cmp	r6, r4
 8004afc:	d105      	bne.n	8004b0a <__libc_init_array+0x2e>
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b04:	4798      	blx	r3
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7ee      	b.n	8004ae8 <__libc_init_array+0xc>
 8004b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0e:	4798      	blx	r3
 8004b10:	3601      	adds	r6, #1
 8004b12:	e7f2      	b.n	8004afa <__libc_init_array+0x1e>
 8004b14:	080055d8 	.word	0x080055d8
 8004b18:	080055d8 	.word	0x080055d8
 8004b1c:	080055d8 	.word	0x080055d8
 8004b20:	080055dc 	.word	0x080055dc

08004b24 <__retarget_lock_acquire_recursive>:
 8004b24:	4770      	bx	lr

08004b26 <__retarget_lock_release_recursive>:
 8004b26:	4770      	bx	lr

08004b28 <_free_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	4605      	mov	r5, r0
 8004b2c:	2900      	cmp	r1, #0
 8004b2e:	d040      	beq.n	8004bb2 <_free_r+0x8a>
 8004b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b34:	1f0c      	subs	r4, r1, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bfb8      	it	lt
 8004b3a:	18e4      	addlt	r4, r4, r3
 8004b3c:	f000 f8dc 	bl	8004cf8 <__malloc_lock>
 8004b40:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <_free_r+0x8c>)
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	b933      	cbnz	r3, 8004b54 <_free_r+0x2c>
 8004b46:	6063      	str	r3, [r4, #4]
 8004b48:	6014      	str	r4, [r2, #0]
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b50:	f000 b8d8 	b.w	8004d04 <__malloc_unlock>
 8004b54:	42a3      	cmp	r3, r4
 8004b56:	d908      	bls.n	8004b6a <_free_r+0x42>
 8004b58:	6820      	ldr	r0, [r4, #0]
 8004b5a:	1821      	adds	r1, r4, r0
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	bf01      	itttt	eq
 8004b60:	6819      	ldreq	r1, [r3, #0]
 8004b62:	685b      	ldreq	r3, [r3, #4]
 8004b64:	1809      	addeq	r1, r1, r0
 8004b66:	6021      	streq	r1, [r4, #0]
 8004b68:	e7ed      	b.n	8004b46 <_free_r+0x1e>
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	b10b      	cbz	r3, 8004b74 <_free_r+0x4c>
 8004b70:	42a3      	cmp	r3, r4
 8004b72:	d9fa      	bls.n	8004b6a <_free_r+0x42>
 8004b74:	6811      	ldr	r1, [r2, #0]
 8004b76:	1850      	adds	r0, r2, r1
 8004b78:	42a0      	cmp	r0, r4
 8004b7a:	d10b      	bne.n	8004b94 <_free_r+0x6c>
 8004b7c:	6820      	ldr	r0, [r4, #0]
 8004b7e:	4401      	add	r1, r0
 8004b80:	1850      	adds	r0, r2, r1
 8004b82:	4283      	cmp	r3, r0
 8004b84:	6011      	str	r1, [r2, #0]
 8004b86:	d1e0      	bne.n	8004b4a <_free_r+0x22>
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4408      	add	r0, r1
 8004b8e:	6010      	str	r0, [r2, #0]
 8004b90:	6053      	str	r3, [r2, #4]
 8004b92:	e7da      	b.n	8004b4a <_free_r+0x22>
 8004b94:	d902      	bls.n	8004b9c <_free_r+0x74>
 8004b96:	230c      	movs	r3, #12
 8004b98:	602b      	str	r3, [r5, #0]
 8004b9a:	e7d6      	b.n	8004b4a <_free_r+0x22>
 8004b9c:	6820      	ldr	r0, [r4, #0]
 8004b9e:	1821      	adds	r1, r4, r0
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	bf01      	itttt	eq
 8004ba4:	6819      	ldreq	r1, [r3, #0]
 8004ba6:	685b      	ldreq	r3, [r3, #4]
 8004ba8:	1809      	addeq	r1, r1, r0
 8004baa:	6021      	streq	r1, [r4, #0]
 8004bac:	6063      	str	r3, [r4, #4]
 8004bae:	6054      	str	r4, [r2, #4]
 8004bb0:	e7cb      	b.n	8004b4a <_free_r+0x22>
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	20000608 	.word	0x20000608

08004bb8 <sbrk_aligned>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	4e0e      	ldr	r6, [pc, #56]	; (8004bf4 <sbrk_aligned+0x3c>)
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	6831      	ldr	r1, [r6, #0]
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	b911      	cbnz	r1, 8004bca <sbrk_aligned+0x12>
 8004bc4:	f000 fbaa 	bl	800531c <_sbrk_r>
 8004bc8:	6030      	str	r0, [r6, #0]
 8004bca:	4621      	mov	r1, r4
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 fba5 	bl	800531c <_sbrk_r>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	d00a      	beq.n	8004bec <sbrk_aligned+0x34>
 8004bd6:	1cc4      	adds	r4, r0, #3
 8004bd8:	f024 0403 	bic.w	r4, r4, #3
 8004bdc:	42a0      	cmp	r0, r4
 8004bde:	d007      	beq.n	8004bf0 <sbrk_aligned+0x38>
 8004be0:	1a21      	subs	r1, r4, r0
 8004be2:	4628      	mov	r0, r5
 8004be4:	f000 fb9a 	bl	800531c <_sbrk_r>
 8004be8:	3001      	adds	r0, #1
 8004bea:	d101      	bne.n	8004bf0 <sbrk_aligned+0x38>
 8004bec:	f04f 34ff 	mov.w	r4, #4294967295
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	2000060c 	.word	0x2000060c

08004bf8 <_malloc_r>:
 8004bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bfc:	1ccd      	adds	r5, r1, #3
 8004bfe:	f025 0503 	bic.w	r5, r5, #3
 8004c02:	3508      	adds	r5, #8
 8004c04:	2d0c      	cmp	r5, #12
 8004c06:	bf38      	it	cc
 8004c08:	250c      	movcc	r5, #12
 8004c0a:	2d00      	cmp	r5, #0
 8004c0c:	4607      	mov	r7, r0
 8004c0e:	db01      	blt.n	8004c14 <_malloc_r+0x1c>
 8004c10:	42a9      	cmp	r1, r5
 8004c12:	d905      	bls.n	8004c20 <_malloc_r+0x28>
 8004c14:	230c      	movs	r3, #12
 8004c16:	2600      	movs	r6, #0
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004cf4 <_malloc_r+0xfc>
 8004c24:	f000 f868 	bl	8004cf8 <__malloc_lock>
 8004c28:	f8d8 3000 	ldr.w	r3, [r8]
 8004c2c:	461c      	mov	r4, r3
 8004c2e:	bb5c      	cbnz	r4, 8004c88 <_malloc_r+0x90>
 8004c30:	4629      	mov	r1, r5
 8004c32:	4638      	mov	r0, r7
 8004c34:	f7ff ffc0 	bl	8004bb8 <sbrk_aligned>
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	d155      	bne.n	8004cea <_malloc_r+0xf2>
 8004c3e:	f8d8 4000 	ldr.w	r4, [r8]
 8004c42:	4626      	mov	r6, r4
 8004c44:	2e00      	cmp	r6, #0
 8004c46:	d145      	bne.n	8004cd4 <_malloc_r+0xdc>
 8004c48:	2c00      	cmp	r4, #0
 8004c4a:	d048      	beq.n	8004cde <_malloc_r+0xe6>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4638      	mov	r0, r7
 8004c52:	eb04 0903 	add.w	r9, r4, r3
 8004c56:	f000 fb61 	bl	800531c <_sbrk_r>
 8004c5a:	4581      	cmp	r9, r0
 8004c5c:	d13f      	bne.n	8004cde <_malloc_r+0xe6>
 8004c5e:	6821      	ldr	r1, [r4, #0]
 8004c60:	4638      	mov	r0, r7
 8004c62:	1a6d      	subs	r5, r5, r1
 8004c64:	4629      	mov	r1, r5
 8004c66:	f7ff ffa7 	bl	8004bb8 <sbrk_aligned>
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d037      	beq.n	8004cde <_malloc_r+0xe6>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	442b      	add	r3, r5
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	f8d8 3000 	ldr.w	r3, [r8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d038      	beq.n	8004cee <_malloc_r+0xf6>
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	42a2      	cmp	r2, r4
 8004c80:	d12b      	bne.n	8004cda <_malloc_r+0xe2>
 8004c82:	2200      	movs	r2, #0
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	e00f      	b.n	8004ca8 <_malloc_r+0xb0>
 8004c88:	6822      	ldr	r2, [r4, #0]
 8004c8a:	1b52      	subs	r2, r2, r5
 8004c8c:	d41f      	bmi.n	8004cce <_malloc_r+0xd6>
 8004c8e:	2a0b      	cmp	r2, #11
 8004c90:	d917      	bls.n	8004cc2 <_malloc_r+0xca>
 8004c92:	1961      	adds	r1, r4, r5
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	6025      	str	r5, [r4, #0]
 8004c98:	bf18      	it	ne
 8004c9a:	6059      	strne	r1, [r3, #4]
 8004c9c:	6863      	ldr	r3, [r4, #4]
 8004c9e:	bf08      	it	eq
 8004ca0:	f8c8 1000 	streq.w	r1, [r8]
 8004ca4:	5162      	str	r2, [r4, r5]
 8004ca6:	604b      	str	r3, [r1, #4]
 8004ca8:	4638      	mov	r0, r7
 8004caa:	f104 060b 	add.w	r6, r4, #11
 8004cae:	f000 f829 	bl	8004d04 <__malloc_unlock>
 8004cb2:	f026 0607 	bic.w	r6, r6, #7
 8004cb6:	1d23      	adds	r3, r4, #4
 8004cb8:	1af2      	subs	r2, r6, r3
 8004cba:	d0ae      	beq.n	8004c1a <_malloc_r+0x22>
 8004cbc:	1b9b      	subs	r3, r3, r6
 8004cbe:	50a3      	str	r3, [r4, r2]
 8004cc0:	e7ab      	b.n	8004c1a <_malloc_r+0x22>
 8004cc2:	42a3      	cmp	r3, r4
 8004cc4:	6862      	ldr	r2, [r4, #4]
 8004cc6:	d1dd      	bne.n	8004c84 <_malloc_r+0x8c>
 8004cc8:	f8c8 2000 	str.w	r2, [r8]
 8004ccc:	e7ec      	b.n	8004ca8 <_malloc_r+0xb0>
 8004cce:	4623      	mov	r3, r4
 8004cd0:	6864      	ldr	r4, [r4, #4]
 8004cd2:	e7ac      	b.n	8004c2e <_malloc_r+0x36>
 8004cd4:	4634      	mov	r4, r6
 8004cd6:	6876      	ldr	r6, [r6, #4]
 8004cd8:	e7b4      	b.n	8004c44 <_malloc_r+0x4c>
 8004cda:	4613      	mov	r3, r2
 8004cdc:	e7cc      	b.n	8004c78 <_malloc_r+0x80>
 8004cde:	230c      	movs	r3, #12
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	f000 f80e 	bl	8004d04 <__malloc_unlock>
 8004ce8:	e797      	b.n	8004c1a <_malloc_r+0x22>
 8004cea:	6025      	str	r5, [r4, #0]
 8004cec:	e7dc      	b.n	8004ca8 <_malloc_r+0xb0>
 8004cee:	605b      	str	r3, [r3, #4]
 8004cf0:	deff      	udf	#255	; 0xff
 8004cf2:	bf00      	nop
 8004cf4:	20000608 	.word	0x20000608

08004cf8 <__malloc_lock>:
 8004cf8:	4801      	ldr	r0, [pc, #4]	; (8004d00 <__malloc_lock+0x8>)
 8004cfa:	f7ff bf13 	b.w	8004b24 <__retarget_lock_acquire_recursive>
 8004cfe:	bf00      	nop
 8004d00:	20000604 	.word	0x20000604

08004d04 <__malloc_unlock>:
 8004d04:	4801      	ldr	r0, [pc, #4]	; (8004d0c <__malloc_unlock+0x8>)
 8004d06:	f7ff bf0e 	b.w	8004b26 <__retarget_lock_release_recursive>
 8004d0a:	bf00      	nop
 8004d0c:	20000604 	.word	0x20000604

08004d10 <__ssputs_r>:
 8004d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d14:	461f      	mov	r7, r3
 8004d16:	688e      	ldr	r6, [r1, #8]
 8004d18:	4682      	mov	sl, r0
 8004d1a:	42be      	cmp	r6, r7
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	4690      	mov	r8, r2
 8004d20:	680b      	ldr	r3, [r1, #0]
 8004d22:	d82c      	bhi.n	8004d7e <__ssputs_r+0x6e>
 8004d24:	898a      	ldrh	r2, [r1, #12]
 8004d26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d2a:	d026      	beq.n	8004d7a <__ssputs_r+0x6a>
 8004d2c:	6965      	ldr	r5, [r4, #20]
 8004d2e:	6909      	ldr	r1, [r1, #16]
 8004d30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d34:	eba3 0901 	sub.w	r9, r3, r1
 8004d38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d3c:	1c7b      	adds	r3, r7, #1
 8004d3e:	444b      	add	r3, r9
 8004d40:	106d      	asrs	r5, r5, #1
 8004d42:	429d      	cmp	r5, r3
 8004d44:	bf38      	it	cc
 8004d46:	461d      	movcc	r5, r3
 8004d48:	0553      	lsls	r3, r2, #21
 8004d4a:	d527      	bpl.n	8004d9c <__ssputs_r+0x8c>
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	f7ff ff53 	bl	8004bf8 <_malloc_r>
 8004d52:	4606      	mov	r6, r0
 8004d54:	b360      	cbz	r0, 8004db0 <__ssputs_r+0xa0>
 8004d56:	464a      	mov	r2, r9
 8004d58:	6921      	ldr	r1, [r4, #16]
 8004d5a:	f000 fafd 	bl	8005358 <memcpy>
 8004d5e:	89a3      	ldrh	r3, [r4, #12]
 8004d60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	6126      	str	r6, [r4, #16]
 8004d6c:	444e      	add	r6, r9
 8004d6e:	6026      	str	r6, [r4, #0]
 8004d70:	463e      	mov	r6, r7
 8004d72:	6165      	str	r5, [r4, #20]
 8004d74:	eba5 0509 	sub.w	r5, r5, r9
 8004d78:	60a5      	str	r5, [r4, #8]
 8004d7a:	42be      	cmp	r6, r7
 8004d7c:	d900      	bls.n	8004d80 <__ssputs_r+0x70>
 8004d7e:	463e      	mov	r6, r7
 8004d80:	4632      	mov	r2, r6
 8004d82:	4641      	mov	r1, r8
 8004d84:	6820      	ldr	r0, [r4, #0]
 8004d86:	f000 faaf 	bl	80052e8 <memmove>
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	68a3      	ldr	r3, [r4, #8]
 8004d8e:	1b9b      	subs	r3, r3, r6
 8004d90:	60a3      	str	r3, [r4, #8]
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	4433      	add	r3, r6
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d9c:	462a      	mov	r2, r5
 8004d9e:	f000 fae9 	bl	8005374 <_realloc_r>
 8004da2:	4606      	mov	r6, r0
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d1e0      	bne.n	8004d6a <__ssputs_r+0x5a>
 8004da8:	4650      	mov	r0, sl
 8004daa:	6921      	ldr	r1, [r4, #16]
 8004dac:	f7ff febc 	bl	8004b28 <_free_r>
 8004db0:	230c      	movs	r3, #12
 8004db2:	f8ca 3000 	str.w	r3, [sl]
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc0:	81a3      	strh	r3, [r4, #12]
 8004dc2:	e7e9      	b.n	8004d98 <__ssputs_r+0x88>

08004dc4 <_svfiprintf_r>:
 8004dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc8:	4698      	mov	r8, r3
 8004dca:	898b      	ldrh	r3, [r1, #12]
 8004dcc:	4607      	mov	r7, r0
 8004dce:	061b      	lsls	r3, r3, #24
 8004dd0:	460d      	mov	r5, r1
 8004dd2:	4614      	mov	r4, r2
 8004dd4:	b09d      	sub	sp, #116	; 0x74
 8004dd6:	d50e      	bpl.n	8004df6 <_svfiprintf_r+0x32>
 8004dd8:	690b      	ldr	r3, [r1, #16]
 8004dda:	b963      	cbnz	r3, 8004df6 <_svfiprintf_r+0x32>
 8004ddc:	2140      	movs	r1, #64	; 0x40
 8004dde:	f7ff ff0b 	bl	8004bf8 <_malloc_r>
 8004de2:	6028      	str	r0, [r5, #0]
 8004de4:	6128      	str	r0, [r5, #16]
 8004de6:	b920      	cbnz	r0, 8004df2 <_svfiprintf_r+0x2e>
 8004de8:	230c      	movs	r3, #12
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295
 8004df0:	e0d0      	b.n	8004f94 <_svfiprintf_r+0x1d0>
 8004df2:	2340      	movs	r3, #64	; 0x40
 8004df4:	616b      	str	r3, [r5, #20]
 8004df6:	2300      	movs	r3, #0
 8004df8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfa:	2320      	movs	r3, #32
 8004dfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e00:	2330      	movs	r3, #48	; 0x30
 8004e02:	f04f 0901 	mov.w	r9, #1
 8004e06:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e0a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004fac <_svfiprintf_r+0x1e8>
 8004e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e12:	4623      	mov	r3, r4
 8004e14:	469a      	mov	sl, r3
 8004e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e1a:	b10a      	cbz	r2, 8004e20 <_svfiprintf_r+0x5c>
 8004e1c:	2a25      	cmp	r2, #37	; 0x25
 8004e1e:	d1f9      	bne.n	8004e14 <_svfiprintf_r+0x50>
 8004e20:	ebba 0b04 	subs.w	fp, sl, r4
 8004e24:	d00b      	beq.n	8004e3e <_svfiprintf_r+0x7a>
 8004e26:	465b      	mov	r3, fp
 8004e28:	4622      	mov	r2, r4
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7ff ff6f 	bl	8004d10 <__ssputs_r>
 8004e32:	3001      	adds	r0, #1
 8004e34:	f000 80a9 	beq.w	8004f8a <_svfiprintf_r+0x1c6>
 8004e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e3a:	445a      	add	r2, fp
 8004e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 80a1 	beq.w	8004f8a <_svfiprintf_r+0x1c6>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e52:	f10a 0a01 	add.w	sl, sl, #1
 8004e56:	9304      	str	r3, [sp, #16]
 8004e58:	9307      	str	r3, [sp, #28]
 8004e5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e5e:	931a      	str	r3, [sp, #104]	; 0x68
 8004e60:	4654      	mov	r4, sl
 8004e62:	2205      	movs	r2, #5
 8004e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e68:	4850      	ldr	r0, [pc, #320]	; (8004fac <_svfiprintf_r+0x1e8>)
 8004e6a:	f000 fa67 	bl	800533c <memchr>
 8004e6e:	9a04      	ldr	r2, [sp, #16]
 8004e70:	b9d8      	cbnz	r0, 8004eaa <_svfiprintf_r+0xe6>
 8004e72:	06d0      	lsls	r0, r2, #27
 8004e74:	bf44      	itt	mi
 8004e76:	2320      	movmi	r3, #32
 8004e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e7c:	0711      	lsls	r1, r2, #28
 8004e7e:	bf44      	itt	mi
 8004e80:	232b      	movmi	r3, #43	; 0x2b
 8004e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e86:	f89a 3000 	ldrb.w	r3, [sl]
 8004e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8c:	d015      	beq.n	8004eba <_svfiprintf_r+0xf6>
 8004e8e:	4654      	mov	r4, sl
 8004e90:	2000      	movs	r0, #0
 8004e92:	f04f 0c0a 	mov.w	ip, #10
 8004e96:	9a07      	ldr	r2, [sp, #28]
 8004e98:	4621      	mov	r1, r4
 8004e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e9e:	3b30      	subs	r3, #48	; 0x30
 8004ea0:	2b09      	cmp	r3, #9
 8004ea2:	d94d      	bls.n	8004f40 <_svfiprintf_r+0x17c>
 8004ea4:	b1b0      	cbz	r0, 8004ed4 <_svfiprintf_r+0x110>
 8004ea6:	9207      	str	r2, [sp, #28]
 8004ea8:	e014      	b.n	8004ed4 <_svfiprintf_r+0x110>
 8004eaa:	eba0 0308 	sub.w	r3, r0, r8
 8004eae:	fa09 f303 	lsl.w	r3, r9, r3
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	46a2      	mov	sl, r4
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	e7d2      	b.n	8004e60 <_svfiprintf_r+0x9c>
 8004eba:	9b03      	ldr	r3, [sp, #12]
 8004ebc:	1d19      	adds	r1, r3, #4
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	9103      	str	r1, [sp, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bfbb      	ittet	lt
 8004ec6:	425b      	neglt	r3, r3
 8004ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8004ecc:	9307      	strge	r3, [sp, #28]
 8004ece:	9307      	strlt	r3, [sp, #28]
 8004ed0:	bfb8      	it	lt
 8004ed2:	9204      	strlt	r2, [sp, #16]
 8004ed4:	7823      	ldrb	r3, [r4, #0]
 8004ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ed8:	d10c      	bne.n	8004ef4 <_svfiprintf_r+0x130>
 8004eda:	7863      	ldrb	r3, [r4, #1]
 8004edc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ede:	d134      	bne.n	8004f4a <_svfiprintf_r+0x186>
 8004ee0:	9b03      	ldr	r3, [sp, #12]
 8004ee2:	3402      	adds	r4, #2
 8004ee4:	1d1a      	adds	r2, r3, #4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	9203      	str	r2, [sp, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bfb8      	it	lt
 8004eee:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ef2:	9305      	str	r3, [sp, #20]
 8004ef4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004fb0 <_svfiprintf_r+0x1ec>
 8004ef8:	2203      	movs	r2, #3
 8004efa:	4650      	mov	r0, sl
 8004efc:	7821      	ldrb	r1, [r4, #0]
 8004efe:	f000 fa1d 	bl	800533c <memchr>
 8004f02:	b138      	cbz	r0, 8004f14 <_svfiprintf_r+0x150>
 8004f04:	2240      	movs	r2, #64	; 0x40
 8004f06:	9b04      	ldr	r3, [sp, #16]
 8004f08:	eba0 000a 	sub.w	r0, r0, sl
 8004f0c:	4082      	lsls	r2, r0
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	3401      	adds	r4, #1
 8004f12:	9304      	str	r3, [sp, #16]
 8004f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f18:	2206      	movs	r2, #6
 8004f1a:	4826      	ldr	r0, [pc, #152]	; (8004fb4 <_svfiprintf_r+0x1f0>)
 8004f1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f20:	f000 fa0c 	bl	800533c <memchr>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d038      	beq.n	8004f9a <_svfiprintf_r+0x1d6>
 8004f28:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <_svfiprintf_r+0x1f4>)
 8004f2a:	bb1b      	cbnz	r3, 8004f74 <_svfiprintf_r+0x1b0>
 8004f2c:	9b03      	ldr	r3, [sp, #12]
 8004f2e:	3307      	adds	r3, #7
 8004f30:	f023 0307 	bic.w	r3, r3, #7
 8004f34:	3308      	adds	r3, #8
 8004f36:	9303      	str	r3, [sp, #12]
 8004f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3a:	4433      	add	r3, r6
 8004f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3e:	e768      	b.n	8004e12 <_svfiprintf_r+0x4e>
 8004f40:	460c      	mov	r4, r1
 8004f42:	2001      	movs	r0, #1
 8004f44:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f48:	e7a6      	b.n	8004e98 <_svfiprintf_r+0xd4>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f04f 0c0a 	mov.w	ip, #10
 8004f50:	4619      	mov	r1, r3
 8004f52:	3401      	adds	r4, #1
 8004f54:	9305      	str	r3, [sp, #20]
 8004f56:	4620      	mov	r0, r4
 8004f58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f5c:	3a30      	subs	r2, #48	; 0x30
 8004f5e:	2a09      	cmp	r2, #9
 8004f60:	d903      	bls.n	8004f6a <_svfiprintf_r+0x1a6>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0c6      	beq.n	8004ef4 <_svfiprintf_r+0x130>
 8004f66:	9105      	str	r1, [sp, #20]
 8004f68:	e7c4      	b.n	8004ef4 <_svfiprintf_r+0x130>
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f72:	e7f0      	b.n	8004f56 <_svfiprintf_r+0x192>
 8004f74:	ab03      	add	r3, sp, #12
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	462a      	mov	r2, r5
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <_svfiprintf_r+0x1f8>)
 8004f7e:	a904      	add	r1, sp, #16
 8004f80:	f3af 8000 	nop.w
 8004f84:	1c42      	adds	r2, r0, #1
 8004f86:	4606      	mov	r6, r0
 8004f88:	d1d6      	bne.n	8004f38 <_svfiprintf_r+0x174>
 8004f8a:	89ab      	ldrh	r3, [r5, #12]
 8004f8c:	065b      	lsls	r3, r3, #25
 8004f8e:	f53f af2d 	bmi.w	8004dec <_svfiprintf_r+0x28>
 8004f92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f94:	b01d      	add	sp, #116	; 0x74
 8004f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9a:	ab03      	add	r3, sp, #12
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	462a      	mov	r2, r5
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <_svfiprintf_r+0x1f8>)
 8004fa4:	a904      	add	r1, sp, #16
 8004fa6:	f000 f87d 	bl	80050a4 <_printf_i>
 8004faa:	e7eb      	b.n	8004f84 <_svfiprintf_r+0x1c0>
 8004fac:	080055a2 	.word	0x080055a2
 8004fb0:	080055a8 	.word	0x080055a8
 8004fb4:	080055ac 	.word	0x080055ac
 8004fb8:	00000000 	.word	0x00000000
 8004fbc:	08004d11 	.word	0x08004d11

08004fc0 <_printf_common>:
 8004fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	4616      	mov	r6, r2
 8004fc6:	4699      	mov	r9, r3
 8004fc8:	688a      	ldr	r2, [r1, #8]
 8004fca:	690b      	ldr	r3, [r1, #16]
 8004fcc:	4607      	mov	r7, r0
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	bfb8      	it	lt
 8004fd2:	4613      	movlt	r3, r2
 8004fd4:	6033      	str	r3, [r6, #0]
 8004fd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fda:	460c      	mov	r4, r1
 8004fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fe0:	b10a      	cbz	r2, 8004fe6 <_printf_common+0x26>
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	6033      	str	r3, [r6, #0]
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	0699      	lsls	r1, r3, #26
 8004fea:	bf42      	ittt	mi
 8004fec:	6833      	ldrmi	r3, [r6, #0]
 8004fee:	3302      	addmi	r3, #2
 8004ff0:	6033      	strmi	r3, [r6, #0]
 8004ff2:	6825      	ldr	r5, [r4, #0]
 8004ff4:	f015 0506 	ands.w	r5, r5, #6
 8004ff8:	d106      	bne.n	8005008 <_printf_common+0x48>
 8004ffa:	f104 0a19 	add.w	sl, r4, #25
 8004ffe:	68e3      	ldr	r3, [r4, #12]
 8005000:	6832      	ldr	r2, [r6, #0]
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	42ab      	cmp	r3, r5
 8005006:	dc2b      	bgt.n	8005060 <_printf_common+0xa0>
 8005008:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800500c:	1e13      	subs	r3, r2, #0
 800500e:	6822      	ldr	r2, [r4, #0]
 8005010:	bf18      	it	ne
 8005012:	2301      	movne	r3, #1
 8005014:	0692      	lsls	r2, r2, #26
 8005016:	d430      	bmi.n	800507a <_printf_common+0xba>
 8005018:	4649      	mov	r1, r9
 800501a:	4638      	mov	r0, r7
 800501c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005020:	47c0      	blx	r8
 8005022:	3001      	adds	r0, #1
 8005024:	d023      	beq.n	800506e <_printf_common+0xae>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	6922      	ldr	r2, [r4, #16]
 800502a:	f003 0306 	and.w	r3, r3, #6
 800502e:	2b04      	cmp	r3, #4
 8005030:	bf14      	ite	ne
 8005032:	2500      	movne	r5, #0
 8005034:	6833      	ldreq	r3, [r6, #0]
 8005036:	f04f 0600 	mov.w	r6, #0
 800503a:	bf08      	it	eq
 800503c:	68e5      	ldreq	r5, [r4, #12]
 800503e:	f104 041a 	add.w	r4, r4, #26
 8005042:	bf08      	it	eq
 8005044:	1aed      	subeq	r5, r5, r3
 8005046:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800504a:	bf08      	it	eq
 800504c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005050:	4293      	cmp	r3, r2
 8005052:	bfc4      	itt	gt
 8005054:	1a9b      	subgt	r3, r3, r2
 8005056:	18ed      	addgt	r5, r5, r3
 8005058:	42b5      	cmp	r5, r6
 800505a:	d11a      	bne.n	8005092 <_printf_common+0xd2>
 800505c:	2000      	movs	r0, #0
 800505e:	e008      	b.n	8005072 <_printf_common+0xb2>
 8005060:	2301      	movs	r3, #1
 8005062:	4652      	mov	r2, sl
 8005064:	4649      	mov	r1, r9
 8005066:	4638      	mov	r0, r7
 8005068:	47c0      	blx	r8
 800506a:	3001      	adds	r0, #1
 800506c:	d103      	bne.n	8005076 <_printf_common+0xb6>
 800506e:	f04f 30ff 	mov.w	r0, #4294967295
 8005072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005076:	3501      	adds	r5, #1
 8005078:	e7c1      	b.n	8004ffe <_printf_common+0x3e>
 800507a:	2030      	movs	r0, #48	; 0x30
 800507c:	18e1      	adds	r1, r4, r3
 800507e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005088:	4422      	add	r2, r4
 800508a:	3302      	adds	r3, #2
 800508c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005090:	e7c2      	b.n	8005018 <_printf_common+0x58>
 8005092:	2301      	movs	r3, #1
 8005094:	4622      	mov	r2, r4
 8005096:	4649      	mov	r1, r9
 8005098:	4638      	mov	r0, r7
 800509a:	47c0      	blx	r8
 800509c:	3001      	adds	r0, #1
 800509e:	d0e6      	beq.n	800506e <_printf_common+0xae>
 80050a0:	3601      	adds	r6, #1
 80050a2:	e7d9      	b.n	8005058 <_printf_common+0x98>

080050a4 <_printf_i>:
 80050a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a8:	7e0f      	ldrb	r7, [r1, #24]
 80050aa:	4691      	mov	r9, r2
 80050ac:	2f78      	cmp	r7, #120	; 0x78
 80050ae:	4680      	mov	r8, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	469a      	mov	sl, r3
 80050b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050ba:	d807      	bhi.n	80050cc <_printf_i+0x28>
 80050bc:	2f62      	cmp	r7, #98	; 0x62
 80050be:	d80a      	bhi.n	80050d6 <_printf_i+0x32>
 80050c0:	2f00      	cmp	r7, #0
 80050c2:	f000 80d5 	beq.w	8005270 <_printf_i+0x1cc>
 80050c6:	2f58      	cmp	r7, #88	; 0x58
 80050c8:	f000 80c1 	beq.w	800524e <_printf_i+0x1aa>
 80050cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050d4:	e03a      	b.n	800514c <_printf_i+0xa8>
 80050d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050da:	2b15      	cmp	r3, #21
 80050dc:	d8f6      	bhi.n	80050cc <_printf_i+0x28>
 80050de:	a101      	add	r1, pc, #4	; (adr r1, 80050e4 <_printf_i+0x40>)
 80050e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050e4:	0800513d 	.word	0x0800513d
 80050e8:	08005151 	.word	0x08005151
 80050ec:	080050cd 	.word	0x080050cd
 80050f0:	080050cd 	.word	0x080050cd
 80050f4:	080050cd 	.word	0x080050cd
 80050f8:	080050cd 	.word	0x080050cd
 80050fc:	08005151 	.word	0x08005151
 8005100:	080050cd 	.word	0x080050cd
 8005104:	080050cd 	.word	0x080050cd
 8005108:	080050cd 	.word	0x080050cd
 800510c:	080050cd 	.word	0x080050cd
 8005110:	08005257 	.word	0x08005257
 8005114:	0800517d 	.word	0x0800517d
 8005118:	08005211 	.word	0x08005211
 800511c:	080050cd 	.word	0x080050cd
 8005120:	080050cd 	.word	0x080050cd
 8005124:	08005279 	.word	0x08005279
 8005128:	080050cd 	.word	0x080050cd
 800512c:	0800517d 	.word	0x0800517d
 8005130:	080050cd 	.word	0x080050cd
 8005134:	080050cd 	.word	0x080050cd
 8005138:	08005219 	.word	0x08005219
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	1d1a      	adds	r2, r3, #4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	602a      	str	r2, [r5, #0]
 8005144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800514c:	2301      	movs	r3, #1
 800514e:	e0a0      	b.n	8005292 <_printf_i+0x1ee>
 8005150:	6820      	ldr	r0, [r4, #0]
 8005152:	682b      	ldr	r3, [r5, #0]
 8005154:	0607      	lsls	r7, r0, #24
 8005156:	f103 0104 	add.w	r1, r3, #4
 800515a:	6029      	str	r1, [r5, #0]
 800515c:	d501      	bpl.n	8005162 <_printf_i+0xbe>
 800515e:	681e      	ldr	r6, [r3, #0]
 8005160:	e003      	b.n	800516a <_printf_i+0xc6>
 8005162:	0646      	lsls	r6, r0, #25
 8005164:	d5fb      	bpl.n	800515e <_printf_i+0xba>
 8005166:	f9b3 6000 	ldrsh.w	r6, [r3]
 800516a:	2e00      	cmp	r6, #0
 800516c:	da03      	bge.n	8005176 <_printf_i+0xd2>
 800516e:	232d      	movs	r3, #45	; 0x2d
 8005170:	4276      	negs	r6, r6
 8005172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005176:	230a      	movs	r3, #10
 8005178:	4859      	ldr	r0, [pc, #356]	; (80052e0 <_printf_i+0x23c>)
 800517a:	e012      	b.n	80051a2 <_printf_i+0xfe>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	1d19      	adds	r1, r3, #4
 8005182:	6029      	str	r1, [r5, #0]
 8005184:	0605      	lsls	r5, r0, #24
 8005186:	d501      	bpl.n	800518c <_printf_i+0xe8>
 8005188:	681e      	ldr	r6, [r3, #0]
 800518a:	e002      	b.n	8005192 <_printf_i+0xee>
 800518c:	0641      	lsls	r1, r0, #25
 800518e:	d5fb      	bpl.n	8005188 <_printf_i+0xe4>
 8005190:	881e      	ldrh	r6, [r3, #0]
 8005192:	2f6f      	cmp	r7, #111	; 0x6f
 8005194:	bf0c      	ite	eq
 8005196:	2308      	moveq	r3, #8
 8005198:	230a      	movne	r3, #10
 800519a:	4851      	ldr	r0, [pc, #324]	; (80052e0 <_printf_i+0x23c>)
 800519c:	2100      	movs	r1, #0
 800519e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051a2:	6865      	ldr	r5, [r4, #4]
 80051a4:	2d00      	cmp	r5, #0
 80051a6:	bfa8      	it	ge
 80051a8:	6821      	ldrge	r1, [r4, #0]
 80051aa:	60a5      	str	r5, [r4, #8]
 80051ac:	bfa4      	itt	ge
 80051ae:	f021 0104 	bicge.w	r1, r1, #4
 80051b2:	6021      	strge	r1, [r4, #0]
 80051b4:	b90e      	cbnz	r6, 80051ba <_printf_i+0x116>
 80051b6:	2d00      	cmp	r5, #0
 80051b8:	d04b      	beq.n	8005252 <_printf_i+0x1ae>
 80051ba:	4615      	mov	r5, r2
 80051bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80051c0:	fb03 6711 	mls	r7, r3, r1, r6
 80051c4:	5dc7      	ldrb	r7, [r0, r7]
 80051c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051ca:	4637      	mov	r7, r6
 80051cc:	42bb      	cmp	r3, r7
 80051ce:	460e      	mov	r6, r1
 80051d0:	d9f4      	bls.n	80051bc <_printf_i+0x118>
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d10b      	bne.n	80051ee <_printf_i+0x14a>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	07de      	lsls	r6, r3, #31
 80051da:	d508      	bpl.n	80051ee <_printf_i+0x14a>
 80051dc:	6923      	ldr	r3, [r4, #16]
 80051de:	6861      	ldr	r1, [r4, #4]
 80051e0:	4299      	cmp	r1, r3
 80051e2:	bfde      	ittt	le
 80051e4:	2330      	movle	r3, #48	; 0x30
 80051e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051ee:	1b52      	subs	r2, r2, r5
 80051f0:	6122      	str	r2, [r4, #16]
 80051f2:	464b      	mov	r3, r9
 80051f4:	4621      	mov	r1, r4
 80051f6:	4640      	mov	r0, r8
 80051f8:	f8cd a000 	str.w	sl, [sp]
 80051fc:	aa03      	add	r2, sp, #12
 80051fe:	f7ff fedf 	bl	8004fc0 <_printf_common>
 8005202:	3001      	adds	r0, #1
 8005204:	d14a      	bne.n	800529c <_printf_i+0x1f8>
 8005206:	f04f 30ff 	mov.w	r0, #4294967295
 800520a:	b004      	add	sp, #16
 800520c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005210:	6823      	ldr	r3, [r4, #0]
 8005212:	f043 0320 	orr.w	r3, r3, #32
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	2778      	movs	r7, #120	; 0x78
 800521a:	4832      	ldr	r0, [pc, #200]	; (80052e4 <_printf_i+0x240>)
 800521c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	6829      	ldr	r1, [r5, #0]
 8005224:	061f      	lsls	r7, r3, #24
 8005226:	f851 6b04 	ldr.w	r6, [r1], #4
 800522a:	d402      	bmi.n	8005232 <_printf_i+0x18e>
 800522c:	065f      	lsls	r7, r3, #25
 800522e:	bf48      	it	mi
 8005230:	b2b6      	uxthmi	r6, r6
 8005232:	07df      	lsls	r7, r3, #31
 8005234:	bf48      	it	mi
 8005236:	f043 0320 	orrmi.w	r3, r3, #32
 800523a:	6029      	str	r1, [r5, #0]
 800523c:	bf48      	it	mi
 800523e:	6023      	strmi	r3, [r4, #0]
 8005240:	b91e      	cbnz	r6, 800524a <_printf_i+0x1a6>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	f023 0320 	bic.w	r3, r3, #32
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	2310      	movs	r3, #16
 800524c:	e7a6      	b.n	800519c <_printf_i+0xf8>
 800524e:	4824      	ldr	r0, [pc, #144]	; (80052e0 <_printf_i+0x23c>)
 8005250:	e7e4      	b.n	800521c <_printf_i+0x178>
 8005252:	4615      	mov	r5, r2
 8005254:	e7bd      	b.n	80051d2 <_printf_i+0x12e>
 8005256:	682b      	ldr	r3, [r5, #0]
 8005258:	6826      	ldr	r6, [r4, #0]
 800525a:	1d18      	adds	r0, r3, #4
 800525c:	6961      	ldr	r1, [r4, #20]
 800525e:	6028      	str	r0, [r5, #0]
 8005260:	0635      	lsls	r5, r6, #24
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	d501      	bpl.n	800526a <_printf_i+0x1c6>
 8005266:	6019      	str	r1, [r3, #0]
 8005268:	e002      	b.n	8005270 <_printf_i+0x1cc>
 800526a:	0670      	lsls	r0, r6, #25
 800526c:	d5fb      	bpl.n	8005266 <_printf_i+0x1c2>
 800526e:	8019      	strh	r1, [r3, #0]
 8005270:	2300      	movs	r3, #0
 8005272:	4615      	mov	r5, r2
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	e7bc      	b.n	80051f2 <_printf_i+0x14e>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	2100      	movs	r1, #0
 800527c:	1d1a      	adds	r2, r3, #4
 800527e:	602a      	str	r2, [r5, #0]
 8005280:	681d      	ldr	r5, [r3, #0]
 8005282:	6862      	ldr	r2, [r4, #4]
 8005284:	4628      	mov	r0, r5
 8005286:	f000 f859 	bl	800533c <memchr>
 800528a:	b108      	cbz	r0, 8005290 <_printf_i+0x1ec>
 800528c:	1b40      	subs	r0, r0, r5
 800528e:	6060      	str	r0, [r4, #4]
 8005290:	6863      	ldr	r3, [r4, #4]
 8005292:	6123      	str	r3, [r4, #16]
 8005294:	2300      	movs	r3, #0
 8005296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800529a:	e7aa      	b.n	80051f2 <_printf_i+0x14e>
 800529c:	462a      	mov	r2, r5
 800529e:	4649      	mov	r1, r9
 80052a0:	4640      	mov	r0, r8
 80052a2:	6923      	ldr	r3, [r4, #16]
 80052a4:	47d0      	blx	sl
 80052a6:	3001      	adds	r0, #1
 80052a8:	d0ad      	beq.n	8005206 <_printf_i+0x162>
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	079b      	lsls	r3, r3, #30
 80052ae:	d413      	bmi.n	80052d8 <_printf_i+0x234>
 80052b0:	68e0      	ldr	r0, [r4, #12]
 80052b2:	9b03      	ldr	r3, [sp, #12]
 80052b4:	4298      	cmp	r0, r3
 80052b6:	bfb8      	it	lt
 80052b8:	4618      	movlt	r0, r3
 80052ba:	e7a6      	b.n	800520a <_printf_i+0x166>
 80052bc:	2301      	movs	r3, #1
 80052be:	4632      	mov	r2, r6
 80052c0:	4649      	mov	r1, r9
 80052c2:	4640      	mov	r0, r8
 80052c4:	47d0      	blx	sl
 80052c6:	3001      	adds	r0, #1
 80052c8:	d09d      	beq.n	8005206 <_printf_i+0x162>
 80052ca:	3501      	adds	r5, #1
 80052cc:	68e3      	ldr	r3, [r4, #12]
 80052ce:	9903      	ldr	r1, [sp, #12]
 80052d0:	1a5b      	subs	r3, r3, r1
 80052d2:	42ab      	cmp	r3, r5
 80052d4:	dcf2      	bgt.n	80052bc <_printf_i+0x218>
 80052d6:	e7eb      	b.n	80052b0 <_printf_i+0x20c>
 80052d8:	2500      	movs	r5, #0
 80052da:	f104 0619 	add.w	r6, r4, #25
 80052de:	e7f5      	b.n	80052cc <_printf_i+0x228>
 80052e0:	080055b3 	.word	0x080055b3
 80052e4:	080055c4 	.word	0x080055c4

080052e8 <memmove>:
 80052e8:	4288      	cmp	r0, r1
 80052ea:	b510      	push	{r4, lr}
 80052ec:	eb01 0402 	add.w	r4, r1, r2
 80052f0:	d902      	bls.n	80052f8 <memmove+0x10>
 80052f2:	4284      	cmp	r4, r0
 80052f4:	4623      	mov	r3, r4
 80052f6:	d807      	bhi.n	8005308 <memmove+0x20>
 80052f8:	1e43      	subs	r3, r0, #1
 80052fa:	42a1      	cmp	r1, r4
 80052fc:	d008      	beq.n	8005310 <memmove+0x28>
 80052fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005302:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005306:	e7f8      	b.n	80052fa <memmove+0x12>
 8005308:	4601      	mov	r1, r0
 800530a:	4402      	add	r2, r0
 800530c:	428a      	cmp	r2, r1
 800530e:	d100      	bne.n	8005312 <memmove+0x2a>
 8005310:	bd10      	pop	{r4, pc}
 8005312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800531a:	e7f7      	b.n	800530c <memmove+0x24>

0800531c <_sbrk_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	2300      	movs	r3, #0
 8005320:	4d05      	ldr	r5, [pc, #20]	; (8005338 <_sbrk_r+0x1c>)
 8005322:	4604      	mov	r4, r0
 8005324:	4608      	mov	r0, r1
 8005326:	602b      	str	r3, [r5, #0]
 8005328:	f7fc f8f2 	bl	8001510 <_sbrk>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_sbrk_r+0x1a>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_sbrk_r+0x1a>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	20000600 	.word	0x20000600

0800533c <memchr>:
 800533c:	4603      	mov	r3, r0
 800533e:	b510      	push	{r4, lr}
 8005340:	b2c9      	uxtb	r1, r1
 8005342:	4402      	add	r2, r0
 8005344:	4293      	cmp	r3, r2
 8005346:	4618      	mov	r0, r3
 8005348:	d101      	bne.n	800534e <memchr+0x12>
 800534a:	2000      	movs	r0, #0
 800534c:	e003      	b.n	8005356 <memchr+0x1a>
 800534e:	7804      	ldrb	r4, [r0, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	428c      	cmp	r4, r1
 8005354:	d1f6      	bne.n	8005344 <memchr+0x8>
 8005356:	bd10      	pop	{r4, pc}

08005358 <memcpy>:
 8005358:	440a      	add	r2, r1
 800535a:	4291      	cmp	r1, r2
 800535c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005360:	d100      	bne.n	8005364 <memcpy+0xc>
 8005362:	4770      	bx	lr
 8005364:	b510      	push	{r4, lr}
 8005366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800536a:	4291      	cmp	r1, r2
 800536c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005370:	d1f9      	bne.n	8005366 <memcpy+0xe>
 8005372:	bd10      	pop	{r4, pc}

08005374 <_realloc_r>:
 8005374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005378:	4680      	mov	r8, r0
 800537a:	4614      	mov	r4, r2
 800537c:	460e      	mov	r6, r1
 800537e:	b921      	cbnz	r1, 800538a <_realloc_r+0x16>
 8005380:	4611      	mov	r1, r2
 8005382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005386:	f7ff bc37 	b.w	8004bf8 <_malloc_r>
 800538a:	b92a      	cbnz	r2, 8005398 <_realloc_r+0x24>
 800538c:	f7ff fbcc 	bl	8004b28 <_free_r>
 8005390:	4625      	mov	r5, r4
 8005392:	4628      	mov	r0, r5
 8005394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005398:	f000 f81b 	bl	80053d2 <_malloc_usable_size_r>
 800539c:	4284      	cmp	r4, r0
 800539e:	4607      	mov	r7, r0
 80053a0:	d802      	bhi.n	80053a8 <_realloc_r+0x34>
 80053a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053a6:	d812      	bhi.n	80053ce <_realloc_r+0x5a>
 80053a8:	4621      	mov	r1, r4
 80053aa:	4640      	mov	r0, r8
 80053ac:	f7ff fc24 	bl	8004bf8 <_malloc_r>
 80053b0:	4605      	mov	r5, r0
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d0ed      	beq.n	8005392 <_realloc_r+0x1e>
 80053b6:	42bc      	cmp	r4, r7
 80053b8:	4622      	mov	r2, r4
 80053ba:	4631      	mov	r1, r6
 80053bc:	bf28      	it	cs
 80053be:	463a      	movcs	r2, r7
 80053c0:	f7ff ffca 	bl	8005358 <memcpy>
 80053c4:	4631      	mov	r1, r6
 80053c6:	4640      	mov	r0, r8
 80053c8:	f7ff fbae 	bl	8004b28 <_free_r>
 80053cc:	e7e1      	b.n	8005392 <_realloc_r+0x1e>
 80053ce:	4635      	mov	r5, r6
 80053d0:	e7df      	b.n	8005392 <_realloc_r+0x1e>

080053d2 <_malloc_usable_size_r>:
 80053d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d6:	1f18      	subs	r0, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bfbc      	itt	lt
 80053dc:	580b      	ldrlt	r3, [r1, r0]
 80053de:	18c0      	addlt	r0, r0, r3
 80053e0:	4770      	bx	lr
	...

080053e4 <_init>:
 80053e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e6:	bf00      	nop
 80053e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ea:	bc08      	pop	{r3}
 80053ec:	469e      	mov	lr, r3
 80053ee:	4770      	bx	lr

080053f0 <_fini>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	bf00      	nop
 80053f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f6:	bc08      	pop	{r3}
 80053f8:	469e      	mov	lr, r3
 80053fa:	4770      	bx	lr
