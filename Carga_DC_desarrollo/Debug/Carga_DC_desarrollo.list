
Carga_DC_desarrollo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002084  08002084  00012084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c4  080020c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080020c4  080020c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020c4  080020c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020c4  080020c4  000120c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020c8  080020c8  000120c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080020cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  2000000c  080020d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  080020d8  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a97c  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b4c  00000000  00000000  0002a9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  0002c540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c6  00000000  00000000  0002cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a88  00000000  00000000  0002d72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb08  00000000  00000000  000451b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089f19  00000000  00000000  00051cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029cc  00000000  00000000  000dbbd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000de5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800206c 	.word	0x0800206c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800206c 	.word	0x0800206c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fad4 	bl	80006fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f84c 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f936 	bl	80003c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f8a6 	bl	80002ac <MX_ADC1_Init>
  MX_I2C1_Init();
 8000160:	f000 f8e2 	bl	8000328 <MX_I2C1_Init>
  MX_USB_PCD_Init();
 8000164:	f000 f90e 	bl	8000384 <MX_USB_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input_keypad=="CC"||input_keypad=="CV"||input_keypad=="CR"||input_keypad=="CP"){
 8000168:	4b19      	ldr	r3, [pc, #100]	; (80001d0 <main+0x84>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	461a      	mov	r2, r3
 800016e:	4b19      	ldr	r3, [pc, #100]	; (80001d4 <main+0x88>)
 8000170:	429a      	cmp	r2, r3
 8000172:	d011      	beq.n	8000198 <main+0x4c>
 8000174:	4b16      	ldr	r3, [pc, #88]	; (80001d0 <main+0x84>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	461a      	mov	r2, r3
 800017a:	4b17      	ldr	r3, [pc, #92]	; (80001d8 <main+0x8c>)
 800017c:	429a      	cmp	r2, r3
 800017e:	d00b      	beq.n	8000198 <main+0x4c>
 8000180:	4b13      	ldr	r3, [pc, #76]	; (80001d0 <main+0x84>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	461a      	mov	r2, r3
 8000186:	4b15      	ldr	r3, [pc, #84]	; (80001dc <main+0x90>)
 8000188:	429a      	cmp	r2, r3
 800018a:	d005      	beq.n	8000198 <main+0x4c>
 800018c:	4b10      	ldr	r3, [pc, #64]	; (80001d0 <main+0x84>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	461a      	mov	r2, r3
 8000192:	4b13      	ldr	r3, [pc, #76]	; (80001e0 <main+0x94>)
 8000194:	429a      	cmp	r2, r3
 8000196:	d110      	bne.n	80001ba <main+0x6e>
		  //ingresa a la configuracion de modo
		  flag_config=1;
 8000198:	4b12      	ldr	r3, [pc, #72]	; (80001e4 <main+0x98>)
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
		  //guardar el modo que se selecciono
		  while(flag_config){
 800019e:	e008      	b.n	80001b2 <main+0x66>
			  //hacer scan del teclado
			  //actualizar disp
			  //
			  if(input_keypad=="ok"){
 80001a0:	4b0b      	ldr	r3, [pc, #44]	; (80001d0 <main+0x84>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	461a      	mov	r2, r3
 80001a6:	4b10      	ldr	r3, [pc, #64]	; (80001e8 <main+0x9c>)
 80001a8:	429a      	cmp	r2, r3
 80001aa:	d102      	bne.n	80001b2 <main+0x66>
				  flag_config=0;//sale del while y vuelve al super loop
 80001ac:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <main+0x98>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
		  while(flag_config){
 80001b2:	4b0c      	ldr	r3, [pc, #48]	; (80001e4 <main+0x98>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d1f2      	bne.n	80001a0 <main+0x54>
			  }
		  }
	  }
	  if(flag_on_off){
 80001ba:	4b0c      	ldr	r3, [pc, #48]	; (80001ec <main+0xa0>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d0d2      	beq.n	8000168 <main+0x1c>
		  //switch con los cuatro case y los modos de control
		  while(flag_on_off){
 80001c2:	bf00      	nop
 80001c4:	4b09      	ldr	r3, [pc, #36]	; (80001ec <main+0xa0>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d1fb      	bne.n	80001c4 <main+0x78>
	  if(input_keypad=="CC"||input_keypad=="CV"||input_keypad=="CR"||input_keypad=="CP"){
 80001cc:	e7cc      	b.n	8000168 <main+0x1c>
 80001ce:	bf00      	nop
 80001d0:	2000039e 	.word	0x2000039e
 80001d4:	08002084 	.word	0x08002084
 80001d8:	08002088 	.word	0x08002088
 80001dc:	0800208c 	.word	0x0800208c
 80001e0:	08002090 	.word	0x08002090
 80001e4:	2000039d 	.word	0x2000039d
 80001e8:	08002094 	.word	0x08002094
 80001ec:	2000039c 	.word	0x2000039c

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b094      	sub	sp, #80	; 0x50
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 ff08 	bl	8002014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000228:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000232:	2302      	movs	r3, #2
 8000234:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000240:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000246:	4618      	mov	r0, r3
 8000248:	f001 f9d2 	bl	80015f0 <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000252:	f000 f927 	bl	80004a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000266:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026c:	f107 0314 	add.w	r3, r7, #20
 8000270:	2102      	movs	r1, #2
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fc3e 	bl	8001af4 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800027e:	f000 f911 	bl	80004a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000282:	2312      	movs	r3, #18
 8000284:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800028a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800028c:	2300      	movs	r3, #0
 800028e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fda8 	bl	8001de8 <HAL_RCCEx_PeriphCLKConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800029e:	f000 f901 	bl	80004a4 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3750      	adds	r7, #80	; 0x50
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <MX_ADC1_Init+0x74>)
 80002be:	4a19      	ldr	r2, [pc, #100]	; (8000324 <MX_ADC1_Init+0x78>)
 80002c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <MX_ADC1_Init+0x74>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002c8:	4b15      	ldr	r3, [pc, #84]	; (8000320 <MX_ADC1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_ADC1_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_ADC1_Init+0x74>)
 80002d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <MX_ADC1_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_ADC1_Init+0x74>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002e8:	480d      	ldr	r0, [pc, #52]	; (8000320 <MX_ADC1_Init+0x74>)
 80002ea:	f000 fa69 	bl	80007c0 <HAL_ADC_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002f4:	f000 f8d6 	bl	80004a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002f8:	2301      	movs	r3, #1
 80002fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002fc:	2301      	movs	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	4619      	mov	r1, r3
 8000308:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_ADC1_Init+0x74>)
 800030a:	f000 fb31 	bl	8000970 <HAL_ADC_ConfigChannel>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000314:	f000 f8c6 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000028 	.word	0x20000028
 8000324:	40012400 	.word	0x40012400

08000328 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_I2C1_Init+0x50>)
 800032e:	4a13      	ldr	r2, [pc, #76]	; (800037c <MX_I2C1_Init+0x54>)
 8000330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_I2C1_Init+0x50>)
 8000334:	4a12      	ldr	r2, [pc, #72]	; (8000380 <MX_I2C1_Init+0x58>)
 8000336:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_I2C1_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_I2C1_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_I2C1_Init+0x50>)
 8000346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800034a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <MX_I2C1_Init+0x50>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_I2C1_Init+0x50>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000358:	4b07      	ldr	r3, [pc, #28]	; (8000378 <MX_I2C1_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035e:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_I2C1_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <MX_I2C1_Init+0x50>)
 8000366:	f000 feff 	bl	8001168 <HAL_I2C_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000370:	f000 f898 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000058 	.word	0x20000058
 800037c:	40005400 	.word	0x40005400
 8000380:	000186a0 	.word	0x000186a0

08000384 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000388:	4b0d      	ldr	r3, [pc, #52]	; (80003c0 <MX_USB_PCD_Init+0x3c>)
 800038a:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <MX_USB_PCD_Init+0x40>)
 800038c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_USB_PCD_Init+0x3c>)
 8000390:	2208      	movs	r2, #8
 8000392:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <MX_USB_PCD_Init+0x3c>)
 8000396:	2202      	movs	r2, #2
 8000398:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_USB_PCD_Init+0x3c>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80003a0:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <MX_USB_PCD_Init+0x3c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_USB_PCD_Init+0x3c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <MX_USB_PCD_Init+0x3c>)
 80003ae:	f001 f81f 	bl	80013f0 <HAL_PCD_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80003b8:	f000 f874 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	200000ac 	.word	0x200000ac
 80003c4:	40005c00 	.word	0x40005c00

080003c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003dc:	4b1e      	ldr	r3, [pc, #120]	; (8000458 <MX_GPIO_Init+0x90>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <MX_GPIO_Init+0x90>)
 80003e2:	f043 0320 	orr.w	r3, r3, #32
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <MX_GPIO_Init+0x90>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0320 	and.w	r3, r3, #32
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MX_GPIO_Init+0x90>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a17      	ldr	r2, [pc, #92]	; (8000458 <MX_GPIO_Init+0x90>)
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_GPIO_Init+0x90>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0304 	and.w	r3, r3, #4
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <MX_GPIO_Init+0x90>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a11      	ldr	r2, [pc, #68]	; (8000458 <MX_GPIO_Init+0x90>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <MX_GPIO_Init+0x90>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0308 	and.w	r3, r3, #8
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800042a:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_GPIO_Init+0x94>)
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	4619      	mov	r1, r3
 8000438:	4809      	ldr	r0, [pc, #36]	; (8000460 <MX_GPIO_Init+0x98>)
 800043a:	f000 fce1 	bl	8000e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	2100      	movs	r1, #0
 8000442:	2017      	movs	r0, #23
 8000444:	f000 fca5 	bl	8000d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000448:	2017      	movs	r0, #23
 800044a:	f000 fcbe 	bl	8000dca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800044e:	bf00      	nop
 8000450:	3720      	adds	r7, #32
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000
 800045c:	10310000 	.word	0x10310000
 8000460:	40010800 	.word	0x40010800

08000464 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//definiciones de los callback y funciones
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // INT Source is pin A9
 800046e:	88fb      	ldrh	r3, [r7, #6]
 8000470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000474:	d10e      	bne.n	8000494 <HAL_GPIO_EXTI_Callback+0x30>
    {
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET){
 8000476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800047a:	4808      	ldr	r0, [pc, #32]	; (800049c <HAL_GPIO_EXTI_Callback+0x38>)
 800047c:	f000 fe44 	bl	8001108 <HAL_GPIO_ReadPin>
 8000480:	4603      	mov	r3, r0
 8000482:	2b01      	cmp	r3, #1
 8000484:	d103      	bne.n	800048e <HAL_GPIO_EXTI_Callback+0x2a>
    	flag_on_off=1;// conecta la carga
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000488:	2201      	movs	r2, #1
 800048a:	701a      	strb	r2, [r3, #0]
    }
    else flag_on_off=0;// desconecta la carga
    }
}
 800048c:	e002      	b.n	8000494 <HAL_GPIO_EXTI_Callback+0x30>
    else flag_on_off=0;// desconecta la carga
 800048e:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]
}
 8000494:	bf00      	nop
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40010800 	.word	0x40010800
 80004a0:	2000039c 	.word	0x2000039c

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	e7fe      	b.n	80004ac <Error_Handler+0x8>
	...

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <HAL_MspInit+0x5c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <HAL_MspInit+0x5c>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_MspInit+0x5c>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x5c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_MspInit+0x5c>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x5c>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_MspInit+0x60>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_MspInit+0x60>)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000
 8000510:	40010000 	.word	0x40010000

08000514 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a14      	ldr	r2, [pc, #80]	; (8000580 <HAL_ADC_MspInit+0x6c>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d121      	bne.n	8000578 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <HAL_ADC_MspInit+0x70>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a12      	ldr	r2, [pc, #72]	; (8000584 <HAL_ADC_MspInit+0x70>)
 800053a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <HAL_ADC_MspInit+0x70>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <HAL_ADC_MspInit+0x70>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <HAL_ADC_MspInit+0x70>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <HAL_ADC_MspInit+0x70>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000564:	2306      	movs	r3, #6
 8000566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000568:	2303      	movs	r3, #3
 800056a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <HAL_ADC_MspInit+0x74>)
 8000574:	f000 fc44 	bl	8000e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40012400 	.word	0x40012400
 8000584:	40021000 	.word	0x40021000
 8000588:	40010800 	.word	0x40010800

0800058c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a15      	ldr	r2, [pc, #84]	; (80005fc <HAL_I2C_MspInit+0x70>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d123      	bne.n	80005f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <HAL_I2C_MspInit+0x74>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a13      	ldr	r2, [pc, #76]	; (8000600 <HAL_I2C_MspInit+0x74>)
 80005b2:	f043 0308 	orr.w	r3, r3, #8
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <HAL_I2C_MspInit+0x74>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0308 	and.w	r3, r3, #8
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005c4:	23c0      	movs	r3, #192	; 0xc0
 80005c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005c8:	2312      	movs	r3, #18
 80005ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005cc:	2303      	movs	r3, #3
 80005ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4619      	mov	r1, r3
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <HAL_I2C_MspInit+0x78>)
 80005d8:	f000 fc12 	bl	8000e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_I2C_MspInit+0x74>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_I2C_MspInit+0x74>)
 80005e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005e6:	61d3      	str	r3, [r2, #28]
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <HAL_I2C_MspInit+0x74>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005f4:	bf00      	nop
 80005f6:	3720      	adds	r7, #32
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40005400 	.word	0x40005400
 8000600:	40021000 	.word	0x40021000
 8000604:	40010c00 	.word	0x40010c00

08000608 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a09      	ldr	r2, [pc, #36]	; (800063c <HAL_PCD_MspInit+0x34>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d10b      	bne.n	8000632 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_PCD_MspInit+0x38>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_PCD_MspInit+0x38>)
 8000620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_PCD_MspInit+0x38>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40005c00 	.word	0x40005c00
 8000640:	40021000 	.word	0x40021000

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068a:	f000 f87d 	bl	8000788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}

08000692 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000696:	f44f 7000 	mov.w	r0, #512	; 0x200
 800069a:	f000 fd4d 	bl	8001138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
	...

080006b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b0:	f7ff fff7 	bl	80006a2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006b6:	490c      	ldr	r1, [pc, #48]	; (80006e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006b8:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006cc:	4c09      	ldr	r4, [pc, #36]	; (80006f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006da:	f001 fca3 	bl	8002024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff fd35 	bl	800014c <main>
  bx lr
 80006e2:	4770      	bx	lr
  ldr r0, =_sdata
 80006e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006ec:	080020cc 	.word	0x080020cc
  ldr r2, =_sbss
 80006f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f4:	200003a4 	.word	0x200003a4

080006f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f8:	e7fe      	b.n	80006f8 <ADC1_2_IRQHandler>
	...

080006fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <HAL_Init+0x28>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_Init+0x28>)
 8000706:	f043 0310 	orr.w	r3, r3, #16
 800070a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800070c:	2003      	movs	r0, #3
 800070e:	f000 fb35 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000712:	200f      	movs	r0, #15
 8000714:	f000 f808 	bl	8000728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000718:	f7ff feca 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40022000 	.word	0x40022000

08000728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_InitTick+0x54>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_InitTick+0x58>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000742:	fbb2 f3f3 	udiv	r3, r2, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fb4d 	bl	8000de6 <HAL_SYSTICK_Config>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e00e      	b.n	8000774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b0f      	cmp	r3, #15
 800075a:	d80a      	bhi.n	8000772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075c:	2200      	movs	r2, #0
 800075e:	6879      	ldr	r1, [r7, #4]
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	f000 fb15 	bl	8000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <HAL_InitTick+0x5c>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
 8000770:	e000      	b.n	8000774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000000 	.word	0x20000000
 8000780:	20000008 	.word	0x20000008
 8000784:	20000004 	.word	0x20000004

08000788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_IncTick+0x20>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <HAL_IncTick+0x20>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	20000008 	.word	0x20000008
 80007a8:	200003a0 	.word	0x200003a0

080007ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b02      	ldr	r3, [pc, #8]	; (80007bc <HAL_GetTick+0x10>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	200003a0 	.word	0x200003a0

080007c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007c8:	2300      	movs	r3, #0
 80007ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d101      	bne.n	80007e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e0be      	b.n	8000960 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d109      	bne.n	8000804 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff fe88 	bl	8000514 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 f9ab 	bl	8000b60 <ADC_ConversionStop_Disable>
 800080a:	4603      	mov	r3, r0
 800080c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	2b00      	cmp	r3, #0
 8000818:	f040 8099 	bne.w	800094e <HAL_ADC_Init+0x18e>
 800081c:	7dfb      	ldrb	r3, [r7, #23]
 800081e:	2b00      	cmp	r3, #0
 8000820:	f040 8095 	bne.w	800094e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000828:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800082c:	f023 0302 	bic.w	r3, r3, #2
 8000830:	f043 0202 	orr.w	r2, r3, #2
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000840:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	7b1b      	ldrb	r3, [r3, #12]
 8000846:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000848:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	4313      	orrs	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000858:	d003      	beq.n	8000862 <HAL_ADC_Init+0xa2>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d102      	bne.n	8000868 <HAL_ADC_Init+0xa8>
 8000862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000866:	e000      	b.n	800086a <HAL_ADC_Init+0xaa>
 8000868:	2300      	movs	r3, #0
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4313      	orrs	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7d1b      	ldrb	r3, [r3, #20]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d119      	bne.n	80008ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7b1b      	ldrb	r3, [r3, #12]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d109      	bne.n	8000894 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	3b01      	subs	r3, #1
 8000886:	035a      	lsls	r2, r3, #13
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	4313      	orrs	r3, r2
 800088c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	e00b      	b.n	80008ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000898:	f043 0220 	orr.w	r2, r3, #32
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a4:	f043 0201 	orr.w	r2, r3, #1
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	430a      	orrs	r2, r1
 80008be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	4b28      	ldr	r3, [pc, #160]	; (8000968 <HAL_ADC_Init+0x1a8>)
 80008c8:	4013      	ands	r3, r2
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	6812      	ldr	r2, [r2, #0]
 80008ce:	68b9      	ldr	r1, [r7, #8]
 80008d0:	430b      	orrs	r3, r1
 80008d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008dc:	d003      	beq.n	80008e6 <HAL_ADC_Init+0x126>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d104      	bne.n	80008f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	051b      	lsls	r3, r3, #20
 80008ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	430a      	orrs	r2, r1
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <HAL_ADC_Init+0x1ac>)
 800090c:	4013      	ands	r3, r2
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	429a      	cmp	r2, r3
 8000912:	d10b      	bne.n	800092c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091e:	f023 0303 	bic.w	r3, r3, #3
 8000922:	f043 0201 	orr.w	r2, r3, #1
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800092a:	e018      	b.n	800095e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000930:	f023 0312 	bic.w	r3, r3, #18
 8000934:	f043 0210 	orr.w	r2, r3, #16
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000940:	f043 0201 	orr.w	r2, r3, #1
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000948:	2301      	movs	r3, #1
 800094a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800094c:	e007      	b.n	800095e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000952:	f043 0210 	orr.w	r2, r3, #16
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800095e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	ffe1f7fd 	.word	0xffe1f7fd
 800096c:	ff1f0efe 	.word	0xff1f0efe

08000970 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000988:	2b01      	cmp	r3, #1
 800098a:	d101      	bne.n	8000990 <HAL_ADC_ConfigChannel+0x20>
 800098c:	2302      	movs	r3, #2
 800098e:	e0dc      	b.n	8000b4a <HAL_ADC_ConfigChannel+0x1da>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2201      	movs	r2, #1
 8000994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	2b06      	cmp	r3, #6
 800099e:	d81c      	bhi.n	80009da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685a      	ldr	r2, [r3, #4]
 80009aa:	4613      	mov	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	3b05      	subs	r3, #5
 80009b2:	221f      	movs	r2, #31
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	4019      	ands	r1, r3
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	3b05      	subs	r3, #5
 80009cc:	fa00 f203 	lsl.w	r2, r0, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	430a      	orrs	r2, r1
 80009d6:	635a      	str	r2, [r3, #52]	; 0x34
 80009d8:	e03c      	b.n	8000a54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b0c      	cmp	r3, #12
 80009e0:	d81c      	bhi.n	8000a1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	4613      	mov	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	3b23      	subs	r3, #35	; 0x23
 80009f4:	221f      	movs	r2, #31
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	4019      	ands	r1, r3
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	6818      	ldr	r0, [r3, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	3b23      	subs	r3, #35	; 0x23
 8000a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	430a      	orrs	r2, r1
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
 8000a1a:	e01b      	b.n	8000a54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	4613      	mov	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	3b41      	subs	r3, #65	; 0x41
 8000a2e:	221f      	movs	r2, #31
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	4019      	ands	r1, r3
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	4613      	mov	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	3b41      	subs	r3, #65	; 0x41
 8000a48:	fa00 f203 	lsl.w	r2, r0, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	430a      	orrs	r2, r1
 8000a52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b09      	cmp	r3, #9
 8000a5a:	d91c      	bls.n	8000a96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	68d9      	ldr	r1, [r3, #12]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	3b1e      	subs	r3, #30
 8000a6e:	2207      	movs	r2, #7
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	4019      	ands	r1, r3
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	6898      	ldr	r0, [r3, #8]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	3b1e      	subs	r3, #30
 8000a88:	fa00 f203 	lsl.w	r2, r0, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	430a      	orrs	r2, r1
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	e019      	b.n	8000aca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6919      	ldr	r1, [r3, #16]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	2207      	movs	r2, #7
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4019      	ands	r1, r3
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	6898      	ldr	r0, [r3, #8]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	fa00 f203 	lsl.w	r2, r0, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b10      	cmp	r3, #16
 8000ad0:	d003      	beq.n	8000ada <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ad6:	2b11      	cmp	r3, #17
 8000ad8:	d132      	bne.n	8000b40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d125      	bne.n	8000b30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d126      	bne.n	8000b40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000b00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b10      	cmp	r3, #16
 8000b08:	d11a      	bne.n	8000b40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <HAL_ADC_ConfigChannel+0x1e8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <HAL_ADC_ConfigChannel+0x1ec>)
 8000b10:	fba2 2303 	umull	r2, r3, r2, r3
 8000b14:	0c9a      	lsrs	r2, r3, #18
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b20:	e002      	b.n	8000b28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f9      	bne.n	8000b22 <HAL_ADC_ConfigChannel+0x1b2>
 8000b2e:	e007      	b.n	8000b40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b34:	f043 0220 	orr.w	r2, r3, #32
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40012400 	.word	0x40012400
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	431bde83 	.word	0x431bde83

08000b60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d12e      	bne.n	8000bd8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f022 0201 	bic.w	r2, r2, #1
 8000b88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b8a:	f7ff fe0f 	bl	80007ac <HAL_GetTick>
 8000b8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b90:	e01b      	b.n	8000bca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b92:	f7ff fe0b 	bl	80007ac <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d914      	bls.n	8000bca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d10d      	bne.n	8000bca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb2:	f043 0210 	orr.w	r2, r3, #16
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bbe:	f043 0201 	orr.w	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e007      	b.n	8000bda <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d0dc      	beq.n	8000b92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db0b      	blt.n	8000c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	f003 021f 	and.w	r2, r3, #31
 8000c60:	4906      	ldr	r1, [pc, #24]	; (8000c7c <__NVIC_EnableIRQ+0x34>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	095b      	lsrs	r3, r3, #5
 8000c68:	2001      	movs	r0, #1
 8000c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db0a      	blt.n	8000caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	490c      	ldr	r1, [pc, #48]	; (8000ccc <__NVIC_SetPriority+0x4c>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	0112      	lsls	r2, r2, #4
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca8:	e00a      	b.n	8000cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4908      	ldr	r1, [pc, #32]	; (8000cd0 <__NVIC_SetPriority+0x50>)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	761a      	strb	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f1c3 0307 	rsb	r3, r3, #7
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	bf28      	it	cs
 8000cf2:	2304      	movcs	r3, #4
 8000cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d902      	bls.n	8000d04 <NVIC_EncodePriority+0x30>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3b03      	subs	r3, #3
 8000d02:	e000      	b.n	8000d06 <NVIC_EncodePriority+0x32>
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43da      	mvns	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43d9      	mvns	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	4313      	orrs	r3, r2
         );
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3724      	adds	r7, #36	; 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff90 	bl	8000c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff2d 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff42 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff90 	bl	8000cd4 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5f 	bl	8000c80 <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff35 	bl	8000c48 <__NVIC_EnableIRQ>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffa2 	bl	8000d38 <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b08b      	sub	sp, #44	; 0x2c
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e12:	e169      	b.n	80010e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e14:	2201      	movs	r2, #1
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f040 8158 	bne.w	80010e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4a9a      	ldr	r2, [pc, #616]	; (80010a0 <HAL_GPIO_Init+0x2a0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d05e      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e3c:	4a98      	ldr	r2, [pc, #608]	; (80010a0 <HAL_GPIO_Init+0x2a0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d875      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e42:	4a98      	ldr	r2, [pc, #608]	; (80010a4 <HAL_GPIO_Init+0x2a4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d058      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e48:	4a96      	ldr	r2, [pc, #600]	; (80010a4 <HAL_GPIO_Init+0x2a4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d86f      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e4e:	4a96      	ldr	r2, [pc, #600]	; (80010a8 <HAL_GPIO_Init+0x2a8>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d052      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e54:	4a94      	ldr	r2, [pc, #592]	; (80010a8 <HAL_GPIO_Init+0x2a8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d869      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e5a:	4a94      	ldr	r2, [pc, #592]	; (80010ac <HAL_GPIO_Init+0x2ac>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d04c      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e60:	4a92      	ldr	r2, [pc, #584]	; (80010ac <HAL_GPIO_Init+0x2ac>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d863      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e66:	4a92      	ldr	r2, [pc, #584]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d046      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
 8000e6c:	4a90      	ldr	r2, [pc, #576]	; (80010b0 <HAL_GPIO_Init+0x2b0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d85d      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e72:	2b12      	cmp	r3, #18
 8000e74:	d82a      	bhi.n	8000ecc <HAL_GPIO_Init+0xcc>
 8000e76:	2b12      	cmp	r3, #18
 8000e78:	d859      	bhi.n	8000f2e <HAL_GPIO_Init+0x12e>
 8000e7a:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <HAL_GPIO_Init+0x80>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000efb 	.word	0x08000efb
 8000e84:	08000ed5 	.word	0x08000ed5
 8000e88:	08000ee7 	.word	0x08000ee7
 8000e8c:	08000f29 	.word	0x08000f29
 8000e90:	08000f2f 	.word	0x08000f2f
 8000e94:	08000f2f 	.word	0x08000f2f
 8000e98:	08000f2f 	.word	0x08000f2f
 8000e9c:	08000f2f 	.word	0x08000f2f
 8000ea0:	08000f2f 	.word	0x08000f2f
 8000ea4:	08000f2f 	.word	0x08000f2f
 8000ea8:	08000f2f 	.word	0x08000f2f
 8000eac:	08000f2f 	.word	0x08000f2f
 8000eb0:	08000f2f 	.word	0x08000f2f
 8000eb4:	08000f2f 	.word	0x08000f2f
 8000eb8:	08000f2f 	.word	0x08000f2f
 8000ebc:	08000f2f 	.word	0x08000f2f
 8000ec0:	08000f2f 	.word	0x08000f2f
 8000ec4:	08000edd 	.word	0x08000edd
 8000ec8:	08000ef1 	.word	0x08000ef1
 8000ecc:	4a79      	ldr	r2, [pc, #484]	; (80010b4 <HAL_GPIO_Init+0x2b4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d013      	beq.n	8000efa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ed2:	e02c      	b.n	8000f2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e029      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	623b      	str	r3, [r7, #32]
          break;
 8000ee4:	e024      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	3308      	adds	r3, #8
 8000eec:	623b      	str	r3, [r7, #32]
          break;
 8000eee:	e01f      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	330c      	adds	r3, #12
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e01a      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f02:	2304      	movs	r3, #4
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e013      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d105      	bne.n	8000f1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f10:	2308      	movs	r3, #8
 8000f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	611a      	str	r2, [r3, #16]
          break;
 8000f1a:	e009      	b.n	8000f30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	615a      	str	r2, [r3, #20]
          break;
 8000f26:	e003      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
          break;
 8000f2c:	e000      	b.n	8000f30 <HAL_GPIO_Init+0x130>
          break;
 8000f2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2bff      	cmp	r3, #255	; 0xff
 8000f34:	d801      	bhi.n	8000f3a <HAL_GPIO_Init+0x13a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	e001      	b.n	8000f3e <HAL_GPIO_Init+0x13e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2bff      	cmp	r3, #255	; 0xff
 8000f44:	d802      	bhi.n	8000f4c <HAL_GPIO_Init+0x14c>
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	e002      	b.n	8000f52 <HAL_GPIO_Init+0x152>
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	3b08      	subs	r3, #8
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	210f      	movs	r1, #15
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	401a      	ands	r2, r3
 8000f64:	6a39      	ldr	r1, [r7, #32]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 80b1 	beq.w	80010e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f80:	4b4d      	ldr	r3, [pc, #308]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a4c      	ldr	r2, [pc, #304]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f98:	4a48      	ldr	r2, [pc, #288]	; (80010bc <HAL_GPIO_Init+0x2bc>)
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a40      	ldr	r2, [pc, #256]	; (80010c0 <HAL_GPIO_Init+0x2c0>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d013      	beq.n	8000fec <HAL_GPIO_Init+0x1ec>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a3f      	ldr	r2, [pc, #252]	; (80010c4 <HAL_GPIO_Init+0x2c4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d00d      	beq.n	8000fe8 <HAL_GPIO_Init+0x1e8>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a3e      	ldr	r2, [pc, #248]	; (80010c8 <HAL_GPIO_Init+0x2c8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d007      	beq.n	8000fe4 <HAL_GPIO_Init+0x1e4>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a3d      	ldr	r2, [pc, #244]	; (80010cc <HAL_GPIO_Init+0x2cc>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d101      	bne.n	8000fe0 <HAL_GPIO_Init+0x1e0>
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e006      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	e004      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e002      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <HAL_GPIO_Init+0x1ee>
 8000fec:	2300      	movs	r3, #0
 8000fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ff0:	f002 0203 	and.w	r2, r2, #3
 8000ff4:	0092      	lsls	r2, r2, #2
 8000ff6:	4093      	lsls	r3, r2
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ffe:	492f      	ldr	r1, [pc, #188]	; (80010bc <HAL_GPIO_Init+0x2bc>)
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	492c      	ldr	r1, [pc, #176]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	608b      	str	r3, [r1, #8]
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001026:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	43db      	mvns	r3, r3
 800102e:	4928      	ldr	r1, [pc, #160]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001030:	4013      	ands	r3, r2
 8001032:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	4922      	ldr	r1, [pc, #136]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	60cb      	str	r3, [r1, #12]
 800104c:	e006      	b.n	800105c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	43db      	mvns	r3, r3
 8001056:	491e      	ldr	r1, [pc, #120]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001058:	4013      	ands	r3, r2
 800105a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	4918      	ldr	r1, [pc, #96]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	43db      	mvns	r3, r3
 800107e:	4914      	ldr	r1, [pc, #80]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001080:	4013      	ands	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d021      	beq.n	80010d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	490e      	ldr	r1, [pc, #56]	; (80010d0 <HAL_GPIO_Init+0x2d0>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	600b      	str	r3, [r1, #0]
 800109c:	e021      	b.n	80010e2 <HAL_GPIO_Init+0x2e2>
 800109e:	bf00      	nop
 80010a0:	10320000 	.word	0x10320000
 80010a4:	10310000 	.word	0x10310000
 80010a8:	10220000 	.word	0x10220000
 80010ac:	10210000 	.word	0x10210000
 80010b0:	10120000 	.word	0x10120000
 80010b4:	10110000 	.word	0x10110000
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000
 80010c0:	40010800 	.word	0x40010800
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	40011000 	.word	0x40011000
 80010cc:	40011400 	.word	0x40011400
 80010d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_GPIO_Init+0x304>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	43db      	mvns	r3, r3
 80010dc:	4909      	ldr	r1, [pc, #36]	; (8001104 <HAL_GPIO_Init+0x304>)
 80010de:	4013      	ands	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	3301      	adds	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	fa22 f303 	lsr.w	r3, r2, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f47f ae8e 	bne.w	8000e14 <HAL_GPIO_Init+0x14>
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	372c      	adds	r7, #44	; 0x2c
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40010400 	.word	0x40010400

08001108 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	4013      	ands	r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e001      	b.n	800112a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800112a:	7bfb      	ldrb	r3, [r7, #15]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
	...

08001138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001144:	695a      	ldr	r2, [r3, #20]
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	4013      	ands	r3, r2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f984 	bl	8000464 <HAL_GPIO_EXTI_Callback>
  }
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40010400 	.word	0x40010400

08001168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e12b      	b.n	80013d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d106      	bne.n	8001194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff f9fc 	bl	800058c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2224      	movs	r2, #36	; 0x24
 8001198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011cc:	f000 fdda 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 80011d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4a81      	ldr	r2, [pc, #516]	; (80013dc <HAL_I2C_Init+0x274>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d807      	bhi.n	80011ec <HAL_I2C_Init+0x84>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4a80      	ldr	r2, [pc, #512]	; (80013e0 <HAL_I2C_Init+0x278>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	bf94      	ite	ls
 80011e4:	2301      	movls	r3, #1
 80011e6:	2300      	movhi	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	e006      	b.n	80011fa <HAL_I2C_Init+0x92>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4a7d      	ldr	r2, [pc, #500]	; (80013e4 <HAL_I2C_Init+0x27c>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	bf94      	ite	ls
 80011f4:	2301      	movls	r3, #1
 80011f6:	2300      	movhi	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e0e7      	b.n	80013d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4a78      	ldr	r2, [pc, #480]	; (80013e8 <HAL_I2C_Init+0x280>)
 8001206:	fba2 2303 	umull	r2, r3, r2, r3
 800120a:	0c9b      	lsrs	r3, r3, #18
 800120c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	430a      	orrs	r2, r1
 8001220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a6a      	ldr	r2, [pc, #424]	; (80013dc <HAL_I2C_Init+0x274>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d802      	bhi.n	800123c <HAL_I2C_Init+0xd4>
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3301      	adds	r3, #1
 800123a:	e009      	b.n	8001250 <HAL_I2C_Init+0xe8>
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	4a69      	ldr	r2, [pc, #420]	; (80013ec <HAL_I2C_Init+0x284>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	099b      	lsrs	r3, r3, #6
 800124e:	3301      	adds	r3, #1
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	430b      	orrs	r3, r1
 8001256:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001262:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	495c      	ldr	r1, [pc, #368]	; (80013dc <HAL_I2C_Init+0x274>)
 800126c:	428b      	cmp	r3, r1
 800126e:	d819      	bhi.n	80012a4 <HAL_I2C_Init+0x13c>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1e59      	subs	r1, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fbb1 f3f3 	udiv	r3, r1, r3
 800127e:	1c59      	adds	r1, r3, #1
 8001280:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001284:	400b      	ands	r3, r1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00a      	beq.n	80012a0 <HAL_I2C_Init+0x138>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1e59      	subs	r1, r3, #1
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fbb1 f3f3 	udiv	r3, r1, r3
 8001298:	3301      	adds	r3, #1
 800129a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800129e:	e051      	b.n	8001344 <HAL_I2C_Init+0x1dc>
 80012a0:	2304      	movs	r3, #4
 80012a2:	e04f      	b.n	8001344 <HAL_I2C_Init+0x1dc>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d111      	bne.n	80012d0 <HAL_I2C_Init+0x168>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	1e58      	subs	r0, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6859      	ldr	r1, [r3, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	440b      	add	r3, r1
 80012ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80012be:	3301      	adds	r3, #1
 80012c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bf0c      	ite	eq
 80012c8:	2301      	moveq	r3, #1
 80012ca:	2300      	movne	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	e012      	b.n	80012f6 <HAL_I2C_Init+0x18e>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1e58      	subs	r0, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6859      	ldr	r1, [r3, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	0099      	lsls	r1, r3, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e6:	3301      	adds	r3, #1
 80012e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf0c      	ite	eq
 80012f0:	2301      	moveq	r3, #1
 80012f2:	2300      	movne	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_I2C_Init+0x196>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e022      	b.n	8001344 <HAL_I2C_Init+0x1dc>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10e      	bne.n	8001324 <HAL_I2C_Init+0x1bc>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1e58      	subs	r0, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6859      	ldr	r1, [r3, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	440b      	add	r3, r1
 8001314:	fbb0 f3f3 	udiv	r3, r0, r3
 8001318:	3301      	adds	r3, #1
 800131a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800131e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001322:	e00f      	b.n	8001344 <HAL_I2C_Init+0x1dc>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	1e58      	subs	r0, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6859      	ldr	r1, [r3, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	0099      	lsls	r1, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	fbb0 f3f3 	udiv	r3, r0, r3
 800133a:	3301      	adds	r3, #1
 800133c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001340:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	6809      	ldr	r1, [r1, #0]
 8001348:	4313      	orrs	r3, r2
 800134a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69da      	ldr	r2, [r3, #28]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001372:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6911      	ldr	r1, [r2, #16]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68d2      	ldr	r2, [r2, #12]
 800137e:	4311      	orrs	r1, r2
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	6812      	ldr	r2, [r2, #0]
 8001384:	430b      	orrs	r3, r1
 8001386:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0201 	orr.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2220      	movs	r2, #32
 80013be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	000186a0 	.word	0x000186a0
 80013e0:	001e847f 	.word	0x001e847f
 80013e4:	003d08ff 	.word	0x003d08ff
 80013e8:	431bde83 	.word	0x431bde83
 80013ec:	10624dd3 	.word	0x10624dd3

080013f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b08b      	sub	sp, #44	; 0x2c
 80013f4:	af06      	add	r7, sp, #24
 80013f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e0f1      	b.n	80015e6 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff f8f6 	bl	8000608 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2203      	movs	r2, #3
 8001420:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f000 fda3 	bl	8001f74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	687e      	ldr	r6, [r7, #4]
 8001436:	466d      	mov	r5, sp
 8001438:	f106 0410 	add.w	r4, r6, #16
 800143c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	602b      	str	r3, [r5, #0]
 8001444:	1d33      	adds	r3, r6, #4
 8001446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001448:	6838      	ldr	r0, [r7, #0]
 800144a:	f000 fd83 	bl	8001f54 <USB_CoreInit>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2202      	movs	r2, #2
 8001458:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0c2      	b.n	80015e6 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fd9e 	bl	8001fa8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e040      	b.n	80014f4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	3301      	adds	r3, #1
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	440b      	add	r3, r1
 80014ac:	3303      	adds	r3, #3
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	3338      	adds	r3, #56	; 0x38
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	333c      	adds	r3, #60	; 0x3c
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	3340      	adds	r3, #64	; 0x40
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	3301      	adds	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d3b9      	bcc.n	8001472 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]
 8001502:	e044      	b.n	800158e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	440b      	add	r3, r1
 8001528:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	440b      	add	r3, r1
 8001554:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	3301      	adds	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	d3b5      	bcc.n	8001504 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	687e      	ldr	r6, [r7, #4]
 80015a0:	466d      	mov	r5, sp
 80015a2:	f106 0410 	add.w	r4, r6, #16
 80015a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	602b      	str	r3, [r5, #0]
 80015ae:	1d33      	adds	r3, r6, #4
 80015b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	f000 fd04 	bl	8001fc0 <USB_DevInit>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2202      	movs	r2, #2
 80015c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00d      	b.n	80015e6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fd0e 	bl	8002000 <USB_DevDisconnect>

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080015f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e272      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8087 	beq.w	800171e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001610:	4b92      	ldr	r3, [pc, #584]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b04      	cmp	r3, #4
 800161a:	d00c      	beq.n	8001636 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800161c:	4b8f      	ldr	r3, [pc, #572]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b08      	cmp	r3, #8
 8001626:	d112      	bne.n	800164e <HAL_RCC_OscConfig+0x5e>
 8001628:	4b8c      	ldr	r3, [pc, #560]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001634:	d10b      	bne.n	800164e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001636:	4b89      	ldr	r3, [pc, #548]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d06c      	beq.n	800171c <HAL_RCC_OscConfig+0x12c>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d168      	bne.n	800171c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e24c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x76>
 8001658:	4b80      	ldr	r3, [pc, #512]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a7f      	ldr	r2, [pc, #508]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 800165e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	e02e      	b.n	80016c4 <HAL_RCC_OscConfig+0xd4>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x98>
 800166e:	4b7b      	ldr	r3, [pc, #492]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a7a      	ldr	r2, [pc, #488]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b78      	ldr	r3, [pc, #480]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a77      	ldr	r2, [pc, #476]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e01d      	b.n	80016c4 <HAL_RCC_OscConfig+0xd4>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0xbc>
 8001692:	4b72      	ldr	r3, [pc, #456]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a71      	ldr	r2, [pc, #452]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b6f      	ldr	r3, [pc, #444]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6e      	ldr	r2, [pc, #440]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0xd4>
 80016ac:	4b6b      	ldr	r3, [pc, #428]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6a      	ldr	r2, [pc, #424]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b68      	ldr	r3, [pc, #416]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a67      	ldr	r2, [pc, #412]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff f86e 	bl	80007ac <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff f86a 	bl	80007ac <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e200      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b5d      	ldr	r3, [pc, #372]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0xe4>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff f85a 	bl	80007ac <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff f856 	bl	80007ac <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1ec      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	4b53      	ldr	r3, [pc, #332]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x10c>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d063      	beq.n	80017f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800172a:	4b4c      	ldr	r3, [pc, #304]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00b      	beq.n	800174e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001736:	4b49      	ldr	r3, [pc, #292]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b08      	cmp	r3, #8
 8001740:	d11c      	bne.n	800177c <HAL_RCC_OscConfig+0x18c>
 8001742:	4b46      	ldr	r3, [pc, #280]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d116      	bne.n	800177c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	4b43      	ldr	r3, [pc, #268]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_RCC_OscConfig+0x176>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e1c0      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b3d      	ldr	r3, [pc, #244]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4939      	ldr	r1, [pc, #228]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	e03a      	b.n	80017f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001784:	4b36      	ldr	r3, [pc, #216]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff f80f 	bl	80007ac <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff f80b 	bl	80007ac <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e1a1      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	4b2d      	ldr	r3, [pc, #180]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4927      	ldr	r1, [pc, #156]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <HAL_RCC_OscConfig+0x270>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7fe ffee 	bl	80007ac <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d4:	f7fe ffea 	bl	80007ac <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e180      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d03a      	beq.n	8001874 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d019      	beq.n	800183a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_RCC_OscConfig+0x274>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7fe ffce 	bl	80007ac <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7fe ffca 	bl	80007ac <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e160      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001832:	2001      	movs	r0, #1
 8001834:	f000 faba 	bl	8001dac <RCC_Delay>
 8001838:	e01c      	b.n	8001874 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_RCC_OscConfig+0x274>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001840:	f7fe ffb4 	bl	80007ac <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001846:	e00f      	b.n	8001868 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001848:	f7fe ffb0 	bl	80007ac <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d908      	bls.n	8001868 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e146      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	42420000 	.word	0x42420000
 8001864:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001868:	4b92      	ldr	r3, [pc, #584]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e9      	bne.n	8001848 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80a6 	beq.w	80019ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001886:	4b8b      	ldr	r3, [pc, #556]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10d      	bne.n	80018ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a87      	ldr	r2, [pc, #540]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	61d3      	str	r3, [r2, #28]
 800189e:	4b85      	ldr	r3, [pc, #532]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018aa:	2301      	movs	r3, #1
 80018ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ae:	4b82      	ldr	r3, [pc, #520]	; (8001ab8 <HAL_RCC_OscConfig+0x4c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d118      	bne.n	80018ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ba:	4b7f      	ldr	r3, [pc, #508]	; (8001ab8 <HAL_RCC_OscConfig+0x4c8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a7e      	ldr	r2, [pc, #504]	; (8001ab8 <HAL_RCC_OscConfig+0x4c8>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c6:	f7fe ff71 	bl	80007ac <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ce:	f7fe ff6d 	bl	80007ac <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b64      	cmp	r3, #100	; 0x64
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e103      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	4b75      	ldr	r3, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x4c8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x312>
 80018f4:	4b6f      	ldr	r3, [pc, #444]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6213      	str	r3, [r2, #32]
 8001900:	e02d      	b.n	800195e <HAL_RCC_OscConfig+0x36e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x334>
 800190a:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4a69      	ldr	r2, [pc, #420]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	f023 0301 	bic.w	r3, r3, #1
 8001914:	6213      	str	r3, [r2, #32]
 8001916:	4b67      	ldr	r3, [pc, #412]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	4a66      	ldr	r2, [pc, #408]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	f023 0304 	bic.w	r3, r3, #4
 8001920:	6213      	str	r3, [r2, #32]
 8001922:	e01c      	b.n	800195e <HAL_RCC_OscConfig+0x36e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b05      	cmp	r3, #5
 800192a:	d10c      	bne.n	8001946 <HAL_RCC_OscConfig+0x356>
 800192c:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4a60      	ldr	r2, [pc, #384]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6213      	str	r3, [r2, #32]
 8001938:	4b5e      	ldr	r3, [pc, #376]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4a5d      	ldr	r2, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6213      	str	r3, [r2, #32]
 8001944:	e00b      	b.n	800195e <HAL_RCC_OscConfig+0x36e>
 8001946:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a5a      	ldr	r2, [pc, #360]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	6213      	str	r3, [r2, #32]
 8001952:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4a57      	ldr	r2, [pc, #348]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d015      	beq.n	8001992 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001966:	f7fe ff21 	bl	80007ac <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7fe ff1d 	bl	80007ac <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	; 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0b1      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0ee      	beq.n	800196e <HAL_RCC_OscConfig+0x37e>
 8001990:	e014      	b.n	80019bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7fe ff0b 	bl	80007ac <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7fe ff07 	bl	80007ac <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e09b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b0:	4b40      	ldr	r3, [pc, #256]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1ee      	bne.n	800199a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d105      	bne.n	80019ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c2:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	4a3b      	ldr	r2, [pc, #236]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8087 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d8:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d061      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d146      	bne.n	8001a7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	4b33      	ldr	r3, [pc, #204]	; (8001abc <HAL_RCC_OscConfig+0x4cc>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7fe fedb 	bl	80007ac <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fa:	f7fe fed7 	bl	80007ac <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e06d      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0c:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a20:	d108      	bne.n	8001a34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	4921      	ldr	r1, [pc, #132]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a19      	ldr	r1, [r3, #32]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	430b      	orrs	r3, r1
 8001a46:	491b      	ldr	r1, [pc, #108]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_RCC_OscConfig+0x4cc>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7fe feab 	bl	80007ac <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5a:	f7fe fea7 	bl	80007ac <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e03d      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x46a>
 8001a78:	e035      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_RCC_OscConfig+0x4cc>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7fe fe94 	bl	80007ac <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a88:	f7fe fe90 	bl	80007ac <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e026      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x498>
 8001aa6:	e01e      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e019      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_OscConfig+0x500>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0d0      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d910      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 0207 	bic.w	r2, r3, #7
 8001b1e:	4965      	ldr	r1, [pc, #404]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0b8      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b68:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	494d      	ldr	r1, [pc, #308]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d040      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d115      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e07f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e073      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e06b      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4936      	ldr	r1, [pc, #216]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be4:	f7fe fde2 	bl	80007ac <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7fe fdde 	bl	80007ac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e053      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 020c 	and.w	r2, r3, #12
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1eb      	bne.n	8001bec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d210      	bcs.n	8001c44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 0207 	bic.w	r2, r3, #7
 8001c2a:	4922      	ldr	r1, [pc, #136]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e032      	b.n	8001caa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4916      	ldr	r1, [pc, #88]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c82:	f000 f821 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	490a      	ldr	r1, [pc, #40]	; (8001cbc <HAL_RCC_ClockConfig+0x1c8>)
 8001c94:	5ccb      	ldrb	r3, [r1, r3]
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8001c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fd40 	bl	8000728 <HAL_InitTick>

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	08002098 	.word	0x08002098
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d002      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d003      	beq.n	8001cfe <HAL_RCC_GetSysClockFreq+0x36>
 8001cf6:	e027      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cfa:	613b      	str	r3, [r7, #16]
      break;
 8001cfc:	e027      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	0c9b      	lsrs	r3, r3, #18
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d08:	5cd3      	ldrb	r3, [r2, r3]
 8001d0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	0c5b      	lsrs	r3, r3, #17
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d22:	5cd3      	ldrb	r3, [r2, r3]
 8001d24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d2a:	fb03 f202 	mul.w	r2, r3, r2
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e004      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	613b      	str	r3, [r7, #16]
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d4a:	613b      	str	r3, [r7, #16]
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	693b      	ldr	r3, [r7, #16]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	007a1200 	.word	0x007a1200
 8001d64:	080020b0 	.word	0x080020b0
 8001d68:	080020c0 	.word	0x080020c0
 8001d6c:	003d0900 	.word	0x003d0900

08001d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d74:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	20000000 	.word	0x20000000

08001d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d88:	f7ff fff2 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4903      	ldr	r1, [pc, #12]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	080020a8 	.word	0x080020a8

08001dac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <RCC_Delay+0x34>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <RCC_Delay+0x38>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0a5b      	lsrs	r3, r3, #9
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc8:	bf00      	nop
  }
  while (Delay --);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	60fa      	str	r2, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f9      	bne.n	8001dc8 <RCC_Delay+0x1c>
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	20000000 	.word	0x20000000
 8001de4:	10624dd3 	.word	0x10624dd3

08001de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d07d      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e08:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10d      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	4a4b      	ldr	r2, [pc, #300]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	61d3      	str	r3, [r2, #28]
 8001e20:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d118      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3c:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a42      	ldr	r2, [pc, #264]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e48:	f7fe fcb0 	bl	80007ac <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4e:	e008      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e50:	f7fe fcac 	bl	80007ac <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e06d      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d02e      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d027      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e9c:	4b2c      	ldr	r3, [pc, #176]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ea2:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d014      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fc7b 	bl	80007ac <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7fe fc77 	bl	80007ac <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e036      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ee      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4917      	ldr	r1, [pc, #92]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	490b      	ldr	r1, [pc, #44]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	4904      	ldr	r1, [pc, #16]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	42420440 	.word	0x42420440

08001f54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001f54:	b084      	sub	sp, #16
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	f107 0014 	add.w	r0, r7, #20
 8001f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	b004      	add	sp, #16
 8001f72:	4770      	bx	lr

08001f74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8001f7c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8001f80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4013      	ands	r3, r2
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	f107 0014 	add.w	r0, r7, #20
 8001fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	b004      	add	sp, #16
 8001ffe:	4770      	bx	lr

08002000 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <memset>:
 8002014:	4603      	mov	r3, r0
 8002016:	4402      	add	r2, r0
 8002018:	4293      	cmp	r3, r2
 800201a:	d100      	bne.n	800201e <memset+0xa>
 800201c:	4770      	bx	lr
 800201e:	f803 1b01 	strb.w	r1, [r3], #1
 8002022:	e7f9      	b.n	8002018 <memset+0x4>

08002024 <__libc_init_array>:
 8002024:	b570      	push	{r4, r5, r6, lr}
 8002026:	2600      	movs	r6, #0
 8002028:	4d0c      	ldr	r5, [pc, #48]	; (800205c <__libc_init_array+0x38>)
 800202a:	4c0d      	ldr	r4, [pc, #52]	; (8002060 <__libc_init_array+0x3c>)
 800202c:	1b64      	subs	r4, r4, r5
 800202e:	10a4      	asrs	r4, r4, #2
 8002030:	42a6      	cmp	r6, r4
 8002032:	d109      	bne.n	8002048 <__libc_init_array+0x24>
 8002034:	f000 f81a 	bl	800206c <_init>
 8002038:	2600      	movs	r6, #0
 800203a:	4d0a      	ldr	r5, [pc, #40]	; (8002064 <__libc_init_array+0x40>)
 800203c:	4c0a      	ldr	r4, [pc, #40]	; (8002068 <__libc_init_array+0x44>)
 800203e:	1b64      	subs	r4, r4, r5
 8002040:	10a4      	asrs	r4, r4, #2
 8002042:	42a6      	cmp	r6, r4
 8002044:	d105      	bne.n	8002052 <__libc_init_array+0x2e>
 8002046:	bd70      	pop	{r4, r5, r6, pc}
 8002048:	f855 3b04 	ldr.w	r3, [r5], #4
 800204c:	4798      	blx	r3
 800204e:	3601      	adds	r6, #1
 8002050:	e7ee      	b.n	8002030 <__libc_init_array+0xc>
 8002052:	f855 3b04 	ldr.w	r3, [r5], #4
 8002056:	4798      	blx	r3
 8002058:	3601      	adds	r6, #1
 800205a:	e7f2      	b.n	8002042 <__libc_init_array+0x1e>
 800205c:	080020c4 	.word	0x080020c4
 8002060:	080020c4 	.word	0x080020c4
 8002064:	080020c4 	.word	0x080020c4
 8002068:	080020c8 	.word	0x080020c8

0800206c <_init>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr

08002078 <_fini>:
 8002078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207a:	bf00      	nop
 800207c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207e:	bc08      	pop	{r3}
 8002080:	469e      	mov	lr, r3
 8002082:	4770      	bx	lr
