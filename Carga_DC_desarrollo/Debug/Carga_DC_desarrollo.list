
Carga_DC_desarrollo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005efc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062f8  080062f8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080062f8  080062f8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062f8  080062f8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062fc  080062fc  000162fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  2000007c  0800637c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  0800637c  00020688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012dbd  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b29  00000000  00000000  00032ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  000359d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eaa  00000000  00000000  00036ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019780  00000000  00000000  00037b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001635f  00000000  00000000  000512ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094b30  00000000  00000000  00067629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055dc  00000000  00000000  000fc15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00101738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ff0 	.word	0x08005ff0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08005ff0 	.word	0x08005ff0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_I2C_cmd>:
#define SLAVE_ADDRESS_LCD  0x4e	//0x4E // change this according to ur setup 0x7e

/* Envia comando por LCD ---------------------------------------*/

void LCD_I2C_cmd(char cmd)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f023 030f 	bic.w	r3, r3, #15
 800016c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	011b      	lsls	r3, r3, #4
 8000172:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	f043 030c 	orr.w	r3, r3, #12
 800017a:	b2db      	uxtb	r3, r3
 800017c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800017e:	7bfb      	ldrb	r3, [r7, #15]
 8000180:	f043 0308 	orr.w	r3, r3, #8
 8000184:	b2db      	uxtb	r3, r3
 8000186:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000188:	7bbb      	ldrb	r3, [r7, #14]
 800018a:	f043 030c 	orr.w	r3, r3, #12
 800018e:	b2db      	uxtb	r3, r3
 8000190:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000192:	7bbb      	ldrb	r3, [r7, #14]
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	b2db      	uxtb	r3, r3
 800019a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800019c:	f107 0208 	add.w	r2, r7, #8
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	9300      	str	r3, [sp, #0]
 80001a4:	2304      	movs	r3, #4
 80001a6:	214e      	movs	r1, #78	; 0x4e
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <LCD_I2C_cmd+0x60>)
 80001aa:	f002 fd7f 	bl	8002cac <HAL_I2C_Master_Transmit>
	//while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
	HAL_Delay(1);
 80001ae:	2001      	movs	r0, #1
 80001b0:	f001 fc48 	bl	8001a44 <HAL_Delay>
}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	200000f8 	.word	0x200000f8

080001c0 <LCD_I2C_char>:

/* Envia dato por LCD ------------------------------------------*/

void LCD_I2C_char(char data)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	f023 030f 	bic.w	r3, r3, #15
 80001d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	011b      	lsls	r3, r3, #4
 80001d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80001ec:	7bbb      	ldrb	r3, [r7, #14]
 80001ee:	f043 030d 	orr.w	r3, r3, #13
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80001f6:	7bbb      	ldrb	r3, [r7, #14]
 80001f8:	f043 0309 	orr.w	r3, r3, #9
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000200:	f107 0208 	add.w	r2, r7, #8
 8000204:	2364      	movs	r3, #100	; 0x64
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2304      	movs	r3, #4
 800020a:	214e      	movs	r1, #78	; 0x4e
 800020c:	4807      	ldr	r0, [pc, #28]	; (800022c <LCD_I2C_char+0x6c>)
 800020e:	f002 fd4d 	bl	8002cac <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000212:	bf00      	nop
 8000214:	4805      	ldr	r0, [pc, #20]	; (800022c <LCD_I2C_char+0x6c>)
 8000216:	f003 f8b3 	bl	8003380 <HAL_I2C_GetState>
 800021a:	4603      	mov	r3, r0
 800021c:	2b20      	cmp	r3, #32
 800021e:	d1f9      	bne.n	8000214 <LCD_I2C_char+0x54>
		//HAL_Delay(1);
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	200000f8 	.word	0x200000f8

08000230 <LCD_I2C_init>:

/* Inicializa LCD -----------------------------------------------*/

void LCD_I2C_init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	LCD_I2C_cmd(0x02);
 8000234:	2002      	movs	r0, #2
 8000236:	f7ff ff91 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x28);
 800023a:	2028      	movs	r0, #40	; 0x28
 800023c:	f7ff ff8e 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x0c);
 8000240:	200c      	movs	r0, #12
 8000242:	f7ff ff8b 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x80);
 8000246:	2080      	movs	r0, #128	; 0x80
 8000248:	f7ff ff88 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_CLEAR);
 800024c:	2001      	movs	r0, #1
 800024e:	f7ff ff85 	bl	800015c <LCD_I2C_cmd>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}

08000256 <LCD_I2C_write_text>:

/* Envia cadena de caracteres al LCD -----------------------------*/

void LCD_I2C_write_text(char *str)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	b082      	sub	sp, #8
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
	while (*str) LCD_I2C_char(*str++);
 800025e:	e006      	b.n	800026e <LCD_I2C_write_text+0x18>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	1c5a      	adds	r2, r3, #1
 8000264:	607a      	str	r2, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ffa9 	bl	80001c0 <LCD_I2C_char>
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d1f4      	bne.n	8000260 <LCD_I2C_write_text+0xa>
}
 8000276:	bf00      	nop
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <keypad_init>:
GPIO_TypeDef* COL_3_Port = GPIOB;
GPIO_TypeDef* COL_4_Port = GPIOB;


void keypad_init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
  // Configure GPIO pins for keypad matrix
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	463b      	mov	r3, r7
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = ROW_1_Pin | ROW_2_Pin | ROW_3_Pin | ROW_4_Pin;
 8000292:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000296:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000298:	2300      	movs	r3, #0
 800029a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800029c:	2301      	movs	r3, #1
 800029e:	60bb      	str	r3, [r7, #8]
  	  HAL_GPIO_Init(ROW_1_Port, &GPIO_InitStruct);
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <keypad_init+0xa8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	463a      	mov	r2, r7
 80002a6:	4611      	mov	r1, r2
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 f9d7 	bl	800265c <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_2_Port, &GPIO_InitStruct);
 80002ae:	4b1f      	ldr	r3, [pc, #124]	; (800032c <keypad_init+0xac>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	463a      	mov	r2, r7
 80002b4:	4611      	mov	r1, r2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 f9d0 	bl	800265c <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_3_Port, &GPIO_InitStruct);
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <keypad_init+0xb0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	463a      	mov	r2, r7
 80002c2:	4611      	mov	r1, r2
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 f9c9 	bl	800265c <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_4_Port, &GPIO_InitStruct);
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <keypad_init+0xb4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	463a      	mov	r2, r7
 80002d0:	4611      	mov	r1, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 f9c2 	bl	800265c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = COL_1_Pin | COL_2_Pin | COL_3_Pin | COL_4_Pin;
 80002d8:	f640 4303 	movw	r3, #3075	; 0xc03
 80002dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	2301      	movs	r3, #1
 80002e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e2:	2302      	movs	r3, #2
 80002e4:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(COL_1_Port, &GPIO_InitStruct);
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <keypad_init+0xb8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	463a      	mov	r2, r7
 80002ec:	4611      	mov	r1, r2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 f9b4 	bl	800265c <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_2_Port, &GPIO_InitStruct);
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <keypad_init+0xbc>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	463a      	mov	r2, r7
 80002fa:	4611      	mov	r1, r2
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 f9ad 	bl	800265c <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_3_Port, &GPIO_InitStruct);
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <keypad_init+0xc0>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	463a      	mov	r2, r7
 8000308:	4611      	mov	r1, r2
 800030a:	4618      	mov	r0, r3
 800030c:	f002 f9a6 	bl	800265c <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_4_Port, &GPIO_InitStruct);
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <keypad_init+0xc4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	463a      	mov	r2, r7
 8000316:	4611      	mov	r1, r2
 8000318:	4618      	mov	r0, r3
 800031a:	f002 f99f 	bl	800265c <HAL_GPIO_Init>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000000 	.word	0x20000000
 800032c:	20000004 	.word	0x20000004
 8000330:	20000008 	.word	0x20000008
 8000334:	2000000c 	.word	0x2000000c
 8000338:	20000010 	.word	0x20000010
 800033c:	20000014 	.word	0x20000014
 8000340:	20000018 	.word	0x20000018
 8000344:	2000001c 	.word	0x2000001c

08000348 <keypad_scan>:
char keypad_scan(void)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b087      	sub	sp, #28
 800034c:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'C'},
 800034e:	4b6f      	ldr	r3, [pc, #444]	; (800050c <keypad_scan+0x1c4>)
 8000350:	1d3c      	adds	r4, r7, #4
 8000352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'V'},
                     {'7', '8', '9', 'R'},
                     {'D', '0', 'K', 'P'}};

  for(int i = 0; i < 4; i++)
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	e0cc      	b.n	80004f8 <keypad_scan+0x1b0>
  {
    // Set current column as output and low
    switch(i)
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	2b03      	cmp	r3, #3
 8000362:	f200 8087 	bhi.w	8000474 <keypad_scan+0x12c>
 8000366:	a201      	add	r2, pc, #4	; (adr r2, 800036c <keypad_scan+0x24>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	0800037d 	.word	0x0800037d
 8000370:	080003bb 	.word	0x080003bb
 8000374:	080003f9 	.word	0x080003f9
 8000378:	08000437 	.word	0x08000437
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 800037c:	4b64      	ldr	r3, [pc, #400]	; (8000510 <keypad_scan+0x1c8>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	4618      	mov	r0, r3
 8000386:	f002 fb04 	bl	8002992 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 800038a:	4b62      	ldr	r3, [pc, #392]	; (8000514 <keypad_scan+0x1cc>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2201      	movs	r2, #1
 8000390:	2102      	movs	r1, #2
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fafd 	bl	8002992 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8000398:	4b5f      	ldr	r3, [pc, #380]	; (8000518 <keypad_scan+0x1d0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 faf5 	bl	8002992 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80003a8:	4b5c      	ldr	r3, [pc, #368]	; (800051c <keypad_scan+0x1d4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 faed 	bl	8002992 <HAL_GPIO_WritePin>
        break;
 80003b8:	e05c      	b.n	8000474 <keypad_scan+0x12c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003ba:	4b55      	ldr	r3, [pc, #340]	; (8000510 <keypad_scan+0x1c8>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2201      	movs	r2, #1
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fae5 	bl	8002992 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 80003c8:	4b52      	ldr	r3, [pc, #328]	; (8000514 <keypad_scan+0x1cc>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2200      	movs	r2, #0
 80003ce:	2102      	movs	r1, #2
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 fade 	bl	8002992 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80003d6:	4b50      	ldr	r3, [pc, #320]	; (8000518 <keypad_scan+0x1d0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 fad6 	bl	8002992 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80003e6:	4b4d      	ldr	r3, [pc, #308]	; (800051c <keypad_scan+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f0:	4618      	mov	r0, r3
 80003f2:	f002 face 	bl	8002992 <HAL_GPIO_WritePin>
        break;
 80003f6:	e03d      	b.n	8000474 <keypad_scan+0x12c>

      case 2:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003f8:	4b45      	ldr	r3, [pc, #276]	; (8000510 <keypad_scan+0x1c8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2201      	movs	r2, #1
 80003fe:	2101      	movs	r1, #1
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fac6 	bl	8002992 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8000406:	4b43      	ldr	r3, [pc, #268]	; (8000514 <keypad_scan+0x1cc>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2201      	movs	r2, #1
 800040c:	2102      	movs	r1, #2
 800040e:	4618      	mov	r0, r3
 8000410:	f002 fabf 	bl	8002992 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 8000414:	4b40      	ldr	r3, [pc, #256]	; (8000518 <keypad_scan+0x1d0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041e:	4618      	mov	r0, r3
 8000420:	f002 fab7 	bl	8002992 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8000424:	4b3d      	ldr	r3, [pc, #244]	; (800051c <keypad_scan+0x1d4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2201      	movs	r2, #1
 800042a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800042e:	4618      	mov	r0, r3
 8000430:	f002 faaf 	bl	8002992 <HAL_GPIO_WritePin>
		break;
 8000434:	e01e      	b.n	8000474 <keypad_scan+0x12c>

	  case 3:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8000436:	4b36      	ldr	r3, [pc, #216]	; (8000510 <keypad_scan+0x1c8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2201      	movs	r2, #1
 800043c:	2101      	movs	r1, #1
 800043e:	4618      	mov	r0, r3
 8000440:	f002 faa7 	bl	8002992 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8000444:	4b33      	ldr	r3, [pc, #204]	; (8000514 <keypad_scan+0x1cc>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2201      	movs	r2, #1
 800044a:	2102      	movs	r1, #2
 800044c:	4618      	mov	r0, r3
 800044e:	f002 faa0 	bl	8002992 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8000452:	4b31      	ldr	r3, [pc, #196]	; (8000518 <keypad_scan+0x1d0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2201      	movs	r2, #1
 8000458:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045c:	4618      	mov	r0, r3
 800045e:	f002 fa98 	bl	8002992 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 8000462:	4b2e      	ldr	r3, [pc, #184]	; (800051c <keypad_scan+0x1d4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800046c:	4618      	mov	r0, r3
 800046e:	f002 fa90 	bl	8002992 <HAL_GPIO_WritePin>
		break;
 8000472:	bf00      	nop
    }
// Read current rows
	if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 8000474:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <keypad_scan+0x1d8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800047c:	4618      	mov	r0, r3
 800047e:	f002 fa71 	bl	8002964 <HAL_GPIO_ReadPin>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d104      	bne.n	8000492 <keypad_scan+0x14a>
	  return keys[0][i];
 8000488:	1d3a      	adds	r2, r7, #4
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	4413      	add	r3, r2
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	e037      	b.n	8000502 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 8000492:	4b24      	ldr	r3, [pc, #144]	; (8000524 <keypad_scan+0x1dc>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049a:	4618      	mov	r0, r3
 800049c:	f002 fa62 	bl	8002964 <HAL_GPIO_ReadPin>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d105      	bne.n	80004b2 <keypad_scan+0x16a>
	  return keys[1][i];
 80004a6:	f107 0208 	add.w	r2, r7, #8
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	4413      	add	r3, r2
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	e027      	b.n	8000502 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <keypad_scan+0x1e0>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 fa52 	bl	8002964 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d105      	bne.n	80004d2 <keypad_scan+0x18a>
	  return keys[2][i];
 80004c6:	f107 020c 	add.w	r2, r7, #12
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	4413      	add	r3, r2
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	e017      	b.n	8000502 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <keypad_scan+0x1e4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fa42 	bl	8002964 <HAL_GPIO_ReadPin>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d105      	bne.n	80004f2 <keypad_scan+0x1aa>
	  return keys[3][i];
 80004e6:	f107 0210 	add.w	r2, r7, #16
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	e007      	b.n	8000502 <keypad_scan+0x1ba>
  for(int i = 0; i < 4; i++)
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	3301      	adds	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	f77f af2f 	ble.w	800035e <keypad_scan+0x16>
  }
return 0; // No key pressed
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	371c      	adds	r7, #28
 8000506:	46bd      	mov	sp, r7
 8000508:	bd90      	pop	{r4, r7, pc}
 800050a:	bf00      	nop
 800050c:	08006008 	.word	0x08006008
 8000510:	20000010 	.word	0x20000010
 8000514:	20000014 	.word	0x20000014
 8000518:	20000018 	.word	0x20000018
 800051c:	2000001c 	.word	0x2000001c
 8000520:	20000000 	.word	0x20000000
 8000524:	20000004 	.word	0x20000004
 8000528:	20000008 	.word	0x20000008
 800052c:	2000000c 	.word	0x2000000c

08000530 <tipo_dato>:


uint8_t tipo_dato(char input){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if(input=='C'||input=='V'||input=='R'||input=='P')
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b43      	cmp	r3, #67	; 0x43
 800053e:	d008      	beq.n	8000552 <tipo_dato+0x22>
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b56      	cmp	r3, #86	; 0x56
 8000544:	d005      	beq.n	8000552 <tipo_dato+0x22>
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b52      	cmp	r3, #82	; 0x52
 800054a:	d002      	beq.n	8000552 <tipo_dato+0x22>
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b50      	cmp	r3, #80	; 0x50
 8000550:	d101      	bne.n	8000556 <tipo_dato+0x26>
		return 2;
 8000552:	2302      	movs	r3, #2
 8000554:	e012      	b.n	800057c <tipo_dato+0x4c>
	if(input=='K')
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b4b      	cmp	r3, #75	; 0x4b
 800055a:	d101      	bne.n	8000560 <tipo_dato+0x30>
		return 3;
 800055c:	2303      	movs	r3, #3
 800055e:	e00d      	b.n	800057c <tipo_dato+0x4c>
	if(input=='D')
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b44      	cmp	r3, #68	; 0x44
 8000564:	d101      	bne.n	800056a <tipo_dato+0x3a>
		return 4;
 8000566:	2304      	movs	r3, #4
 8000568:	e008      	b.n	800057c <tipo_dato+0x4c>
	if(input>='0'&&input<='9')
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b2f      	cmp	r3, #47	; 0x2f
 800056e:	d904      	bls.n	800057a <tipo_dato+0x4a>
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b39      	cmp	r3, #57	; 0x39
 8000574:	d801      	bhi.n	800057a <tipo_dato+0x4a>
		return 1;
 8000576:	2301      	movs	r3, #1
 8000578:	e000      	b.n	800057c <tipo_dato+0x4c>
	else
		return 0;
 800057a:	2300      	movs	r3, #0
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
	...

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f001 f9f7 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f94d 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 fb47 	bl	8000c28 <MX_GPIO_Init>
  MX_ADC1_Init();
 800059a:	f000 f9a7 	bl	80008ec <MX_ADC1_Init>
  MX_I2C1_Init();
 800059e:	f000 fa21 	bl	80009e4 <MX_I2C1_Init>
  MX_USB_PCD_Init();
 80005a2:	f000 fb1f 	bl	8000be4 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80005a6:	f000 fa83 	bl	8000ab0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80005aa:	f000 fa49 	bl	8000a40 <MX_SPI1_Init>
  MX_ADC2_Init();
 80005ae:	f000 f9db 	bl	8000968 <MX_ADC2_Init>
  MX_TIM3_Init();
 80005b2:	f000 facb 	bl	8000b4c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  enviar_spi_dac(0);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 fca6 	bl	8000f08 <enviar_spi_dac>
  keypad_init();
 80005bc:	f7ff fe60 	bl	8000280 <keypad_init>
  HAL_Delay(30);
 80005c0:	201e      	movs	r0, #30
 80005c2:	f001 fa3f 	bl	8001a44 <HAL_Delay>
  LCD_I2C_init();
 80005c6:	f7ff fe33 	bl	8000230 <LCD_I2C_init>

	//esto podria estar encapsulado
  	  LCD_I2C_cmd(LCD_LINEA1);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff fdc6 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   UTN FRP   ");
 80005d0:	488b      	ldr	r0, [pc, #556]	; (8000800 <main+0x278>)
 80005d2:	f7ff fe40 	bl	8000256 <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA2);
 80005d6:	20c0      	movs	r0, #192	; 0xc0
 80005d8:	f7ff fdc0 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   Carga DC   ");
 80005dc:	4889      	ldr	r0, [pc, #548]	; (8000804 <main+0x27c>)
 80005de:	f7ff fe3a 	bl	8000256 <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA4);
 80005e2:	20d4      	movs	r0, #212	; 0xd4
 80005e4:	f7ff fdba 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   A.Gotte/A.Jose   ");
 80005e8:	4887      	ldr	r0, [pc, #540]	; (8000808 <main+0x280>)
 80005ea:	f7ff fe34 	bl	8000256 <LCD_I2C_write_text>
	  HAL_Delay(4000);
 80005ee:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80005f2:	f001 fa27 	bl	8001a44 <HAL_Delay>
	  LCD_I2C_cmd(LCD_CLEAR);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff fdb0 	bl	800015c <LCD_I2C_cmd>


  HAL_TIM_Base_Start_IT(&htim2);
 80005fc:	4883      	ldr	r0, [pc, #524]	; (800080c <main+0x284>)
 80005fe:	f004 fb97 	bl	8004d30 <HAL_TIM_Base_Start_IT>

  //HAL_ADC_Start_DMA(&hadc1, input_adc, 2);//cuelga el programa
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000602:	4883      	ldr	r0, [pc, #524]	; (8000810 <main+0x288>)
 8000604:	f001 fe6e 	bl	80022e4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8000608:	4882      	ldr	r0, [pc, #520]	; (8000814 <main+0x28c>)
 800060a:	f001 fe6b 	bl	80022e4 <HAL_ADCEx_Calibration_Start>



	//se deberia hacer un POST

  char modo_carga = 'C';
 800060e:	2343      	movs	r3, #67	; 0x43
 8000610:	73fb      	strb	r3, [r7, #15]
  char input_valor[5]="";
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	713b      	strb	r3, [r7, #4]
  //char buffer_val[20]="val:  NNNN [utm]";

  uint8_t cont_digitos_input_val = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	73bb      	strb	r3, [r7, #14]
  uint8_t flag_update_display = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	737b      	strb	r3, [r7, #13]
  uint16_t control_spi = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	817b      	strh	r3, [r7, #10]
  uint16_t set_point = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	813b      	strh	r3, [r7, #8]
  uint16_t temperatura_sensor = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	80fb      	strh	r3, [r7, #6]
  enviar_spi_dac(control_spi);
 800062e:	897b      	ldrh	r3, [r7, #10]
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fc69 	bl	8000f08 <enviar_spi_dac>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(control_spi!=0){//set del dac en cero
 8000636:	897b      	ldrh	r3, [r7, #10]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d005      	beq.n	8000648 <main+0xc0>
		  control_spi=0;
 800063c:	2300      	movs	r3, #0
 800063e:	817b      	strh	r3, [r7, #10]
		  enviar_spi_dac(control_spi);
 8000640:	897b      	ldrh	r3, [r7, #10]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fc60 	bl	8000f08 <enviar_spi_dac>
	  }

	  if(flag_update_display_1_seg){//update display modo stand by
 8000648:	4b73      	ldr	r3, [pc, #460]	; (8000818 <main+0x290>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d01a      	beq.n	8000686 <main+0xfe>

		  HAL_ADC_Start(&hadc1);
 8000650:	486f      	ldr	r0, [pc, #444]	; (8000810 <main+0x288>)
 8000652:	f001 faf3 	bl	8001c3c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 5);
 8000656:	2105      	movs	r1, #5
 8000658:	486d      	ldr	r0, [pc, #436]	; (8000810 <main+0x288>)
 800065a:	f001 fb9d 	bl	8001d98 <HAL_ADC_PollForConversion>
		  input_adc[0]=HAL_ADC_GetValue(&hadc1);
 800065e:	486c      	ldr	r0, [pc, #432]	; (8000810 <main+0x288>)
 8000660:	f001 fca0 	bl	8001fa4 <HAL_ADC_GetValue>
 8000664:	4603      	mov	r3, r0
 8000666:	4a6d      	ldr	r2, [pc, #436]	; (800081c <main+0x294>)
 8000668:	6013      	str	r3, [r2, #0]

		  temperatura_sensor=leer_temperatura();
 800066a:	f000 fc1b 	bl	8000ea4 <leer_temperatura>
 800066e:	4603      	mov	r3, r0
 8000670:	80fb      	strh	r3, [r7, #6]

		  //display_update_stat(modo_carga,input_valor,input_adc[0]);
		  display_update_stat(modo_carga,input_valor,input_adc[0]);
 8000672:	4b6a      	ldr	r3, [pc, #424]	; (800081c <main+0x294>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4639      	mov	r1, r7
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fd14 	bl	80010a8 <display_update_stat>
		  flag_update_display_1_seg=0;
 8000680:	4b65      	ldr	r3, [pc, #404]	; (8000818 <main+0x290>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]


		//  enviar_spi_dac(input_adc[0]);
	  }
	  if(tipo_dato(input_keypad)==2){//tipo_dato()=2 si input es C,V,P,R
 8000686:	4b66      	ldr	r3, [pc, #408]	; (8000820 <main+0x298>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff50 	bl	8000530 <tipo_dato>
 8000690:	4603      	mov	r3, r0
 8000692:	2b02      	cmp	r3, #2
 8000694:	d165      	bne.n	8000762 <main+0x1da>
		  //ingresa a la configuracion de modo

		  flag_config=1;
 8000696:	4b63      	ldr	r3, [pc, #396]	; (8000824 <main+0x29c>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]

		  while(flag_config){
 800069c:	e05d      	b.n	800075a <main+0x1d2>
			  if(tipo_dato(input_keypad)==1 && cont_digitos_input_val<4){//tipo_dato()=1 si input es >=0 y <=9
 800069e:	4b60      	ldr	r3, [pc, #384]	; (8000820 <main+0x298>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff44 	bl	8000530 <tipo_dato>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d112      	bne.n	80006d4 <main+0x14c>
 80006ae:	7bbb      	ldrb	r3, [r7, #14]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d80f      	bhi.n	80006d4 <main+0x14c>
				  //input_valor[cont_digitos_input_val]=input_keypad;
				  agregar_digito(input_valor, input_keypad);
 80006b4:	4b5a      	ldr	r3, [pc, #360]	; (8000820 <main+0x298>)
 80006b6:	781a      	ldrb	r2, [r3, #0]
 80006b8:	463b      	mov	r3, r7
 80006ba:	4611      	mov	r1, r2
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fbbf 	bl	8000e40 <agregar_digito>
				  input_keypad=0;
 80006c2:	4b57      	ldr	r3, [pc, #348]	; (8000820 <main+0x298>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
				  cont_digitos_input_val++;
 80006c8:	7bbb      	ldrb	r3, [r7, #14]
 80006ca:	3301      	adds	r3, #1
 80006cc:	73bb      	strb	r3, [r7, #14]
				  flag_update_display=1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	737b      	strb	r3, [r7, #13]
 80006d2:	e037      	b.n	8000744 <main+0x1bc>
			  }
			  else if(input_keypad=='D'&&cont_digitos_input_val>0){
 80006d4:	4b52      	ldr	r3, [pc, #328]	; (8000820 <main+0x298>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b44      	cmp	r3, #68	; 0x44
 80006da:	d10f      	bne.n	80006fc <main+0x174>
 80006dc:	7bbb      	ldrb	r3, [r7, #14]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d00c      	beq.n	80006fc <main+0x174>
				  borrar_ultimo_digito(input_valor);
 80006e2:	463b      	mov	r3, r7
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fbc7 	bl	8000e78 <borrar_ultimo_digito>
				  input_keypad=0;
 80006ea:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <main+0x298>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
				  cont_digitos_input_val--;
 80006f0:	7bbb      	ldrb	r3, [r7, #14]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	73bb      	strb	r3, [r7, #14]
				  flag_update_display=1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	737b      	strb	r3, [r7, #13]
 80006fa:	e023      	b.n	8000744 <main+0x1bc>
			  }
			  else if(input_keypad=='K'){
 80006fc:	4b48      	ldr	r3, [pc, #288]	; (8000820 <main+0x298>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b4b      	cmp	r3, #75	; 0x4b
 8000702:	d10f      	bne.n	8000724 <main+0x19c>
				  input_keypad=0;
 8000704:	4b46      	ldr	r3, [pc, #280]	; (8000820 <main+0x298>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
				  //validar parametro ingresado
				  set_point=atoi(input_valor);
 800070a:	463b      	mov	r3, r7
 800070c:	4618      	mov	r0, r3
 800070e:	f004 ff1d 	bl	800554c <atoi>
 8000712:	4603      	mov	r3, r0
 8000714:	813b      	strh	r3, [r7, #8]
				  flag_config=0;//sale del while y vuelve al super loop
 8000716:	4b43      	ldr	r3, [pc, #268]	; (8000824 <main+0x29c>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
				  flag_update_display_1_seg=1;
 800071c:	4b3e      	ldr	r3, [pc, #248]	; (8000818 <main+0x290>)
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	e00f      	b.n	8000744 <main+0x1bc>
				  //validar parametro ingresado
			  }
			  else if(tipo_dato(input_keypad)==2){
 8000724:	4b3e      	ldr	r3, [pc, #248]	; (8000820 <main+0x298>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff01 	bl	8000530 <tipo_dato>
 800072e:	4603      	mov	r3, r0
 8000730:	2b02      	cmp	r3, #2
 8000732:	d107      	bne.n	8000744 <main+0x1bc>
				  modo_carga=input_keypad;//guardar el modo que se selecciono
 8000734:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <main+0x298>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	73fb      	strb	r3, [r7, #15]
				  input_keypad=0;
 800073a:	4b39      	ldr	r3, [pc, #228]	; (8000820 <main+0x298>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
				  //borrar buffer
				  flag_update_display=1;
 8000740:	2301      	movs	r3, #1
 8000742:	737b      	strb	r3, [r7, #13]
			  }
		  if(flag_update_display){
 8000744:	7b7b      	ldrb	r3, [r7, #13]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d007      	beq.n	800075a <main+0x1d2>
			  display_update_conf(modo_carga,input_valor);
 800074a:	463a      	mov	r2, r7
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fc09 	bl	8000f68 <display_update_conf>
			  flag_update_display=0;
 8000756:	2300      	movs	r3, #0
 8000758:	737b      	strb	r3, [r7, #13]
		  while(flag_config){
 800075a:	4b32      	ldr	r3, [pc, #200]	; (8000824 <main+0x29c>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d19d      	bne.n	800069e <main+0x116>
		  }
		}//fin while config
	  }//fin if config
	  if(flag_on_off){
 8000762:	4b31      	ldr	r3, [pc, #196]	; (8000828 <main+0x2a0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	f43f af65 	beq.w	8000636 <main+0xae>
		  //switch con los cuatro case y los modos de control
		  while(flag_on_off){
 800076c:	e042      	b.n	80007f4 <main+0x26c>
			  if(flag_update_loop_control){
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <main+0x2a4>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d02f      	beq.n	80007d6 <main+0x24e>
				 if(modo_carga=='C'){//quitar el if, la funcion control carga ya cuenta con el case por modo
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	2b43      	cmp	r3, #67	; 0x43
 800077a:	d12c      	bne.n	80007d6 <main+0x24e>
					 HAL_ADC_Start(&hadc1);
 800077c:	4824      	ldr	r0, [pc, #144]	; (8000810 <main+0x288>)
 800077e:	f001 fa5d 	bl	8001c3c <HAL_ADC_Start>
					 HAL_ADC_PollForConversion(&hadc1, 5);
 8000782:	2105      	movs	r1, #5
 8000784:	4822      	ldr	r0, [pc, #136]	; (8000810 <main+0x288>)
 8000786:	f001 fb07 	bl	8001d98 <HAL_ADC_PollForConversion>
					 input_adc[0]=HAL_ADC_GetValue(&hadc1);
 800078a:	4821      	ldr	r0, [pc, #132]	; (8000810 <main+0x288>)
 800078c:	f001 fc0a 	bl	8001fa4 <HAL_ADC_GetValue>
 8000790:	4603      	mov	r3, r0
 8000792:	4a22      	ldr	r2, [pc, #136]	; (800081c <main+0x294>)
 8000794:	6013      	str	r3, [r2, #0]
					 HAL_ADC_Start(&hadc2);
 8000796:	481f      	ldr	r0, [pc, #124]	; (8000814 <main+0x28c>)
 8000798:	f001 fa50 	bl	8001c3c <HAL_ADC_Start>
					 HAL_ADC_PollForConversion(&hadc2, 5);
 800079c:	2105      	movs	r1, #5
 800079e:	481d      	ldr	r0, [pc, #116]	; (8000814 <main+0x28c>)
 80007a0:	f001 fafa 	bl	8001d98 <HAL_ADC_PollForConversion>
					 input_adc[1]=HAL_ADC_GetValue(&hadc2);
 80007a4:	481b      	ldr	r0, [pc, #108]	; (8000814 <main+0x28c>)
 80007a6:	f001 fbfd 	bl	8001fa4 <HAL_ADC_GetValue>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <main+0x294>)
 80007ae:	6053      	str	r3, [r2, #4]

					 control_spi=control_carga(modo_carga,input_adc[0],input_adc[1],set_point);
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <main+0x294>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	b299      	uxth	r1, r3
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <main+0x294>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	893b      	ldrh	r3, [r7, #8]
 80007be:	7bf8      	ldrb	r0, [r7, #15]
 80007c0:	f000 fe92 	bl	80014e8 <control_carga>
 80007c4:	4603      	mov	r3, r0
 80007c6:	817b      	strh	r3, [r7, #10]
					 enviar_spi_dac(control_spi);
 80007c8:	897b      	ldrh	r3, [r7, #10]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fb9c 	bl	8000f08 <enviar_spi_dac>
					 flag_update_loop_control=0;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <main+0x2a4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
				 }
			  }
			  if(flag_update_display_1_seg){
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <main+0x290>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d00a      	beq.n	80007f4 <main+0x26c>
				  display_update_running(modo_carga,input_adc[0],input_adc[1]);
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <main+0x294>)
 80007e0:	6819      	ldr	r1, [r3, #0]
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <main+0x294>)
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fdb3 	bl	8001354 <display_update_running>
				  flag_update_display_1_seg=0;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <main+0x290>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
		  while(flag_on_off){
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <main+0x2a0>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1b8      	bne.n	800076e <main+0x1e6>
	  if(control_spi!=0){//set del dac en cero
 80007fc:	e71b      	b.n	8000636 <main+0xae>
 80007fe:	bf00      	nop
 8000800:	08006018 	.word	0x08006018
 8000804:	08006028 	.word	0x08006028
 8000808:	08006038 	.word	0x08006038
 800080c:	200001a4 	.word	0x200001a4
 8000810:	20000098 	.word	0x20000098
 8000814:	200000c8 	.word	0x200000c8
 8000818:	20000526 	.word	0x20000526
 800081c:	2000052c 	.word	0x2000052c
 8000820:	20000534 	.word	0x20000534
 8000824:	20000525 	.word	0x20000525
 8000828:	20000524 	.word	0x20000524
 800082c:	20000527 	.word	0x20000527

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	; 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083a:	2228      	movs	r2, #40	; 0x28
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f004 ff44 	bl	80056cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000860:	2301      	movs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086e:	2301      	movs	r3, #1
 8000870:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800087c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000886:	4618      	mov	r0, r3
 8000888:	f003 fa0c 	bl	8003ca4 <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000892:	f000 fe57 	bl	8001544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	230f      	movs	r3, #15
 8000898:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2102      	movs	r1, #2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 fc78 	bl	80041a8 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008be:	f000 fe41 	bl	8001544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80008c2:	2312      	movs	r3, #18
 80008c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 fdf6 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008de:	f000 fe31 	bl	8001544 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3750      	adds	r7, #80	; 0x50
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_ADC1_Init+0x74>)
 80008fe:	4a19      	ldr	r2, [pc, #100]	; (8000964 <MX_ADC1_Init+0x78>)
 8000900:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_ADC1_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_ADC1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_ADC1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_ADC1_Init+0x74>)
 8000916:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800091a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_ADC1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_ADC1_Init+0x74>)
 8000924:	2201      	movs	r2, #1
 8000926:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_ADC1_Init+0x74>)
 800092a:	f001 f8af 	bl	8001a8c <HAL_ADC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000934:	f000 fe06 	bl	8001544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000938:	2301      	movs	r3, #1
 800093a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093c:	2301      	movs	r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_ADC1_Init+0x74>)
 800094a:	f001 fb37 	bl	8001fbc <HAL_ADC_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000954:	f000 fdf6 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000098 	.word	0x20000098
 8000964:	40012400 	.word	0x40012400

08000968 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000978:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_ADC2_Init+0x74>)
 800097a:	4a19      	ldr	r2, [pc, #100]	; (80009e0 <MX_ADC2_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_ADC2_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_ADC2_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_ADC2_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_ADC2_Init+0x74>)
 8000992:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000996:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_ADC2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_ADC2_Init+0x74>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_ADC2_Init+0x74>)
 80009a6:	f001 f871 	bl	8001a8c <HAL_ADC_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80009b0:	f000 fdc8 	bl	8001544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_ADC2_Init+0x74>)
 80009c6:	f001 faf9 	bl	8001fbc <HAL_ADC_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80009d0:	f000 fdb8 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000c8 	.word	0x200000c8
 80009e0:	40012800 	.word	0x40012800

080009e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <MX_I2C1_Init+0x54>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 80000;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_I2C1_Init+0x58>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a22:	f001 ffff 	bl	8002a24 <HAL_I2C_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a2c:	f000 fd8a 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200000f8 	.word	0x200000f8
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	00013880 	.word	0x00013880

08000a40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a46:	4a19      	ldr	r2, [pc, #100]	; (8000aac <MX_SPI1_Init+0x6c>)
 8000a48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a76:	2228      	movs	r2, #40	; 0x28
 8000a78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a8e:	220a      	movs	r2, #10
 8000a90:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_SPI1_Init+0x68>)
 8000a94:	f003 fe82 	bl	800479c <HAL_SPI_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000a9e:	f000 fd51 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000014c 	.word	0x2000014c
 8000aac:	40013000 	.word	0x40013000

08000ab0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000ace:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000ad6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000ada:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000ae4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ae8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000af6:	4814      	ldr	r0, [pc, #80]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000af8:	f004 f8ca 	bl	8004c90 <HAL_TIM_Base_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b02:	f000 fd1f 	bl	8001544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	4619      	mov	r1, r3
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000b14:	f004 fa66 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b1e:	f000 fd11 	bl	8001544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000b30:	f004 fc3c 	bl	80053ac <HAL_TIMEx_MasterConfigSynchronization>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b3a:	f000 fd03 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200001a4 	.word	0x200001a4

08000b4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b60:	463b      	mov	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_TIM3_Init+0x90>)
 8000b6a:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <MX_TIM3_Init+0x94>)
 8000b6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 179;
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <MX_TIM3_Init+0x90>)
 8000b70:	22b3      	movs	r2, #179	; 0xb3
 8000b72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_TIM3_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_TIM3_Init+0x90>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_TIM3_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_TIM3_Init+0x90>)
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b8c:	4813      	ldr	r0, [pc, #76]	; (8000bdc <MX_TIM3_Init+0x90>)
 8000b8e:	f004 f87f 	bl	8004c90 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000b98:	f000 fcd4 	bl	8001544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <MX_TIM3_Init+0x90>)
 8000baa:	f004 fa1b 	bl	8004fe4 <HAL_TIM_ConfigClockSource>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000bb4:	f000 fcc6 	bl	8001544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_TIM3_Init+0x90>)
 8000bc6:	f004 fbf1 	bl	80053ac <HAL_TIMEx_MasterConfigSynchronization>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000bd0:	f000 fcb8 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200001ec 	.word	0x200001ec
 8000be0:	40000400 	.word	0x40000400

08000be4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <MX_USB_PCD_Init+0x3c>)
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <MX_USB_PCD_Init+0x40>)
 8000bec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_USB_PCD_Init+0x3c>)
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MX_USB_PCD_Init+0x3c>)
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_USB_PCD_Init+0x3c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <MX_USB_PCD_Init+0x3c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_USB_PCD_Init+0x3c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_USB_PCD_Init+0x3c>)
 8000c0e:	f002 ff4a 	bl	8003aa6 <HAL_PCD_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000c18:	f000 fc94 	bl	8001544 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000234 	.word	0x20000234
 8000c24:	40005c00 	.word	0x40005c00

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3c:	4b49      	ldr	r3, [pc, #292]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a48      	ldr	r2, [pc, #288]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b46      	ldr	r3, [pc, #280]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c54:	4b43      	ldr	r3, [pc, #268]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a42      	ldr	r2, [pc, #264]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000c5a:	f043 0320 	orr.w	r3, r3, #32
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b40      	ldr	r3, [pc, #256]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0320 	and.w	r3, r3, #32
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6c:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a3c      	ldr	r2, [pc, #240]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a36      	ldr	r2, [pc, #216]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <MX_GPIO_Init+0x13c>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ca2:	4831      	ldr	r0, [pc, #196]	; (8000d68 <MX_GPIO_Init+0x140>)
 8000ca4:	f001 fe75 	bl	8002992 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2140      	movs	r1, #64	; 0x40
 8000cac:	482f      	ldr	r0, [pc, #188]	; (8000d6c <MX_GPIO_Init+0x144>)
 8000cae:	f001 fe70 	bl	8002992 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f640 4103 	movw	r1, #3075	; 0xc03
 8000cb8:	482d      	ldr	r0, [pc, #180]	; (8000d70 <MX_GPIO_Init+0x148>)
 8000cba:	f001 fe6a 	bl	8002992 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000cbe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4824      	ldr	r0, [pc, #144]	; (8000d68 <MX_GPIO_Init+0x140>)
 8000cd8:	f001 fcc0 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cdc:	2340      	movs	r3, #64	; 0x40
 8000cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481e      	ldr	r0, [pc, #120]	; (8000d6c <MX_GPIO_Init+0x144>)
 8000cf4:	f001 fcb2 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8000cf8:	f640 4303 	movw	r3, #3075	; 0xc03
 8000cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4817      	ldr	r0, [pc, #92]	; (8000d70 <MX_GPIO_Init+0x148>)
 8000d12:	f001 fca3 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d16:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_GPIO_Init+0x148>)
 8000d2c:	f001 fc96 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_GPIO_Init+0x14c>)
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4619      	mov	r1, r3
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <MX_GPIO_Init+0x144>)
 8000d46:	f001 fc89 	bl	800265c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2017      	movs	r0, #23
 8000d50:	f001 fc4d 	bl	80025ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d54:	2017      	movs	r0, #23
 8000d56:	f001 fc66 	bl	8002626 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40011000 	.word	0x40011000
 8000d6c:	40010800 	.word	0x40010800
 8000d70:	40010c00 	.word	0x40010c00
 8000d74:	10110000 	.word	0x10110000

08000d78 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//definiciones de los callback y funciones
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // INT Source is pin A9
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d88:	d11a      	bne.n	8000dc0 <HAL_GPIO_EXTI_Callback+0x48>
    {
    //if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET&&!flag_config){
    if(!flag_on_off && !flag_config){
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10d      	bne.n	8000dae <HAL_GPIO_EXTI_Callback+0x36>
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x54>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d109      	bne.n	8000dae <HAL_GPIO_EXTI_Callback+0x36>
    		flag_on_off=1;// conecta la carga
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
    		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da6:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x58>)
 8000da8:	f001 fdf3 	bl	8002992 <HAL_GPIO_WritePin>
    	flag_on_off=0;// desconecta la carga
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
    }

    }
}
 8000dac:	e008      	b.n	8000dc0 <HAL_GPIO_EXTI_Callback+0x48>
    	flag_on_off=0;// desconecta la carga
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x58>)
 8000dbc:	f001 fde9 	bl	8002992 <HAL_GPIO_WritePin>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000524 	.word	0x20000524
 8000dcc:	20000525 	.word	0x20000525
 8000dd0:	40011000 	.word	0x40011000

08000dd4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM2){
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de4:	d11e      	bne.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x50>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dea:	4810      	ldr	r0, [pc, #64]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000dec:	f001 fde9 	bl	80029c2 <HAL_GPIO_TogglePin>
	 input_keypad=keypad_scan();//condicionar la lectura a que no este en modo activo la carga
 8000df0:	f7ff faaa 	bl	8000348 <keypad_scan>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000dfa:	701a      	strb	r2, [r3, #0]
	 flag_update_loop_control=1; //movemos al timer3
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]

	 if(cont_timer_update>=5){//cada segundo y medio actualiza el display
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d906      	bls.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0x44>

		 flag_update_display_1_seg=1;//update nombre
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
		 cont_timer_update=0;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e005      	b.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x50>
	 }
	 else cont_timer_update++;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e22:	701a      	strb	r2, [r3, #0]
 }
 if(htim->Instance == TIM3){
 	 //disparar control de la carga
	 //flag_update_loop_control=1; //flag ciclo de control
  }
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40011000 	.word	0x40011000
 8000e30:	20000534 	.word	0x20000534
 8000e34:	20000527 	.word	0x20000527
 8000e38:	20000528 	.word	0x20000528
 8000e3c:	20000526 	.word	0x20000526

08000e40 <agregar_digito>:

void agregar_digito(char *buffer, char digito) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
    size_t longitud = strlen(buffer);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff f97d 	bl	800014c <strlen>
 8000e52:	60f8      	str	r0, [r7, #12]

    if (longitud < BUFFER_SIZE_input) {
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d80a      	bhi.n	8000e70 <agregar_digito+0x30>
        buffer[longitud] = digito;
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	78fa      	ldrb	r2, [r7, #3]
 8000e62:	701a      	strb	r2, [r3, #0]
        buffer[longitud + 1] = '\0';
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	3301      	adds	r3, #1
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
    }
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <borrar_ultimo_digito>:

void borrar_ultimo_digito(char *buffer) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
    size_t longitud = strlen(buffer);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff f963 	bl	800014c <strlen>
 8000e86:	60f8      	str	r0, [r7, #12]

    if (longitud > 0) {
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d005      	beq.n	8000e9a <borrar_ultimo_digito+0x22>
        buffer[longitud - 1] = '\0';
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
    }
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <leer_temperatura>:

uint16_t leer_temperatura(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af02      	add	r7, sp, #8
	uint8_t dato[1];
	 uint16_t temperature_milicelsius=0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	80fb      	strh	r3, [r7, #6]
	 HAL_I2C_Master_Transmit(&hi2c1, TC74_ADDRESS, (uint8_t *)dato, 1, 100);//<< 1
 8000eae:	1d3a      	adds	r2, r7, #4
 8000eb0:	2364      	movs	r3, #100	; 0x64
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	2190      	movs	r1, #144	; 0x90
 8000eb8:	4812      	ldr	r0, [pc, #72]	; (8000f04 <leer_temperatura+0x60>)
 8000eba:	f001 fef7 	bl	8002cac <HAL_I2C_Master_Transmit>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000ebe:	bf00      	nop
 8000ec0:	4810      	ldr	r0, [pc, #64]	; (8000f04 <leer_temperatura+0x60>)
 8000ec2:	f002 fa5d 	bl	8003380 <HAL_I2C_GetState>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b20      	cmp	r3, #32
 8000eca:	d1f9      	bne.n	8000ec0 <leer_temperatura+0x1c>
	 //HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	 HAL_I2C_Master_Receive(&hi2c1, TC74_ADDRESS, (uint8_t *)dato, 1, 100);
 8000ecc:	1d3a      	adds	r2, r7, #4
 8000ece:	2364      	movs	r3, #100	; 0x64
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2190      	movs	r1, #144	; 0x90
 8000ed6:	480b      	ldr	r0, [pc, #44]	; (8000f04 <leer_temperatura+0x60>)
 8000ed8:	f001 ffe6 	bl	8002ea8 <HAL_I2C_Master_Receive>
	 while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000edc:	bf00      	nop
 8000ede:	4809      	ldr	r0, [pc, #36]	; (8000f04 <leer_temperatura+0x60>)
 8000ee0:	f002 fa4e 	bl	8003380 <HAL_I2C_GetState>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b20      	cmp	r3, #32
 8000ee8:	d1f9      	bne.n	8000ede <leer_temperatura+0x3a>
	 temperature_milicelsius = dato[0];  //
 8000eea:	793b      	ldrb	r3, [r7, #4]
 8000eec:	80fb      	strh	r3, [r7, #6]
	if(temperature_milicelsius >= 0x80){
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef2:	d901      	bls.n	8000ef8 <leer_temperatura+0x54>
		temperature_milicelsius=0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	80fb      	strh	r3, [r7, #6]
	}
	 return temperature_milicelsius;
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000f8 	.word	0x200000f8

08000f08 <enviar_spi_dac>:

void enviar_spi_dac(uint16_t dato){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
	if(dato<=0x0FFF){
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f18:	d21f      	bcs.n	8000f5a <enviar_spi_dac+0x52>
		uint16_t send = 0x3000;
 8000f1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f1e:	81fb      	strh	r3, [r7, #14]
		send = send|dato;
 8000f20:	89fa      	ldrh	r2, [r7, #14]
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2140      	movs	r1, #64	; 0x40
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <enviar_spi_dac+0x58>)
 8000f30:	f001 fd2f 	bl	8002992 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &send, 2, 10);
 8000f34:	f107 010e 	add.w	r1, r7, #14
 8000f38:	230a      	movs	r3, #10
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4809      	ldr	r0, [pc, #36]	; (8000f64 <enviar_spi_dac+0x5c>)
 8000f3e:	f003 fcb1 	bl	80048a4 <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&hspi1)!=HAL_SPI_STATE_READY);
 8000f42:	bf00      	nop
 8000f44:	4807      	ldr	r0, [pc, #28]	; (8000f64 <enviar_spi_dac+0x5c>)
 8000f46:	f003 fdf0 	bl	8004b2a <HAL_SPI_GetState>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d1f9      	bne.n	8000f44 <enviar_spi_dac+0x3c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <enviar_spi_dac+0x58>)
 8000f56:	f001 fd1c 	bl	8002992 <HAL_GPIO_WritePin>

		return;
	}
}
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40010800 	.word	0x40010800
 8000f64:	2000014c 	.word	0x2000014c

08000f68 <display_update_conf>:
void display_update_conf(char modo_op, char *dato){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08e      	sub	sp, #56	; 0x38
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]

	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
	snprintf(buffer_fun, sizeof(buffer_fun), "Config Modo C%s:", char_as_str);
 8000fa4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fa8:	f107 0020 	add.w	r0, r7, #32
 8000fac:	4a38      	ldr	r2, [pc, #224]	; (8001090 <display_update_conf+0x128>)
 8000fae:	2114      	movs	r1, #20
 8000fb0:	f004 fb58 	bl	8005664 <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff f8d1 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff f8ce 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 8000fc0:	f107 0320 	add.w	r3, r7, #32
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff f946 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA3);
 8000fca:	2094      	movs	r0, #148	; 0x94
 8000fcc:	f7ff f8c6 	bl	800015c <LCD_I2C_cmd>
	switch(modo_op){//print del modo
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	3b43      	subs	r3, #67	; 0x43
 8000fd4:	2b13      	cmp	r3, #19
 8000fd6:	d84b      	bhi.n	8001070 <display_update_conf+0x108>
 8000fd8:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <display_update_conf+0x78>)
 8000fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fde:	bf00      	nop
 8000fe0:	08001031 	.word	0x08001031
 8000fe4:	08001071 	.word	0x08001071
 8000fe8:	08001071 	.word	0x08001071
 8000fec:	08001071 	.word	0x08001071
 8000ff0:	08001071 	.word	0x08001071
 8000ff4:	08001071 	.word	0x08001071
 8000ff8:	08001071 	.word	0x08001071
 8000ffc:	08001071 	.word	0x08001071
 8001000:	08001071 	.word	0x08001071
 8001004:	08001071 	.word	0x08001071
 8001008:	08001071 	.word	0x08001071
 800100c:	08001071 	.word	0x08001071
 8001010:	08001071 	.word	0x08001071
 8001014:	08001061 	.word	0x08001061
 8001018:	08001071 	.word	0x08001071
 800101c:	08001051 	.word	0x08001051
 8001020:	08001071 	.word	0x08001071
 8001024:	08001071 	.word	0x08001071
 8001028:	08001071 	.word	0x08001071
 800102c:	08001041 	.word	0x08001041

	case 'C':
		snprintf(buffer_dato, sizeof(buffer_dato), "Current: %s0 [mA]", dato);
 8001030:	f107 000c 	add.w	r0, r7, #12
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <display_update_conf+0x12c>)
 8001038:	2114      	movs	r1, #20
 800103a:	f004 fb13 	bl	8005664 <sniprintf>
		break;
 800103e:	e01e      	b.n	800107e <display_update_conf+0x116>
	case 'V':
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %s0 [mV]", dato);
 8001040:	f107 000c 	add.w	r0, r7, #12
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <display_update_conf+0x130>)
 8001048:	2114      	movs	r1, #20
 800104a:	f004 fb0b 	bl	8005664 <sniprintf>
		break;
 800104e:	e016      	b.n	800107e <display_update_conf+0x116>
	case 'R':
		snprintf(buffer_dato, sizeof(buffer_dato), "Resist.: %s [mR]", dato);
 8001050:	f107 000c 	add.w	r0, r7, #12
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	4a11      	ldr	r2, [pc, #68]	; (800109c <display_update_conf+0x134>)
 8001058:	2114      	movs	r1, #20
 800105a:	f004 fb03 	bl	8005664 <sniprintf>
		break;
 800105e:	e00e      	b.n	800107e <display_update_conf+0x116>
	case 'P':
		snprintf(buffer_dato, sizeof(buffer_dato), "Power.: %s00 [W]", dato);
 8001060:	f107 000c 	add.w	r0, r7, #12
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <display_update_conf+0x138>)
 8001068:	2114      	movs	r1, #20
 800106a:	f004 fafb 	bl	8005664 <sniprintf>
		break;
 800106e:	e006      	b.n	800107e <display_update_conf+0x116>
	default:
		snprintf(buffer_dato, sizeof(buffer_dato), "Error: case def");
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <display_update_conf+0x13c>)
 8001076:	2114      	movs	r1, #20
 8001078:	4618      	mov	r0, r3
 800107a:	f004 faf3 	bl	8005664 <sniprintf>
	}
	LCD_I2C_write_text(buffer_dato);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f8e7 	bl	8000256 <LCD_I2C_write_text>

}
 8001088:	bf00      	nop
 800108a:	3738      	adds	r7, #56	; 0x38
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	08006050 	.word	0x08006050
 8001094:	08006064 	.word	0x08006064
 8001098:	08006078 	.word	0x08006078
 800109c:	0800608c 	.word	0x0800608c
 80010a0:	080060a0 	.word	0x080060a0
 80010a4:	080060b4 	.word	0x080060b4

080010a8 <display_update_stat>:

void display_update_stat(char modo_op, char *dato,uint32_t volt){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b092      	sub	sp, #72	; 0x48
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	4603      	mov	r3, r0
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	73fb      	strb	r3, [r7, #15]
	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
 80010c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
	uint32_t volt_convertido = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	//float float_volt = 0;
	//volt_convertido=volt*6600;
	//volt_convertido=volt_convertido/4096;
	volt_convertido=volt*122;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	227a      	movs	r2, #122	; 0x7a
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	volt_convertido=volt_convertido/100;
 80010f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f6:	4a8c      	ldr	r2, [pc, #560]	; (8001328 <display_update_stat+0x280>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	095b      	lsrs	r3, r3, #5
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c

	snprintf(buffer_fun, sizeof(buffer_fun), "Modo C%s:", char_as_str);
 8001100:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001104:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001108:	4a88      	ldr	r2, [pc, #544]	; (800132c <display_update_stat+0x284>)
 800110a:	2114      	movs	r1, #20
 800110c:	f004 faaa 	bl	8005664 <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff f823 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff f820 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f898 	bl	8000256 <LCD_I2C_write_text>

	switch(modo_op){//print del modo
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	3b43      	subs	r3, #67	; 0x43
 800112a:	2b13      	cmp	r3, #19
 800112c:	f200 80ec 	bhi.w	8001308 <display_update_stat+0x260>
 8001130:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <display_update_stat+0x90>)
 8001132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001136:	bf00      	nop
 8001138:	08001189 	.word	0x08001189
 800113c:	08001309 	.word	0x08001309
 8001140:	08001309 	.word	0x08001309
 8001144:	08001309 	.word	0x08001309
 8001148:	08001309 	.word	0x08001309
 800114c:	08001309 	.word	0x08001309
 8001150:	08001309 	.word	0x08001309
 8001154:	08001309 	.word	0x08001309
 8001158:	08001309 	.word	0x08001309
 800115c:	08001309 	.word	0x08001309
 8001160:	08001309 	.word	0x08001309
 8001164:	08001309 	.word	0x08001309
 8001168:	08001309 	.word	0x08001309
 800116c:	080012a1 	.word	0x080012a1
 8001170:	08001309 	.word	0x08001309
 8001174:	08001229 	.word	0x08001229
 8001178:	08001309 	.word	0x08001309
 800117c:	08001309 	.word	0x08001309
 8001180:	08001309 	.word	0x08001309
 8001184:	080011f1 	.word	0x080011f1

	case 'C':
		LCD_I2C_cmd(LCD_LINEA2);
 8001188:	20c0      	movs	r0, #192	; 0xc0
 800118a:	f7fe ffe7 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]", volt_convertido/100,volt_convertido%100);//
 800118e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001190:	4a65      	ldr	r2, [pc, #404]	; (8001328 <display_update_stat+0x280>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	0959      	lsrs	r1, r3, #5
 8001198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800119a:	4b63      	ldr	r3, [pc, #396]	; (8001328 <display_update_stat+0x280>)
 800119c:	fba3 0302 	umull	r0, r3, r3, r2
 80011a0:	095b      	lsrs	r3, r3, #5
 80011a2:	2064      	movs	r0, #100	; 0x64
 80011a4:	fb00 f303 	mul.w	r3, r0, r3
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	f107 0010 	add.w	r0, r7, #16
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	460b      	mov	r3, r1
 80011b2:	4a5f      	ldr	r2, [pc, #380]	; (8001330 <display_update_stat+0x288>)
 80011b4:	2114      	movs	r1, #20
 80011b6:	f004 fa55 	bl	8005664 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f849 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 80011c4:	2094      	movs	r0, #148	; 0x94
 80011c6:	f7fe ffc9 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Current: %s0 [mA]", dato);
 80011ca:	f107 0010 	add.w	r0, r7, #16
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	4a58      	ldr	r2, [pc, #352]	; (8001334 <display_update_stat+0x28c>)
 80011d2:	2114      	movs	r1, #20
 80011d4:	f004 fa46 	bl	8005664 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f83a 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 80011e2:	20d4      	movs	r0, #212	; 0xd4
 80011e4:	f7fe ffba 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[W]");
 80011e8:	4853      	ldr	r0, [pc, #332]	; (8001338 <display_update_stat+0x290>)
 80011ea:	f7ff f834 	bl	8000256 <LCD_I2C_write_text>

		break;
 80011ee:	e096      	b.n	800131e <display_update_stat+0x276>
	case 'V':
		LCD_I2C_cmd(LCD_LINEA2);
 80011f0:	20c0      	movs	r0, #192	; 0xc0
 80011f2:	f7fe ffb3 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %s0 [mV]", dato);
 80011f6:	f107 0010 	add.w	r0, r7, #16
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	4a4f      	ldr	r2, [pc, #316]	; (800133c <display_update_stat+0x294>)
 80011fe:	2114      	movs	r1, #20
 8001200:	f004 fa30 	bl	8005664 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f824 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 800120e:	2094      	movs	r0, #148	; 0x94
 8001210:	f7fe ffa4 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 8001214:	484a      	ldr	r0, [pc, #296]	; (8001340 <display_update_stat+0x298>)
 8001216:	f7ff f81e 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 800121a:	20d4      	movs	r0, #212	; 0xd4
 800121c:	f7fe ff9e 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[mW]");
 8001220:	4848      	ldr	r0, [pc, #288]	; (8001344 <display_update_stat+0x29c>)
 8001222:	f7ff f818 	bl	8000256 <LCD_I2C_write_text>
		break;
 8001226:	e07a      	b.n	800131e <display_update_stat+0x276>
	case 'R':
		LCD_I2C_cmd(LCD_CLEAR);
 8001228:	2001      	movs	r0, #1
 800122a:	f7fe ff97 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_cmd(LCD_LINEA1);
 800122e:	2000      	movs	r0, #0
 8001230:	f7fe ff94 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Res: %s[mohm]", dato);
 8001234:	f107 0010 	add.w	r0, r7, #16
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4a43      	ldr	r2, [pc, #268]	; (8001348 <display_update_stat+0x2a0>)
 800123c:	2114      	movs	r1, #20
 800123e:	f004 fa11 	bl	8005664 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f805 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA2);
 800124c:	20c0      	movs	r0, #192	; 0xc0
 800124e:	f7fe ff85 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]",  volt_convertido/100,volt_convertido%100);//
 8001252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001254:	4a34      	ldr	r2, [pc, #208]	; (8001328 <display_update_stat+0x280>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0959      	lsrs	r1, r3, #5
 800125c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800125e:	4b32      	ldr	r3, [pc, #200]	; (8001328 <display_update_stat+0x280>)
 8001260:	fba3 0302 	umull	r0, r3, r3, r2
 8001264:	095b      	lsrs	r3, r3, #5
 8001266:	2064      	movs	r0, #100	; 0x64
 8001268:	fb00 f303 	mul.w	r3, r0, r3
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	f107 0010 	add.w	r0, r7, #16
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	460b      	mov	r3, r1
 8001276:	4a2e      	ldr	r2, [pc, #184]	; (8001330 <display_update_stat+0x288>)
 8001278:	2114      	movs	r1, #20
 800127a:	f004 f9f3 	bl	8005664 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4618      	mov	r0, r3
 8001284:	f7fe ffe7 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8001288:	2094      	movs	r0, #148	; 0x94
 800128a:	f7fe ff67 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 800128e:	482c      	ldr	r0, [pc, #176]	; (8001340 <display_update_stat+0x298>)
 8001290:	f7fe ffe1 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8001294:	20d4      	movs	r0, #212	; 0xd4
 8001296:	f7fe ff61 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[mW]");
 800129a:	482a      	ldr	r0, [pc, #168]	; (8001344 <display_update_stat+0x29c>)
 800129c:	f7fe ffdb 	bl	8000256 <LCD_I2C_write_text>
	case 'P':
		LCD_I2C_cmd(LCD_LINEA2);
 80012a0:	20c0      	movs	r0, #192	; 0xc0
 80012a2:	f7fe ff5b 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]",  volt_convertido/100,volt_convertido%100);//
 80012a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012a8:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <display_update_stat+0x280>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	0959      	lsrs	r1, r3, #5
 80012b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <display_update_stat+0x280>)
 80012b4:	fba3 0302 	umull	r0, r3, r3, r2
 80012b8:	095b      	lsrs	r3, r3, #5
 80012ba:	2064      	movs	r0, #100	; 0x64
 80012bc:	fb00 f303 	mul.w	r3, r0, r3
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f107 0010 	add.w	r0, r7, #16
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	460b      	mov	r3, r1
 80012ca:	4a19      	ldr	r2, [pc, #100]	; (8001330 <display_update_stat+0x288>)
 80012cc:	2114      	movs	r1, #20
 80012ce:	f004 f9c9 	bl	8005664 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7fe ffbd 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 80012dc:	2094      	movs	r0, #148	; 0x94
 80012de:	f7fe ff3d 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 80012e2:	4817      	ldr	r0, [pc, #92]	; (8001340 <display_update_stat+0x298>)
 80012e4:	f7fe ffb7 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 80012e8:	20d4      	movs	r0, #212	; 0xd4
 80012ea:	f7fe ff37 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Power: %s00 [mW]", dato);
 80012ee:	f107 0010 	add.w	r0, r7, #16
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4a15      	ldr	r2, [pc, #84]	; (800134c <display_update_stat+0x2a4>)
 80012f6:	2114      	movs	r1, #20
 80012f8:	f004 f9b4 	bl	8005664 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4618      	mov	r0, r3
 8001302:	f7fe ffa8 	bl	8000256 <LCD_I2C_write_text>

		break;
 8001306:	e00a      	b.n	800131e <display_update_stat+0x276>
	default:
		LCD_I2C_cmd(LCD_LINEA1);
 8001308:	2000      	movs	r0, #0
 800130a:	f7fe ff27 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Error: monit");
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <display_update_stat+0x2a8>)
 8001314:	2114      	movs	r1, #20
 8001316:	4618      	mov	r0, r3
 8001318:	f004 f9a4 	bl	8005664 <sniprintf>
	}

}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3740      	adds	r7, #64	; 0x40
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	51eb851f 	.word	0x51eb851f
 800132c:	080060c4 	.word	0x080060c4
 8001330:	080060d0 	.word	0x080060d0
 8001334:	08006064 	.word	0x08006064
 8001338:	080060e8 	.word	0x080060e8
 800133c:	08006078 	.word	0x08006078
 8001340:	080060f4 	.word	0x080060f4
 8001344:	08006104 	.word	0x08006104
 8001348:	08006114 	.word	0x08006114
 800134c:	08006124 	.word	0x08006124
 8001350:	08006138 	.word	0x08006138

08001354 <display_update_running>:

void display_update_running(char modo_op,uint32_t volt, uint32_t corriente){
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b095      	sub	sp, #84	; 0x54
 8001358:	af02      	add	r7, sp, #8
 800135a:	4603      	mov	r3, r0
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	73fb      	strb	r3, [r7, #15]
	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
 8001372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
	uint32_t volt_convertido = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t corriente_convertido = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t potencia =0;
 800139a:	2300      	movs	r3, #0
 800139c:	63fb      	str	r3, [r7, #60]	; 0x3c
	volt_convertido=volt*122;
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	227a      	movs	r2, #122	; 0x7a
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
	volt_convertido=volt_convertido/100;
 80013a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013aa:	4a47      	ldr	r2, [pc, #284]	; (80014c8 <display_update_running+0x174>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	095b      	lsrs	r3, r3, #5
 80013b2:	647b      	str	r3, [r7, #68]	; 0x44
	corriente_convertido=corriente*8437;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f242 02f5 	movw	r2, #8437	; 0x20f5
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
	corriente_convertido=corriente_convertido/10000;
 80013c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013c2:	4a42      	ldr	r2, [pc, #264]	; (80014cc <display_update_running+0x178>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	0b5b      	lsrs	r3, r3, #13
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
	potencia = volt_convertido*corriente_convertido;
 80013cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
 80013d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	potencia=potencia/1000;
 80013d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013d8:	4a3d      	ldr	r2, [pc, #244]	; (80014d0 <display_update_running+0x17c>)
 80013da:	fba2 2303 	umull	r2, r3, r2, r3
 80013de:	099b      	lsrs	r3, r3, #6
 80013e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	snprintf(buffer_fun, sizeof(buffer_fun), "Running Modo C%s:", char_as_str);
 80013e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80013ea:	4a3a      	ldr	r2, [pc, #232]	; (80014d4 <display_update_running+0x180>)
 80013ec:	2114      	movs	r1, #20
 80013ee:	f004 f939 	bl	8005664 <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7fe feb2 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7fe feaf 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 80013fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe ff27 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA2);
 8001408:	20c0      	movs	r0, #192	; 0xc0
 800140a:	f7fe fea7 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]",  volt_convertido/100,volt_convertido%100);//
 800140e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001410:	4a2d      	ldr	r2, [pc, #180]	; (80014c8 <display_update_running+0x174>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0959      	lsrs	r1, r3, #5
 8001418:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800141a:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <display_update_running+0x174>)
 800141c:	fba3 0302 	umull	r0, r3, r3, r2
 8001420:	095b      	lsrs	r3, r3, #5
 8001422:	2064      	movs	r0, #100	; 0x64
 8001424:	fb00 f303 	mul.w	r3, r0, r3
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f107 0010 	add.w	r0, r7, #16
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	460b      	mov	r3, r1
 8001432:	4a29      	ldr	r2, [pc, #164]	; (80014d8 <display_update_running+0x184>)
 8001434:	2114      	movs	r1, #20
 8001436:	f004 f915 	bl	8005664 <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe ff09 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA3);
 8001444:	2094      	movs	r0, #148	; 0x94
 8001446:	f7fe fe89 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Current: %d.%02d [A]", corriente_convertido/100,corriente_convertido%100);//
 800144a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800144c:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <display_update_running+0x174>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0959      	lsrs	r1, r3, #5
 8001454:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <display_update_running+0x174>)
 8001458:	fba3 0302 	umull	r0, r3, r3, r2
 800145c:	095b      	lsrs	r3, r3, #5
 800145e:	2064      	movs	r0, #100	; 0x64
 8001460:	fb00 f303 	mul.w	r3, r0, r3
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f107 0010 	add.w	r0, r7, #16
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	460b      	mov	r3, r1
 800146e:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <display_update_running+0x188>)
 8001470:	2114      	movs	r1, #20
 8001472:	f004 f8f7 	bl	8005664 <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe feeb 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA4);
 8001480:	20d4      	movs	r0, #212	; 0xd4
 8001482:	f7fe fe6b 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Pot: %d.%d [W]", potencia/10,potencia%10);//
 8001486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001488:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <display_update_running+0x18c>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	08dc      	lsrs	r4, r3, #3
 8001490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <display_update_running+0x18c>)
 8001494:	fba3 2301 	umull	r2, r3, r3, r1
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	1aca      	subs	r2, r1, r3
 80014a4:	f107 0010 	add.w	r0, r7, #16
 80014a8:	9200      	str	r2, [sp, #0]
 80014aa:	4623      	mov	r3, r4
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <display_update_running+0x190>)
 80014ae:	2114      	movs	r1, #20
 80014b0:	f004 f8d8 	bl	8005664 <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe fecc 	bl	8000256 <LCD_I2C_write_text>
}
 80014be:	bf00      	nop
 80014c0:	374c      	adds	r7, #76	; 0x4c
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	51eb851f 	.word	0x51eb851f
 80014cc:	d1b71759 	.word	0xd1b71759
 80014d0:	10624dd3 	.word	0x10624dd3
 80014d4:	08006148 	.word	0x08006148
 80014d8:	080060d0 	.word	0x080060d0
 80014dc:	0800615c 	.word	0x0800615c
 80014e0:	cccccccd 	.word	0xcccccccd
 80014e4:	08006174 	.word	0x08006174

080014e8 <control_carga>:

uint16_t control_carga(char modo, uint16_t voltage, uint16_t current, uint16_t set_point){
 80014e8:	b490      	push	{r4, r7}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	461a      	mov	r2, r3
 80014f6:	4623      	mov	r3, r4
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	4603      	mov	r3, r0
 80014fc:	80bb      	strh	r3, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	807b      	strh	r3, [r7, #2]
 8001502:	4613      	mov	r3, r2
 8001504:	803b      	strh	r3, [r7, #0]
	uint32_t calculo = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
	uint16_t DAC_nuevo_valor = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	817b      	strh	r3, [r7, #10]
	switch(modo){
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b43      	cmp	r3, #67	; 0x43
 8001512:	d10b      	bne.n	800152c <control_carga+0x44>
	case 'C':
		calculo = set_point * 4095;//dac resol
 8001514:	883a      	ldrh	r2, [r7, #0]
 8001516:	4613      	mov	r3, r2
 8001518:	031b      	lsls	r3, r3, #12
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
		//calculo = calculo /8; //div num MOSFET
		calculo = calculo /500;//div corriente max por cada mosfet 250->2500 mA
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <control_carga+0x58>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	60fb      	str	r3, [r7, #12]
		break;
 800152a:	e001      	b.n	8001530 <control_carga+0x48>
	case 'V':
		//rev
	default:
		calculo=0;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]



		 */
	}
	DAC_nuevo_valor=(uint16_t)calculo;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	817b      	strh	r3, [r7, #10]
	return DAC_nuevo_valor;
 8001534:	897b      	ldrh	r3, [r7, #10]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bc90      	pop	{r4, r7}
 800153e:	4770      	bx	lr
 8001540:	10624dd3 	.word	0x10624dd3

08001544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001548:	b672      	cpsid	i
}
 800154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154c:	e7fe      	b.n	800154c <Error_Handler+0x8>
	...

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_MspInit+0x5c>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_MspInit+0x5c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6193      	str	r3, [r2, #24]
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_MspInit+0x5c>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_MspInit+0x5c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_MspInit+0x5c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_MspInit+0x5c>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <HAL_MspInit+0x60>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_MspInit+0x60>)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010000 	.word	0x40010000

080015b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0318 	add.w	r3, r7, #24
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a28      	ldr	r2, [pc, #160]	; (8001670 <HAL_ADC_MspInit+0xbc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d122      	bne.n	800161a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a26      	ldr	r2, [pc, #152]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 80015da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ec:	4b21      	ldr	r3, [pc, #132]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a20      	ldr	r2, [pc, #128]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001604:	2302      	movs	r3, #2
 8001606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001608:	2303      	movs	r3, #3
 800160a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 0318 	add.w	r3, r7, #24
 8001610:	4619      	mov	r1, r3
 8001612:	4819      	ldr	r0, [pc, #100]	; (8001678 <HAL_ADC_MspInit+0xc4>)
 8001614:	f001 f822 	bl	800265c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001618:	e026      	b.n	8001668 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a17      	ldr	r2, [pc, #92]	; (800167c <HAL_ADC_MspInit+0xc8>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d121      	bne.n	8001668 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a12      	ldr	r2, [pc, #72]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a0c      	ldr	r2, [pc, #48]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_ADC_MspInit+0xc0>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001654:	2304      	movs	r3, #4
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001658:	2303      	movs	r3, #3
 800165a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4619      	mov	r1, r3
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <HAL_ADC_MspInit+0xc4>)
 8001664:	f000 fffa 	bl	800265c <HAL_GPIO_Init>
}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	; 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40012400 	.word	0x40012400
 8001674:	40021000 	.word	0x40021000
 8001678:	40010800 	.word	0x40010800
 800167c:	40012800 	.word	0x40012800

08001680 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <HAL_I2C_MspInit+0x70>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d123      	bne.n	80016e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_I2C_MspInit+0x74>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <HAL_I2C_MspInit+0x74>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_I2C_MspInit+0x74>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016b8:	23c0      	movs	r3, #192	; 0xc0
 80016ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016bc:	2312      	movs	r3, #18
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <HAL_I2C_MspInit+0x78>)
 80016cc:	f000 ffc6 	bl	800265c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_I2C_MspInit+0x74>)
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_I2C_MspInit+0x74>)
 80016d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016da:	61d3      	str	r3, [r2, #28]
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_I2C_MspInit+0x74>)
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40005400 	.word	0x40005400
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010c00 	.word	0x40010c00

080016fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a15      	ldr	r2, [pc, #84]	; (800176c <HAL_SPI_MspInit+0x70>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d123      	bne.n	8001764 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_SPI_MspInit+0x74>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_SPI_MspInit+0x74>)
 8001722:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_SPI_MspInit+0x74>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_SPI_MspInit+0x74>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_SPI_MspInit+0x74>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <HAL_SPI_MspInit+0x74>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800174c:	23a0      	movs	r3, #160	; 0xa0
 800174e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	4619      	mov	r1, r3
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <HAL_SPI_MspInit+0x78>)
 8001760:	f000 ff7c 	bl	800265c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40013000 	.word	0x40013000
 8001770:	40021000 	.word	0x40021000
 8001774:	40010800 	.word	0x40010800

08001778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001788:	d114      	bne.n	80017b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_TIM_Base_MspInit+0x78>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a18      	ldr	r2, [pc, #96]	; (80017f0 <HAL_TIM_Base_MspInit+0x78>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_TIM_Base_MspInit+0x78>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	201c      	movs	r0, #28
 80017a8:	f000 ff21 	bl	80025ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017ac:	201c      	movs	r0, #28
 80017ae:	f000 ff3a 	bl	8002626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017b2:	e018      	b.n	80017e6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_TIM_Base_MspInit+0x7c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d113      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_TIM_Base_MspInit+0x78>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_TIM_Base_MspInit+0x78>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_TIM_Base_MspInit+0x78>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	201d      	movs	r0, #29
 80017dc:	f000 ff07 	bl	80025ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017e0:	201d      	movs	r0, #29
 80017e2:	f000 ff20 	bl	8002626 <HAL_NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40000400 	.word	0x40000400

080017f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a09      	ldr	r2, [pc, #36]	; (800182c <HAL_PCD_MspInit+0x34>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d10b      	bne.n	8001822 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_PCD_MspInit+0x38>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_PCD_MspInit+0x38>)
 8001810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_PCD_MspInit+0x38>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40005c00 	.word	0x40005c00
 8001830:	40021000 	.word	0x40021000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <NMI_Handler+0x4>

0800183a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler+0x4>

08001846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler+0x4>

08001852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187a:	f000 f8c7 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}

08001882 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001886:	f44f 7000 	mov.w	r0, #512	; 0x200
 800188a:	f001 f8b3 	bl	80029f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <TIM2_IRQHandler+0x10>)
 800189a:	f003 fa9b 	bl	8004dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200001a4 	.word	0x200001a4

080018a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <TIM3_IRQHandler+0x10>)
 80018ae:	f003 fa91 	bl	8004dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200001ec 	.word	0x200001ec

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f003 fef6 	bl	80056dc <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20005000 	.word	0x20005000
 800191c:	00000400 	.word	0x00000400
 8001920:	20000538 	.word	0x20000538
 8001924:	20000688 	.word	0x20000688

08001928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001934:	f7ff fff8 	bl	8001928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480b      	ldr	r0, [pc, #44]	; (8001968 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800193a:	490c      	ldr	r1, [pc, #48]	; (800196c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800193c:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <LoopFillZerobss+0x16>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001950:	4c09      	ldr	r4, [pc, #36]	; (8001978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195e:	f003 fec3 	bl	80056e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001962:	f7fe fe11 	bl	8000588 <main>
  bx lr
 8001966:	4770      	bx	lr
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800196c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001970:	08006300 	.word	0x08006300
  ldr r2, =_sbss
 8001974:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001978:	20000688 	.word	0x20000688

0800197c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC1_2_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_Init+0x28>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_Init+0x28>)
 800198a:	f043 0310 	orr.w	r3, r3, #16
 800198e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 fe21 	bl	80025d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	200f      	movs	r0, #15
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff fdd8 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fe39 	bl	8002642 <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 fe01 	bl	80025ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000020 	.word	0x20000020
 8001a04:	20000028 	.word	0x20000028
 8001a08:	20000024 	.word	0x20000024

08001a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x1c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_IncTick+0x20>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_IncTick+0x20>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000028 	.word	0x20000028
 8001a2c:	2000053c 	.word	0x2000053c

08001a30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <HAL_GetTick+0x10>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	2000053c 	.word	0x2000053c

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff fff0 	bl	8001a30 <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffe0 	bl	8001a30 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000028 	.word	0x20000028

08001a8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0be      	b.n	8001c2c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fd72 	bl	80015b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fbc5 	bl	8002260 <ADC_ConversionStop_Disable>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 8099 	bne.w	8001c1a <HAL_ADC_Init+0x18e>
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 8095 	bne.w	8001c1a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001af8:	f023 0302 	bic.w	r3, r3, #2
 8001afc:	f043 0202 	orr.w	r2, r3, #2
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7b1b      	ldrb	r3, [r3, #12]
 8001b12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b24:	d003      	beq.n	8001b2e <HAL_ADC_Init+0xa2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d102      	bne.n	8001b34 <HAL_ADC_Init+0xa8>
 8001b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b32:	e000      	b.n	8001b36 <HAL_ADC_Init+0xaa>
 8001b34:	2300      	movs	r3, #0
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7d1b      	ldrb	r3, [r3, #20]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d119      	bne.n	8001b78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7b1b      	ldrb	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	035a      	lsls	r2, r3, #13
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	e00b      	b.n	8001b78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f043 0220 	orr.w	r2, r3, #32
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_ADC_Init+0x1a8>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba8:	d003      	beq.n	8001bb2 <HAL_ADC_Init+0x126>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d104      	bne.n	8001bbc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	051b      	lsls	r3, r3, #20
 8001bba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_ADC_Init+0x1ac>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d10b      	bne.n	8001bf8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	f023 0303 	bic.w	r3, r3, #3
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bf6:	e018      	b.n	8001c2a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	f023 0312 	bic.w	r3, r3, #18
 8001c00:	f043 0210 	orr.w	r2, r3, #16
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c18:	e007      	b.n	8001c2a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	f043 0210 	orr.w	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	ffe1f7fd 	.word	0xffe1f7fd
 8001c38:	ff1f0efe 	.word	0xff1f0efe

08001c3c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_Start+0x1a>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e098      	b.n	8001d88 <HAL_ADC_Start+0x14c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 faa4 	bl	80021ac <ADC_Enable>
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 8087 	bne.w	8001d7e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a41      	ldr	r2, [pc, #260]	; (8001d90 <HAL_ADC_Start+0x154>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d105      	bne.n	8001c9a <HAL_ADC_Start+0x5e>
 8001c8e:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <HAL_ADC_Start+0x158>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d115      	bne.n	8001cc6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d026      	beq.n	8001d02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cc4:	e01d      	b.n	8001d02 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2f      	ldr	r2, [pc, #188]	; (8001d94 <HAL_ADC_Start+0x158>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d004      	beq.n	8001ce6 <HAL_ADC_Start+0xaa>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2b      	ldr	r2, [pc, #172]	; (8001d90 <HAL_ADC_Start+0x154>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d10d      	bne.n	8001d02 <HAL_ADC_Start+0xc6>
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_ADC_Start+0x158>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	f023 0206 	bic.w	r2, r3, #6
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d1a:	e002      	b.n	8001d22 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f06f 0202 	mvn.w	r2, #2
 8001d32:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d42:	d113      	bne.n	8001d6c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d48:	4a11      	ldr	r2, [pc, #68]	; (8001d90 <HAL_ADC_Start+0x154>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d105      	bne.n	8001d5a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_ADC_Start+0x158>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d108      	bne.n	8001d6c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	e00c      	b.n	8001d86 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	e003      	b.n	8001d86 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40012800 	.word	0x40012800
 8001d94:	40012400 	.word	0x40012400

08001d98 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001dae:	f7ff fe3f 	bl	8001a30 <HAL_GetTick>
 8001db2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	f043 0220 	orr.w	r2, r3, #32
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0d3      	b.n	8001f82 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d131      	bne.n	8001e4c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d12a      	bne.n	8001e4c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001df6:	e021      	b.n	8001e3c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfe:	d01d      	beq.n	8001e3c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_ADC_PollForConversion+0x7e>
 8001e06:	f7ff fe13 	bl	8001a30 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d212      	bcs.n	8001e3c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10b      	bne.n	8001e3c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	f043 0204 	orr.w	r2, r3, #4
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e0a2      	b.n	8001f82 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0d6      	beq.n	8001df8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e4a:	e070      	b.n	8001f2e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_ADC_PollForConversion+0x1f4>)
 8001e4e:	681c      	ldr	r4, [r3, #0]
 8001e50:	2002      	movs	r0, #2
 8001e52:	f002 fbed 	bl	8004630 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e56:	4603      	mov	r3, r0
 8001e58:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <HAL_ADC_PollForConversion+0x1f8>)
 8001e64:	400b      	ands	r3, r1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <HAL_ADC_PollForConversion+0x104>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68d9      	ldr	r1, [r3, #12]
 8001e70:	4b48      	ldr	r3, [pc, #288]	; (8001f94 <HAL_ADC_PollForConversion+0x1fc>)
 8001e72:	400b      	ands	r3, r1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d111      	bne.n	8001e9c <HAL_ADC_PollForConversion+0x104>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_ADC_PollForConversion+0x200>)
 8001e80:	400b      	ands	r3, r1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d108      	bne.n	8001e98 <HAL_ADC_PollForConversion+0x100>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68d9      	ldr	r1, [r3, #12]
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <HAL_ADC_PollForConversion+0x204>)
 8001e8e:	400b      	ands	r3, r1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_PollForConversion+0x100>
 8001e94:	2314      	movs	r3, #20
 8001e96:	e020      	b.n	8001eda <HAL_ADC_PollForConversion+0x142>
 8001e98:	2329      	movs	r3, #41	; 0x29
 8001e9a:	e01e      	b.n	8001eda <HAL_ADC_PollForConversion+0x142>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6919      	ldr	r1, [r3, #16]
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <HAL_ADC_PollForConversion+0x200>)
 8001ea4:	400b      	ands	r3, r1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0x120>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68d9      	ldr	r1, [r3, #12]
 8001eb0:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <HAL_ADC_PollForConversion+0x204>)
 8001eb2:	400b      	ands	r3, r1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_ADC_PollForConversion+0x13c>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6919      	ldr	r1, [r3, #16]
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_ADC_PollForConversion+0x208>)
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d108      	bne.n	8001ed8 <HAL_ADC_PollForConversion+0x140>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68d9      	ldr	r1, [r3, #12]
 8001ecc:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <HAL_ADC_PollForConversion+0x208>)
 8001ece:	400b      	ands	r3, r1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_PollForConversion+0x140>
 8001ed4:	2354      	movs	r3, #84	; 0x54
 8001ed6:	e000      	b.n	8001eda <HAL_ADC_PollForConversion+0x142>
 8001ed8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ee0:	e021      	b.n	8001f26 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d01a      	beq.n	8001f20 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <HAL_ADC_PollForConversion+0x168>
 8001ef0:	f7ff fd9e 	bl	8001a30 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d20f      	bcs.n	8001f20 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d90b      	bls.n	8001f20 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	f043 0204 	orr.w	r2, r3, #4
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e030      	b.n	8001f82 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3301      	adds	r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d8d9      	bhi.n	8001ee2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f06f 0212 	mvn.w	r2, #18
 8001f36:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f52:	d115      	bne.n	8001f80 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d111      	bne.n	8001f80 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd90      	pop	{r4, r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000020 	.word	0x20000020
 8001f90:	24924924 	.word	0x24924924
 8001f94:	00924924 	.word	0x00924924
 8001f98:	12492492 	.word	0x12492492
 8001f9c:	00492492 	.word	0x00492492
 8001fa0:	00249249 	.word	0x00249249

08001fa4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x20>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e0dc      	b.n	8002196 <HAL_ADC_ConfigChannel+0x1da>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b06      	cmp	r3, #6
 8001fea:	d81c      	bhi.n	8002026 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b05      	subs	r3, #5
 8001ffe:	221f      	movs	r2, #31
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	4019      	ands	r1, r3
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	3b05      	subs	r3, #5
 8002018:	fa00 f203 	lsl.w	r2, r0, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
 8002024:	e03c      	b.n	80020a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d81c      	bhi.n	8002068 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b23      	subs	r3, #35	; 0x23
 8002040:	221f      	movs	r2, #31
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	4019      	ands	r1, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b23      	subs	r3, #35	; 0x23
 800205a:	fa00 f203 	lsl.w	r2, r0, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
 8002066:	e01b      	b.n	80020a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b41      	subs	r3, #65	; 0x41
 800207a:	221f      	movs	r2, #31
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4019      	ands	r1, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	3b41      	subs	r3, #65	; 0x41
 8002094:	fa00 f203 	lsl.w	r2, r0, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b09      	cmp	r3, #9
 80020a6:	d91c      	bls.n	80020e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68d9      	ldr	r1, [r3, #12]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	3b1e      	subs	r3, #30
 80020ba:	2207      	movs	r2, #7
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4019      	ands	r1, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6898      	ldr	r0, [r3, #8]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	3b1e      	subs	r3, #30
 80020d4:	fa00 f203 	lsl.w	r2, r0, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	e019      	b.n	8002116 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6919      	ldr	r1, [r3, #16]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	2207      	movs	r2, #7
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4019      	ands	r1, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6898      	ldr	r0, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	fa00 f203 	lsl.w	r2, r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b10      	cmp	r3, #16
 800211c:	d003      	beq.n	8002126 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002122:	2b11      	cmp	r3, #17
 8002124:	d132      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d125      	bne.n	800217c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d126      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800214c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b10      	cmp	r3, #16
 8002154:	d11a      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	0c9a      	lsrs	r2, r3, #18
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800216c:	e002      	b.n	8002174 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3b01      	subs	r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f9      	bne.n	800216e <HAL_ADC_ConfigChannel+0x1b2>
 800217a:	e007      	b.n	800218c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	40012400 	.word	0x40012400
 80021a4:	20000020 	.word	0x20000020
 80021a8:	431bde83 	.word	0x431bde83

080021ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d040      	beq.n	800224c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021da:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <ADC_Enable+0xac>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1f      	ldr	r2, [pc, #124]	; (800225c <ADC_Enable+0xb0>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	0c9b      	lsrs	r3, r3, #18
 80021e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021e8:	e002      	b.n	80021f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021f6:	f7ff fc1b 	bl	8001a30 <HAL_GetTick>
 80021fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021fc:	e01f      	b.n	800223e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021fe:	f7ff fc17 	bl	8001a30 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d918      	bls.n	800223e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b01      	cmp	r3, #1
 8002218:	d011      	beq.n	800223e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	f043 0210 	orr.w	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e007      	b.n	800224e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d1d8      	bne.n	80021fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000020 	.word	0x20000020
 800225c:	431bde83 	.word	0x431bde83

08002260 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d12e      	bne.n	80022d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800228a:	f7ff fbd1 	bl	8001a30 <HAL_GetTick>
 800228e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002290:	e01b      	b.n	80022ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002292:	f7ff fbcd 	bl	8001a30 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d914      	bls.n	80022ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10d      	bne.n	80022ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f043 0210 	orr.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e007      	b.n	80022da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d0dc      	beq.n	8002292 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_ADCEx_Calibration_Start+0x1e>
 80022fe:	2302      	movs	r3, #2
 8002300:	e097      	b.n	8002432 <HAL_ADCEx_Calibration_Start+0x14e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffa8 	bl	8002260 <ADC_ConversionStop_Disable>
 8002310:	4603      	mov	r3, r0
 8002312:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff49 	bl	80021ac <ADC_Enable>
 800231a:	4603      	mov	r3, r0
 800231c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f040 8081 	bne.w	8002428 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800232e:	f023 0302 	bic.w	r3, r3, #2
 8002332:	f043 0202 	orr.w	r2, r3, #2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800233a:	4b40      	ldr	r3, [pc, #256]	; (800243c <HAL_ADCEx_Calibration_Start+0x158>)
 800233c:	681c      	ldr	r4, [r3, #0]
 800233e:	2002      	movs	r0, #2
 8002340:	f002 f976 	bl	8004630 <HAL_RCCEx_GetPeriphCLKFreq>
 8002344:	4603      	mov	r3, r0
 8002346:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800234a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800234c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800234e:	e002      	b.n	8002356 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3b01      	subs	r3, #1
 8002354:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f9      	bne.n	8002350 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0208 	orr.w	r2, r2, #8
 800236a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800236c:	f7ff fb60 	bl	8001a30 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002372:	e01b      	b.n	80023ac <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002374:	f7ff fb5c 	bl	8001a30 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d914      	bls.n	80023ac <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00d      	beq.n	80023ac <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	f023 0312 	bic.w	r3, r3, #18
 8002398:	f043 0210 	orr.w	r2, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e042      	b.n	8002432 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1dc      	bne.n	8002374 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0204 	orr.w	r2, r2, #4
 80023c8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80023ca:	f7ff fb31 	bl	8001a30 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023d0:	e01b      	b.n	800240a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80023d2:	f7ff fb2d 	bl	8001a30 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b0a      	cmp	r3, #10
 80023de:	d914      	bls.n	800240a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00d      	beq.n	800240a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	f023 0312 	bic.w	r3, r3, #18
 80023f6:	f043 0210 	orr.w	r2, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e013      	b.n	8002432 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1dc      	bne.n	80023d2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	f023 0303 	bic.w	r3, r3, #3
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002430:	7dfb      	ldrb	r3, [r7, #23]
}
 8002432:	4618      	mov	r0, r3
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	bf00      	nop
 800243c:	20000020 	.word	0x20000020

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800246c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002472:	4a04      	ldr	r2, [pc, #16]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	60d3      	str	r3, [r2, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4906      	ldr	r1, [pc, #24]	; (80024d8 <__NVIC_EnableIRQ+0x34>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100

080024dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	db0a      	blt.n	8002506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	490c      	ldr	r1, [pc, #48]	; (8002528 <__NVIC_SetPriority+0x4c>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	0112      	lsls	r2, r2, #4
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	440b      	add	r3, r1
 8002500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002504:	e00a      	b.n	800251c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4908      	ldr	r1, [pc, #32]	; (800252c <__NVIC_SetPriority+0x50>)
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	3b04      	subs	r3, #4
 8002514:	0112      	lsls	r2, r2, #4
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	440b      	add	r3, r1
 800251a:	761a      	strb	r2, [r3, #24]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	; 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f1c3 0307 	rsb	r3, r3, #7
 800254a:	2b04      	cmp	r3, #4
 800254c:	bf28      	it	cs
 800254e:	2304      	movcs	r3, #4
 8002550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3304      	adds	r3, #4
 8002556:	2b06      	cmp	r3, #6
 8002558:	d902      	bls.n	8002560 <NVIC_EncodePriority+0x30>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3b03      	subs	r3, #3
 800255e:	e000      	b.n	8002562 <NVIC_EncodePriority+0x32>
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43da      	mvns	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	401a      	ands	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	43d9      	mvns	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	4313      	orrs	r3, r2
         );
}
 800258a:	4618      	mov	r0, r3
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025a4:	d301      	bcc.n	80025aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00f      	b.n	80025ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <SysTick_Config+0x40>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025b2:	210f      	movs	r1, #15
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f7ff ff90 	bl	80024dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <SysTick_Config+0x40>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025c2:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <SysTick_Config+0x40>)
 80025c4:	2207      	movs	r2, #7
 80025c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	e000e010 	.word	0xe000e010

080025d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff2d 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4603      	mov	r3, r0
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002600:	f7ff ff42 	bl	8002488 <__NVIC_GetPriorityGrouping>
 8002604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68b9      	ldr	r1, [r7, #8]
 800260a:	6978      	ldr	r0, [r7, #20]
 800260c:	f7ff ff90 	bl	8002530 <NVIC_EncodePriority>
 8002610:	4602      	mov	r2, r0
 8002612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff5f 	bl	80024dc <__NVIC_SetPriority>
}
 800261e:	bf00      	nop
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	4603      	mov	r3, r0
 800262e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff35 	bl	80024a4 <__NVIC_EnableIRQ>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ffa2 	bl	8002594 <SysTick_Config>
 8002650:	4603      	mov	r3, r0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800265c:	b480      	push	{r7}
 800265e:	b08b      	sub	sp, #44	; 0x2c
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800266e:	e169      	b.n	8002944 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002670:	2201      	movs	r2, #1
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	429a      	cmp	r2, r3
 800268a:	f040 8158 	bne.w	800293e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4a9a      	ldr	r2, [pc, #616]	; (80028fc <HAL_GPIO_Init+0x2a0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d05e      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 8002698:	4a98      	ldr	r2, [pc, #608]	; (80028fc <HAL_GPIO_Init+0x2a0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d875      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 800269e:	4a98      	ldr	r2, [pc, #608]	; (8002900 <HAL_GPIO_Init+0x2a4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d058      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 80026a4:	4a96      	ldr	r2, [pc, #600]	; (8002900 <HAL_GPIO_Init+0x2a4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d86f      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026aa:	4a96      	ldr	r2, [pc, #600]	; (8002904 <HAL_GPIO_Init+0x2a8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d052      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 80026b0:	4a94      	ldr	r2, [pc, #592]	; (8002904 <HAL_GPIO_Init+0x2a8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d869      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026b6:	4a94      	ldr	r2, [pc, #592]	; (8002908 <HAL_GPIO_Init+0x2ac>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d04c      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 80026bc:	4a92      	ldr	r2, [pc, #584]	; (8002908 <HAL_GPIO_Init+0x2ac>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d863      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026c2:	4a92      	ldr	r2, [pc, #584]	; (800290c <HAL_GPIO_Init+0x2b0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d046      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
 80026c8:	4a90      	ldr	r2, [pc, #576]	; (800290c <HAL_GPIO_Init+0x2b0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d85d      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026ce:	2b12      	cmp	r3, #18
 80026d0:	d82a      	bhi.n	8002728 <HAL_GPIO_Init+0xcc>
 80026d2:	2b12      	cmp	r3, #18
 80026d4:	d859      	bhi.n	800278a <HAL_GPIO_Init+0x12e>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <HAL_GPIO_Init+0x80>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	08002757 	.word	0x08002757
 80026e0:	08002731 	.word	0x08002731
 80026e4:	08002743 	.word	0x08002743
 80026e8:	08002785 	.word	0x08002785
 80026ec:	0800278b 	.word	0x0800278b
 80026f0:	0800278b 	.word	0x0800278b
 80026f4:	0800278b 	.word	0x0800278b
 80026f8:	0800278b 	.word	0x0800278b
 80026fc:	0800278b 	.word	0x0800278b
 8002700:	0800278b 	.word	0x0800278b
 8002704:	0800278b 	.word	0x0800278b
 8002708:	0800278b 	.word	0x0800278b
 800270c:	0800278b 	.word	0x0800278b
 8002710:	0800278b 	.word	0x0800278b
 8002714:	0800278b 	.word	0x0800278b
 8002718:	0800278b 	.word	0x0800278b
 800271c:	0800278b 	.word	0x0800278b
 8002720:	08002739 	.word	0x08002739
 8002724:	0800274d 	.word	0x0800274d
 8002728:	4a79      	ldr	r2, [pc, #484]	; (8002910 <HAL_GPIO_Init+0x2b4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800272e:	e02c      	b.n	800278a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	623b      	str	r3, [r7, #32]
          break;
 8002736:	e029      	b.n	800278c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	3304      	adds	r3, #4
 800273e:	623b      	str	r3, [r7, #32]
          break;
 8002740:	e024      	b.n	800278c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	3308      	adds	r3, #8
 8002748:	623b      	str	r3, [r7, #32]
          break;
 800274a:	e01f      	b.n	800278c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	330c      	adds	r3, #12
 8002752:	623b      	str	r3, [r7, #32]
          break;
 8002754:	e01a      	b.n	800278c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800275e:	2304      	movs	r3, #4
 8002760:	623b      	str	r3, [r7, #32]
          break;
 8002762:	e013      	b.n	800278c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800276c:	2308      	movs	r3, #8
 800276e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	611a      	str	r2, [r3, #16]
          break;
 8002776:	e009      	b.n	800278c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002778:	2308      	movs	r3, #8
 800277a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	615a      	str	r2, [r3, #20]
          break;
 8002782:	e003      	b.n	800278c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002784:	2300      	movs	r3, #0
 8002786:	623b      	str	r3, [r7, #32]
          break;
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x130>
          break;
 800278a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2bff      	cmp	r3, #255	; 0xff
 8002790:	d801      	bhi.n	8002796 <HAL_GPIO_Init+0x13a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	e001      	b.n	800279a <HAL_GPIO_Init+0x13e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2bff      	cmp	r3, #255	; 0xff
 80027a0:	d802      	bhi.n	80027a8 <HAL_GPIO_Init+0x14c>
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	e002      	b.n	80027ae <HAL_GPIO_Init+0x152>
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	3b08      	subs	r3, #8
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	210f      	movs	r1, #15
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	6a39      	ldr	r1, [r7, #32]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	431a      	orrs	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80b1 	beq.w	800293e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027dc:	4b4d      	ldr	r3, [pc, #308]	; (8002914 <HAL_GPIO_Init+0x2b8>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a4c      	ldr	r2, [pc, #304]	; (8002914 <HAL_GPIO_Init+0x2b8>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <HAL_GPIO_Init+0x2b8>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027f4:	4a48      	ldr	r2, [pc, #288]	; (8002918 <HAL_GPIO_Init+0x2bc>)
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	089b      	lsrs	r3, r3, #2
 80027fa:	3302      	adds	r3, #2
 80027fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002800:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	220f      	movs	r2, #15
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a40      	ldr	r2, [pc, #256]	; (800291c <HAL_GPIO_Init+0x2c0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d013      	beq.n	8002848 <HAL_GPIO_Init+0x1ec>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3f      	ldr	r2, [pc, #252]	; (8002920 <HAL_GPIO_Init+0x2c4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00d      	beq.n	8002844 <HAL_GPIO_Init+0x1e8>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3e      	ldr	r2, [pc, #248]	; (8002924 <HAL_GPIO_Init+0x2c8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d007      	beq.n	8002840 <HAL_GPIO_Init+0x1e4>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a3d      	ldr	r2, [pc, #244]	; (8002928 <HAL_GPIO_Init+0x2cc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d101      	bne.n	800283c <HAL_GPIO_Init+0x1e0>
 8002838:	2303      	movs	r3, #3
 800283a:	e006      	b.n	800284a <HAL_GPIO_Init+0x1ee>
 800283c:	2304      	movs	r3, #4
 800283e:	e004      	b.n	800284a <HAL_GPIO_Init+0x1ee>
 8002840:	2302      	movs	r3, #2
 8002842:	e002      	b.n	800284a <HAL_GPIO_Init+0x1ee>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <HAL_GPIO_Init+0x1ee>
 8002848:	2300      	movs	r3, #0
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	f002 0203 	and.w	r2, r2, #3
 8002850:	0092      	lsls	r2, r2, #2
 8002852:	4093      	lsls	r3, r2
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800285a:	492f      	ldr	r1, [pc, #188]	; (8002918 <HAL_GPIO_Init+0x2bc>)
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	089b      	lsrs	r3, r3, #2
 8002860:	3302      	adds	r3, #2
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002874:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_GPIO_Init+0x2d0>)
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	492c      	ldr	r1, [pc, #176]	; (800292c <HAL_GPIO_Init+0x2d0>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002882:	4b2a      	ldr	r3, [pc, #168]	; (800292c <HAL_GPIO_Init+0x2d0>)
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	43db      	mvns	r3, r3
 800288a:	4928      	ldr	r1, [pc, #160]	; (800292c <HAL_GPIO_Init+0x2d0>)
 800288c:	4013      	ands	r3, r2
 800288e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d006      	beq.n	80028aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800289c:	4b23      	ldr	r3, [pc, #140]	; (800292c <HAL_GPIO_Init+0x2d0>)
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	4922      	ldr	r1, [pc, #136]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	491e      	ldr	r1, [pc, #120]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d006      	beq.n	80028d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028c4:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4918      	ldr	r1, [pc, #96]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
 80028d0:	e006      	b.n	80028e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028d2:	4b16      	ldr	r3, [pc, #88]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	43db      	mvns	r3, r3
 80028da:	4914      	ldr	r1, [pc, #80]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028dc:	4013      	ands	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d021      	beq.n	8002930 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	490e      	ldr	r1, [pc, #56]	; (800292c <HAL_GPIO_Init+0x2d0>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]
 80028f8:	e021      	b.n	800293e <HAL_GPIO_Init+0x2e2>
 80028fa:	bf00      	nop
 80028fc:	10320000 	.word	0x10320000
 8002900:	10310000 	.word	0x10310000
 8002904:	10220000 	.word	0x10220000
 8002908:	10210000 	.word	0x10210000
 800290c:	10120000 	.word	0x10120000
 8002910:	10110000 	.word	0x10110000
 8002914:	40021000 	.word	0x40021000
 8002918:	40010000 	.word	0x40010000
 800291c:	40010800 	.word	0x40010800
 8002920:	40010c00 	.word	0x40010c00
 8002924:	40011000 	.word	0x40011000
 8002928:	40011400 	.word	0x40011400
 800292c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_GPIO_Init+0x304>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	43db      	mvns	r3, r3
 8002938:	4909      	ldr	r1, [pc, #36]	; (8002960 <HAL_GPIO_Init+0x304>)
 800293a:	4013      	ands	r3, r2
 800293c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	3301      	adds	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	fa22 f303 	lsr.w	r3, r2, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	f47f ae8e 	bne.w	8002670 <HAL_GPIO_Init+0x14>
  }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	372c      	adds	r7, #44	; 0x2c
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	40010400 	.word	0x40010400

08002964 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
 8002980:	e001      	b.n	8002986 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002986:	7bfb      	ldrb	r3, [r7, #15]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	460b      	mov	r3, r1
 800299c:	807b      	strh	r3, [r7, #2]
 800299e:	4613      	mov	r3, r2
 80029a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029a2:	787b      	ldrb	r3, [r7, #1]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a8:	887a      	ldrh	r2, [r7, #2]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ae:	e003      	b.n	80029b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029b0:	887b      	ldrh	r3, [r7, #2]
 80029b2:	041a      	lsls	r2, r3, #16
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	611a      	str	r2, [r3, #16]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029d4:	887a      	ldrh	r2, [r7, #2]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4013      	ands	r3, r2
 80029da:	041a      	lsls	r2, r3, #16
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	43d9      	mvns	r1, r3
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	400b      	ands	r3, r1
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	611a      	str	r2, [r3, #16]
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a0a:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe f9b0 	bl	8000d78 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40010400 	.word	0x40010400

08002a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e12b      	b.n	8002c8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe fe18 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2224      	movs	r2, #36	; 0x24
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a88:	f001 fcd6 	bl	8004438 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4a81      	ldr	r2, [pc, #516]	; (8002c98 <HAL_I2C_Init+0x274>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d807      	bhi.n	8002aa8 <HAL_I2C_Init+0x84>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a80      	ldr	r2, [pc, #512]	; (8002c9c <HAL_I2C_Init+0x278>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	bf94      	ite	ls
 8002aa0:	2301      	movls	r3, #1
 8002aa2:	2300      	movhi	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e006      	b.n	8002ab6 <HAL_I2C_Init+0x92>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a7d      	ldr	r2, [pc, #500]	; (8002ca0 <HAL_I2C_Init+0x27c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bf94      	ite	ls
 8002ab0:	2301      	movls	r3, #1
 8002ab2:	2300      	movhi	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0e7      	b.n	8002c8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a78      	ldr	r2, [pc, #480]	; (8002ca4 <HAL_I2C_Init+0x280>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	0c9b      	lsrs	r3, r3, #18
 8002ac8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a6a      	ldr	r2, [pc, #424]	; (8002c98 <HAL_I2C_Init+0x274>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d802      	bhi.n	8002af8 <HAL_I2C_Init+0xd4>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3301      	adds	r3, #1
 8002af6:	e009      	b.n	8002b0c <HAL_I2C_Init+0xe8>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	4a69      	ldr	r2, [pc, #420]	; (8002ca8 <HAL_I2C_Init+0x284>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	495c      	ldr	r1, [pc, #368]	; (8002c98 <HAL_I2C_Init+0x274>)
 8002b28:	428b      	cmp	r3, r1
 8002b2a:	d819      	bhi.n	8002b60 <HAL_I2C_Init+0x13c>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e59      	subs	r1, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b3a:	1c59      	adds	r1, r3, #1
 8002b3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b40:	400b      	ands	r3, r1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_I2C_Init+0x138>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1e59      	subs	r1, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5a:	e051      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	e04f      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d111      	bne.n	8002b8c <HAL_I2C_Init+0x168>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	440b      	add	r3, r1
 8002b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	e012      	b.n	8002bb2 <HAL_I2C_Init+0x18e>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1e58      	subs	r0, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	0099      	lsls	r1, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Init+0x196>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e022      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10e      	bne.n	8002be0 <HAL_I2C_Init+0x1bc>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1e58      	subs	r0, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6859      	ldr	r1, [r3, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	440b      	add	r3, r1
 8002bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bde:	e00f      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e58      	subs	r0, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	0099      	lsls	r1, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	6809      	ldr	r1, [r1, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69da      	ldr	r2, [r3, #28]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6911      	ldr	r1, [r2, #16]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68d2      	ldr	r2, [r2, #12]
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	430b      	orrs	r3, r1
 8002c42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	000186a0 	.word	0x000186a0
 8002c9c:	001e847f 	.word	0x001e847f
 8002ca0:	003d08ff 	.word	0x003d08ff
 8002ca4:	431bde83 	.word	0x431bde83
 8002ca8:	10624dd3 	.word	0x10624dd3

08002cac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7fe feb6 	bl	8001a30 <HAL_GetTick>
 8002cc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	f040 80e0 	bne.w	8002e94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2319      	movs	r3, #25
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4970      	ldr	r1, [pc, #448]	; (8002ea0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fcac 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
 8002cec:	e0d3      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2C_Master_Transmit+0x50>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0cc      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d007      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2221      	movs	r2, #33	; 0x21
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	893a      	ldrh	r2, [r7, #8]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a50      	ldr	r2, [pc, #320]	; (8002ea4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fb16 	bl	800339c <I2C_MasterRequestWrite>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e08d      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d90:	e066      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	6a39      	ldr	r1, [r7, #32]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fd6a 	bl	8003870 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d107      	bne.n	8002dba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06b      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d11b      	bne.n	8002e34 <HAL_I2C_Master_Transmit+0x188>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d017      	beq.n	8002e34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	6a39      	ldr	r1, [r7, #32]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fd61 	bl	8003900 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00d      	beq.n	8002e60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d107      	bne.n	8002e5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e01a      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d194      	bne.n	8002d92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	00100002 	.word	0x00100002
 8002ea4:	ffff0000 	.word	0xffff0000

08002ea8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	; 0x30
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7fe fdb6 	bl	8001a30 <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	f040 824b 	bne.w	800336a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2319      	movs	r3, #25
 8002eda:	2201      	movs	r2, #1
 8002edc:	497f      	ldr	r1, [pc, #508]	; (80030dc <HAL_I2C_Master_Receive+0x234>)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fbac 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
 8002eec:	e23e      	b.n	800336c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_I2C_Master_Receive+0x54>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e237      	b.n	800336c <HAL_I2C_Master_Receive+0x4c4>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d007      	beq.n	8002f22 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2222      	movs	r2, #34	; 0x22
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2210      	movs	r2, #16
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	893a      	ldrh	r2, [r7, #8]
 8002f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a5f      	ldr	r2, [pc, #380]	; (80030e0 <HAL_I2C_Master_Receive+0x238>)
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f64:	8979      	ldrh	r1, [r7, #10]
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fa98 	bl	80034a0 <I2C_MasterRequestRead>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e1f8      	b.n	800336c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d113      	bne.n	8002faa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e1cc      	b.n	8003344 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d11e      	bne.n	8002ff0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc2:	b672      	cpsid	i
}
 8002fc4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fec:	b662      	cpsie	i
}
 8002fee:	e035      	b.n	800305c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d11e      	bne.n	8003036 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003006:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003008:	b672      	cpsid	i
}
 800300a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003030:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003032:	b662      	cpsie	i
}
 8003034:	e012      	b.n	800305c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800305c:	e172      	b.n	8003344 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	2b03      	cmp	r3, #3
 8003064:	f200 811f 	bhi.w	80032a6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	2b01      	cmp	r3, #1
 800306e:	d123      	bne.n	80030b8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fc8b 	bl	8003990 <I2C_WaitOnRXNEFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e173      	b.n	800336c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b6:	e145      	b.n	8003344 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d152      	bne.n	8003166 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	2200      	movs	r2, #0
 80030c8:	4906      	ldr	r1, [pc, #24]	; (80030e4 <HAL_I2C_Master_Receive+0x23c>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fab6 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e148      	b.n	800336c <HAL_I2C_Master_Receive+0x4c4>
 80030da:	bf00      	nop
 80030dc:	00100002 	.word	0x00100002
 80030e0:	ffff0000 	.word	0xffff0000
 80030e4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80030e8:	b672      	cpsid	i
}
 80030ea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800312e:	b662      	cpsie	i
}
 8003130:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003164:	e0ee      	b.n	8003344 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	2200      	movs	r2, #0
 800316e:	4981      	ldr	r1, [pc, #516]	; (8003374 <HAL_I2C_Master_Receive+0x4cc>)
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fa63 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0f5      	b.n	800336c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003190:	b672      	cpsid	i
}
 8003192:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031c6:	4b6c      	ldr	r3, [pc, #432]	; (8003378 <HAL_I2C_Master_Receive+0x4d0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	08db      	lsrs	r3, r3, #3
 80031cc:	4a6b      	ldr	r2, [pc, #428]	; (800337c <HAL_I2C_Master_Receive+0x4d4>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0a1a      	lsrs	r2, r3, #8
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00da      	lsls	r2, r3, #3
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d118      	bne.n	800321e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f043 0220 	orr.w	r2, r3, #32
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800320e:	b662      	cpsie	i
}
 8003210:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0a6      	b.n	800336c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b04      	cmp	r3, #4
 800322a:	d1d9      	bne.n	80031e0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800326e:	b662      	cpsie	i
}
 8003270:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032a4:	e04e      	b.n	8003344 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fb70 	bl	8003990 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e058      	b.n	800336c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d124      	bne.n	8003344 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d107      	bne.n	8003312 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003310:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	f47f ae88 	bne.w	800305e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e000      	b.n	800336c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800336a:	2302      	movs	r3, #2
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	3728      	adds	r7, #40	; 0x28
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	00010004 	.word	0x00010004
 8003378:	20000020 	.word	0x20000020
 800337c:	14f8b589 	.word	0x14f8b589

08003380 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338e:	b2db      	uxtb	r3, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
	...

0800339c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	460b      	mov	r3, r1
 80033aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d006      	beq.n	80033c6 <I2C_MasterRequestWrite+0x2a>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d003      	beq.n	80033c6 <I2C_MasterRequestWrite+0x2a>
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033c4:	d108      	bne.n	80033d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e00b      	b.n	80033f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	2b12      	cmp	r3, #18
 80033de:	d107      	bne.n	80033f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f91d 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003416:	d103      	bne.n	8003420 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e035      	b.n	8003490 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800342c:	d108      	bne.n	8003440 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800343c:	611a      	str	r2, [r3, #16]
 800343e:	e01b      	b.n	8003478 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003440:	897b      	ldrh	r3, [r7, #10]
 8003442:	11db      	asrs	r3, r3, #7
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0306 	and.w	r3, r3, #6
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f063 030f 	orn	r3, r3, #15
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	490e      	ldr	r1, [pc, #56]	; (8003498 <I2C_MasterRequestWrite+0xfc>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f966 	bl	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e010      	b.n	8003490 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4907      	ldr	r1, [pc, #28]	; (800349c <I2C_MasterRequestWrite+0x100>)
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f956 	bl	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	00010008 	.word	0x00010008
 800349c:	00010002 	.word	0x00010002

080034a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	460b      	mov	r3, r1
 80034ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d006      	beq.n	80034da <I2C_MasterRequestRead+0x3a>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d003      	beq.n	80034da <I2C_MasterRequestRead+0x3a>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034d8:	d108      	bne.n	80034ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e00b      	b.n	8003504 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	2b11      	cmp	r3, #17
 80034f2:	d107      	bne.n	8003504 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f893 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352a:	d103      	bne.n	8003534 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e079      	b.n	800362c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003540:	d108      	bne.n	8003554 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	611a      	str	r2, [r3, #16]
 8003552:	e05f      	b.n	8003614 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003554:	897b      	ldrh	r3, [r7, #10]
 8003556:	11db      	asrs	r3, r3, #7
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0306 	and.w	r3, r3, #6
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f063 030f 	orn	r3, r3, #15
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4930      	ldr	r1, [pc, #192]	; (8003634 <I2C_MasterRequestRead+0x194>)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f8dc 	bl	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e054      	b.n	800362c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003582:	897b      	ldrh	r3, [r7, #10]
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4929      	ldr	r1, [pc, #164]	; (8003638 <I2C_MasterRequestRead+0x198>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f8cc 	bl	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e044      	b.n	800362c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f831 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00d      	beq.n	80035fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ee:	d103      	bne.n	80035f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e017      	b.n	800362c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80035fc:	897b      	ldrh	r3, [r7, #10]
 80035fe:	11db      	asrs	r3, r3, #7
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 0306 	and.w	r3, r3, #6
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f063 030e 	orn	r3, r3, #14
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4907      	ldr	r1, [pc, #28]	; (8003638 <I2C_MasterRequestRead+0x198>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f888 	bl	8003730 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	00010008 	.word	0x00010008
 8003638:	00010002 	.word	0x00010002

0800363c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364c:	e048      	b.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d044      	beq.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fe f9eb 	bl	8001a30 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d139      	bne.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10d      	bne.n	8003692 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	43da      	mvns	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	e00c      	b.n	80036ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d116      	bne.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e023      	b.n	8003728 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10d      	bne.n	8003706 <I2C_WaitOnFlagUntilTimeout+0xca>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	43da      	mvns	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	e00c      	b.n	8003720 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	43da      	mvns	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	429a      	cmp	r2, r3
 8003724:	d093      	beq.n	800364e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800373e:	e071      	b.n	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374e:	d123      	bne.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003768:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f043 0204 	orr.w	r2, r3, #4
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e067      	b.n	8003868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d041      	beq.n	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a0:	f7fe f946 	bl	8001a30 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d302      	bcc.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d136      	bne.n	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d10c      	bne.n	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4013      	ands	r3, r2
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	bf14      	ite	ne
 80037d2:	2301      	movne	r3, #1
 80037d4:	2300      	moveq	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	e00b      	b.n	80037f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	43da      	mvns	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4013      	ands	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e021      	b.n	8003868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d10c      	bne.n	8003848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	43da      	mvns	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	e00b      	b.n	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	43da      	mvns	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4013      	ands	r3, r2
 8003854:	b29b      	uxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	2300      	moveq	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	f47f af6d 	bne.w	8003740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800387c:	e034      	b.n	80038e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f8e3 	bl	8003a4a <I2C_IsAcknowledgeFailed>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e034      	b.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d028      	beq.n	80038e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003896:	f7fe f8cb 	bl	8001a30 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d302      	bcc.n	80038ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d11d      	bne.n	80038e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d016      	beq.n	80038e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	f043 0220 	orr.w	r2, r3, #32
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e007      	b.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	2b80      	cmp	r3, #128	; 0x80
 80038f4:	d1c3      	bne.n	800387e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800390c:	e034      	b.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f89b 	bl	8003a4a <I2C_IsAcknowledgeFailed>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e034      	b.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d028      	beq.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fe f883 	bl	8001a30 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d11d      	bne.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b04      	cmp	r3, #4
 8003948:	d016      	beq.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e007      	b.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b04      	cmp	r3, #4
 8003984:	d1c3      	bne.n	800390e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800399c:	e049      	b.n	8003a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d119      	bne.n	80039e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0210 	mvn.w	r2, #16
 80039b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e030      	b.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e0:	f7fe f826 	bl	8001a30 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d302      	bcc.n	80039f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d11d      	bne.n	8003a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d016      	beq.n	8003a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f043 0220 	orr.w	r2, r3, #32
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e007      	b.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d1ae      	bne.n	800399e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a60:	d11b      	bne.n	8003a9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f043 0204 	orr.w	r2, r3, #4
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003aa6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa8:	b08b      	sub	sp, #44	; 0x2c
 8003aaa:	af06      	add	r7, sp, #24
 8003aac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0f1      	b.n	8003c9c <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d106      	bne.n	8003ad2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fd fe93 	bl	80017f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 fce4 	bl	80054ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	687e      	ldr	r6, [r7, #4]
 8003aec:	466d      	mov	r5, sp
 8003aee:	f106 0410 	add.w	r4, r6, #16
 8003af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	602b      	str	r3, [r5, #0]
 8003afa:	1d33      	adds	r3, r6, #4
 8003afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003afe:	6838      	ldr	r0, [r7, #0]
 8003b00:	f001 fcc4 	bl	800548c <USB_CoreInit>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0c2      	b.n	8003c9c <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 fcdf 	bl	80054e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
 8003b26:	e040      	b.n	8003baa <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	440b      	add	r3, r1
 8003b38:	3301      	adds	r3, #1
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	440b      	add	r3, r1
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	440b      	add	r3, r1
 8003b62:	3303      	adds	r3, #3
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	440b      	add	r3, r1
 8003b76:	3338      	adds	r3, #56	; 0x38
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	440b      	add	r3, r1
 8003b8a:	333c      	adds	r3, #60	; 0x3c
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3340      	adds	r3, #64	; 0x40
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d3b9      	bcc.n	8003b28 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	73fb      	strb	r3, [r7, #15]
 8003bb8:	e044      	b.n	8003c44 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bba:	7bfa      	ldrb	r2, [r7, #15]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bd0:	7bfa      	ldrb	r2, [r7, #15]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	440b      	add	r3, r1
 8003bde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003be6:	7bfa      	ldrb	r2, [r7, #15]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	440b      	add	r3, r1
 8003c0a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	440b      	add	r3, r1
 8003c20:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	440b      	add	r3, r1
 8003c36:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	3301      	adds	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
 8003c44:	7bfa      	ldrb	r2, [r7, #15]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d3b5      	bcc.n	8003bba <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	687e      	ldr	r6, [r7, #4]
 8003c56:	466d      	mov	r5, sp
 8003c58:	f106 0410 	add.w	r4, r6, #16
 8003c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	602b      	str	r3, [r5, #0]
 8003c64:	1d33      	adds	r3, r6, #4
 8003c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c68:	6838      	ldr	r0, [r7, #0]
 8003c6a:	f001 fc45 	bl	80054f8 <USB_DevInit>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e00d      	b.n	8003c9c <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 fc4f 	bl	8005538 <USB_DevDisconnect>

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e272      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8087 	beq.w	8003dd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cc4:	4b92      	ldr	r3, [pc, #584]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d00c      	beq.n	8003cea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cd0:	4b8f      	ldr	r3, [pc, #572]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d112      	bne.n	8003d02 <HAL_RCC_OscConfig+0x5e>
 8003cdc:	4b8c      	ldr	r3, [pc, #560]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d10b      	bne.n	8003d02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cea:	4b89      	ldr	r3, [pc, #548]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d06c      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x12c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d168      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e24c      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCC_OscConfig+0x76>
 8003d0c:	4b80      	ldr	r3, [pc, #512]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a7f      	ldr	r2, [pc, #508]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	e02e      	b.n	8003d78 <HAL_RCC_OscConfig+0xd4>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x98>
 8003d22:	4b7b      	ldr	r3, [pc, #492]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a7a      	ldr	r2, [pc, #488]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b78      	ldr	r3, [pc, #480]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a77      	ldr	r2, [pc, #476]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e01d      	b.n	8003d78 <HAL_RCC_OscConfig+0xd4>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0xbc>
 8003d46:	4b72      	ldr	r3, [pc, #456]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a71      	ldr	r2, [pc, #452]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b6f      	ldr	r3, [pc, #444]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6e      	ldr	r2, [pc, #440]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e00b      	b.n	8003d78 <HAL_RCC_OscConfig+0xd4>
 8003d60:	4b6b      	ldr	r3, [pc, #428]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6a      	ldr	r2, [pc, #424]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	4b68      	ldr	r3, [pc, #416]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a67      	ldr	r2, [pc, #412]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d013      	beq.n	8003da8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d80:	f7fd fe56 	bl	8001a30 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d88:	f7fd fe52 	bl	8001a30 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	; 0x64
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e200      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	4b5d      	ldr	r3, [pc, #372]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0xe4>
 8003da6:	e014      	b.n	8003dd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fd fe42 	bl	8001a30 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fd fe3e 	bl	8001a30 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e1ec      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc2:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x10c>
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d063      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dde:	4b4c      	ldr	r3, [pc, #304]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00b      	beq.n	8003e02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003dea:	4b49      	ldr	r3, [pc, #292]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d11c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x18c>
 8003df6:	4b46      	ldr	r3, [pc, #280]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d116      	bne.n	8003e30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e02:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_RCC_OscConfig+0x176>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d001      	beq.n	8003e1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e1c0      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1a:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4939      	ldr	r1, [pc, #228]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2e:	e03a      	b.n	8003ea6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d020      	beq.n	8003e7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e38:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3e:	f7fd fdf7 	bl	8001a30 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e46:	f7fd fdf3 	bl	8001a30 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e1a1      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e58:	4b2d      	ldr	r3, [pc, #180]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e64:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4927      	ldr	r1, [pc, #156]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	600b      	str	r3, [r1, #0]
 8003e78:	e015      	b.n	8003ea6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e7a:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fd fdd6 	bl	8001a30 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e88:	f7fd fdd2 	bl	8001a30 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e180      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d03a      	beq.n	8003f28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d019      	beq.n	8003eee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <HAL_RCC_OscConfig+0x274>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec0:	f7fd fdb6 	bl	8001a30 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec8:	f7fd fdb2 	bl	8001a30 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e160      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eda:	4b0d      	ldr	r3, [pc, #52]	; (8003f10 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	f000 face 	bl	8004488 <RCC_Delay>
 8003eec:	e01c      	b.n	8003f28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef4:	f7fd fd9c 	bl	8001a30 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003efa:	e00f      	b.n	8003f1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efc:	f7fd fd98 	bl	8001a30 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d908      	bls.n	8003f1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e146      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000
 8003f14:	42420000 	.word	0x42420000
 8003f18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f1c:	4b92      	ldr	r3, [pc, #584]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e9      	bne.n	8003efc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80a6 	beq.w	8004082 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f36:	2300      	movs	r3, #0
 8003f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3a:	4b8b      	ldr	r3, [pc, #556]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10d      	bne.n	8003f62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f46:	4b88      	ldr	r3, [pc, #544]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	4a87      	ldr	r2, [pc, #540]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f50:	61d3      	str	r3, [r2, #28]
 8003f52:	4b85      	ldr	r3, [pc, #532]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f62:	4b82      	ldr	r3, [pc, #520]	; (800416c <HAL_RCC_OscConfig+0x4c8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d118      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f6e:	4b7f      	ldr	r3, [pc, #508]	; (800416c <HAL_RCC_OscConfig+0x4c8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a7e      	ldr	r2, [pc, #504]	; (800416c <HAL_RCC_OscConfig+0x4c8>)
 8003f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f7a:	f7fd fd59 	bl	8001a30 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f82:	f7fd fd55 	bl	8001a30 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b64      	cmp	r3, #100	; 0x64
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e103      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f94:	4b75      	ldr	r3, [pc, #468]	; (800416c <HAL_RCC_OscConfig+0x4c8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d106      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x312>
 8003fa8:	4b6f      	ldr	r3, [pc, #444]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	4a6e      	ldr	r2, [pc, #440]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	6213      	str	r3, [r2, #32]
 8003fb4:	e02d      	b.n	8004012 <HAL_RCC_OscConfig+0x36e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x334>
 8003fbe:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	4a69      	ldr	r2, [pc, #420]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	6213      	str	r3, [r2, #32]
 8003fca:	4b67      	ldr	r3, [pc, #412]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	4a66      	ldr	r2, [pc, #408]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	6213      	str	r3, [r2, #32]
 8003fd6:	e01c      	b.n	8004012 <HAL_RCC_OscConfig+0x36e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b05      	cmp	r3, #5
 8003fde:	d10c      	bne.n	8003ffa <HAL_RCC_OscConfig+0x356>
 8003fe0:	4b61      	ldr	r3, [pc, #388]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	4a60      	ldr	r2, [pc, #384]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003fe6:	f043 0304 	orr.w	r3, r3, #4
 8003fea:	6213      	str	r3, [r2, #32]
 8003fec:	4b5e      	ldr	r3, [pc, #376]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	4a5d      	ldr	r2, [pc, #372]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6213      	str	r3, [r2, #32]
 8003ff8:	e00b      	b.n	8004012 <HAL_RCC_OscConfig+0x36e>
 8003ffa:	4b5b      	ldr	r3, [pc, #364]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4a5a      	ldr	r2, [pc, #360]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	6213      	str	r3, [r2, #32]
 8004006:	4b58      	ldr	r3, [pc, #352]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	4a57      	ldr	r2, [pc, #348]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	f023 0304 	bic.w	r3, r3, #4
 8004010:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d015      	beq.n	8004046 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401a:	f7fd fd09 	bl	8001a30 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004022:	f7fd fd05 	bl	8001a30 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004030:	4293      	cmp	r3, r2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e0b1      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004038:	4b4b      	ldr	r3, [pc, #300]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ee      	beq.n	8004022 <HAL_RCC_OscConfig+0x37e>
 8004044:	e014      	b.n	8004070 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004046:	f7fd fcf3 	bl	8001a30 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404c:	e00a      	b.n	8004064 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404e:	f7fd fcef 	bl	8001a30 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	f241 3288 	movw	r2, #5000	; 0x1388
 800405c:	4293      	cmp	r3, r2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e09b      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004064:	4b40      	ldr	r3, [pc, #256]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1ee      	bne.n	800404e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d105      	bne.n	8004082 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004076:	4b3c      	ldr	r3, [pc, #240]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	4a3b      	ldr	r2, [pc, #236]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 800407c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004080:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8087 	beq.w	800419a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800408c:	4b36      	ldr	r3, [pc, #216]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b08      	cmp	r3, #8
 8004096:	d061      	beq.n	800415c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d146      	bne.n	800412e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040a0:	4b33      	ldr	r3, [pc, #204]	; (8004170 <HAL_RCC_OscConfig+0x4cc>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fd fcc3 	bl	8001a30 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ae:	f7fd fcbf 	bl	8001a30 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e06d      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c0:	4b29      	ldr	r3, [pc, #164]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1f0      	bne.n	80040ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d4:	d108      	bne.n	80040e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040d6:	4b24      	ldr	r3, [pc, #144]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	4921      	ldr	r1, [pc, #132]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e8:	4b1f      	ldr	r3, [pc, #124]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a19      	ldr	r1, [r3, #32]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	430b      	orrs	r3, r1
 80040fa:	491b      	ldr	r1, [pc, #108]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_RCC_OscConfig+0x4cc>)
 8004102:	2201      	movs	r2, #1
 8004104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004106:	f7fd fc93 	bl	8001a30 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410e:	f7fd fc8f 	bl	8001a30 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e03d      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCC_OscConfig+0x46a>
 800412c:	e035      	b.n	800419a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412e:	4b10      	ldr	r3, [pc, #64]	; (8004170 <HAL_RCC_OscConfig+0x4cc>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fd fc7c 	bl	8001a30 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413c:	f7fd fc78 	bl	8001a30 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e026      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_RCC_OscConfig+0x4c4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x498>
 800415a:	e01e      	b.n	800419a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e019      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
 8004168:	40021000 	.word	0x40021000
 800416c:	40007000 	.word	0x40007000
 8004170:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004174:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <HAL_RCC_OscConfig+0x500>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	429a      	cmp	r2, r3
 8004186:	d106      	bne.n	8004196 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004192:	429a      	cmp	r2, r3
 8004194:	d001      	beq.n	800419a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40021000 	.word	0x40021000

080041a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0d0      	b.n	800435e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041bc:	4b6a      	ldr	r3, [pc, #424]	; (8004368 <HAL_RCC_ClockConfig+0x1c0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d910      	bls.n	80041ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ca:	4b67      	ldr	r3, [pc, #412]	; (8004368 <HAL_RCC_ClockConfig+0x1c0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 0207 	bic.w	r2, r3, #7
 80041d2:	4965      	ldr	r1, [pc, #404]	; (8004368 <HAL_RCC_ClockConfig+0x1c0>)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b63      	ldr	r3, [pc, #396]	; (8004368 <HAL_RCC_ClockConfig+0x1c0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0b8      	b.n	800435e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004204:	4b59      	ldr	r3, [pc, #356]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a58      	ldr	r2, [pc, #352]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 800420a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800420e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800421c:	4b53      	ldr	r3, [pc, #332]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	4a52      	ldr	r2, [pc, #328]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004222:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004226:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004228:	4b50      	ldr	r3, [pc, #320]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	494d      	ldr	r1, [pc, #308]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	4313      	orrs	r3, r2
 8004238:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d040      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d107      	bne.n	800425e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	4b47      	ldr	r3, [pc, #284]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d115      	bne.n	8004286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e07f      	b.n	800435e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d107      	bne.n	8004276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004266:	4b41      	ldr	r3, [pc, #260]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e073      	b.n	800435e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004276:	4b3d      	ldr	r3, [pc, #244]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e06b      	b.n	800435e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004286:	4b39      	ldr	r3, [pc, #228]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f023 0203 	bic.w	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4936      	ldr	r1, [pc, #216]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004298:	f7fd fbca 	bl	8001a30 <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429e:	e00a      	b.n	80042b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a0:	f7fd fbc6 	bl	8001a30 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e053      	b.n	800435e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b6:	4b2d      	ldr	r3, [pc, #180]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f003 020c 	and.w	r2, r3, #12
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d1eb      	bne.n	80042a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042c8:	4b27      	ldr	r3, [pc, #156]	; (8004368 <HAL_RCC_ClockConfig+0x1c0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d210      	bcs.n	80042f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d6:	4b24      	ldr	r3, [pc, #144]	; (8004368 <HAL_RCC_ClockConfig+0x1c0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f023 0207 	bic.w	r2, r3, #7
 80042de:	4922      	ldr	r1, [pc, #136]	; (8004368 <HAL_RCC_ClockConfig+0x1c0>)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e6:	4b20      	ldr	r3, [pc, #128]	; (8004368 <HAL_RCC_ClockConfig+0x1c0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d001      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e032      	b.n	800435e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004304:	4b19      	ldr	r3, [pc, #100]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4916      	ldr	r1, [pc, #88]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004312:	4313      	orrs	r3, r2
 8004314:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004322:	4b12      	ldr	r3, [pc, #72]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	490e      	ldr	r1, [pc, #56]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004336:	f000 f821 	bl	800437c <HAL_RCC_GetSysClockFreq>
 800433a:	4602      	mov	r2, r0
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_RCC_ClockConfig+0x1c4>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	490a      	ldr	r1, [pc, #40]	; (8004370 <HAL_RCC_ClockConfig+0x1c8>)
 8004348:	5ccb      	ldrb	r3, [r1, r3]
 800434a:	fa22 f303 	lsr.w	r3, r2, r3
 800434e:	4a09      	ldr	r2, [pc, #36]	; (8004374 <HAL_RCC_ClockConfig+0x1cc>)
 8004350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_RCC_ClockConfig+0x1d0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fd fb28 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40022000 	.word	0x40022000
 800436c:	40021000 	.word	0x40021000
 8004370:	08006184 	.word	0x08006184
 8004374:	20000020 	.word	0x20000020
 8004378:	20000024 	.word	0x20000024

0800437c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	2300      	movs	r3, #0
 8004390:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004396:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <HAL_RCC_GetSysClockFreq+0x94>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d002      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0x30>
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d003      	beq.n	80043b2 <HAL_RCC_GetSysClockFreq+0x36>
 80043aa:	e027      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <HAL_RCC_GetSysClockFreq+0x98>)
 80043ae:	613b      	str	r3, [r7, #16]
      break;
 80043b0:	e027      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	0c9b      	lsrs	r3, r3, #18
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	4a17      	ldr	r2, [pc, #92]	; (8004418 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043bc:	5cd3      	ldrb	r3, [r2, r3]
 80043be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d010      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043ca:	4b11      	ldr	r3, [pc, #68]	; (8004410 <HAL_RCC_GetSysClockFreq+0x94>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	0c5b      	lsrs	r3, r3, #17
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	4a11      	ldr	r2, [pc, #68]	; (800441c <HAL_RCC_GetSysClockFreq+0xa0>)
 80043d6:	5cd3      	ldrb	r3, [r2, r3]
 80043d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a0d      	ldr	r2, [pc, #52]	; (8004414 <HAL_RCC_GetSysClockFreq+0x98>)
 80043de:	fb03 f202 	mul.w	r2, r3, r2
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	e004      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <HAL_RCC_GetSysClockFreq+0xa4>)
 80043f0:	fb02 f303 	mul.w	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	613b      	str	r3, [r7, #16]
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetSysClockFreq+0x98>)
 80043fe:	613b      	str	r3, [r7, #16]
      break;
 8004400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004402:	693b      	ldr	r3, [r7, #16]
}
 8004404:	4618      	mov	r0, r3
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000
 8004414:	007a1200 	.word	0x007a1200
 8004418:	0800619c 	.word	0x0800619c
 800441c:	080061ac 	.word	0x080061ac
 8004420:	003d0900 	.word	0x003d0900

08004424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004428:	4b02      	ldr	r3, [pc, #8]	; (8004434 <HAL_RCC_GetHCLKFreq+0x10>)
 800442a:	681b      	ldr	r3, [r3, #0]
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr
 8004434:	20000020 	.word	0x20000020

08004438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800443c:	f7ff fff2 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4903      	ldr	r1, [pc, #12]	; (800445c <HAL_RCC_GetPCLK1Freq+0x24>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000
 800445c:	08006194 	.word	0x08006194

08004460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004464:	f7ff ffde 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	0adb      	lsrs	r3, r3, #11
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4903      	ldr	r1, [pc, #12]	; (8004484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	08006194 	.word	0x08006194

08004488 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004490:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <RCC_Delay+0x34>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <RCC_Delay+0x38>)
 8004496:	fba2 2303 	umull	r2, r3, r2, r3
 800449a:	0a5b      	lsrs	r3, r3, #9
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044a4:	bf00      	nop
  }
  while (Delay --);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1e5a      	subs	r2, r3, #1
 80044aa:	60fa      	str	r2, [r7, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f9      	bne.n	80044a4 <RCC_Delay+0x1c>
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr
 80044bc:	20000020 	.word	0x20000020
 80044c0:	10624dd3 	.word	0x10624dd3

080044c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d07d      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044e0:	2300      	movs	r3, #0
 80044e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e4:	4b4f      	ldr	r3, [pc, #316]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10d      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f0:	4b4c      	ldr	r3, [pc, #304]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	4a4b      	ldr	r2, [pc, #300]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fa:	61d3      	str	r3, [r2, #28]
 80044fc:	4b49      	ldr	r3, [pc, #292]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004508:	2301      	movs	r3, #1
 800450a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	4b46      	ldr	r3, [pc, #280]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d118      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004518:	4b43      	ldr	r3, [pc, #268]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a42      	ldr	r2, [pc, #264]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800451e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004522:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004524:	f7fd fa84 	bl	8001a30 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452a:	e008      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452c:	f7fd fa80 	bl	8001a30 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e06d      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b3a      	ldr	r3, [pc, #232]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800454a:	4b36      	ldr	r3, [pc, #216]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004552:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d02e      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	429a      	cmp	r2, r3
 8004566:	d027      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004568:	4b2e      	ldr	r3, [pc, #184]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004570:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004572:	4b2e      	ldr	r3, [pc, #184]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004574:	2201      	movs	r2, #1
 8004576:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004578:	4b2c      	ldr	r3, [pc, #176]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800457e:	4a29      	ldr	r2, [pc, #164]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d014      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458e:	f7fd fa4f 	bl	8001a30 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004594:	e00a      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7fd fa4b 	bl	8001a30 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e036      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ac:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0ee      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b8:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	4917      	ldr	r1, [pc, #92]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d105      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d0:	4b14      	ldr	r3, [pc, #80]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	4a13      	ldr	r2, [pc, #76]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	490b      	ldr	r1, [pc, #44]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0310 	and.w	r3, r3, #16
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004606:	4b07      	ldr	r3, [pc, #28]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	4904      	ldr	r1, [pc, #16]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000
 8004628:	40007000 	.word	0x40007000
 800462c:	42420440 	.word	0x42420440

08004630 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	2300      	movs	r3, #0
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	2300      	movs	r3, #0
 8004642:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	2300      	movs	r3, #0
 800464a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b10      	cmp	r3, #16
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b10      	cmp	r3, #16
 8004656:	f200 808a 	bhi.w	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d045      	beq.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d075      	beq.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004666:	e082      	b.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004668:	4b46      	ldr	r3, [pc, #280]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800466e:	4b45      	ldr	r3, [pc, #276]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d07b      	beq.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	0c9b      	lsrs	r3, r3, #18
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	4a41      	ldr	r2, [pc, #260]	; (8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004684:	5cd3      	ldrb	r3, [r2, r3]
 8004686:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d015      	beq.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004692:	4b3c      	ldr	r3, [pc, #240]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	0c5b      	lsrs	r3, r3, #17
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	4a3b      	ldr	r2, [pc, #236]	; (800478c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800469e:	5cd3      	ldrb	r3, [r2, r3]
 80046a0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00d      	beq.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80046ac:	4a38      	ldr	r2, [pc, #224]	; (8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	e004      	b.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4a34      	ldr	r2, [pc, #208]	; (8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80046c8:	4b2e      	ldr	r3, [pc, #184]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d4:	d102      	bne.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	61bb      	str	r3, [r7, #24]
      break;
 80046da:	e04a      	b.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	4a2d      	ldr	r2, [pc, #180]	; (8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	61bb      	str	r3, [r7, #24]
      break;
 80046ea:	e042      	b.n	8004772 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fc:	d108      	bne.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004708:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470c:	61bb      	str	r3, [r7, #24]
 800470e:	e01f      	b.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471a:	d109      	bne.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800471c:	4b19      	ldr	r3, [pc, #100]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004728:	f649 4340 	movw	r3, #40000	; 0x9c40
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	e00f      	b.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800473a:	d11c      	bne.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800473c:	4b11      	ldr	r3, [pc, #68]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d016      	beq.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004748:	f24f 4324 	movw	r3, #62500	; 0xf424
 800474c:	61bb      	str	r3, [r7, #24]
      break;
 800474e:	e012      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004750:	e011      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004752:	f7ff fe85 	bl	8004460 <HAL_RCC_GetPCLK2Freq>
 8004756:	4602      	mov	r2, r0
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	0b9b      	lsrs	r3, r3, #14
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	3301      	adds	r3, #1
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	fbb2 f3f3 	udiv	r3, r2, r3
 800476a:	61bb      	str	r3, [r7, #24]
      break;
 800476c:	e004      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800476e:	bf00      	nop
 8004770:	e002      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004772:	bf00      	nop
 8004774:	e000      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004776:	bf00      	nop
    }
  }
  return (frequency);
 8004778:	69bb      	ldr	r3, [r7, #24]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3720      	adds	r7, #32
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000
 8004788:	080061b0 	.word	0x080061b0
 800478c:	080061c0 	.word	0x080061c0
 8004790:	007a1200 	.word	0x007a1200
 8004794:	003d0900 	.word	0x003d0900
 8004798:	aaaaaaab 	.word	0xaaaaaaab

0800479c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e076      	b.n	800489c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d108      	bne.n	80047c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047be:	d009      	beq.n	80047d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	61da      	str	r2, [r3, #28]
 80047c6:	e005      	b.n	80047d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc ff84 	bl	80016fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004858:	ea42 0103 	orr.w	r1, r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	0c1a      	lsrs	r2, r3, #16
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f002 0204 	and.w	r2, r2, #4
 800487a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800488a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_SPI_Transmit+0x22>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e12d      	b.n	8004b22 <HAL_SPI_Transmit+0x27e>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ce:	f7fd f8af 	bl	8001a30 <HAL_GetTick>
 80048d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d002      	beq.n	80048ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
 80048e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048e8:	e116      	b.n	8004b18 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_SPI_Transmit+0x52>
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048fa:	e10d      	b.n	8004b18 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2203      	movs	r2, #3
 8004900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	88fa      	ldrh	r2, [r7, #6]
 8004914:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	88fa      	ldrh	r2, [r7, #6]
 800491a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004942:	d10f      	bne.n	8004964 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004952:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004962:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d007      	beq.n	8004982 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004980:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498a:	d14f      	bne.n	8004a2c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_SPI_Transmit+0xf6>
 8004994:	8afb      	ldrh	r3, [r7, #22]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d142      	bne.n	8004a20 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	881a      	ldrh	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	1c9a      	adds	r2, r3, #2
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049be:	e02f      	b.n	8004a20 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d112      	bne.n	80049f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	881a      	ldrh	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	1c9a      	adds	r2, r3, #2
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80049f2:	e015      	b.n	8004a20 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f4:	f7fd f81c 	bl	8001a30 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d803      	bhi.n	8004a0c <HAL_SPI_Transmit+0x168>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d102      	bne.n	8004a12 <HAL_SPI_Transmit+0x16e>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a1e:	e07b      	b.n	8004b18 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1ca      	bne.n	80049c0 <HAL_SPI_Transmit+0x11c>
 8004a2a:	e050      	b.n	8004ace <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_SPI_Transmit+0x196>
 8004a34:	8afb      	ldrh	r3, [r7, #22]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d144      	bne.n	8004ac4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	7812      	ldrb	r2, [r2, #0]
 8004a46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a60:	e030      	b.n	8004ac4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d113      	bne.n	8004a98 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	7812      	ldrb	r2, [r2, #0]
 8004a7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a96:	e015      	b.n	8004ac4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a98:	f7fc ffca 	bl	8001a30 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d803      	bhi.n	8004ab0 <HAL_SPI_Transmit+0x20c>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	d102      	bne.n	8004ab6 <HAL_SPI_Transmit+0x212>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004ac2:	e029      	b.n	8004b18 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1c9      	bne.n	8004a62 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f8be 	bl	8004c54 <SPI_EndRxTxTransaction>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	77fb      	strb	r3, [r7, #31]
 8004b0e:	e003      	b.n	8004b18 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b38:	b2db      	uxtb	r3, r3
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b54:	f7fc ff6c 	bl	8001a30 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	4413      	add	r3, r2
 8004b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b64:	f7fc ff64 	bl	8001a30 <HAL_GetTick>
 8004b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b6a:	4b39      	ldr	r3, [pc, #228]	; (8004c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	015b      	lsls	r3, r3, #5
 8004b70:	0d1b      	lsrs	r3, r3, #20
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	fb02 f303 	mul.w	r3, r2, r3
 8004b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b7a:	e054      	b.n	8004c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d050      	beq.n	8004c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b84:	f7fc ff54 	bl	8001a30 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d902      	bls.n	8004b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d13d      	bne.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb2:	d111      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bbc:	d004      	beq.n	8004bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc6:	d107      	bne.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be0:	d10f      	bne.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e017      	b.n	8004c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	bf0c      	ite	eq
 8004c36:	2301      	moveq	r3, #1
 8004c38:	2300      	movne	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d19b      	bne.n	8004b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000020 	.word	0x20000020

08004c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2200      	movs	r2, #0
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff ff6a 	bl	8004b44 <SPI_WaitFlagStateUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	f043 0220 	orr.w	r2, r3, #32
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e000      	b.n	8004c88 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e041      	b.n	8004d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fc fd5e 	bl	8001778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f000 fa74 	bl	80051bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d001      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e03a      	b.n	8004dbe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_TIM_Base_Start_IT+0x98>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00e      	beq.n	8004d88 <HAL_TIM_Base_Start_IT+0x58>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d72:	d009      	beq.n	8004d88 <HAL_TIM_Base_Start_IT+0x58>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a14      	ldr	r2, [pc, #80]	; (8004dcc <HAL_TIM_Base_Start_IT+0x9c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <HAL_TIM_Base_Start_IT+0x58>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d111      	bne.n	8004dac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b06      	cmp	r3, #6
 8004d98:	d010      	beq.n	8004dbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004daa:	e007      	b.n	8004dbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0201 	orr.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr
 8004dc8:	40012c00 	.word	0x40012c00
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800

08004dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d122      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d11b      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0202 	mvn.w	r2, #2
 8004e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f9b4 	bl	8005184 <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e005      	b.n	8004e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f9a7 	bl	8005172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f9b6 	bl	8005196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d122      	bne.n	8004e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d11b      	bne.n	8004e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0204 	mvn.w	r2, #4
 8004e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f98a 	bl	8005184 <HAL_TIM_IC_CaptureCallback>
 8004e70:	e005      	b.n	8004e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f97d 	bl	8005172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f98c 	bl	8005196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d122      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0208 	mvn.w	r2, #8
 8004ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2204      	movs	r2, #4
 8004eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f960 	bl	8005184 <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f953 	bl	8005172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f962 	bl	8005196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b10      	cmp	r3, #16
 8004ee4:	d122      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d11b      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0210 	mvn.w	r2, #16
 8004efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2208      	movs	r2, #8
 8004f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f936 	bl	8005184 <HAL_TIM_IC_CaptureCallback>
 8004f18:	e005      	b.n	8004f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f929 	bl	8005172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f938 	bl	8005196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d10e      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d107      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0201 	mvn.w	r2, #1
 8004f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fb ff3e 	bl	8000dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d10e      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b80      	cmp	r3, #128	; 0x80
 8004f72:	d107      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fa7b 	bl	800547a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d10e      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d107      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8fc 	bl	80051a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d10e      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d107      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0220 	mvn.w	r2, #32
 8004fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fa46 	bl	8005468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_TIM_ConfigClockSource+0x1c>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e0b4      	b.n	800516a <HAL_TIM_ConfigClockSource+0x186>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800501e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005038:	d03e      	beq.n	80050b8 <HAL_TIM_ConfigClockSource+0xd4>
 800503a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503e:	f200 8087 	bhi.w	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005046:	f000 8086 	beq.w	8005156 <HAL_TIM_ConfigClockSource+0x172>
 800504a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504e:	d87f      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b70      	cmp	r3, #112	; 0x70
 8005052:	d01a      	beq.n	800508a <HAL_TIM_ConfigClockSource+0xa6>
 8005054:	2b70      	cmp	r3, #112	; 0x70
 8005056:	d87b      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b60      	cmp	r3, #96	; 0x60
 800505a:	d050      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x11a>
 800505c:	2b60      	cmp	r3, #96	; 0x60
 800505e:	d877      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b50      	cmp	r3, #80	; 0x50
 8005062:	d03c      	beq.n	80050de <HAL_TIM_ConfigClockSource+0xfa>
 8005064:	2b50      	cmp	r3, #80	; 0x50
 8005066:	d873      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	d058      	beq.n	800511e <HAL_TIM_ConfigClockSource+0x13a>
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d86f      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005070:	2b30      	cmp	r3, #48	; 0x30
 8005072:	d064      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x15a>
 8005074:	2b30      	cmp	r3, #48	; 0x30
 8005076:	d86b      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005078:	2b20      	cmp	r3, #32
 800507a:	d060      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x15a>
 800507c:	2b20      	cmp	r3, #32
 800507e:	d867      	bhi.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d05c      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x15a>
 8005084:	2b10      	cmp	r3, #16
 8005086:	d05a      	beq.n	800513e <HAL_TIM_ConfigClockSource+0x15a>
 8005088:	e062      	b.n	8005150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800509a:	f000 f968 	bl	800536e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	609a      	str	r2, [r3, #8]
      break;
 80050b6:	e04f      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050c8:	f000 f951 	bl	800536e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050da:	609a      	str	r2, [r3, #8]
      break;
 80050dc:	e03c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ea:	461a      	mov	r2, r3
 80050ec:	f000 f8c8 	bl	8005280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2150      	movs	r1, #80	; 0x50
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 f91f 	bl	800533a <TIM_ITRx_SetConfig>
      break;
 80050fc:	e02c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800510a:	461a      	mov	r2, r3
 800510c:	f000 f8e6 	bl	80052dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2160      	movs	r1, #96	; 0x60
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f90f 	bl	800533a <TIM_ITRx_SetConfig>
      break;
 800511c:	e01c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800512a:	461a      	mov	r2, r3
 800512c:	f000 f8a8 	bl	8005280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2140      	movs	r1, #64	; 0x40
 8005136:	4618      	mov	r0, r3
 8005138:	f000 f8ff 	bl	800533a <TIM_ITRx_SetConfig>
      break;
 800513c:	e00c      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f000 f8f6 	bl	800533a <TIM_ITRx_SetConfig>
      break;
 800514e:	e003      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
      break;
 8005154:	e000      	b.n	8005158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005168:	7bfb      	ldrb	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr

08005196 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bc80      	pop	{r7}
 80051b8:	4770      	bx	lr
	...

080051bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a29      	ldr	r2, [pc, #164]	; (8005274 <TIM_Base_SetConfig+0xb8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00b      	beq.n	80051ec <TIM_Base_SetConfig+0x30>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051da:	d007      	beq.n	80051ec <TIM_Base_SetConfig+0x30>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a26      	ldr	r2, [pc, #152]	; (8005278 <TIM_Base_SetConfig+0xbc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0x30>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a25      	ldr	r2, [pc, #148]	; (800527c <TIM_Base_SetConfig+0xc0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d108      	bne.n	80051fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <TIM_Base_SetConfig+0xb8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00b      	beq.n	800521e <TIM_Base_SetConfig+0x62>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520c:	d007      	beq.n	800521e <TIM_Base_SetConfig+0x62>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a19      	ldr	r2, [pc, #100]	; (8005278 <TIM_Base_SetConfig+0xbc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_Base_SetConfig+0x62>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a18      	ldr	r2, [pc, #96]	; (800527c <TIM_Base_SetConfig+0xc0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d108      	bne.n	8005230 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a07      	ldr	r2, [pc, #28]	; (8005274 <TIM_Base_SetConfig+0xb8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d103      	bne.n	8005264 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	615a      	str	r2, [r3, #20]
}
 800526a:	bf00      	nop
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr
 8005274:	40012c00 	.word	0x40012c00
 8005278:	40000400 	.word	0x40000400
 800527c:	40000800 	.word	0x40000800

08005280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f023 0201 	bic.w	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f023 030a 	bic.w	r3, r3, #10
 80052bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	621a      	str	r2, [r3, #32]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr

080052dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f023 0210 	bic.w	r2, r3, #16
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	031b      	lsls	r3, r3, #12
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005318:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	621a      	str	r2, [r3, #32]
}
 8005330:	bf00      	nop
 8005332:	371c      	adds	r7, #28
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr

0800533a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	f043 0307 	orr.w	r3, r3, #7
 800535c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr

0800536e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800536e:	b480      	push	{r7}
 8005370:	b087      	sub	sp, #28
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	607a      	str	r2, [r7, #4]
 800537a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005388:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	021a      	lsls	r2, r3, #8
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	431a      	orrs	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4313      	orrs	r3, r2
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	609a      	str	r2, [r3, #8]
}
 80053a2:	bf00      	nop
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e046      	b.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a16      	ldr	r2, [pc, #88]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00e      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005410:	d009      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a12      	ldr	r2, [pc, #72]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a10      	ldr	r2, [pc, #64]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d10c      	bne.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800542c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	4313      	orrs	r3, r2
 8005436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800

08005468 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr

0800548c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800548c:	b084      	sub	sp, #16
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	f107 0014 	add.w	r0, r7, #20
 800549a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	b004      	add	sp, #16
 80054aa:	4770      	bx	lr

080054ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80054b4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80054b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	43db      	mvns	r3, r3
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	4013      	ands	r3, r2
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80054f8:	b084      	sub	sp, #16
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	f107 0014 	add.w	r0, r7, #20
 8005506:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	b004      	add	sp, #16
 8005536:	4770      	bx	lr

08005538 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr

0800554c <atoi>:
 800554c:	220a      	movs	r2, #10
 800554e:	2100      	movs	r1, #0
 8005550:	f000 b87e 	b.w	8005650 <strtol>

08005554 <_strtol_l.constprop.0>:
 8005554:	2b01      	cmp	r3, #1
 8005556:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800555a:	4686      	mov	lr, r0
 800555c:	4690      	mov	r8, r2
 800555e:	d001      	beq.n	8005564 <_strtol_l.constprop.0+0x10>
 8005560:	2b24      	cmp	r3, #36	; 0x24
 8005562:	d906      	bls.n	8005572 <_strtol_l.constprop.0+0x1e>
 8005564:	f000 f8ba 	bl	80056dc <__errno>
 8005568:	2316      	movs	r3, #22
 800556a:	6003      	str	r3, [r0, #0]
 800556c:	2000      	movs	r0, #0
 800556e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005572:	460d      	mov	r5, r1
 8005574:	4835      	ldr	r0, [pc, #212]	; (800564c <_strtol_l.constprop.0+0xf8>)
 8005576:	462a      	mov	r2, r5
 8005578:	f815 4b01 	ldrb.w	r4, [r5], #1
 800557c:	5d06      	ldrb	r6, [r0, r4]
 800557e:	f016 0608 	ands.w	r6, r6, #8
 8005582:	d1f8      	bne.n	8005576 <_strtol_l.constprop.0+0x22>
 8005584:	2c2d      	cmp	r4, #45	; 0x2d
 8005586:	d12e      	bne.n	80055e6 <_strtol_l.constprop.0+0x92>
 8005588:	2601      	movs	r6, #1
 800558a:	782c      	ldrb	r4, [r5, #0]
 800558c:	1c95      	adds	r5, r2, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d057      	beq.n	8005642 <_strtol_l.constprop.0+0xee>
 8005592:	2b10      	cmp	r3, #16
 8005594:	d109      	bne.n	80055aa <_strtol_l.constprop.0+0x56>
 8005596:	2c30      	cmp	r4, #48	; 0x30
 8005598:	d107      	bne.n	80055aa <_strtol_l.constprop.0+0x56>
 800559a:	782a      	ldrb	r2, [r5, #0]
 800559c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80055a0:	2a58      	cmp	r2, #88	; 0x58
 80055a2:	d149      	bne.n	8005638 <_strtol_l.constprop.0+0xe4>
 80055a4:	2310      	movs	r3, #16
 80055a6:	786c      	ldrb	r4, [r5, #1]
 80055a8:	3502      	adds	r5, #2
 80055aa:	2200      	movs	r2, #0
 80055ac:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80055b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80055b4:	fbbc f9f3 	udiv	r9, ip, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	fb03 ca19 	mls	sl, r3, r9, ip
 80055be:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80055c2:	2f09      	cmp	r7, #9
 80055c4:	d814      	bhi.n	80055f0 <_strtol_l.constprop.0+0x9c>
 80055c6:	463c      	mov	r4, r7
 80055c8:	42a3      	cmp	r3, r4
 80055ca:	dd20      	ble.n	800560e <_strtol_l.constprop.0+0xba>
 80055cc:	1c57      	adds	r7, r2, #1
 80055ce:	d007      	beq.n	80055e0 <_strtol_l.constprop.0+0x8c>
 80055d0:	4581      	cmp	r9, r0
 80055d2:	d319      	bcc.n	8005608 <_strtol_l.constprop.0+0xb4>
 80055d4:	d101      	bne.n	80055da <_strtol_l.constprop.0+0x86>
 80055d6:	45a2      	cmp	sl, r4
 80055d8:	db16      	blt.n	8005608 <_strtol_l.constprop.0+0xb4>
 80055da:	2201      	movs	r2, #1
 80055dc:	fb00 4003 	mla	r0, r0, r3, r4
 80055e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055e4:	e7eb      	b.n	80055be <_strtol_l.constprop.0+0x6a>
 80055e6:	2c2b      	cmp	r4, #43	; 0x2b
 80055e8:	bf04      	itt	eq
 80055ea:	782c      	ldrbeq	r4, [r5, #0]
 80055ec:	1c95      	addeq	r5, r2, #2
 80055ee:	e7ce      	b.n	800558e <_strtol_l.constprop.0+0x3a>
 80055f0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80055f4:	2f19      	cmp	r7, #25
 80055f6:	d801      	bhi.n	80055fc <_strtol_l.constprop.0+0xa8>
 80055f8:	3c37      	subs	r4, #55	; 0x37
 80055fa:	e7e5      	b.n	80055c8 <_strtol_l.constprop.0+0x74>
 80055fc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005600:	2f19      	cmp	r7, #25
 8005602:	d804      	bhi.n	800560e <_strtol_l.constprop.0+0xba>
 8005604:	3c57      	subs	r4, #87	; 0x57
 8005606:	e7df      	b.n	80055c8 <_strtol_l.constprop.0+0x74>
 8005608:	f04f 32ff 	mov.w	r2, #4294967295
 800560c:	e7e8      	b.n	80055e0 <_strtol_l.constprop.0+0x8c>
 800560e:	1c53      	adds	r3, r2, #1
 8005610:	d108      	bne.n	8005624 <_strtol_l.constprop.0+0xd0>
 8005612:	2322      	movs	r3, #34	; 0x22
 8005614:	4660      	mov	r0, ip
 8005616:	f8ce 3000 	str.w	r3, [lr]
 800561a:	f1b8 0f00 	cmp.w	r8, #0
 800561e:	d0a6      	beq.n	800556e <_strtol_l.constprop.0+0x1a>
 8005620:	1e69      	subs	r1, r5, #1
 8005622:	e006      	b.n	8005632 <_strtol_l.constprop.0+0xde>
 8005624:	b106      	cbz	r6, 8005628 <_strtol_l.constprop.0+0xd4>
 8005626:	4240      	negs	r0, r0
 8005628:	f1b8 0f00 	cmp.w	r8, #0
 800562c:	d09f      	beq.n	800556e <_strtol_l.constprop.0+0x1a>
 800562e:	2a00      	cmp	r2, #0
 8005630:	d1f6      	bne.n	8005620 <_strtol_l.constprop.0+0xcc>
 8005632:	f8c8 1000 	str.w	r1, [r8]
 8005636:	e79a      	b.n	800556e <_strtol_l.constprop.0+0x1a>
 8005638:	2430      	movs	r4, #48	; 0x30
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1b5      	bne.n	80055aa <_strtol_l.constprop.0+0x56>
 800563e:	2308      	movs	r3, #8
 8005640:	e7b3      	b.n	80055aa <_strtol_l.constprop.0+0x56>
 8005642:	2c30      	cmp	r4, #48	; 0x30
 8005644:	d0a9      	beq.n	800559a <_strtol_l.constprop.0+0x46>
 8005646:	230a      	movs	r3, #10
 8005648:	e7af      	b.n	80055aa <_strtol_l.constprop.0+0x56>
 800564a:	bf00      	nop
 800564c:	080061c3 	.word	0x080061c3

08005650 <strtol>:
 8005650:	4613      	mov	r3, r2
 8005652:	460a      	mov	r2, r1
 8005654:	4601      	mov	r1, r0
 8005656:	4802      	ldr	r0, [pc, #8]	; (8005660 <strtol+0x10>)
 8005658:	6800      	ldr	r0, [r0, #0]
 800565a:	f7ff bf7b 	b.w	8005554 <_strtol_l.constprop.0>
 800565e:	bf00      	nop
 8005660:	20000078 	.word	0x20000078

08005664 <sniprintf>:
 8005664:	b40c      	push	{r2, r3}
 8005666:	b530      	push	{r4, r5, lr}
 8005668:	4b17      	ldr	r3, [pc, #92]	; (80056c8 <sniprintf+0x64>)
 800566a:	1e0c      	subs	r4, r1, #0
 800566c:	681d      	ldr	r5, [r3, #0]
 800566e:	b09d      	sub	sp, #116	; 0x74
 8005670:	da08      	bge.n	8005684 <sniprintf+0x20>
 8005672:	238b      	movs	r3, #139	; 0x8b
 8005674:	f04f 30ff 	mov.w	r0, #4294967295
 8005678:	602b      	str	r3, [r5, #0]
 800567a:	b01d      	add	sp, #116	; 0x74
 800567c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005680:	b002      	add	sp, #8
 8005682:	4770      	bx	lr
 8005684:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005688:	f8ad 3014 	strh.w	r3, [sp, #20]
 800568c:	bf0c      	ite	eq
 800568e:	4623      	moveq	r3, r4
 8005690:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005694:	9304      	str	r3, [sp, #16]
 8005696:	9307      	str	r3, [sp, #28]
 8005698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800569c:	9002      	str	r0, [sp, #8]
 800569e:	9006      	str	r0, [sp, #24]
 80056a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80056a4:	4628      	mov	r0, r5
 80056a6:	ab21      	add	r3, sp, #132	; 0x84
 80056a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056aa:	a902      	add	r1, sp, #8
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	f000 f98f 	bl	80059d0 <_svfiprintf_r>
 80056b2:	1c43      	adds	r3, r0, #1
 80056b4:	bfbc      	itt	lt
 80056b6:	238b      	movlt	r3, #139	; 0x8b
 80056b8:	602b      	strlt	r3, [r5, #0]
 80056ba:	2c00      	cmp	r4, #0
 80056bc:	d0dd      	beq.n	800567a <sniprintf+0x16>
 80056be:	2200      	movs	r2, #0
 80056c0:	9b02      	ldr	r3, [sp, #8]
 80056c2:	701a      	strb	r2, [r3, #0]
 80056c4:	e7d9      	b.n	800567a <sniprintf+0x16>
 80056c6:	bf00      	nop
 80056c8:	20000078 	.word	0x20000078

080056cc <memset>:
 80056cc:	4603      	mov	r3, r0
 80056ce:	4402      	add	r2, r0
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d100      	bne.n	80056d6 <memset+0xa>
 80056d4:	4770      	bx	lr
 80056d6:	f803 1b01 	strb.w	r1, [r3], #1
 80056da:	e7f9      	b.n	80056d0 <memset+0x4>

080056dc <__errno>:
 80056dc:	4b01      	ldr	r3, [pc, #4]	; (80056e4 <__errno+0x8>)
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000078 	.word	0x20000078

080056e8 <__libc_init_array>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	2600      	movs	r6, #0
 80056ec:	4d0c      	ldr	r5, [pc, #48]	; (8005720 <__libc_init_array+0x38>)
 80056ee:	4c0d      	ldr	r4, [pc, #52]	; (8005724 <__libc_init_array+0x3c>)
 80056f0:	1b64      	subs	r4, r4, r5
 80056f2:	10a4      	asrs	r4, r4, #2
 80056f4:	42a6      	cmp	r6, r4
 80056f6:	d109      	bne.n	800570c <__libc_init_array+0x24>
 80056f8:	f000 fc7a 	bl	8005ff0 <_init>
 80056fc:	2600      	movs	r6, #0
 80056fe:	4d0a      	ldr	r5, [pc, #40]	; (8005728 <__libc_init_array+0x40>)
 8005700:	4c0a      	ldr	r4, [pc, #40]	; (800572c <__libc_init_array+0x44>)
 8005702:	1b64      	subs	r4, r4, r5
 8005704:	10a4      	asrs	r4, r4, #2
 8005706:	42a6      	cmp	r6, r4
 8005708:	d105      	bne.n	8005716 <__libc_init_array+0x2e>
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005710:	4798      	blx	r3
 8005712:	3601      	adds	r6, #1
 8005714:	e7ee      	b.n	80056f4 <__libc_init_array+0xc>
 8005716:	f855 3b04 	ldr.w	r3, [r5], #4
 800571a:	4798      	blx	r3
 800571c:	3601      	adds	r6, #1
 800571e:	e7f2      	b.n	8005706 <__libc_init_array+0x1e>
 8005720:	080062f8 	.word	0x080062f8
 8005724:	080062f8 	.word	0x080062f8
 8005728:	080062f8 	.word	0x080062f8
 800572c:	080062fc 	.word	0x080062fc

08005730 <__retarget_lock_acquire_recursive>:
 8005730:	4770      	bx	lr

08005732 <__retarget_lock_release_recursive>:
 8005732:	4770      	bx	lr

08005734 <_free_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4605      	mov	r5, r0
 8005738:	2900      	cmp	r1, #0
 800573a:	d040      	beq.n	80057be <_free_r+0x8a>
 800573c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005740:	1f0c      	subs	r4, r1, #4
 8005742:	2b00      	cmp	r3, #0
 8005744:	bfb8      	it	lt
 8005746:	18e4      	addlt	r4, r4, r3
 8005748:	f000 f8dc 	bl	8005904 <__malloc_lock>
 800574c:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <_free_r+0x8c>)
 800574e:	6813      	ldr	r3, [r2, #0]
 8005750:	b933      	cbnz	r3, 8005760 <_free_r+0x2c>
 8005752:	6063      	str	r3, [r4, #4]
 8005754:	6014      	str	r4, [r2, #0]
 8005756:	4628      	mov	r0, r5
 8005758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800575c:	f000 b8d8 	b.w	8005910 <__malloc_unlock>
 8005760:	42a3      	cmp	r3, r4
 8005762:	d908      	bls.n	8005776 <_free_r+0x42>
 8005764:	6820      	ldr	r0, [r4, #0]
 8005766:	1821      	adds	r1, r4, r0
 8005768:	428b      	cmp	r3, r1
 800576a:	bf01      	itttt	eq
 800576c:	6819      	ldreq	r1, [r3, #0]
 800576e:	685b      	ldreq	r3, [r3, #4]
 8005770:	1809      	addeq	r1, r1, r0
 8005772:	6021      	streq	r1, [r4, #0]
 8005774:	e7ed      	b.n	8005752 <_free_r+0x1e>
 8005776:	461a      	mov	r2, r3
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	b10b      	cbz	r3, 8005780 <_free_r+0x4c>
 800577c:	42a3      	cmp	r3, r4
 800577e:	d9fa      	bls.n	8005776 <_free_r+0x42>
 8005780:	6811      	ldr	r1, [r2, #0]
 8005782:	1850      	adds	r0, r2, r1
 8005784:	42a0      	cmp	r0, r4
 8005786:	d10b      	bne.n	80057a0 <_free_r+0x6c>
 8005788:	6820      	ldr	r0, [r4, #0]
 800578a:	4401      	add	r1, r0
 800578c:	1850      	adds	r0, r2, r1
 800578e:	4283      	cmp	r3, r0
 8005790:	6011      	str	r1, [r2, #0]
 8005792:	d1e0      	bne.n	8005756 <_free_r+0x22>
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4408      	add	r0, r1
 800579a:	6010      	str	r0, [r2, #0]
 800579c:	6053      	str	r3, [r2, #4]
 800579e:	e7da      	b.n	8005756 <_free_r+0x22>
 80057a0:	d902      	bls.n	80057a8 <_free_r+0x74>
 80057a2:	230c      	movs	r3, #12
 80057a4:	602b      	str	r3, [r5, #0]
 80057a6:	e7d6      	b.n	8005756 <_free_r+0x22>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	1821      	adds	r1, r4, r0
 80057ac:	428b      	cmp	r3, r1
 80057ae:	bf01      	itttt	eq
 80057b0:	6819      	ldreq	r1, [r3, #0]
 80057b2:	685b      	ldreq	r3, [r3, #4]
 80057b4:	1809      	addeq	r1, r1, r0
 80057b6:	6021      	streq	r1, [r4, #0]
 80057b8:	6063      	str	r3, [r4, #4]
 80057ba:	6054      	str	r4, [r2, #4]
 80057bc:	e7cb      	b.n	8005756 <_free_r+0x22>
 80057be:	bd38      	pop	{r3, r4, r5, pc}
 80057c0:	20000680 	.word	0x20000680

080057c4 <sbrk_aligned>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	4e0e      	ldr	r6, [pc, #56]	; (8005800 <sbrk_aligned+0x3c>)
 80057c8:	460c      	mov	r4, r1
 80057ca:	6831      	ldr	r1, [r6, #0]
 80057cc:	4605      	mov	r5, r0
 80057ce:	b911      	cbnz	r1, 80057d6 <sbrk_aligned+0x12>
 80057d0:	f000 fbaa 	bl	8005f28 <_sbrk_r>
 80057d4:	6030      	str	r0, [r6, #0]
 80057d6:	4621      	mov	r1, r4
 80057d8:	4628      	mov	r0, r5
 80057da:	f000 fba5 	bl	8005f28 <_sbrk_r>
 80057de:	1c43      	adds	r3, r0, #1
 80057e0:	d00a      	beq.n	80057f8 <sbrk_aligned+0x34>
 80057e2:	1cc4      	adds	r4, r0, #3
 80057e4:	f024 0403 	bic.w	r4, r4, #3
 80057e8:	42a0      	cmp	r0, r4
 80057ea:	d007      	beq.n	80057fc <sbrk_aligned+0x38>
 80057ec:	1a21      	subs	r1, r4, r0
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 fb9a 	bl	8005f28 <_sbrk_r>
 80057f4:	3001      	adds	r0, #1
 80057f6:	d101      	bne.n	80057fc <sbrk_aligned+0x38>
 80057f8:	f04f 34ff 	mov.w	r4, #4294967295
 80057fc:	4620      	mov	r0, r4
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	20000684 	.word	0x20000684

08005804 <_malloc_r>:
 8005804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005808:	1ccd      	adds	r5, r1, #3
 800580a:	f025 0503 	bic.w	r5, r5, #3
 800580e:	3508      	adds	r5, #8
 8005810:	2d0c      	cmp	r5, #12
 8005812:	bf38      	it	cc
 8005814:	250c      	movcc	r5, #12
 8005816:	2d00      	cmp	r5, #0
 8005818:	4607      	mov	r7, r0
 800581a:	db01      	blt.n	8005820 <_malloc_r+0x1c>
 800581c:	42a9      	cmp	r1, r5
 800581e:	d905      	bls.n	800582c <_malloc_r+0x28>
 8005820:	230c      	movs	r3, #12
 8005822:	2600      	movs	r6, #0
 8005824:	603b      	str	r3, [r7, #0]
 8005826:	4630      	mov	r0, r6
 8005828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800582c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005900 <_malloc_r+0xfc>
 8005830:	f000 f868 	bl	8005904 <__malloc_lock>
 8005834:	f8d8 3000 	ldr.w	r3, [r8]
 8005838:	461c      	mov	r4, r3
 800583a:	bb5c      	cbnz	r4, 8005894 <_malloc_r+0x90>
 800583c:	4629      	mov	r1, r5
 800583e:	4638      	mov	r0, r7
 8005840:	f7ff ffc0 	bl	80057c4 <sbrk_aligned>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	4604      	mov	r4, r0
 8005848:	d155      	bne.n	80058f6 <_malloc_r+0xf2>
 800584a:	f8d8 4000 	ldr.w	r4, [r8]
 800584e:	4626      	mov	r6, r4
 8005850:	2e00      	cmp	r6, #0
 8005852:	d145      	bne.n	80058e0 <_malloc_r+0xdc>
 8005854:	2c00      	cmp	r4, #0
 8005856:	d048      	beq.n	80058ea <_malloc_r+0xe6>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	4631      	mov	r1, r6
 800585c:	4638      	mov	r0, r7
 800585e:	eb04 0903 	add.w	r9, r4, r3
 8005862:	f000 fb61 	bl	8005f28 <_sbrk_r>
 8005866:	4581      	cmp	r9, r0
 8005868:	d13f      	bne.n	80058ea <_malloc_r+0xe6>
 800586a:	6821      	ldr	r1, [r4, #0]
 800586c:	4638      	mov	r0, r7
 800586e:	1a6d      	subs	r5, r5, r1
 8005870:	4629      	mov	r1, r5
 8005872:	f7ff ffa7 	bl	80057c4 <sbrk_aligned>
 8005876:	3001      	adds	r0, #1
 8005878:	d037      	beq.n	80058ea <_malloc_r+0xe6>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	442b      	add	r3, r5
 800587e:	6023      	str	r3, [r4, #0]
 8005880:	f8d8 3000 	ldr.w	r3, [r8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d038      	beq.n	80058fa <_malloc_r+0xf6>
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	42a2      	cmp	r2, r4
 800588c:	d12b      	bne.n	80058e6 <_malloc_r+0xe2>
 800588e:	2200      	movs	r2, #0
 8005890:	605a      	str	r2, [r3, #4]
 8005892:	e00f      	b.n	80058b4 <_malloc_r+0xb0>
 8005894:	6822      	ldr	r2, [r4, #0]
 8005896:	1b52      	subs	r2, r2, r5
 8005898:	d41f      	bmi.n	80058da <_malloc_r+0xd6>
 800589a:	2a0b      	cmp	r2, #11
 800589c:	d917      	bls.n	80058ce <_malloc_r+0xca>
 800589e:	1961      	adds	r1, r4, r5
 80058a0:	42a3      	cmp	r3, r4
 80058a2:	6025      	str	r5, [r4, #0]
 80058a4:	bf18      	it	ne
 80058a6:	6059      	strne	r1, [r3, #4]
 80058a8:	6863      	ldr	r3, [r4, #4]
 80058aa:	bf08      	it	eq
 80058ac:	f8c8 1000 	streq.w	r1, [r8]
 80058b0:	5162      	str	r2, [r4, r5]
 80058b2:	604b      	str	r3, [r1, #4]
 80058b4:	4638      	mov	r0, r7
 80058b6:	f104 060b 	add.w	r6, r4, #11
 80058ba:	f000 f829 	bl	8005910 <__malloc_unlock>
 80058be:	f026 0607 	bic.w	r6, r6, #7
 80058c2:	1d23      	adds	r3, r4, #4
 80058c4:	1af2      	subs	r2, r6, r3
 80058c6:	d0ae      	beq.n	8005826 <_malloc_r+0x22>
 80058c8:	1b9b      	subs	r3, r3, r6
 80058ca:	50a3      	str	r3, [r4, r2]
 80058cc:	e7ab      	b.n	8005826 <_malloc_r+0x22>
 80058ce:	42a3      	cmp	r3, r4
 80058d0:	6862      	ldr	r2, [r4, #4]
 80058d2:	d1dd      	bne.n	8005890 <_malloc_r+0x8c>
 80058d4:	f8c8 2000 	str.w	r2, [r8]
 80058d8:	e7ec      	b.n	80058b4 <_malloc_r+0xb0>
 80058da:	4623      	mov	r3, r4
 80058dc:	6864      	ldr	r4, [r4, #4]
 80058de:	e7ac      	b.n	800583a <_malloc_r+0x36>
 80058e0:	4634      	mov	r4, r6
 80058e2:	6876      	ldr	r6, [r6, #4]
 80058e4:	e7b4      	b.n	8005850 <_malloc_r+0x4c>
 80058e6:	4613      	mov	r3, r2
 80058e8:	e7cc      	b.n	8005884 <_malloc_r+0x80>
 80058ea:	230c      	movs	r3, #12
 80058ec:	4638      	mov	r0, r7
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	f000 f80e 	bl	8005910 <__malloc_unlock>
 80058f4:	e797      	b.n	8005826 <_malloc_r+0x22>
 80058f6:	6025      	str	r5, [r4, #0]
 80058f8:	e7dc      	b.n	80058b4 <_malloc_r+0xb0>
 80058fa:	605b      	str	r3, [r3, #4]
 80058fc:	deff      	udf	#255	; 0xff
 80058fe:	bf00      	nop
 8005900:	20000680 	.word	0x20000680

08005904 <__malloc_lock>:
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <__malloc_lock+0x8>)
 8005906:	f7ff bf13 	b.w	8005730 <__retarget_lock_acquire_recursive>
 800590a:	bf00      	nop
 800590c:	2000067c 	.word	0x2000067c

08005910 <__malloc_unlock>:
 8005910:	4801      	ldr	r0, [pc, #4]	; (8005918 <__malloc_unlock+0x8>)
 8005912:	f7ff bf0e 	b.w	8005732 <__retarget_lock_release_recursive>
 8005916:	bf00      	nop
 8005918:	2000067c 	.word	0x2000067c

0800591c <__ssputs_r>:
 800591c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005920:	461f      	mov	r7, r3
 8005922:	688e      	ldr	r6, [r1, #8]
 8005924:	4682      	mov	sl, r0
 8005926:	42be      	cmp	r6, r7
 8005928:	460c      	mov	r4, r1
 800592a:	4690      	mov	r8, r2
 800592c:	680b      	ldr	r3, [r1, #0]
 800592e:	d82c      	bhi.n	800598a <__ssputs_r+0x6e>
 8005930:	898a      	ldrh	r2, [r1, #12]
 8005932:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005936:	d026      	beq.n	8005986 <__ssputs_r+0x6a>
 8005938:	6965      	ldr	r5, [r4, #20]
 800593a:	6909      	ldr	r1, [r1, #16]
 800593c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005940:	eba3 0901 	sub.w	r9, r3, r1
 8005944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005948:	1c7b      	adds	r3, r7, #1
 800594a:	444b      	add	r3, r9
 800594c:	106d      	asrs	r5, r5, #1
 800594e:	429d      	cmp	r5, r3
 8005950:	bf38      	it	cc
 8005952:	461d      	movcc	r5, r3
 8005954:	0553      	lsls	r3, r2, #21
 8005956:	d527      	bpl.n	80059a8 <__ssputs_r+0x8c>
 8005958:	4629      	mov	r1, r5
 800595a:	f7ff ff53 	bl	8005804 <_malloc_r>
 800595e:	4606      	mov	r6, r0
 8005960:	b360      	cbz	r0, 80059bc <__ssputs_r+0xa0>
 8005962:	464a      	mov	r2, r9
 8005964:	6921      	ldr	r1, [r4, #16]
 8005966:	f000 fafd 	bl	8005f64 <memcpy>
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	6126      	str	r6, [r4, #16]
 8005978:	444e      	add	r6, r9
 800597a:	6026      	str	r6, [r4, #0]
 800597c:	463e      	mov	r6, r7
 800597e:	6165      	str	r5, [r4, #20]
 8005980:	eba5 0509 	sub.w	r5, r5, r9
 8005984:	60a5      	str	r5, [r4, #8]
 8005986:	42be      	cmp	r6, r7
 8005988:	d900      	bls.n	800598c <__ssputs_r+0x70>
 800598a:	463e      	mov	r6, r7
 800598c:	4632      	mov	r2, r6
 800598e:	4641      	mov	r1, r8
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	f000 faaf 	bl	8005ef4 <memmove>
 8005996:	2000      	movs	r0, #0
 8005998:	68a3      	ldr	r3, [r4, #8]
 800599a:	1b9b      	subs	r3, r3, r6
 800599c:	60a3      	str	r3, [r4, #8]
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	4433      	add	r3, r6
 80059a2:	6023      	str	r3, [r4, #0]
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	462a      	mov	r2, r5
 80059aa:	f000 fae9 	bl	8005f80 <_realloc_r>
 80059ae:	4606      	mov	r6, r0
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d1e0      	bne.n	8005976 <__ssputs_r+0x5a>
 80059b4:	4650      	mov	r0, sl
 80059b6:	6921      	ldr	r1, [r4, #16]
 80059b8:	f7ff febc 	bl	8005734 <_free_r>
 80059bc:	230c      	movs	r3, #12
 80059be:	f8ca 3000 	str.w	r3, [sl]
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059cc:	81a3      	strh	r3, [r4, #12]
 80059ce:	e7e9      	b.n	80059a4 <__ssputs_r+0x88>

080059d0 <_svfiprintf_r>:
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	4698      	mov	r8, r3
 80059d6:	898b      	ldrh	r3, [r1, #12]
 80059d8:	4607      	mov	r7, r0
 80059da:	061b      	lsls	r3, r3, #24
 80059dc:	460d      	mov	r5, r1
 80059de:	4614      	mov	r4, r2
 80059e0:	b09d      	sub	sp, #116	; 0x74
 80059e2:	d50e      	bpl.n	8005a02 <_svfiprintf_r+0x32>
 80059e4:	690b      	ldr	r3, [r1, #16]
 80059e6:	b963      	cbnz	r3, 8005a02 <_svfiprintf_r+0x32>
 80059e8:	2140      	movs	r1, #64	; 0x40
 80059ea:	f7ff ff0b 	bl	8005804 <_malloc_r>
 80059ee:	6028      	str	r0, [r5, #0]
 80059f0:	6128      	str	r0, [r5, #16]
 80059f2:	b920      	cbnz	r0, 80059fe <_svfiprintf_r+0x2e>
 80059f4:	230c      	movs	r3, #12
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	e0d0      	b.n	8005ba0 <_svfiprintf_r+0x1d0>
 80059fe:	2340      	movs	r3, #64	; 0x40
 8005a00:	616b      	str	r3, [r5, #20]
 8005a02:	2300      	movs	r3, #0
 8005a04:	9309      	str	r3, [sp, #36]	; 0x24
 8005a06:	2320      	movs	r3, #32
 8005a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a0c:	2330      	movs	r3, #48	; 0x30
 8005a0e:	f04f 0901 	mov.w	r9, #1
 8005a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a16:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005bb8 <_svfiprintf_r+0x1e8>
 8005a1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a1e:	4623      	mov	r3, r4
 8005a20:	469a      	mov	sl, r3
 8005a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a26:	b10a      	cbz	r2, 8005a2c <_svfiprintf_r+0x5c>
 8005a28:	2a25      	cmp	r2, #37	; 0x25
 8005a2a:	d1f9      	bne.n	8005a20 <_svfiprintf_r+0x50>
 8005a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a30:	d00b      	beq.n	8005a4a <_svfiprintf_r+0x7a>
 8005a32:	465b      	mov	r3, fp
 8005a34:	4622      	mov	r2, r4
 8005a36:	4629      	mov	r1, r5
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7ff ff6f 	bl	800591c <__ssputs_r>
 8005a3e:	3001      	adds	r0, #1
 8005a40:	f000 80a9 	beq.w	8005b96 <_svfiprintf_r+0x1c6>
 8005a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a46:	445a      	add	r2, fp
 8005a48:	9209      	str	r2, [sp, #36]	; 0x24
 8005a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80a1 	beq.w	8005b96 <_svfiprintf_r+0x1c6>
 8005a54:	2300      	movs	r3, #0
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a5e:	f10a 0a01 	add.w	sl, sl, #1
 8005a62:	9304      	str	r3, [sp, #16]
 8005a64:	9307      	str	r3, [sp, #28]
 8005a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a6c:	4654      	mov	r4, sl
 8005a6e:	2205      	movs	r2, #5
 8005a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a74:	4850      	ldr	r0, [pc, #320]	; (8005bb8 <_svfiprintf_r+0x1e8>)
 8005a76:	f000 fa67 	bl	8005f48 <memchr>
 8005a7a:	9a04      	ldr	r2, [sp, #16]
 8005a7c:	b9d8      	cbnz	r0, 8005ab6 <_svfiprintf_r+0xe6>
 8005a7e:	06d0      	lsls	r0, r2, #27
 8005a80:	bf44      	itt	mi
 8005a82:	2320      	movmi	r3, #32
 8005a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a88:	0711      	lsls	r1, r2, #28
 8005a8a:	bf44      	itt	mi
 8005a8c:	232b      	movmi	r3, #43	; 0x2b
 8005a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a92:	f89a 3000 	ldrb.w	r3, [sl]
 8005a96:	2b2a      	cmp	r3, #42	; 0x2a
 8005a98:	d015      	beq.n	8005ac6 <_svfiprintf_r+0xf6>
 8005a9a:	4654      	mov	r4, sl
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	f04f 0c0a 	mov.w	ip, #10
 8005aa2:	9a07      	ldr	r2, [sp, #28]
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aaa:	3b30      	subs	r3, #48	; 0x30
 8005aac:	2b09      	cmp	r3, #9
 8005aae:	d94d      	bls.n	8005b4c <_svfiprintf_r+0x17c>
 8005ab0:	b1b0      	cbz	r0, 8005ae0 <_svfiprintf_r+0x110>
 8005ab2:	9207      	str	r2, [sp, #28]
 8005ab4:	e014      	b.n	8005ae0 <_svfiprintf_r+0x110>
 8005ab6:	eba0 0308 	sub.w	r3, r0, r8
 8005aba:	fa09 f303 	lsl.w	r3, r9, r3
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	46a2      	mov	sl, r4
 8005ac2:	9304      	str	r3, [sp, #16]
 8005ac4:	e7d2      	b.n	8005a6c <_svfiprintf_r+0x9c>
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	1d19      	adds	r1, r3, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	9103      	str	r1, [sp, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bfbb      	ittet	lt
 8005ad2:	425b      	neglt	r3, r3
 8005ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ad8:	9307      	strge	r3, [sp, #28]
 8005ada:	9307      	strlt	r3, [sp, #28]
 8005adc:	bfb8      	it	lt
 8005ade:	9204      	strlt	r2, [sp, #16]
 8005ae0:	7823      	ldrb	r3, [r4, #0]
 8005ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ae4:	d10c      	bne.n	8005b00 <_svfiprintf_r+0x130>
 8005ae6:	7863      	ldrb	r3, [r4, #1]
 8005ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aea:	d134      	bne.n	8005b56 <_svfiprintf_r+0x186>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	3402      	adds	r4, #2
 8005af0:	1d1a      	adds	r2, r3, #4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	9203      	str	r2, [sp, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bfb8      	it	lt
 8005afa:	f04f 33ff 	movlt.w	r3, #4294967295
 8005afe:	9305      	str	r3, [sp, #20]
 8005b00:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005bbc <_svfiprintf_r+0x1ec>
 8005b04:	2203      	movs	r2, #3
 8005b06:	4650      	mov	r0, sl
 8005b08:	7821      	ldrb	r1, [r4, #0]
 8005b0a:	f000 fa1d 	bl	8005f48 <memchr>
 8005b0e:	b138      	cbz	r0, 8005b20 <_svfiprintf_r+0x150>
 8005b10:	2240      	movs	r2, #64	; 0x40
 8005b12:	9b04      	ldr	r3, [sp, #16]
 8005b14:	eba0 000a 	sub.w	r0, r0, sl
 8005b18:	4082      	lsls	r2, r0
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	3401      	adds	r4, #1
 8005b1e:	9304      	str	r3, [sp, #16]
 8005b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b24:	2206      	movs	r2, #6
 8005b26:	4826      	ldr	r0, [pc, #152]	; (8005bc0 <_svfiprintf_r+0x1f0>)
 8005b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b2c:	f000 fa0c 	bl	8005f48 <memchr>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d038      	beq.n	8005ba6 <_svfiprintf_r+0x1d6>
 8005b34:	4b23      	ldr	r3, [pc, #140]	; (8005bc4 <_svfiprintf_r+0x1f4>)
 8005b36:	bb1b      	cbnz	r3, 8005b80 <_svfiprintf_r+0x1b0>
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	3307      	adds	r3, #7
 8005b3c:	f023 0307 	bic.w	r3, r3, #7
 8005b40:	3308      	adds	r3, #8
 8005b42:	9303      	str	r3, [sp, #12]
 8005b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b46:	4433      	add	r3, r6
 8005b48:	9309      	str	r3, [sp, #36]	; 0x24
 8005b4a:	e768      	b.n	8005a1e <_svfiprintf_r+0x4e>
 8005b4c:	460c      	mov	r4, r1
 8005b4e:	2001      	movs	r0, #1
 8005b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b54:	e7a6      	b.n	8005aa4 <_svfiprintf_r+0xd4>
 8005b56:	2300      	movs	r3, #0
 8005b58:	f04f 0c0a 	mov.w	ip, #10
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	3401      	adds	r4, #1
 8005b60:	9305      	str	r3, [sp, #20]
 8005b62:	4620      	mov	r0, r4
 8005b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b68:	3a30      	subs	r2, #48	; 0x30
 8005b6a:	2a09      	cmp	r2, #9
 8005b6c:	d903      	bls.n	8005b76 <_svfiprintf_r+0x1a6>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0c6      	beq.n	8005b00 <_svfiprintf_r+0x130>
 8005b72:	9105      	str	r1, [sp, #20]
 8005b74:	e7c4      	b.n	8005b00 <_svfiprintf_r+0x130>
 8005b76:	4604      	mov	r4, r0
 8005b78:	2301      	movs	r3, #1
 8005b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b7e:	e7f0      	b.n	8005b62 <_svfiprintf_r+0x192>
 8005b80:	ab03      	add	r3, sp, #12
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	462a      	mov	r2, r5
 8005b86:	4638      	mov	r0, r7
 8005b88:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <_svfiprintf_r+0x1f8>)
 8005b8a:	a904      	add	r1, sp, #16
 8005b8c:	f3af 8000 	nop.w
 8005b90:	1c42      	adds	r2, r0, #1
 8005b92:	4606      	mov	r6, r0
 8005b94:	d1d6      	bne.n	8005b44 <_svfiprintf_r+0x174>
 8005b96:	89ab      	ldrh	r3, [r5, #12]
 8005b98:	065b      	lsls	r3, r3, #25
 8005b9a:	f53f af2d 	bmi.w	80059f8 <_svfiprintf_r+0x28>
 8005b9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ba0:	b01d      	add	sp, #116	; 0x74
 8005ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba6:	ab03      	add	r3, sp, #12
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	462a      	mov	r2, r5
 8005bac:	4638      	mov	r0, r7
 8005bae:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <_svfiprintf_r+0x1f8>)
 8005bb0:	a904      	add	r1, sp, #16
 8005bb2:	f000 f87d 	bl	8005cb0 <_printf_i>
 8005bb6:	e7eb      	b.n	8005b90 <_svfiprintf_r+0x1c0>
 8005bb8:	080062c3 	.word	0x080062c3
 8005bbc:	080062c9 	.word	0x080062c9
 8005bc0:	080062cd 	.word	0x080062cd
 8005bc4:	00000000 	.word	0x00000000
 8005bc8:	0800591d 	.word	0x0800591d

08005bcc <_printf_common>:
 8005bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd0:	4616      	mov	r6, r2
 8005bd2:	4699      	mov	r9, r3
 8005bd4:	688a      	ldr	r2, [r1, #8]
 8005bd6:	690b      	ldr	r3, [r1, #16]
 8005bd8:	4607      	mov	r7, r0
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	bfb8      	it	lt
 8005bde:	4613      	movlt	r3, r2
 8005be0:	6033      	str	r3, [r6, #0]
 8005be2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005be6:	460c      	mov	r4, r1
 8005be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bec:	b10a      	cbz	r2, 8005bf2 <_printf_common+0x26>
 8005bee:	3301      	adds	r3, #1
 8005bf0:	6033      	str	r3, [r6, #0]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	0699      	lsls	r1, r3, #26
 8005bf6:	bf42      	ittt	mi
 8005bf8:	6833      	ldrmi	r3, [r6, #0]
 8005bfa:	3302      	addmi	r3, #2
 8005bfc:	6033      	strmi	r3, [r6, #0]
 8005bfe:	6825      	ldr	r5, [r4, #0]
 8005c00:	f015 0506 	ands.w	r5, r5, #6
 8005c04:	d106      	bne.n	8005c14 <_printf_common+0x48>
 8005c06:	f104 0a19 	add.w	sl, r4, #25
 8005c0a:	68e3      	ldr	r3, [r4, #12]
 8005c0c:	6832      	ldr	r2, [r6, #0]
 8005c0e:	1a9b      	subs	r3, r3, r2
 8005c10:	42ab      	cmp	r3, r5
 8005c12:	dc2b      	bgt.n	8005c6c <_printf_common+0xa0>
 8005c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c18:	1e13      	subs	r3, r2, #0
 8005c1a:	6822      	ldr	r2, [r4, #0]
 8005c1c:	bf18      	it	ne
 8005c1e:	2301      	movne	r3, #1
 8005c20:	0692      	lsls	r2, r2, #26
 8005c22:	d430      	bmi.n	8005c86 <_printf_common+0xba>
 8005c24:	4649      	mov	r1, r9
 8005c26:	4638      	mov	r0, r7
 8005c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c2c:	47c0      	blx	r8
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d023      	beq.n	8005c7a <_printf_common+0xae>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	6922      	ldr	r2, [r4, #16]
 8005c36:	f003 0306 	and.w	r3, r3, #6
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	bf14      	ite	ne
 8005c3e:	2500      	movne	r5, #0
 8005c40:	6833      	ldreq	r3, [r6, #0]
 8005c42:	f04f 0600 	mov.w	r6, #0
 8005c46:	bf08      	it	eq
 8005c48:	68e5      	ldreq	r5, [r4, #12]
 8005c4a:	f104 041a 	add.w	r4, r4, #26
 8005c4e:	bf08      	it	eq
 8005c50:	1aed      	subeq	r5, r5, r3
 8005c52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005c56:	bf08      	it	eq
 8005c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	bfc4      	itt	gt
 8005c60:	1a9b      	subgt	r3, r3, r2
 8005c62:	18ed      	addgt	r5, r5, r3
 8005c64:	42b5      	cmp	r5, r6
 8005c66:	d11a      	bne.n	8005c9e <_printf_common+0xd2>
 8005c68:	2000      	movs	r0, #0
 8005c6a:	e008      	b.n	8005c7e <_printf_common+0xb2>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	4652      	mov	r2, sl
 8005c70:	4649      	mov	r1, r9
 8005c72:	4638      	mov	r0, r7
 8005c74:	47c0      	blx	r8
 8005c76:	3001      	adds	r0, #1
 8005c78:	d103      	bne.n	8005c82 <_printf_common+0xb6>
 8005c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c82:	3501      	adds	r5, #1
 8005c84:	e7c1      	b.n	8005c0a <_printf_common+0x3e>
 8005c86:	2030      	movs	r0, #48	; 0x30
 8005c88:	18e1      	adds	r1, r4, r3
 8005c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c94:	4422      	add	r2, r4
 8005c96:	3302      	adds	r3, #2
 8005c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c9c:	e7c2      	b.n	8005c24 <_printf_common+0x58>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	47c0      	blx	r8
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d0e6      	beq.n	8005c7a <_printf_common+0xae>
 8005cac:	3601      	adds	r6, #1
 8005cae:	e7d9      	b.n	8005c64 <_printf_common+0x98>

08005cb0 <_printf_i>:
 8005cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb4:	7e0f      	ldrb	r7, [r1, #24]
 8005cb6:	4691      	mov	r9, r2
 8005cb8:	2f78      	cmp	r7, #120	; 0x78
 8005cba:	4680      	mov	r8, r0
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	469a      	mov	sl, r3
 8005cc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cc6:	d807      	bhi.n	8005cd8 <_printf_i+0x28>
 8005cc8:	2f62      	cmp	r7, #98	; 0x62
 8005cca:	d80a      	bhi.n	8005ce2 <_printf_i+0x32>
 8005ccc:	2f00      	cmp	r7, #0
 8005cce:	f000 80d5 	beq.w	8005e7c <_printf_i+0x1cc>
 8005cd2:	2f58      	cmp	r7, #88	; 0x58
 8005cd4:	f000 80c1 	beq.w	8005e5a <_printf_i+0x1aa>
 8005cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ce0:	e03a      	b.n	8005d58 <_printf_i+0xa8>
 8005ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ce6:	2b15      	cmp	r3, #21
 8005ce8:	d8f6      	bhi.n	8005cd8 <_printf_i+0x28>
 8005cea:	a101      	add	r1, pc, #4	; (adr r1, 8005cf0 <_printf_i+0x40>)
 8005cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cf0:	08005d49 	.word	0x08005d49
 8005cf4:	08005d5d 	.word	0x08005d5d
 8005cf8:	08005cd9 	.word	0x08005cd9
 8005cfc:	08005cd9 	.word	0x08005cd9
 8005d00:	08005cd9 	.word	0x08005cd9
 8005d04:	08005cd9 	.word	0x08005cd9
 8005d08:	08005d5d 	.word	0x08005d5d
 8005d0c:	08005cd9 	.word	0x08005cd9
 8005d10:	08005cd9 	.word	0x08005cd9
 8005d14:	08005cd9 	.word	0x08005cd9
 8005d18:	08005cd9 	.word	0x08005cd9
 8005d1c:	08005e63 	.word	0x08005e63
 8005d20:	08005d89 	.word	0x08005d89
 8005d24:	08005e1d 	.word	0x08005e1d
 8005d28:	08005cd9 	.word	0x08005cd9
 8005d2c:	08005cd9 	.word	0x08005cd9
 8005d30:	08005e85 	.word	0x08005e85
 8005d34:	08005cd9 	.word	0x08005cd9
 8005d38:	08005d89 	.word	0x08005d89
 8005d3c:	08005cd9 	.word	0x08005cd9
 8005d40:	08005cd9 	.word	0x08005cd9
 8005d44:	08005e25 	.word	0x08005e25
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	1d1a      	adds	r2, r3, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	602a      	str	r2, [r5, #0]
 8005d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0a0      	b.n	8005e9e <_printf_i+0x1ee>
 8005d5c:	6820      	ldr	r0, [r4, #0]
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	0607      	lsls	r7, r0, #24
 8005d62:	f103 0104 	add.w	r1, r3, #4
 8005d66:	6029      	str	r1, [r5, #0]
 8005d68:	d501      	bpl.n	8005d6e <_printf_i+0xbe>
 8005d6a:	681e      	ldr	r6, [r3, #0]
 8005d6c:	e003      	b.n	8005d76 <_printf_i+0xc6>
 8005d6e:	0646      	lsls	r6, r0, #25
 8005d70:	d5fb      	bpl.n	8005d6a <_printf_i+0xba>
 8005d72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	da03      	bge.n	8005d82 <_printf_i+0xd2>
 8005d7a:	232d      	movs	r3, #45	; 0x2d
 8005d7c:	4276      	negs	r6, r6
 8005d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d82:	230a      	movs	r3, #10
 8005d84:	4859      	ldr	r0, [pc, #356]	; (8005eec <_printf_i+0x23c>)
 8005d86:	e012      	b.n	8005dae <_printf_i+0xfe>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	6820      	ldr	r0, [r4, #0]
 8005d8c:	1d19      	adds	r1, r3, #4
 8005d8e:	6029      	str	r1, [r5, #0]
 8005d90:	0605      	lsls	r5, r0, #24
 8005d92:	d501      	bpl.n	8005d98 <_printf_i+0xe8>
 8005d94:	681e      	ldr	r6, [r3, #0]
 8005d96:	e002      	b.n	8005d9e <_printf_i+0xee>
 8005d98:	0641      	lsls	r1, r0, #25
 8005d9a:	d5fb      	bpl.n	8005d94 <_printf_i+0xe4>
 8005d9c:	881e      	ldrh	r6, [r3, #0]
 8005d9e:	2f6f      	cmp	r7, #111	; 0x6f
 8005da0:	bf0c      	ite	eq
 8005da2:	2308      	moveq	r3, #8
 8005da4:	230a      	movne	r3, #10
 8005da6:	4851      	ldr	r0, [pc, #324]	; (8005eec <_printf_i+0x23c>)
 8005da8:	2100      	movs	r1, #0
 8005daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dae:	6865      	ldr	r5, [r4, #4]
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	bfa8      	it	ge
 8005db4:	6821      	ldrge	r1, [r4, #0]
 8005db6:	60a5      	str	r5, [r4, #8]
 8005db8:	bfa4      	itt	ge
 8005dba:	f021 0104 	bicge.w	r1, r1, #4
 8005dbe:	6021      	strge	r1, [r4, #0]
 8005dc0:	b90e      	cbnz	r6, 8005dc6 <_printf_i+0x116>
 8005dc2:	2d00      	cmp	r5, #0
 8005dc4:	d04b      	beq.n	8005e5e <_printf_i+0x1ae>
 8005dc6:	4615      	mov	r5, r2
 8005dc8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dcc:	fb03 6711 	mls	r7, r3, r1, r6
 8005dd0:	5dc7      	ldrb	r7, [r0, r7]
 8005dd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dd6:	4637      	mov	r7, r6
 8005dd8:	42bb      	cmp	r3, r7
 8005dda:	460e      	mov	r6, r1
 8005ddc:	d9f4      	bls.n	8005dc8 <_printf_i+0x118>
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d10b      	bne.n	8005dfa <_printf_i+0x14a>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	07de      	lsls	r6, r3, #31
 8005de6:	d508      	bpl.n	8005dfa <_printf_i+0x14a>
 8005de8:	6923      	ldr	r3, [r4, #16]
 8005dea:	6861      	ldr	r1, [r4, #4]
 8005dec:	4299      	cmp	r1, r3
 8005dee:	bfde      	ittt	le
 8005df0:	2330      	movle	r3, #48	; 0x30
 8005df2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005df6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dfa:	1b52      	subs	r2, r2, r5
 8005dfc:	6122      	str	r2, [r4, #16]
 8005dfe:	464b      	mov	r3, r9
 8005e00:	4621      	mov	r1, r4
 8005e02:	4640      	mov	r0, r8
 8005e04:	f8cd a000 	str.w	sl, [sp]
 8005e08:	aa03      	add	r2, sp, #12
 8005e0a:	f7ff fedf 	bl	8005bcc <_printf_common>
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d14a      	bne.n	8005ea8 <_printf_i+0x1f8>
 8005e12:	f04f 30ff 	mov.w	r0, #4294967295
 8005e16:	b004      	add	sp, #16
 8005e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	f043 0320 	orr.w	r3, r3, #32
 8005e22:	6023      	str	r3, [r4, #0]
 8005e24:	2778      	movs	r7, #120	; 0x78
 8005e26:	4832      	ldr	r0, [pc, #200]	; (8005ef0 <_printf_i+0x240>)
 8005e28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	6829      	ldr	r1, [r5, #0]
 8005e30:	061f      	lsls	r7, r3, #24
 8005e32:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e36:	d402      	bmi.n	8005e3e <_printf_i+0x18e>
 8005e38:	065f      	lsls	r7, r3, #25
 8005e3a:	bf48      	it	mi
 8005e3c:	b2b6      	uxthmi	r6, r6
 8005e3e:	07df      	lsls	r7, r3, #31
 8005e40:	bf48      	it	mi
 8005e42:	f043 0320 	orrmi.w	r3, r3, #32
 8005e46:	6029      	str	r1, [r5, #0]
 8005e48:	bf48      	it	mi
 8005e4a:	6023      	strmi	r3, [r4, #0]
 8005e4c:	b91e      	cbnz	r6, 8005e56 <_printf_i+0x1a6>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	f023 0320 	bic.w	r3, r3, #32
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	2310      	movs	r3, #16
 8005e58:	e7a6      	b.n	8005da8 <_printf_i+0xf8>
 8005e5a:	4824      	ldr	r0, [pc, #144]	; (8005eec <_printf_i+0x23c>)
 8005e5c:	e7e4      	b.n	8005e28 <_printf_i+0x178>
 8005e5e:	4615      	mov	r5, r2
 8005e60:	e7bd      	b.n	8005dde <_printf_i+0x12e>
 8005e62:	682b      	ldr	r3, [r5, #0]
 8005e64:	6826      	ldr	r6, [r4, #0]
 8005e66:	1d18      	adds	r0, r3, #4
 8005e68:	6961      	ldr	r1, [r4, #20]
 8005e6a:	6028      	str	r0, [r5, #0]
 8005e6c:	0635      	lsls	r5, r6, #24
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	d501      	bpl.n	8005e76 <_printf_i+0x1c6>
 8005e72:	6019      	str	r1, [r3, #0]
 8005e74:	e002      	b.n	8005e7c <_printf_i+0x1cc>
 8005e76:	0670      	lsls	r0, r6, #25
 8005e78:	d5fb      	bpl.n	8005e72 <_printf_i+0x1c2>
 8005e7a:	8019      	strh	r1, [r3, #0]
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4615      	mov	r5, r2
 8005e80:	6123      	str	r3, [r4, #16]
 8005e82:	e7bc      	b.n	8005dfe <_printf_i+0x14e>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	2100      	movs	r1, #0
 8005e88:	1d1a      	adds	r2, r3, #4
 8005e8a:	602a      	str	r2, [r5, #0]
 8005e8c:	681d      	ldr	r5, [r3, #0]
 8005e8e:	6862      	ldr	r2, [r4, #4]
 8005e90:	4628      	mov	r0, r5
 8005e92:	f000 f859 	bl	8005f48 <memchr>
 8005e96:	b108      	cbz	r0, 8005e9c <_printf_i+0x1ec>
 8005e98:	1b40      	subs	r0, r0, r5
 8005e9a:	6060      	str	r0, [r4, #4]
 8005e9c:	6863      	ldr	r3, [r4, #4]
 8005e9e:	6123      	str	r3, [r4, #16]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea6:	e7aa      	b.n	8005dfe <_printf_i+0x14e>
 8005ea8:	462a      	mov	r2, r5
 8005eaa:	4649      	mov	r1, r9
 8005eac:	4640      	mov	r0, r8
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	47d0      	blx	sl
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d0ad      	beq.n	8005e12 <_printf_i+0x162>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	079b      	lsls	r3, r3, #30
 8005eba:	d413      	bmi.n	8005ee4 <_printf_i+0x234>
 8005ebc:	68e0      	ldr	r0, [r4, #12]
 8005ebe:	9b03      	ldr	r3, [sp, #12]
 8005ec0:	4298      	cmp	r0, r3
 8005ec2:	bfb8      	it	lt
 8005ec4:	4618      	movlt	r0, r3
 8005ec6:	e7a6      	b.n	8005e16 <_printf_i+0x166>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	4632      	mov	r2, r6
 8005ecc:	4649      	mov	r1, r9
 8005ece:	4640      	mov	r0, r8
 8005ed0:	47d0      	blx	sl
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	d09d      	beq.n	8005e12 <_printf_i+0x162>
 8005ed6:	3501      	adds	r5, #1
 8005ed8:	68e3      	ldr	r3, [r4, #12]
 8005eda:	9903      	ldr	r1, [sp, #12]
 8005edc:	1a5b      	subs	r3, r3, r1
 8005ede:	42ab      	cmp	r3, r5
 8005ee0:	dcf2      	bgt.n	8005ec8 <_printf_i+0x218>
 8005ee2:	e7eb      	b.n	8005ebc <_printf_i+0x20c>
 8005ee4:	2500      	movs	r5, #0
 8005ee6:	f104 0619 	add.w	r6, r4, #25
 8005eea:	e7f5      	b.n	8005ed8 <_printf_i+0x228>
 8005eec:	080062d4 	.word	0x080062d4
 8005ef0:	080062e5 	.word	0x080062e5

08005ef4 <memmove>:
 8005ef4:	4288      	cmp	r0, r1
 8005ef6:	b510      	push	{r4, lr}
 8005ef8:	eb01 0402 	add.w	r4, r1, r2
 8005efc:	d902      	bls.n	8005f04 <memmove+0x10>
 8005efe:	4284      	cmp	r4, r0
 8005f00:	4623      	mov	r3, r4
 8005f02:	d807      	bhi.n	8005f14 <memmove+0x20>
 8005f04:	1e43      	subs	r3, r0, #1
 8005f06:	42a1      	cmp	r1, r4
 8005f08:	d008      	beq.n	8005f1c <memmove+0x28>
 8005f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f12:	e7f8      	b.n	8005f06 <memmove+0x12>
 8005f14:	4601      	mov	r1, r0
 8005f16:	4402      	add	r2, r0
 8005f18:	428a      	cmp	r2, r1
 8005f1a:	d100      	bne.n	8005f1e <memmove+0x2a>
 8005f1c:	bd10      	pop	{r4, pc}
 8005f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f26:	e7f7      	b.n	8005f18 <memmove+0x24>

08005f28 <_sbrk_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	4d05      	ldr	r5, [pc, #20]	; (8005f44 <_sbrk_r+0x1c>)
 8005f2e:	4604      	mov	r4, r0
 8005f30:	4608      	mov	r0, r1
 8005f32:	602b      	str	r3, [r5, #0]
 8005f34:	f7fb fcc2 	bl	80018bc <_sbrk>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_sbrk_r+0x1a>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_sbrk_r+0x1a>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	20000678 	.word	0x20000678

08005f48 <memchr>:
 8005f48:	4603      	mov	r3, r0
 8005f4a:	b510      	push	{r4, lr}
 8005f4c:	b2c9      	uxtb	r1, r1
 8005f4e:	4402      	add	r2, r0
 8005f50:	4293      	cmp	r3, r2
 8005f52:	4618      	mov	r0, r3
 8005f54:	d101      	bne.n	8005f5a <memchr+0x12>
 8005f56:	2000      	movs	r0, #0
 8005f58:	e003      	b.n	8005f62 <memchr+0x1a>
 8005f5a:	7804      	ldrb	r4, [r0, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	428c      	cmp	r4, r1
 8005f60:	d1f6      	bne.n	8005f50 <memchr+0x8>
 8005f62:	bd10      	pop	{r4, pc}

08005f64 <memcpy>:
 8005f64:	440a      	add	r2, r1
 8005f66:	4291      	cmp	r1, r2
 8005f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f6c:	d100      	bne.n	8005f70 <memcpy+0xc>
 8005f6e:	4770      	bx	lr
 8005f70:	b510      	push	{r4, lr}
 8005f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f76:	4291      	cmp	r1, r2
 8005f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f7c:	d1f9      	bne.n	8005f72 <memcpy+0xe>
 8005f7e:	bd10      	pop	{r4, pc}

08005f80 <_realloc_r>:
 8005f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f84:	4680      	mov	r8, r0
 8005f86:	4614      	mov	r4, r2
 8005f88:	460e      	mov	r6, r1
 8005f8a:	b921      	cbnz	r1, 8005f96 <_realloc_r+0x16>
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f92:	f7ff bc37 	b.w	8005804 <_malloc_r>
 8005f96:	b92a      	cbnz	r2, 8005fa4 <_realloc_r+0x24>
 8005f98:	f7ff fbcc 	bl	8005734 <_free_r>
 8005f9c:	4625      	mov	r5, r4
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa4:	f000 f81b 	bl	8005fde <_malloc_usable_size_r>
 8005fa8:	4284      	cmp	r4, r0
 8005faa:	4607      	mov	r7, r0
 8005fac:	d802      	bhi.n	8005fb4 <_realloc_r+0x34>
 8005fae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fb2:	d812      	bhi.n	8005fda <_realloc_r+0x5a>
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	f7ff fc24 	bl	8005804 <_malloc_r>
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d0ed      	beq.n	8005f9e <_realloc_r+0x1e>
 8005fc2:	42bc      	cmp	r4, r7
 8005fc4:	4622      	mov	r2, r4
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	bf28      	it	cs
 8005fca:	463a      	movcs	r2, r7
 8005fcc:	f7ff ffca 	bl	8005f64 <memcpy>
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	f7ff fbae 	bl	8005734 <_free_r>
 8005fd8:	e7e1      	b.n	8005f9e <_realloc_r+0x1e>
 8005fda:	4635      	mov	r5, r6
 8005fdc:	e7df      	b.n	8005f9e <_realloc_r+0x1e>

08005fde <_malloc_usable_size_r>:
 8005fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe2:	1f18      	subs	r0, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	bfbc      	itt	lt
 8005fe8:	580b      	ldrlt	r3, [r1, r0]
 8005fea:	18c0      	addlt	r0, r0, r3
 8005fec:	4770      	bx	lr
	...

08005ff0 <_init>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	bf00      	nop
 8005ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff6:	bc08      	pop	{r3}
 8005ff8:	469e      	mov	lr, r3
 8005ffa:	4770      	bx	lr

08005ffc <_fini>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	bf00      	nop
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr
