
Carga_DC_desarrollo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf4  08002cf4  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002cf4  08002cf4  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cf4  08002cf4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf4  08002cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000040  08002d3c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  08002d3c  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b44b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f04  00000000  00000000  0002b4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  0002d400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080c  00000000  00000000  0002de90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f20  00000000  00000000  0002e69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db41  00000000  00000000  000465bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a1eb  00000000  00000000  000540fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b14  00000000  00000000  000de2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e0dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c40 	.word	0x08002c40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002c40 	.word	0x08002c40

0800014c <LCD_I2C_cmd>:
#define SLAVE_ADDRESS_LCD  0x4e	//0x4E // change this according to ur setup 0x7e

/* Envia comando por LCD ---------------------------------------*/

void LCD_I2C_cmd(char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <LCD_I2C_cmd+0x60>)
 800019a:	f001 fbab 	bl	80018f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800019e:	2001      	movs	r0, #1
 80001a0:	f000 fd54 	bl	8000c4c <HAL_Delay>
}
 80001a4:	bf00      	nop
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	2000008c 	.word	0x2000008c

080001b0 <LCD_I2C_char>:

/* Envia dato por LCD ------------------------------------------*/

void LCD_I2C_char(char data)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	f023 030f 	bic.w	r3, r3, #15
 80001c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	011b      	lsls	r3, r3, #4
 80001c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80001c8:	7bfb      	ldrb	r3, [r7, #15]
 80001ca:	f043 030d 	orr.w	r3, r3, #13
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80001d2:	7bfb      	ldrb	r3, [r7, #15]
 80001d4:	f043 0309 	orr.w	r3, r3, #9
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80001dc:	7bbb      	ldrb	r3, [r7, #14]
 80001de:	f043 030d 	orr.w	r3, r3, #13
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80001e6:	7bbb      	ldrb	r3, [r7, #14]
 80001e8:	f043 0309 	orr.w	r3, r3, #9
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001f0:	f107 0208 	add.w	r2, r7, #8
 80001f4:	2364      	movs	r3, #100	; 0x64
 80001f6:	9300      	str	r3, [sp, #0]
 80001f8:	2304      	movs	r3, #4
 80001fa:	214e      	movs	r1, #78	; 0x4e
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <LCD_I2C_char+0x60>)
 80001fe:	f001 fb79 	bl	80018f4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f000 fd22 	bl	8000c4c <HAL_Delay>
}
 8000208:	bf00      	nop
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	2000008c 	.word	0x2000008c

08000214 <LCD_I2C_init>:

/* Inicializa LCD -----------------------------------------------*/

void LCD_I2C_init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	LCD_I2C_cmd(0x02);
 8000218:	2002      	movs	r0, #2
 800021a:	f7ff ff97 	bl	800014c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x28);
 800021e:	2028      	movs	r0, #40	; 0x28
 8000220:	f7ff ff94 	bl	800014c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x0c);
 8000224:	200c      	movs	r0, #12
 8000226:	f7ff ff91 	bl	800014c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x80);
 800022a:	2080      	movs	r0, #128	; 0x80
 800022c:	f7ff ff8e 	bl	800014c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_CLEAR);
 8000230:	2001      	movs	r0, #1
 8000232:	f7ff ff8b 	bl	800014c <LCD_I2C_cmd>
}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}

0800023a <LCD_I2C_write_text>:

/* Envia cadena de caracteres al LCD -----------------------------*/

void LCD_I2C_write_text(char *str)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b082      	sub	sp, #8
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
	while (*str) LCD_I2C_char(*str++);
 8000242:	e006      	b.n	8000252 <LCD_I2C_write_text+0x18>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	1c5a      	adds	r2, r3, #1
 8000248:	607a      	str	r2, [r7, #4]
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4618      	mov	r0, r3
 800024e:	f7ff ffaf 	bl	80001b0 <LCD_I2C_char>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d1f4      	bne.n	8000244 <LCD_I2C_write_text+0xa>
}
 800025a:	bf00      	nop
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <keypad_init>:
GPIO_TypeDef* COL_3_Port = GPIOB;
GPIO_TypeDef* COL_4_Port = GPIOB;


void keypad_init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
  // Configure GPIO pins for keypad matrix
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026a:	463b      	mov	r3, r7
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = ROW_1_Pin | ROW_2_Pin | ROW_3_Pin | ROW_4_Pin;
 8000276:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800027a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000280:	2301      	movs	r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
	  HAL_GPIO_Init(ROW_2_Port, &GPIO_InitStruct);
 8000284:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <keypad_init+0x98>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	463a      	mov	r2, r7
 800028a:	4611      	mov	r1, r2
 800028c:	4618      	mov	r0, r3
 800028e:	f001 f821 	bl	80012d4 <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_3_Port, &GPIO_InitStruct);
 8000292:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <keypad_init+0x9c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	463a      	mov	r2, r7
 8000298:	4611      	mov	r1, r2
 800029a:	4618      	mov	r0, r3
 800029c:	f001 f81a 	bl	80012d4 <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_4_Port, &GPIO_InitStruct);
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <keypad_init+0xa0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	463a      	mov	r2, r7
 80002a6:	4611      	mov	r1, r2
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 f813 	bl	80012d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = COL_1_Pin | COL_2_Pin | COL_3_Pin | COL_4_Pin;
 80002ae:	f640 4303 	movw	r3, #3075	; 0xc03
 80002b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b4:	2301      	movs	r3, #1
 80002b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b8:	2302      	movs	r3, #2
 80002ba:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(COL_1_Port, &GPIO_InitStruct);
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <keypad_init+0xa4>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	463a      	mov	r2, r7
 80002c2:	4611      	mov	r1, r2
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 f805 	bl	80012d4 <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_2_Port, &GPIO_InitStruct);
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <keypad_init+0xa8>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	463a      	mov	r2, r7
 80002d0:	4611      	mov	r1, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fffe 	bl	80012d4 <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_3_Port, &GPIO_InitStruct);
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <keypad_init+0xac>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	463a      	mov	r2, r7
 80002de:	4611      	mov	r1, r2
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fff7 	bl	80012d4 <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_4_Port, &GPIO_InitStruct);
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <keypad_init+0xb0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	463a      	mov	r2, r7
 80002ec:	4611      	mov	r1, r2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fff0 	bl	80012d4 <HAL_GPIO_Init>
}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	20000004 	.word	0x20000004
 8000300:	20000008 	.word	0x20000008
 8000304:	2000000c 	.word	0x2000000c
 8000308:	20000010 	.word	0x20000010
 800030c:	20000014 	.word	0x20000014
 8000310:	20000018 	.word	0x20000018
 8000314:	2000001c 	.word	0x2000001c

08000318 <keypad_scan>:
char keypad_scan(void)
{
 8000318:	b590      	push	{r4, r7, lr}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'C'},
 800031e:	4b6f      	ldr	r3, [pc, #444]	; (80004dc <keypad_scan+0x1c4>)
 8000320:	1d3c      	adds	r4, r7, #4
 8000322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'V'},
                     {'7', '8', '9', 'R'},
                     {'D', '0', 'K', 'P'}};

  for(int i = 0; i < 4; i++)
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]
 800032c:	e0cc      	b.n	80004c8 <keypad_scan+0x1b0>
  {
    // Set current column as output and low
    switch(i)
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	2b03      	cmp	r3, #3
 8000332:	f200 8087 	bhi.w	8000444 <keypad_scan+0x12c>
 8000336:	a201      	add	r2, pc, #4	; (adr r2, 800033c <keypad_scan+0x24>)
 8000338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033c:	0800034d 	.word	0x0800034d
 8000340:	0800038b 	.word	0x0800038b
 8000344:	080003c9 	.word	0x080003c9
 8000348:	08000407 	.word	0x08000407
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 800034c:	4b64      	ldr	r3, [pc, #400]	; (80004e0 <keypad_scan+0x1c8>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2200      	movs	r2, #0
 8000352:	2101      	movs	r1, #1
 8000354:	4618      	mov	r0, r3
 8000356:	f001 f958 	bl	800160a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 800035a:	4b62      	ldr	r3, [pc, #392]	; (80004e4 <keypad_scan+0x1cc>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2201      	movs	r2, #1
 8000360:	2102      	movs	r1, #2
 8000362:	4618      	mov	r0, r3
 8000364:	f001 f951 	bl	800160a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8000368:	4b5f      	ldr	r3, [pc, #380]	; (80004e8 <keypad_scan+0x1d0>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000372:	4618      	mov	r0, r3
 8000374:	f001 f949 	bl	800160a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8000378:	4b5c      	ldr	r3, [pc, #368]	; (80004ec <keypad_scan+0x1d4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2201      	movs	r2, #1
 800037e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000382:	4618      	mov	r0, r3
 8000384:	f001 f941 	bl	800160a <HAL_GPIO_WritePin>
        break;
 8000388:	e05c      	b.n	8000444 <keypad_scan+0x12c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 800038a:	4b55      	ldr	r3, [pc, #340]	; (80004e0 <keypad_scan+0x1c8>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2201      	movs	r2, #1
 8000390:	2101      	movs	r1, #1
 8000392:	4618      	mov	r0, r3
 8000394:	f001 f939 	bl	800160a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 8000398:	4b52      	ldr	r3, [pc, #328]	; (80004e4 <keypad_scan+0x1cc>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2200      	movs	r2, #0
 800039e:	2102      	movs	r1, #2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 f932 	bl	800160a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80003a6:	4b50      	ldr	r3, [pc, #320]	; (80004e8 <keypad_scan+0x1d0>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b0:	4618      	mov	r0, r3
 80003b2:	f001 f92a 	bl	800160a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80003b6:	4b4d      	ldr	r3, [pc, #308]	; (80004ec <keypad_scan+0x1d4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 f922 	bl	800160a <HAL_GPIO_WritePin>
        break;
 80003c6:	e03d      	b.n	8000444 <keypad_scan+0x12c>

      case 2:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003c8:	4b45      	ldr	r3, [pc, #276]	; (80004e0 <keypad_scan+0x1c8>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2201      	movs	r2, #1
 80003ce:	2101      	movs	r1, #1
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 f91a 	bl	800160a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 80003d6:	4b43      	ldr	r3, [pc, #268]	; (80004e4 <keypad_scan+0x1cc>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2201      	movs	r2, #1
 80003dc:	2102      	movs	r1, #2
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 f913 	bl	800160a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 80003e4:	4b40      	ldr	r3, [pc, #256]	; (80004e8 <keypad_scan+0x1d0>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 f90b 	bl	800160a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80003f4:	4b3d      	ldr	r3, [pc, #244]	; (80004ec <keypad_scan+0x1d4>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2201      	movs	r2, #1
 80003fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003fe:	4618      	mov	r0, r3
 8000400:	f001 f903 	bl	800160a <HAL_GPIO_WritePin>
		break;
 8000404:	e01e      	b.n	8000444 <keypad_scan+0x12c>

	  case 3:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8000406:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <keypad_scan+0x1c8>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2201      	movs	r2, #1
 800040c:	2101      	movs	r1, #1
 800040e:	4618      	mov	r0, r3
 8000410:	f001 f8fb 	bl	800160a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8000414:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <keypad_scan+0x1cc>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2201      	movs	r2, #1
 800041a:	2102      	movs	r1, #2
 800041c:	4618      	mov	r0, r3
 800041e:	f001 f8f4 	bl	800160a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8000422:	4b31      	ldr	r3, [pc, #196]	; (80004e8 <keypad_scan+0x1d0>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042c:	4618      	mov	r0, r3
 800042e:	f001 f8ec 	bl	800160a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 8000432:	4b2e      	ldr	r3, [pc, #184]	; (80004ec <keypad_scan+0x1d4>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800043c:	4618      	mov	r0, r3
 800043e:	f001 f8e4 	bl	800160a <HAL_GPIO_WritePin>
		break;
 8000442:	bf00      	nop
    }
// Read current rows
	if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 8000444:	4b2a      	ldr	r3, [pc, #168]	; (80004f0 <keypad_scan+0x1d8>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800044c:	4618      	mov	r0, r3
 800044e:	f001 f8c5 	bl	80015dc <HAL_GPIO_ReadPin>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d104      	bne.n	8000462 <keypad_scan+0x14a>
	  return keys[0][i];
 8000458:	1d3a      	adds	r2, r7, #4
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	4413      	add	r3, r2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	e037      	b.n	80004d2 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 8000462:	4b24      	ldr	r3, [pc, #144]	; (80004f4 <keypad_scan+0x1dc>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046a:	4618      	mov	r0, r3
 800046c:	f001 f8b6 	bl	80015dc <HAL_GPIO_ReadPin>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d105      	bne.n	8000482 <keypad_scan+0x16a>
	  return keys[1][i];
 8000476:	f107 0208 	add.w	r2, r7, #8
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	4413      	add	r3, r2
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	e027      	b.n	80004d2 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 8000482:	4b1d      	ldr	r3, [pc, #116]	; (80004f8 <keypad_scan+0x1e0>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800048a:	4618      	mov	r0, r3
 800048c:	f001 f8a6 	bl	80015dc <HAL_GPIO_ReadPin>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d105      	bne.n	80004a2 <keypad_scan+0x18a>
	  return keys[2][i];
 8000496:	f107 020c 	add.w	r2, r7, #12
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	4413      	add	r3, r2
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	e017      	b.n	80004d2 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 80004a2:	4b16      	ldr	r3, [pc, #88]	; (80004fc <keypad_scan+0x1e4>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 f896 	bl	80015dc <HAL_GPIO_ReadPin>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d105      	bne.n	80004c2 <keypad_scan+0x1aa>
	  return keys[3][i];
 80004b6:	f107 0210 	add.w	r2, r7, #16
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	4413      	add	r3, r2
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	e007      	b.n	80004d2 <keypad_scan+0x1ba>
  for(int i = 0; i < 4; i++)
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	3301      	adds	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	f77f af2f 	ble.w	800032e <keypad_scan+0x16>
  }
return 0; // No key pressed
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	371c      	adds	r7, #28
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd90      	pop	{r4, r7, pc}
 80004da:	bf00      	nop
 80004dc:	08002c58 	.word	0x08002c58
 80004e0:	20000010 	.word	0x20000010
 80004e4:	20000014 	.word	0x20000014
 80004e8:	20000018 	.word	0x20000018
 80004ec:	2000001c 	.word	0x2000001c
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000004 	.word	0x20000004
 80004f8:	20000008 	.word	0x20000008
 80004fc:	2000000c 	.word	0x2000000c

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fb3f 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f893 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f97d 	bl	800080c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000512:	f000 f8ed 	bl	80006f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000516:	f000 f929 	bl	800076c <MX_I2C1_Init>
  MX_USB_PCD_Init();
 800051a:	f000 f955 	bl	80007c8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  keypad_init();
 800051e:	f7ff fea1 	bl	8000264 <keypad_init>
  LCD_I2C_init();
 8000522:	f7ff fe77 	bl	8000214 <LCD_I2C_init>
	//esto podria estar encapsulado
  	  LCD_I2C_cmd(LCD_LINEA1);
 8000526:	2000      	movs	r0, #0
 8000528:	f7ff fe10 	bl	800014c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   UTN FRP   ");
 800052c:	4838      	ldr	r0, [pc, #224]	; (8000610 <main+0x110>)
 800052e:	f7ff fe84 	bl	800023a <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA2);
 8000532:	20c0      	movs	r0, #192	; 0xc0
 8000534:	f7ff fe0a 	bl	800014c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   Carga DC   ");
 8000538:	4836      	ldr	r0, [pc, #216]	; (8000614 <main+0x114>)
 800053a:	f7ff fe7e 	bl	800023a <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA4);
 800053e:	20d4      	movs	r0, #212	; 0xd4
 8000540:	f7ff fe04 	bl	800014c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   A.Gotte/A.Jose   ");
 8000544:	4834      	ldr	r0, [pc, #208]	; (8000618 <main+0x118>)
 8000546:	f7ff fe78 	bl	800023a <LCD_I2C_write_text>
	  HAL_Delay(3000);
 800054a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800054e:	f000 fb7d 	bl	8000c4c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LCD_I2C_cmd(LCD_CLEAR);
 8000552:	2001      	movs	r0, #1
 8000554:	f7ff fdfa 	bl	800014c <LCD_I2C_cmd>
	  if(input_keypad=='C'||input_keypad=='V'||input_keypad=='R'||input_keypad=='P'){
 8000558:	4b30      	ldr	r3, [pc, #192]	; (800061c <main+0x11c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b43      	cmp	r3, #67	; 0x43
 800055e:	d00b      	beq.n	8000578 <main+0x78>
 8000560:	4b2e      	ldr	r3, [pc, #184]	; (800061c <main+0x11c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b56      	cmp	r3, #86	; 0x56
 8000566:	d007      	beq.n	8000578 <main+0x78>
 8000568:	4b2c      	ldr	r3, [pc, #176]	; (800061c <main+0x11c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b52      	cmp	r3, #82	; 0x52
 800056e:	d003      	beq.n	8000578 <main+0x78>
 8000570:	4b2a      	ldr	r3, [pc, #168]	; (800061c <main+0x11c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b50      	cmp	r3, #80	; 0x50
 8000576:	d114      	bne.n	80005a2 <main+0xa2>
		  //ingresa a la configuracion de modo
		  flag_config=1;
 8000578:	4b29      	ldr	r3, [pc, #164]	; (8000620 <main+0x120>)
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
		  //guardar el modo que se selecciono
		  while(flag_config){
 800057e:	e00c      	b.n	800059a <main+0x9a>
			  //hacer scan del teclado
			  //actualizar disp
			  //
			  LCD_I2C_cmd(LCD_LINEA3);
 8000580:	2094      	movs	r0, #148	; 0x94
 8000582:	f7ff fde3 	bl	800014c <LCD_I2C_cmd>
			  LCD_I2C_write_text("   flag_config   ");
 8000586:	4827      	ldr	r0, [pc, #156]	; (8000624 <main+0x124>)
 8000588:	f7ff fe57 	bl	800023a <LCD_I2C_write_text>
			  if(input_keypad=='K'){
 800058c:	4b23      	ldr	r3, [pc, #140]	; (800061c <main+0x11c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b4b      	cmp	r3, #75	; 0x4b
 8000592:	d102      	bne.n	800059a <main+0x9a>
				  flag_config=0;//sale del while y vuelve al super loop
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <main+0x120>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
		  while(flag_config){
 800059a:	4b21      	ldr	r3, [pc, #132]	; (8000620 <main+0x120>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1ee      	bne.n	8000580 <main+0x80>
			  }
		  }
	  }
	  if(flag_on_off){
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <main+0x128>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0d3      	beq.n	8000552 <main+0x52>
		  //switch con los cuatro case y los modos de control
		  while(flag_on_off){
 80005aa:	e02c      	b.n	8000606 <main+0x106>
			  input_keypad=keypad_scan();
 80005ac:	f7ff feb4 	bl	8000318 <keypad_scan>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b19      	ldr	r3, [pc, #100]	; (800061c <main+0x11c>)
 80005b6:	701a      	strb	r2, [r3, #0]
			  if(input_keypad!=0){
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <main+0x11c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d015      	beq.n	80005ec <main+0xec>
				  char char_as_str[] = {input_keypad, '\0'};
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <main+0x11c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	713b      	strb	r3, [r7, #4]
 80005c6:	2300      	movs	r3, #0
 80005c8:	717b      	strb	r3, [r7, #5]
				  LCD_I2C_cmd(LCD_LINEA2);
 80005ca:	20c0      	movs	r0, #192	; 0xc0
 80005cc:	f7ff fdbe 	bl	800014c <LCD_I2C_cmd>
				  strcat(buffer, char_as_str);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	4619      	mov	r1, r3
 80005d4:	4815      	ldr	r0, [pc, #84]	; (800062c <main+0x12c>)
 80005d6:	f002 faff 	bl	8002bd8 <strcat>
				  LCD_I2C_write_text(buffer);
 80005da:	4814      	ldr	r0, [pc, #80]	; (800062c <main+0x12c>)
 80005dc:	f7ff fe2d 	bl	800023a <LCD_I2C_write_text>
				  buffer[10]='\0';
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <main+0x12c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	729a      	strb	r2, [r3, #10]
				  input_keypad=0;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <main+0x11c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
			  }
			  LCD_I2C_cmd(LCD_LINEA4);
 80005ec:	20d4      	movs	r0, #212	; 0xd4
 80005ee:	f7ff fdad 	bl	800014c <LCD_I2C_cmd>
			  LCD_I2C_write_text("   flag_on_off   ");
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <main+0x130>)
 80005f4:	f7ff fe21 	bl	800023a <LCD_I2C_write_text>
			  HAL_Delay(3000);
 80005f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005fc:	f000 fb26 	bl	8000c4c <HAL_Delay>
			  LCD_I2C_cmd(LCD_CLEAR);
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff fda3 	bl	800014c <LCD_I2C_cmd>
		  while(flag_on_off){
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <main+0x128>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1ce      	bne.n	80005ac <main+0xac>
	  LCD_I2C_cmd(LCD_CLEAR);
 800060e:	e7a0      	b.n	8000552 <main+0x52>
 8000610:	08002c68 	.word	0x08002c68
 8000614:	08002c78 	.word	0x08002c78
 8000618:	08002c88 	.word	0x08002c88
 800061c:	200003d2 	.word	0x200003d2
 8000620:	200003d1 	.word	0x200003d1
 8000624:	08002ca0 	.word	0x08002ca0
 8000628:	200003d0 	.word	0x200003d0
 800062c:	20000020 	.word	0x20000020
 8000630:	08002cb4 	.word	0x08002cb4

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800063e:	2228      	movs	r2, #40	; 0x28
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fac0 	bl	8002bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000672:	2301      	movs	r3, #1
 8000674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000680:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fd8a 	bl	80021a4 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000696:	f000 f94b 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	2102      	movs	r1, #2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fff6 	bl	80026a8 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006c2:	f000 f935 	bl	8000930 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80006c6:	2312      	movs	r3, #18
 80006c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 f960 	bl	800299c <HAL_RCCEx_PeriphCLKConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006e2:	f000 f925 	bl	8000930 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_ADC1_Init+0x74>)
 8000702:	4a19      	ldr	r2, [pc, #100]	; (8000768 <MX_ADC1_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_ADC1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_ADC1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_ADC1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_ADC1_Init+0x74>)
 800071a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800071e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_ADC1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_ADC1_Init+0x74>)
 8000728:	2201      	movs	r2, #1
 800072a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_ADC1_Init+0x74>)
 800072e:	f000 fab1 	bl	8000c94 <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 f8fa 	bl	8000930 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800073c:	2301      	movs	r3, #1
 800073e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000740:	2301      	movs	r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_ADC1_Init+0x74>)
 800074e:	f000 fb79 	bl	8000e44 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000758:	f000 f8ea 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000005c 	.word	0x2000005c
 8000768:	40012400 	.word	0x40012400

0800076c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2C1_Init+0x50>)
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <MX_I2C1_Init+0x54>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_I2C1_Init+0x50>)
 8000778:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_I2C1_Init+0x58>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_I2C1_Init+0x50>)
 800078a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_I2C1_Init+0x50>)
 80007aa:	f000 ff5f 	bl	800166c <HAL_I2C_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 f8bc 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000008c 	.word	0x2000008c
 80007c0:	40005400 	.word	0x40005400
 80007c4:	000186a0 	.word	0x000186a0

080007c8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_USB_PCD_Init+0x3c>)
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <MX_USB_PCD_Init+0x40>)
 80007d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USB_PCD_Init+0x3c>)
 80007d4:	2208      	movs	r2, #8
 80007d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_USB_PCD_Init+0x3c>)
 80007da:	2202      	movs	r2, #2
 80007dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USB_PCD_Init+0x3c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_USB_PCD_Init+0x3c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USB_PCD_Init+0x3c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_USB_PCD_Init+0x3c>)
 80007f2:	f001 fbd7 	bl	8001fa4 <HAL_PCD_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80007fc:	f000 f898 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000e0 	.word	0x200000e0
 8000808:	40005c00 	.word	0x40005c00

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a2e      	ldr	r2, [pc, #184]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000826:	f043 0320 	orr.w	r3, r3, #32
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <MX_GPIO_Init+0xd4>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0320 	and.w	r3, r3, #32
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_GPIO_Init+0xd4>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a28      	ldr	r2, [pc, #160]	; (80008e0 <MX_GPIO_Init+0xd4>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000856:	f043 0308 	orr.w	r3, r3, #8
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_GPIO_Init+0xd4>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0308 	and.w	r3, r3, #8
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f640 4103 	movw	r1, #3075	; 0xc03
 800086e:	481d      	ldr	r0, [pc, #116]	; (80008e4 <MX_GPIO_Init+0xd8>)
 8000870:	f000 fecb 	bl	800160a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8000874:	f640 4303 	movw	r3, #3075	; 0xc03
 8000878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2302      	movs	r3, #2
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	4619      	mov	r1, r3
 800088c:	4815      	ldr	r0, [pc, #84]	; (80008e4 <MX_GPIO_Init+0xd8>)
 800088e:	f000 fd21 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000892:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4619      	mov	r1, r3
 80008a6:	480f      	ldr	r0, [pc, #60]	; (80008e4 <MX_GPIO_Init+0xd8>)
 80008a8:	f000 fd14 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MX_GPIO_Init+0xdc>)
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4619      	mov	r1, r3
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <MX_GPIO_Init+0xe0>)
 80008c2:	f000 fd07 	bl	80012d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2017      	movs	r0, #23
 80008cc:	f000 fccb 	bl	8001266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008d0:	2017      	movs	r0, #23
 80008d2:	f000 fce4 	bl	800129e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	3720      	adds	r7, #32
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40010c00 	.word	0x40010c00
 80008e8:	10310000 	.word	0x10310000
 80008ec:	40010800 	.word	0x40010800

080008f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//definiciones de los callback y funciones
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // INT Source is pin A9
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000900:	d10e      	bne.n	8000920 <HAL_GPIO_EXTI_Callback+0x30>
    {
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET){
 8000902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000906:	4808      	ldr	r0, [pc, #32]	; (8000928 <HAL_GPIO_EXTI_Callback+0x38>)
 8000908:	f000 fe68 	bl	80015dc <HAL_GPIO_ReadPin>
 800090c:	4603      	mov	r3, r0
 800090e:	2b01      	cmp	r3, #1
 8000910:	d103      	bne.n	800091a <HAL_GPIO_EXTI_Callback+0x2a>
    	flag_on_off=1;// conecta la carga
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
    }
    else flag_on_off=0;// desconecta la carga
    }
}
 8000918:	e002      	b.n	8000920 <HAL_GPIO_EXTI_Callback+0x30>
    else flag_on_off=0;// desconecta la carga
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <HAL_GPIO_EXTI_Callback+0x3c>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40010800 	.word	0x40010800
 800092c:	200003d0 	.word	0x200003d0

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_MspInit+0x5c>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	4a14      	ldr	r2, [pc, #80]	; (8000998 <HAL_MspInit+0x5c>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6193      	str	r3, [r2, #24]
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_MspInit+0x5c>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_MspInit+0x5c>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_MspInit+0x5c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_MspInit+0x5c>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_MspInit+0x60>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_MspInit+0x60>)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000
 800099c:	40010000 	.word	0x40010000

080009a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <HAL_ADC_MspInit+0x6c>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d121      	bne.n	8000a04 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <HAL_ADC_MspInit+0x70>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <HAL_ADC_MspInit+0x70>)
 80009c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_ADC_MspInit+0x70>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_ADC_MspInit+0x70>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <HAL_ADC_MspInit+0x70>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_ADC_MspInit+0x70>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80009f0:	2306      	movs	r3, #6
 80009f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f4:	2303      	movs	r3, #3
 80009f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	4619      	mov	r1, r3
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <HAL_ADC_MspInit+0x74>)
 8000a00:	f000 fc68 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40012400 	.word	0x40012400
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40010800 	.word	0x40010800

08000a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <HAL_I2C_MspInit+0x70>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d123      	bne.n	8000a80 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <HAL_I2C_MspInit+0x74>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <HAL_I2C_MspInit+0x74>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_I2C_MspInit+0x74>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a50:	23c0      	movs	r3, #192	; 0xc0
 8000a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a54:	2312      	movs	r3, #18
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	480b      	ldr	r0, [pc, #44]	; (8000a90 <HAL_I2C_MspInit+0x78>)
 8000a64:	f000 fc36 	bl	80012d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_I2C_MspInit+0x74>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_I2C_MspInit+0x74>)
 8000a6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a72:	61d3      	str	r3, [r2, #28]
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_I2C_MspInit+0x74>)
 8000a76:	69db      	ldr	r3, [r3, #28]
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010c00 	.word	0x40010c00

08000a94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <HAL_PCD_MspInit+0x34>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d10b      	bne.n	8000abe <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_PCD_MspInit+0x38>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_PCD_MspInit+0x38>)
 8000aac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ab0:	61d3      	str	r3, [r2, #28]
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_PCD_MspInit+0x38>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	40005c00 	.word	0x40005c00
 8000acc:	40021000 	.word	0x40021000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x4>

08000aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b16:	f000 f87d 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000b22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b26:	f000 fd89 	bl	800163c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
	...

08000b3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b3c:	f7ff fff7 	bl	8000b2e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b42:	490c      	ldr	r1, [pc, #48]	; (8000b74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b44:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b58:	4c09      	ldr	r4, [pc, #36]	; (8000b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b66:	f002 f847 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6a:	f7ff fcc9 	bl	8000500 <main>
  bx lr
 8000b6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000b78:	08002cfc 	.word	0x08002cfc
  ldr r2, =_sbss
 8000b7c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000b80:	200003d8 	.word	0x200003d8

08000b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_2_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x28>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x28>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 fb59 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f000 f808 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff feca 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40022000 	.word	0x40022000

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x54>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x58>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 fb71 	bl	80012ba <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00e      	b.n	8000c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d80a      	bhi.n	8000bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f000 fb39 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <HAL_InitTick+0x5c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000034 	.word	0x20000034
 8000c0c:	2000003c 	.word	0x2000003c
 8000c10:	20000038 	.word	0x20000038

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x20>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <HAL_IncTick+0x20>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	2000003c 	.word	0x2000003c
 8000c34:	200003d4 	.word	0x200003d4

08000c38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_GetTick+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	200003d4 	.word	0x200003d4

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff fff0 	bl	8000c38 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffe0 	bl	8000c38 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000003c 	.word	0x2000003c

08000c94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e0be      	b.n	8000e34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d109      	bne.n	8000cd8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fe64 	bl	80009a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f000 f9ab 	bl	8001034 <ADC_ConversionStop_Disable>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 8099 	bne.w	8000e22 <HAL_ADC_Init+0x18e>
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8095 	bne.w	8000e22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d00:	f023 0302 	bic.w	r3, r3, #2
 8000d04:	f043 0202 	orr.w	r2, r3, #2
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7b1b      	ldrb	r3, [r3, #12]
 8000d1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d2c:	d003      	beq.n	8000d36 <HAL_ADC_Init+0xa2>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d102      	bne.n	8000d3c <HAL_ADC_Init+0xa8>
 8000d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3a:	e000      	b.n	8000d3e <HAL_ADC_Init+0xaa>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7d1b      	ldrb	r3, [r3, #20]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d119      	bne.n	8000d80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	7b1b      	ldrb	r3, [r3, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d109      	bne.n	8000d68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	035a      	lsls	r2, r3, #13
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	e00b      	b.n	8000d80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	f043 0220 	orr.w	r2, r3, #32
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d78:	f043 0201 	orr.w	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <HAL_ADC_Init+0x1a8>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	6812      	ldr	r2, [r2, #0]
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	430b      	orrs	r3, r1
 8000da6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000db0:	d003      	beq.n	8000dba <HAL_ADC_Init+0x126>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d104      	bne.n	8000dc4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	051b      	lsls	r3, r3, #20
 8000dc2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_ADC_Init+0x1ac>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d10b      	bne.n	8000e00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df2:	f023 0303 	bic.w	r3, r3, #3
 8000df6:	f043 0201 	orr.w	r2, r3, #1
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dfe:	e018      	b.n	8000e32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	f023 0312 	bic.w	r3, r3, #18
 8000e08:	f043 0210 	orr.w	r2, r3, #16
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	f043 0201 	orr.w	r2, r3, #1
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e20:	e007      	b.n	8000e32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e26:	f043 0210 	orr.w	r2, r3, #16
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	ffe1f7fd 	.word	0xffe1f7fd
 8000e40:	ff1f0efe 	.word	0xff1f0efe

08000e44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d101      	bne.n	8000e64 <HAL_ADC_ConfigChannel+0x20>
 8000e60:	2302      	movs	r3, #2
 8000e62:	e0dc      	b.n	800101e <HAL_ADC_ConfigChannel+0x1da>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b06      	cmp	r3, #6
 8000e72:	d81c      	bhi.n	8000eae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	3b05      	subs	r3, #5
 8000e86:	221f      	movs	r2, #31
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4019      	ands	r1, r3
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	3b05      	subs	r3, #5
 8000ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	635a      	str	r2, [r3, #52]	; 0x34
 8000eac:	e03c      	b.n	8000f28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b0c      	cmp	r3, #12
 8000eb4:	d81c      	bhi.n	8000ef0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3b23      	subs	r3, #35	; 0x23
 8000ec8:	221f      	movs	r2, #31
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	4019      	ands	r1, r3
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	3b23      	subs	r3, #35	; 0x23
 8000ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
 8000eee:	e01b      	b.n	8000f28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	3b41      	subs	r3, #65	; 0x41
 8000f02:	221f      	movs	r2, #31
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	4019      	ands	r1, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	3b41      	subs	r3, #65	; 0x41
 8000f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b09      	cmp	r3, #9
 8000f2e:	d91c      	bls.n	8000f6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68d9      	ldr	r1, [r3, #12]
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	3b1e      	subs	r3, #30
 8000f42:	2207      	movs	r2, #7
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	4019      	ands	r1, r3
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	6898      	ldr	r0, [r3, #8]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	3b1e      	subs	r3, #30
 8000f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	e019      	b.n	8000f9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6919      	ldr	r1, [r3, #16]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	2207      	movs	r2, #7
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	4019      	ands	r1, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	6898      	ldr	r0, [r3, #8]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	fa00 f203 	lsl.w	r2, r0, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b10      	cmp	r3, #16
 8000fa4:	d003      	beq.n	8000fae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000faa:	2b11      	cmp	r3, #17
 8000fac:	d132      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <HAL_ADC_ConfigChannel+0x1e4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d125      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d126      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000fd4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b10      	cmp	r3, #16
 8000fdc:	d11a      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <HAL_ADC_ConfigChannel+0x1e8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a13      	ldr	r2, [pc, #76]	; (8001030 <HAL_ADC_ConfigChannel+0x1ec>)
 8000fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe8:	0c9a      	lsrs	r2, r3, #18
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ff4:	e002      	b.n	8000ffc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f9      	bne.n	8000ff6 <HAL_ADC_ConfigChannel+0x1b2>
 8001002:	e007      	b.n	8001014 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	f043 0220 	orr.w	r2, r3, #32
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	40012400 	.word	0x40012400
 800102c:	20000034 	.word	0x20000034
 8001030:	431bde83 	.word	0x431bde83

08001034 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b01      	cmp	r3, #1
 800104c:	d12e      	bne.n	80010ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0201 	bic.w	r2, r2, #1
 800105c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800105e:	f7ff fdeb 	bl	8000c38 <HAL_GetTick>
 8001062:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001064:	e01b      	b.n	800109e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001066:	f7ff fde7 	bl	8000c38 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d914      	bls.n	800109e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b01      	cmp	r3, #1
 8001080:	d10d      	bne.n	800109e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	f043 0210 	orr.w	r2, r3, #16
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	f043 0201 	orr.w	r2, r3, #1
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e007      	b.n	80010ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d0dc      	beq.n	8001066 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4906      	ldr	r1, [pc, #24]	; (8001150 <__NVIC_EnableIRQ+0x34>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f7ff ff90 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff2d 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff42 	bl	8001100 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff90 	bl	80011a8 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5f 	bl	8001154 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff35 	bl	800111c <__NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffa2 	bl	800120c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b08b      	sub	sp, #44	; 0x2c
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e6:	e169      	b.n	80015bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e8:	2201      	movs	r2, #1
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 8158 	bne.w	80015b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a9a      	ldr	r2, [pc, #616]	; (8001574 <HAL_GPIO_Init+0x2a0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d05e      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001310:	4a98      	ldr	r2, [pc, #608]	; (8001574 <HAL_GPIO_Init+0x2a0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d875      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001316:	4a98      	ldr	r2, [pc, #608]	; (8001578 <HAL_GPIO_Init+0x2a4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d058      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 800131c:	4a96      	ldr	r2, [pc, #600]	; (8001578 <HAL_GPIO_Init+0x2a4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d86f      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001322:	4a96      	ldr	r2, [pc, #600]	; (800157c <HAL_GPIO_Init+0x2a8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d052      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001328:	4a94      	ldr	r2, [pc, #592]	; (800157c <HAL_GPIO_Init+0x2a8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d869      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800132e:	4a94      	ldr	r2, [pc, #592]	; (8001580 <HAL_GPIO_Init+0x2ac>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d04c      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001334:	4a92      	ldr	r2, [pc, #584]	; (8001580 <HAL_GPIO_Init+0x2ac>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d863      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800133a:	4a92      	ldr	r2, [pc, #584]	; (8001584 <HAL_GPIO_Init+0x2b0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d046      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001340:	4a90      	ldr	r2, [pc, #576]	; (8001584 <HAL_GPIO_Init+0x2b0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d85d      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001346:	2b12      	cmp	r3, #18
 8001348:	d82a      	bhi.n	80013a0 <HAL_GPIO_Init+0xcc>
 800134a:	2b12      	cmp	r3, #18
 800134c:	d859      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <HAL_GPIO_Init+0x80>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	080013cf 	.word	0x080013cf
 8001358:	080013a9 	.word	0x080013a9
 800135c:	080013bb 	.word	0x080013bb
 8001360:	080013fd 	.word	0x080013fd
 8001364:	08001403 	.word	0x08001403
 8001368:	08001403 	.word	0x08001403
 800136c:	08001403 	.word	0x08001403
 8001370:	08001403 	.word	0x08001403
 8001374:	08001403 	.word	0x08001403
 8001378:	08001403 	.word	0x08001403
 800137c:	08001403 	.word	0x08001403
 8001380:	08001403 	.word	0x08001403
 8001384:	08001403 	.word	0x08001403
 8001388:	08001403 	.word	0x08001403
 800138c:	08001403 	.word	0x08001403
 8001390:	08001403 	.word	0x08001403
 8001394:	08001403 	.word	0x08001403
 8001398:	080013b1 	.word	0x080013b1
 800139c:	080013c5 	.word	0x080013c5
 80013a0:	4a79      	ldr	r2, [pc, #484]	; (8001588 <HAL_GPIO_Init+0x2b4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d013      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013a6:	e02c      	b.n	8001402 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	623b      	str	r3, [r7, #32]
          break;
 80013ae:	e029      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	3304      	adds	r3, #4
 80013b6:	623b      	str	r3, [r7, #32]
          break;
 80013b8:	e024      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	3308      	adds	r3, #8
 80013c0:	623b      	str	r3, [r7, #32]
          break;
 80013c2:	e01f      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	330c      	adds	r3, #12
 80013ca:	623b      	str	r3, [r7, #32]
          break;
 80013cc:	e01a      	b.n	8001404 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013d6:	2304      	movs	r3, #4
 80013d8:	623b      	str	r3, [r7, #32]
          break;
 80013da:	e013      	b.n	8001404 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	611a      	str	r2, [r3, #16]
          break;
 80013ee:	e009      	b.n	8001404 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f0:	2308      	movs	r3, #8
 80013f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	615a      	str	r2, [r3, #20]
          break;
 80013fa:	e003      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
          break;
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x130>
          break;
 8001402:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2bff      	cmp	r3, #255	; 0xff
 8001408:	d801      	bhi.n	800140e <HAL_GPIO_Init+0x13a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	e001      	b.n	8001412 <HAL_GPIO_Init+0x13e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3304      	adds	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2bff      	cmp	r3, #255	; 0xff
 8001418:	d802      	bhi.n	8001420 <HAL_GPIO_Init+0x14c>
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	e002      	b.n	8001426 <HAL_GPIO_Init+0x152>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	3b08      	subs	r3, #8
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	210f      	movs	r1, #15
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	401a      	ands	r2, r3
 8001438:	6a39      	ldr	r1, [r7, #32]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80b1 	beq.w	80015b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001454:	4b4d      	ldr	r3, [pc, #308]	; (800158c <HAL_GPIO_Init+0x2b8>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a4c      	ldr	r2, [pc, #304]	; (800158c <HAL_GPIO_Init+0x2b8>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b4a      	ldr	r3, [pc, #296]	; (800158c <HAL_GPIO_Init+0x2b8>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800146c:	4a48      	ldr	r2, [pc, #288]	; (8001590 <HAL_GPIO_Init+0x2bc>)
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	3302      	adds	r3, #2
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a40      	ldr	r2, [pc, #256]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d013      	beq.n	80014c0 <HAL_GPIO_Init+0x1ec>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a3f      	ldr	r2, [pc, #252]	; (8001598 <HAL_GPIO_Init+0x2c4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d00d      	beq.n	80014bc <HAL_GPIO_Init+0x1e8>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a3e      	ldr	r2, [pc, #248]	; (800159c <HAL_GPIO_Init+0x2c8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d007      	beq.n	80014b8 <HAL_GPIO_Init+0x1e4>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a3d      	ldr	r2, [pc, #244]	; (80015a0 <HAL_GPIO_Init+0x2cc>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d101      	bne.n	80014b4 <HAL_GPIO_Init+0x1e0>
 80014b0:	2303      	movs	r3, #3
 80014b2:	e006      	b.n	80014c2 <HAL_GPIO_Init+0x1ee>
 80014b4:	2304      	movs	r3, #4
 80014b6:	e004      	b.n	80014c2 <HAL_GPIO_Init+0x1ee>
 80014b8:	2302      	movs	r3, #2
 80014ba:	e002      	b.n	80014c2 <HAL_GPIO_Init+0x1ee>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <HAL_GPIO_Init+0x1ee>
 80014c0:	2300      	movs	r3, #0
 80014c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c4:	f002 0203 	and.w	r2, r2, #3
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	4093      	lsls	r3, r2
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014d2:	492f      	ldr	r1, [pc, #188]	; (8001590 <HAL_GPIO_Init+0x2bc>)
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	492c      	ldr	r1, [pc, #176]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	608b      	str	r3, [r1, #8]
 80014f8:	e006      	b.n	8001508 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	43db      	mvns	r3, r3
 8001502:	4928      	ldr	r1, [pc, #160]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001504:	4013      	ands	r3, r2
 8001506:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	4922      	ldr	r1, [pc, #136]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	60cb      	str	r3, [r1, #12]
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	43db      	mvns	r3, r3
 800152a:	491e      	ldr	r1, [pc, #120]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 800152c:	4013      	ands	r3, r2
 800152e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4918      	ldr	r1, [pc, #96]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	43db      	mvns	r3, r3
 8001552:	4914      	ldr	r1, [pc, #80]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001554:	4013      	ands	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d021      	beq.n	80015a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	490e      	ldr	r1, [pc, #56]	; (80015a4 <HAL_GPIO_Init+0x2d0>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
 8001570:	e021      	b.n	80015b6 <HAL_GPIO_Init+0x2e2>
 8001572:	bf00      	nop
 8001574:	10320000 	.word	0x10320000
 8001578:	10310000 	.word	0x10310000
 800157c:	10220000 	.word	0x10220000
 8001580:	10210000 	.word	0x10210000
 8001584:	10120000 	.word	0x10120000
 8001588:	10110000 	.word	0x10110000
 800158c:	40021000 	.word	0x40021000
 8001590:	40010000 	.word	0x40010000
 8001594:	40010800 	.word	0x40010800
 8001598:	40010c00 	.word	0x40010c00
 800159c:	40011000 	.word	0x40011000
 80015a0:	40011400 	.word	0x40011400
 80015a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_GPIO_Init+0x304>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	4909      	ldr	r1, [pc, #36]	; (80015d8 <HAL_GPIO_Init+0x304>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	3301      	adds	r3, #1
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	fa22 f303 	lsr.w	r3, r2, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f47f ae8e 	bne.w	80012e8 <HAL_GPIO_Init+0x14>
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	372c      	adds	r7, #44	; 0x2c
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40010400 	.word	0x40010400

080015dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e001      	b.n	80015fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	807b      	strh	r3, [r7, #2]
 8001616:	4613      	mov	r3, r2
 8001618:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800161a:	787b      	ldrb	r3, [r7, #1]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001620:	887a      	ldrh	r2, [r7, #2]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001626:	e003      	b.n	8001630 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001628:	887b      	ldrh	r3, [r7, #2]
 800162a:	041a      	lsls	r2, r3, #16
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	611a      	str	r2, [r3, #16]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
	...

0800163c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f948 	bl	80008f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40010400 	.word	0x40010400

0800166c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e12b      	b.n	80018d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff f9c0 	bl	8000a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2224      	movs	r2, #36	; 0x24
 800169c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016d0:	f001 f932 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 80016d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4a81      	ldr	r2, [pc, #516]	; (80018e0 <HAL_I2C_Init+0x274>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d807      	bhi.n	80016f0 <HAL_I2C_Init+0x84>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4a80      	ldr	r2, [pc, #512]	; (80018e4 <HAL_I2C_Init+0x278>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	bf94      	ite	ls
 80016e8:	2301      	movls	r3, #1
 80016ea:	2300      	movhi	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	e006      	b.n	80016fe <HAL_I2C_Init+0x92>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4a7d      	ldr	r2, [pc, #500]	; (80018e8 <HAL_I2C_Init+0x27c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	bf94      	ite	ls
 80016f8:	2301      	movls	r3, #1
 80016fa:	2300      	movhi	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0e7      	b.n	80018d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4a78      	ldr	r2, [pc, #480]	; (80018ec <HAL_I2C_Init+0x280>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	0c9b      	lsrs	r3, r3, #18
 8001710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	430a      	orrs	r2, r1
 8001724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4a6a      	ldr	r2, [pc, #424]	; (80018e0 <HAL_I2C_Init+0x274>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d802      	bhi.n	8001740 <HAL_I2C_Init+0xd4>
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3301      	adds	r3, #1
 800173e:	e009      	b.n	8001754 <HAL_I2C_Init+0xe8>
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4a69      	ldr	r2, [pc, #420]	; (80018f0 <HAL_I2C_Init+0x284>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	099b      	lsrs	r3, r3, #6
 8001752:	3301      	adds	r3, #1
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	430b      	orrs	r3, r1
 800175a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	495c      	ldr	r1, [pc, #368]	; (80018e0 <HAL_I2C_Init+0x274>)
 8001770:	428b      	cmp	r3, r1
 8001772:	d819      	bhi.n	80017a8 <HAL_I2C_Init+0x13c>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1e59      	subs	r1, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001782:	1c59      	adds	r1, r3, #1
 8001784:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001788:	400b      	ands	r3, r1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00a      	beq.n	80017a4 <HAL_I2C_Init+0x138>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1e59      	subs	r1, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fbb1 f3f3 	udiv	r3, r1, r3
 800179c:	3301      	adds	r3, #1
 800179e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a2:	e051      	b.n	8001848 <HAL_I2C_Init+0x1dc>
 80017a4:	2304      	movs	r3, #4
 80017a6:	e04f      	b.n	8001848 <HAL_I2C_Init+0x1dc>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d111      	bne.n	80017d4 <HAL_I2C_Init+0x168>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1e58      	subs	r0, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bf0c      	ite	eq
 80017cc:	2301      	moveq	r3, #1
 80017ce:	2300      	movne	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	e012      	b.n	80017fa <HAL_I2C_Init+0x18e>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1e58      	subs	r0, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	0099      	lsls	r1, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Init+0x196>
 80017fe:	2301      	movs	r3, #1
 8001800:	e022      	b.n	8001848 <HAL_I2C_Init+0x1dc>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10e      	bne.n	8001828 <HAL_I2C_Init+0x1bc>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1e58      	subs	r0, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6859      	ldr	r1, [r3, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	440b      	add	r3, r1
 8001818:	fbb0 f3f3 	udiv	r3, r0, r3
 800181c:	3301      	adds	r3, #1
 800181e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001826:	e00f      	b.n	8001848 <HAL_I2C_Init+0x1dc>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1e58      	subs	r0, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	0099      	lsls	r1, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	fbb0 f3f3 	udiv	r3, r0, r3
 800183e:	3301      	adds	r3, #1
 8001840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	6809      	ldr	r1, [r1, #0]
 800184c:	4313      	orrs	r3, r2
 800184e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69da      	ldr	r2, [r3, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6911      	ldr	r1, [r2, #16]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68d2      	ldr	r2, [r2, #12]
 8001882:	4311      	orrs	r1, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	430b      	orrs	r3, r1
 800188a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0201 	orr.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2220      	movs	r2, #32
 80018c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	000186a0 	.word	0x000186a0
 80018e4:	001e847f 	.word	0x001e847f
 80018e8:	003d08ff 	.word	0x003d08ff
 80018ec:	431bde83 	.word	0x431bde83
 80018f0:	10624dd3 	.word	0x10624dd3

080018f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	461a      	mov	r2, r3
 8001900:	460b      	mov	r3, r1
 8001902:	817b      	strh	r3, [r7, #10]
 8001904:	4613      	mov	r3, r2
 8001906:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff f996 	bl	8000c38 <HAL_GetTick>
 800190c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b20      	cmp	r3, #32
 8001918:	f040 80e0 	bne.w	8001adc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2319      	movs	r3, #25
 8001922:	2201      	movs	r2, #1
 8001924:	4970      	ldr	r1, [pc, #448]	; (8001ae8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f964 	bl	8001bf4 <I2C_WaitOnFlagUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001932:	2302      	movs	r3, #2
 8001934:	e0d3      	b.n	8001ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_I2C_Master_Transmit+0x50>
 8001940:	2302      	movs	r3, #2
 8001942:	e0cc      	b.n	8001ade <HAL_I2C_Master_Transmit+0x1ea>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b01      	cmp	r3, #1
 8001958:	d007      	beq.n	800196a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 0201 	orr.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001978:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2221      	movs	r2, #33	; 0x21
 800197e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2210      	movs	r2, #16
 8001986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	893a      	ldrh	r2, [r7, #8]
 800199a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4a50      	ldr	r2, [pc, #320]	; (8001aec <HAL_I2C_Master_Transmit+0x1f8>)
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019ac:	8979      	ldrh	r1, [r7, #10]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	6a3a      	ldr	r2, [r7, #32]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f89c 	bl	8001af0 <I2C_MasterRequestWrite>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e08d      	b.n	8001ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019d8:	e066      	b.n	8001aa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	6a39      	ldr	r1, [r7, #32]
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fa22 	bl	8001e28 <I2C_WaitOnTXEFlagUntilTimeout>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00d      	beq.n	8001a06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d107      	bne.n	8001a02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e06b      	b.n	8001ade <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d11b      	bne.n	8001a7c <HAL_I2C_Master_Transmit+0x188>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d017      	beq.n	8001a7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	6a39      	ldr	r1, [r7, #32]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 fa19 	bl	8001eb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d107      	bne.n	8001aa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e01a      	b.n	8001ade <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d194      	bne.n	80019da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e000      	b.n	8001ade <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001adc:	2302      	movs	r3, #2
  }
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	00100002 	.word	0x00100002
 8001aec:	ffff0000 	.word	0xffff0000

08001af0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af02      	add	r7, sp, #8
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	460b      	mov	r3, r1
 8001afe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d006      	beq.n	8001b1a <I2C_MasterRequestWrite+0x2a>
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d003      	beq.n	8001b1a <I2C_MasterRequestWrite+0x2a>
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b18:	d108      	bne.n	8001b2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e00b      	b.n	8001b44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	2b12      	cmp	r3, #18
 8001b32:	d107      	bne.n	8001b44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f84f 	bl	8001bf4 <I2C_WaitOnFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00d      	beq.n	8001b78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b6a:	d103      	bne.n	8001b74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e035      	b.n	8001be4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b80:	d108      	bne.n	8001b94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b82:	897b      	ldrh	r3, [r7, #10]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	e01b      	b.n	8001bcc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b94:	897b      	ldrh	r3, [r7, #10]
 8001b96:	11db      	asrs	r3, r3, #7
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	f003 0306 	and.w	r3, r3, #6
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f063 030f 	orn	r3, r3, #15
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	490e      	ldr	r1, [pc, #56]	; (8001bec <I2C_MasterRequestWrite+0xfc>)
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f898 	bl	8001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e010      	b.n	8001be4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bc2:	897b      	ldrh	r3, [r7, #10]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4907      	ldr	r1, [pc, #28]	; (8001bf0 <I2C_MasterRequestWrite+0x100>)
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f888 	bl	8001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	00010008 	.word	0x00010008
 8001bf0:	00010002 	.word	0x00010002

08001bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	4613      	mov	r3, r2
 8001c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c04:	e048      	b.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d044      	beq.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0e:	f7ff f813 	bl	8000c38 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d302      	bcc.n	8001c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d139      	bne.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	0c1b      	lsrs	r3, r3, #16
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d10d      	bne.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	43da      	mvns	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	e00c      	b.n	8001c64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	43da      	mvns	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4013      	ands	r3, r2
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d116      	bne.n	8001c98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e023      	b.n	8001ce0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	0c1b      	lsrs	r3, r3, #16
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10d      	bne.n	8001cbe <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4013      	ands	r3, r2
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	e00c      	b.n	8001cd8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d093      	beq.n	8001c06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cf6:	e071      	b.n	8001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d06:	d123      	bne.n	8001d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f043 0204 	orr.w	r2, r3, #4
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e067      	b.n	8001e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d56:	d041      	beq.n	8001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d58:	f7fe ff6e 	bl	8000c38 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d302      	bcc.n	8001d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d136      	bne.n	8001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	0c1b      	lsrs	r3, r3, #16
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d10c      	bne.n	8001d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	4013      	ands	r3, r2
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	bf14      	ite	ne
 8001d8a:	2301      	movne	r3, #1
 8001d8c:	2300      	moveq	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	e00b      	b.n	8001daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf14      	ite	ne
 8001da4:	2301      	movne	r3, #1
 8001da6:	2300      	moveq	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d016      	beq.n	8001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f043 0220 	orr.w	r2, r3, #32
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e021      	b.n	8001e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	0c1b      	lsrs	r3, r3, #16
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d10c      	bne.n	8001e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	43da      	mvns	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	4013      	ands	r3, r2
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	e00b      	b.n	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bf14      	ite	ne
 8001e12:	2301      	movne	r3, #1
 8001e14:	2300      	moveq	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f47f af6d 	bne.w	8001cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e34:	e034      	b.n	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f886 	bl	8001f48 <I2C_IsAcknowledgeFailed>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e034      	b.n	8001eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d028      	beq.n	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e4e:	f7fe fef3 	bl	8000c38 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d302      	bcc.n	8001e64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d11d      	bne.n	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6e:	2b80      	cmp	r3, #128	; 0x80
 8001e70:	d016      	beq.n	8001ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f043 0220 	orr.w	r2, r3, #32
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e007      	b.n	8001eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	2b80      	cmp	r3, #128	; 0x80
 8001eac:	d1c3      	bne.n	8001e36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ec4:	e034      	b.n	8001f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f83e 	bl	8001f48 <I2C_IsAcknowledgeFailed>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e034      	b.n	8001f40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d028      	beq.n	8001f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ede:	f7fe feab 	bl	8000c38 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d302      	bcc.n	8001ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d11d      	bne.n	8001f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d016      	beq.n	8001f30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f043 0220 	orr.w	r2, r3, #32
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e007      	b.n	8001f40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d1c3      	bne.n	8001ec6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5e:	d11b      	bne.n	8001f98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f043 0204 	orr.w	r2, r3, #4
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa6:	b08b      	sub	sp, #44	; 0x2c
 8001fa8:	af06      	add	r7, sp, #24
 8001faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0f1      	b.n	800219a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe fd62 	bl	8000a94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fda3 	bl	8002b28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	687e      	ldr	r6, [r7, #4]
 8001fea:	466d      	mov	r5, sp
 8001fec:	f106 0410 	add.w	r4, r6, #16
 8001ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	602b      	str	r3, [r5, #0]
 8001ff8:	1d33      	adds	r3, r6, #4
 8001ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ffc:	6838      	ldr	r0, [r7, #0]
 8001ffe:	f000 fd83 	bl	8002b08 <USB_CoreInit>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0c2      	b.n	800219a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fd9e 	bl	8002b5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e040      	b.n	80020a8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	440b      	add	r3, r1
 8002036:	3301      	adds	r3, #1
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	440b      	add	r3, r1
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	3303      	adds	r3, #3
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	440b      	add	r3, r1
 8002074:	3338      	adds	r3, #56	; 0x38
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	333c      	adds	r3, #60	; 0x3c
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	3340      	adds	r3, #64	; 0x40
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	3301      	adds	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d3b9      	bcc.n	8002026 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	e044      	b.n	8002142 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002126:	7bfa      	ldrb	r2, [r7, #15]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	3301      	adds	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d3b5      	bcc.n	80020b8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	687e      	ldr	r6, [r7, #4]
 8002154:	466d      	mov	r5, sp
 8002156:	f106 0410 	add.w	r4, r6, #16
 800215a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	602b      	str	r3, [r5, #0]
 8002162:	1d33      	adds	r3, r6, #4
 8002164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002166:	6838      	ldr	r0, [r7, #0]
 8002168:	f000 fd04 	bl	8002b74 <USB_DevInit>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2202      	movs	r2, #2
 8002176:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e00d      	b.n	800219a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fd0e 	bl	8002bb4 <USB_DevDisconnect>

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080021a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e272      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8087 	beq.w	80022d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c4:	4b92      	ldr	r3, [pc, #584]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d00c      	beq.n	80021ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021d0:	4b8f      	ldr	r3, [pc, #572]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d112      	bne.n	8002202 <HAL_RCC_OscConfig+0x5e>
 80021dc:	4b8c      	ldr	r3, [pc, #560]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d10b      	bne.n	8002202 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ea:	4b89      	ldr	r3, [pc, #548]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d06c      	beq.n	80022d0 <HAL_RCC_OscConfig+0x12c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d168      	bne.n	80022d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e24c      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x76>
 800220c:	4b80      	ldr	r3, [pc, #512]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a7f      	ldr	r2, [pc, #508]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e02e      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x98>
 8002222:	4b7b      	ldr	r3, [pc, #492]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7a      	ldr	r2, [pc, #488]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b78      	ldr	r3, [pc, #480]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a77      	ldr	r2, [pc, #476]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e01d      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0xbc>
 8002246:	4b72      	ldr	r3, [pc, #456]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a71      	ldr	r2, [pc, #452]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a6e      	ldr	r2, [pc, #440]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0xd4>
 8002260:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a6a      	ldr	r2, [pc, #424]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b68      	ldr	r3, [pc, #416]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a67      	ldr	r2, [pc, #412]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7fe fcda 	bl	8000c38 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7fe fcd6 	bl	8000c38 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e200      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0xe4>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe fcc6 	bl	8000c38 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe fcc2 	bl	8000c38 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1ec      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x10c>
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d063      	beq.n	80023a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022de:	4b4c      	ldr	r3, [pc, #304]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ea:	4b49      	ldr	r3, [pc, #292]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d11c      	bne.n	8002330 <HAL_RCC_OscConfig+0x18c>
 80022f6:	4b46      	ldr	r3, [pc, #280]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d116      	bne.n	8002330 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002302:	4b43      	ldr	r3, [pc, #268]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <HAL_RCC_OscConfig+0x176>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d001      	beq.n	800231a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e1c0      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4939      	ldr	r1, [pc, #228]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	e03a      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d020      	beq.n	800237a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002338:	4b36      	ldr	r3, [pc, #216]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7fe fc7b 	bl	8000c38 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002346:	f7fe fc77 	bl	8000c38 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e1a1      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f0      	beq.n	8002346 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002364:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4927      	ldr	r1, [pc, #156]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]
 8002378:	e015      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <HAL_RCC_OscConfig+0x270>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7fe fc5a 	bl	8000c38 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002388:	f7fe fc56 	bl	8000c38 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e180      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03a      	beq.n	8002428 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d019      	beq.n	80023ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7fe fc3a 	bl	8000c38 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c8:	f7fe fc36 	bl	8000c38 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e160      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023e6:	2001      	movs	r0, #1
 80023e8:	f000 faba 	bl	8002960 <RCC_Delay>
 80023ec:	e01c      	b.n	8002428 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_RCC_OscConfig+0x274>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7fe fc20 	bl	8000c38 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fa:	e00f      	b.n	800241c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7fe fc1c 	bl	8000c38 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d908      	bls.n	800241c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e146      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	42420000 	.word	0x42420000
 8002418:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	4b92      	ldr	r3, [pc, #584]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e9      	bne.n	80023fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80a6 	beq.w	8002582 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243a:	4b8b      	ldr	r3, [pc, #556]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10d      	bne.n	8002462 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a87      	ldr	r2, [pc, #540]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002450:	61d3      	str	r3, [r2, #28]
 8002452:	4b85      	ldr	r3, [pc, #532]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245e:	2301      	movs	r3, #1
 8002460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b82      	ldr	r3, [pc, #520]	; (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d118      	bne.n	80024a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246e:	4b7f      	ldr	r3, [pc, #508]	; (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7e      	ldr	r2, [pc, #504]	; (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7fe fbdd 	bl	8000c38 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002482:	f7fe fbd9 	bl	8000c38 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b64      	cmp	r3, #100	; 0x64
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e103      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	4b75      	ldr	r3, [pc, #468]	; (800266c <HAL_RCC_OscConfig+0x4c8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x312>
 80024a8:	4b6f      	ldr	r3, [pc, #444]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4a6e      	ldr	r2, [pc, #440]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	e02d      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x334>
 80024be:	4b6a      	ldr	r3, [pc, #424]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a69      	ldr	r2, [pc, #420]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	4b67      	ldr	r3, [pc, #412]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4a66      	ldr	r2, [pc, #408]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	f023 0304 	bic.w	r3, r3, #4
 80024d4:	6213      	str	r3, [r2, #32]
 80024d6:	e01c      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d10c      	bne.n	80024fa <HAL_RCC_OscConfig+0x356>
 80024e0:	4b61      	ldr	r3, [pc, #388]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4a60      	ldr	r2, [pc, #384]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6213      	str	r3, [r2, #32]
 80024ec:	4b5e      	ldr	r3, [pc, #376]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a5d      	ldr	r2, [pc, #372]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6213      	str	r3, [r2, #32]
 80024f8:	e00b      	b.n	8002512 <HAL_RCC_OscConfig+0x36e>
 80024fa:	4b5b      	ldr	r3, [pc, #364]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a5a      	ldr	r2, [pc, #360]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6213      	str	r3, [r2, #32]
 8002506:	4b58      	ldr	r3, [pc, #352]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a57      	ldr	r2, [pc, #348]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d015      	beq.n	8002546 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fe fb8d 	bl	8000c38 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7fe fb89 	bl	8000c38 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0b1      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0ee      	beq.n	8002522 <HAL_RCC_OscConfig+0x37e>
 8002544:	e014      	b.n	8002570 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002546:	f7fe fb77 	bl	8000c38 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7fe fb73 	bl	8000c38 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e09b      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	4b40      	ldr	r3, [pc, #256]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ee      	bne.n	800254e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4b3c      	ldr	r3, [pc, #240]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002580:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8087 	beq.w	800269a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258c:	4b36      	ldr	r3, [pc, #216]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d061      	beq.n	800265c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d146      	bne.n	800262e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b33      	ldr	r3, [pc, #204]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7fe fb47 	bl	8000c38 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7fe fb43 	bl	8000c38 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e06d      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d4:	d108      	bne.n	80025e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025d6:	4b24      	ldr	r3, [pc, #144]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	4921      	ldr	r1, [pc, #132]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e8:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a19      	ldr	r1, [r3, #32]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	430b      	orrs	r3, r1
 80025fa:	491b      	ldr	r1, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe fb17 	bl	8000c38 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7fe fb13 	bl	8000c38 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e03d      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x46a>
 800262c:	e035      	b.n	800269a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <HAL_RCC_OscConfig+0x4cc>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fe fb00 	bl	8000c38 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fafc 	bl	8000c38 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e026      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x498>
 800265a:	e01e      	b.n	800269a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e019      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_OscConfig+0x500>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	429a      	cmp	r2, r3
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d001      	beq.n	800269a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0d0      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d910      	bls.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b67      	ldr	r3, [pc, #412]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 0207 	bic.w	r2, r3, #7
 80026d2:	4965      	ldr	r1, [pc, #404]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b63      	ldr	r3, [pc, #396]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4b59      	ldr	r3, [pc, #356]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800270e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002726:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b50      	ldr	r3, [pc, #320]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	494d      	ldr	r1, [pc, #308]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d040      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d115      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07f      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b41      	ldr	r3, [pc, #260]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e073      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e06b      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4936      	ldr	r1, [pc, #216]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002798:	f7fe fa4e 	bl	8000c38 <HAL_GetTick>
 800279c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fe fa4a 	bl	8000c38 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e053      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b2d      	ldr	r3, [pc, #180]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d210      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b24      	ldr	r3, [pc, #144]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0207 	bic.w	r2, r3, #7
 80027de:	4922      	ldr	r1, [pc, #136]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e032      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4916      	ldr	r1, [pc, #88]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	490e      	ldr	r1, [pc, #56]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002836:	f000 f821 	bl	800287c <HAL_RCC_GetSysClockFreq>
 800283a:	4602      	mov	r2, r0
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	490a      	ldr	r1, [pc, #40]	; (8002870 <HAL_RCC_ClockConfig+0x1c8>)
 8002848:	5ccb      	ldrb	r3, [r1, r3]
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1cc>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_RCC_ClockConfig+0x1d0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe f9ac 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40022000 	.word	0x40022000
 800286c:	40021000 	.word	0x40021000
 8002870:	08002cc8 	.word	0x08002cc8
 8002874:	20000034 	.word	0x20000034
 8002878:	20000038 	.word	0x20000038

0800287c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_RCC_GetSysClockFreq+0x94>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d002      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x30>
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d003      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x36>
 80028aa:	e027      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ae:	613b      	str	r3, [r7, #16]
      break;
 80028b0:	e027      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	0c9b      	lsrs	r3, r3, #18
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	4a17      	ldr	r2, [pc, #92]	; (8002918 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028bc:	5cd3      	ldrb	r3, [r2, r3]
 80028be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_RCC_GetSysClockFreq+0x94>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	0c5b      	lsrs	r3, r3, #17
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	4a11      	ldr	r2, [pc, #68]	; (800291c <HAL_RCC_GetSysClockFreq+0xa0>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028de:	fb03 f202 	mul.w	r2, r3, r2
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e004      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	613b      	str	r3, [r7, #16]
      break;
 80028fa:	e002      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fe:	613b      	str	r3, [r7, #16]
      break;
 8002900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002902:	693b      	ldr	r3, [r7, #16]
}
 8002904:	4618      	mov	r0, r3
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000
 8002914:	007a1200 	.word	0x007a1200
 8002918:	08002ce0 	.word	0x08002ce0
 800291c:	08002cf0 	.word	0x08002cf0
 8002920:	003d0900 	.word	0x003d0900

08002924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <HAL_RCC_GetHCLKFreq+0x10>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	20000034 	.word	0x20000034

08002938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800293c:	f7ff fff2 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4903      	ldr	r1, [pc, #12]	; (800295c <HAL_RCC_GetPCLK1Freq+0x24>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	08002cd8 	.word	0x08002cd8

08002960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <RCC_Delay+0x34>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <RCC_Delay+0x38>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0a5b      	lsrs	r3, r3, #9
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800297c:	bf00      	nop
  }
  while (Delay --);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1e5a      	subs	r2, r3, #1
 8002982:	60fa      	str	r2, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f9      	bne.n	800297c <RCC_Delay+0x1c>
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	20000034 	.word	0x20000034
 8002998:	10624dd3 	.word	0x10624dd3

0800299c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d07d      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029b8:	2300      	movs	r3, #0
 80029ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029bc:	4b4f      	ldr	r3, [pc, #316]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10d      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c8:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	4a4b      	ldr	r2, [pc, #300]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d2:	61d3      	str	r3, [r2, #28]
 80029d4:	4b49      	ldr	r3, [pc, #292]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e0:	2301      	movs	r3, #1
 80029e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d118      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029f0:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a42      	ldr	r2, [pc, #264]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029fc:	f7fe f91c 	bl	8000c38 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	e008      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a04:	f7fe f918 	bl	8000c38 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e06d      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a22:	4b36      	ldr	r3, [pc, #216]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d02e      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d027      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a40:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a4a:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a50:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a56:	4a29      	ldr	r2, [pc, #164]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d014      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe f8e7 	bl	8000c38 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6e:	f7fe f8e3 	bl	8000c38 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e036      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0ee      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a90:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4917      	ldr	r1, [pc, #92]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	4a13      	ldr	r2, [pc, #76]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	490b      	ldr	r1, [pc, #44]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4904      	ldr	r1, [pc, #16]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40007000 	.word	0x40007000
 8002b04:	42420440 	.word	0x42420440

08002b08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b08:	b084      	sub	sp, #16
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	f107 0014 	add.w	r0, r7, #20
 8002b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	b004      	add	sp, #16
 8002b26:	4770      	bx	lr

08002b28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4013      	ands	r3, r2
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b74:	b084      	sub	sp, #16
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	f107 0014 	add.w	r0, r7, #20
 8002b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	b004      	add	sp, #16
 8002bb2:	4770      	bx	lr

08002bb4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <memset>:
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4402      	add	r2, r0
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d100      	bne.n	8002bd2 <memset+0xa>
 8002bd0:	4770      	bx	lr
 8002bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bd6:	e7f9      	b.n	8002bcc <memset+0x4>

08002bd8 <strcat>:
 8002bd8:	4602      	mov	r2, r0
 8002bda:	b510      	push	{r4, lr}
 8002bdc:	7814      	ldrb	r4, [r2, #0]
 8002bde:	4613      	mov	r3, r2
 8002be0:	3201      	adds	r2, #1
 8002be2:	2c00      	cmp	r4, #0
 8002be4:	d1fa      	bne.n	8002bdc <strcat+0x4>
 8002be6:	3b01      	subs	r3, #1
 8002be8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002bf0:	2a00      	cmp	r2, #0
 8002bf2:	d1f9      	bne.n	8002be8 <strcat+0x10>
 8002bf4:	bd10      	pop	{r4, pc}
	...

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	4d0c      	ldr	r5, [pc, #48]	; (8002c30 <__libc_init_array+0x38>)
 8002bfe:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002c00:	1b64      	subs	r4, r4, r5
 8002c02:	10a4      	asrs	r4, r4, #2
 8002c04:	42a6      	cmp	r6, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	f000 f81a 	bl	8002c40 <_init>
 8002c0c:	2600      	movs	r6, #0
 8002c0e:	4d0a      	ldr	r5, [pc, #40]	; (8002c38 <__libc_init_array+0x40>)
 8002c10:	4c0a      	ldr	r4, [pc, #40]	; (8002c3c <__libc_init_array+0x44>)
 8002c12:	1b64      	subs	r4, r4, r5
 8002c14:	10a4      	asrs	r4, r4, #2
 8002c16:	42a6      	cmp	r6, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c20:	4798      	blx	r3
 8002c22:	3601      	adds	r6, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2a:	4798      	blx	r3
 8002c2c:	3601      	adds	r6, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	08002cf4 	.word	0x08002cf4
 8002c34:	08002cf4 	.word	0x08002cf4
 8002c38:	08002cf4 	.word	0x08002cf4
 8002c3c:	08002cf8 	.word	0x08002cf8

08002c40 <_init>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	bf00      	nop
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr

08002c4c <_fini>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	bf00      	nop
 8002c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c52:	bc08      	pop	{r3}
 8002c54:	469e      	mov	lr, r3
 8002c56:	4770      	bx	lr
