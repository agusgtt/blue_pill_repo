
Carga_DC_desarrollo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b928  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  0800ba34  0800ba34  0001ba34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bda0  0800bda0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800bda0  0800bda0  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bda0  0800bda0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bda4  0800bda4  0001bda4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800bda8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001574  200001ec  0800bf94  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001760  0800bf94  00021760  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001835d  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f10  00000000  00000000  000385b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  0003c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b6  00000000  00000000  0003dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bcf3  00000000  00000000  0003ed7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d3e5  00000000  00000000  0005aa71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009683e  00000000  00000000  00077e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006654  00000000  00000000  0010e694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00114ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ba1c 	.word	0x0800ba1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	0800ba1c 	.word	0x0800ba1c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_I2C_cmd>:
#define SLAVE_ADDRESS_LCD  0x4e	//0x4E // change this according to ur setup 0x7e

/* Envia comando por LCD ---------------------------------------*/

void LCD_I2C_cmd(char cmd)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f023 030f 	bic.w	r3, r3, #15
 800016c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	011b      	lsls	r3, r3, #4
 8000172:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	f043 030c 	orr.w	r3, r3, #12
 800017a:	b2db      	uxtb	r3, r3
 800017c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800017e:	7bfb      	ldrb	r3, [r7, #15]
 8000180:	f043 0308 	orr.w	r3, r3, #8
 8000184:	b2db      	uxtb	r3, r3
 8000186:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000188:	7bbb      	ldrb	r3, [r7, #14]
 800018a:	f043 030c 	orr.w	r3, r3, #12
 800018e:	b2db      	uxtb	r3, r3
 8000190:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000192:	7bbb      	ldrb	r3, [r7, #14]
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	b2db      	uxtb	r3, r3
 800019a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800019c:	f107 0208 	add.w	r2, r7, #8
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	9300      	str	r3, [sp, #0]
 80001a4:	2304      	movs	r3, #4
 80001a6:	214e      	movs	r1, #78	; 0x4e
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <LCD_I2C_cmd+0x60>)
 80001aa:	f002 ff09 	bl	8002fc0 <HAL_I2C_Master_Transmit>
	//while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
	HAL_Delay(1);
 80001ae:	2001      	movs	r0, #1
 80001b0:	f001 fdf8 	bl	8001da4 <HAL_Delay>
}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	2000027c 	.word	0x2000027c

080001c0 <LCD_I2C_char>:

/* Envia dato por LCD ------------------------------------------*/

void LCD_I2C_char(char data)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	f023 030f 	bic.w	r3, r3, #15
 80001d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	011b      	lsls	r3, r3, #4
 80001d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80001ec:	7bbb      	ldrb	r3, [r7, #14]
 80001ee:	f043 030d 	orr.w	r3, r3, #13
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80001f6:	7bbb      	ldrb	r3, [r7, #14]
 80001f8:	f043 0309 	orr.w	r3, r3, #9
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000200:	f107 0208 	add.w	r2, r7, #8
 8000204:	2364      	movs	r3, #100	; 0x64
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2304      	movs	r3, #4
 800020a:	214e      	movs	r1, #78	; 0x4e
 800020c:	4807      	ldr	r0, [pc, #28]	; (800022c <LCD_I2C_char+0x6c>)
 800020e:	f002 fed7 	bl	8002fc0 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000212:	bf00      	nop
 8000214:	4805      	ldr	r0, [pc, #20]	; (800022c <LCD_I2C_char+0x6c>)
 8000216:	f002 ffd1 	bl	80031bc <HAL_I2C_GetState>
 800021a:	4603      	mov	r3, r0
 800021c:	2b20      	cmp	r3, #32
 800021e:	d1f9      	bne.n	8000214 <LCD_I2C_char+0x54>
		//HAL_Delay(1);
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	2000027c 	.word	0x2000027c

08000230 <LCD_I2C_init>:

/* Inicializa LCD -----------------------------------------------*/

void LCD_I2C_init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	LCD_I2C_cmd(0x02);
 8000234:	2002      	movs	r0, #2
 8000236:	f7ff ff91 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x28);
 800023a:	2028      	movs	r0, #40	; 0x28
 800023c:	f7ff ff8e 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x0c);
 8000240:	200c      	movs	r0, #12
 8000242:	f7ff ff8b 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x80);
 8000246:	2080      	movs	r0, #128	; 0x80
 8000248:	f7ff ff88 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_CLEAR);
 800024c:	2001      	movs	r0, #1
 800024e:	f7ff ff85 	bl	800015c <LCD_I2C_cmd>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}

08000256 <LCD_I2C_write_text>:

/* Envia cadena de caracteres al LCD -----------------------------*/

void LCD_I2C_write_text(char *str)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	b082      	sub	sp, #8
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
	while (*str) LCD_I2C_char(*str++);
 800025e:	e006      	b.n	800026e <LCD_I2C_write_text+0x18>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	1c5a      	adds	r2, r3, #1
 8000264:	607a      	str	r2, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ffa9 	bl	80001c0 <LCD_I2C_char>
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d1f4      	bne.n	8000260 <LCD_I2C_write_text+0xa>
}
 8000276:	bf00      	nop
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <keypad_init>:
GPIO_TypeDef* COL_3_Port = GPIOB;
GPIO_TypeDef* COL_4_Port = GPIOB;


void keypad_init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
  // Configure GPIO pins for keypad matrix
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	463b      	mov	r3, r7
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = ROW_1_Pin | ROW_2_Pin | ROW_3_Pin | ROW_4_Pin;
 8000292:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000296:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000298:	2300      	movs	r3, #0
 800029a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800029c:	2301      	movs	r3, #1
 800029e:	60bb      	str	r3, [r7, #8]
  	  HAL_GPIO_Init(ROW_1_Port, &GPIO_InitStruct);
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <keypad_init+0xa8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	463a      	mov	r2, r7
 80002a6:	4611      	mov	r1, r2
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 fb61 	bl	8002970 <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_2_Port, &GPIO_InitStruct);
 80002ae:	4b1f      	ldr	r3, [pc, #124]	; (800032c <keypad_init+0xac>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	463a      	mov	r2, r7
 80002b4:	4611      	mov	r1, r2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fb5a 	bl	8002970 <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_3_Port, &GPIO_InitStruct);
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <keypad_init+0xb0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	463a      	mov	r2, r7
 80002c2:	4611      	mov	r1, r2
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 fb53 	bl	8002970 <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_4_Port, &GPIO_InitStruct);
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <keypad_init+0xb4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	463a      	mov	r2, r7
 80002d0:	4611      	mov	r1, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fb4c 	bl	8002970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = COL_1_Pin | COL_2_Pin | COL_3_Pin | COL_4_Pin;
 80002d8:	f640 4303 	movw	r3, #3075	; 0xc03
 80002dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	2301      	movs	r3, #1
 80002e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e2:	2302      	movs	r3, #2
 80002e4:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(COL_1_Port, &GPIO_InitStruct);
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <keypad_init+0xb8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	463a      	mov	r2, r7
 80002ec:	4611      	mov	r1, r2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 fb3e 	bl	8002970 <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_2_Port, &GPIO_InitStruct);
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <keypad_init+0xbc>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	463a      	mov	r2, r7
 80002fa:	4611      	mov	r1, r2
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fb37 	bl	8002970 <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_3_Port, &GPIO_InitStruct);
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <keypad_init+0xc0>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	463a      	mov	r2, r7
 8000308:	4611      	mov	r1, r2
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fb30 	bl	8002970 <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_4_Port, &GPIO_InitStruct);
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <keypad_init+0xc4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	463a      	mov	r2, r7
 8000316:	4611      	mov	r1, r2
 8000318:	4618      	mov	r0, r3
 800031a:	f002 fb29 	bl	8002970 <HAL_GPIO_Init>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000000 	.word	0x20000000
 800032c:	20000004 	.word	0x20000004
 8000330:	20000008 	.word	0x20000008
 8000334:	2000000c 	.word	0x2000000c
 8000338:	20000010 	.word	0x20000010
 800033c:	20000014 	.word	0x20000014
 8000340:	20000018 	.word	0x20000018
 8000344:	2000001c 	.word	0x2000001c

08000348 <keypad_scan>:
char keypad_scan(void)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b087      	sub	sp, #28
 800034c:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'C'},
 800034e:	4b6f      	ldr	r3, [pc, #444]	; (800050c <keypad_scan+0x1c4>)
 8000350:	1d3c      	adds	r4, r7, #4
 8000352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'V'},
                     {'7', '8', '9', 'R'},
                     {'D', '0', 'K', 'P'}};

  for(int i = 0; i < 4; i++)
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	e0cc      	b.n	80004f8 <keypad_scan+0x1b0>
  {
    // Set current column as output and low
    switch(i)
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	2b03      	cmp	r3, #3
 8000362:	f200 8087 	bhi.w	8000474 <keypad_scan+0x12c>
 8000366:	a201      	add	r2, pc, #4	; (adr r2, 800036c <keypad_scan+0x24>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	0800037d 	.word	0x0800037d
 8000370:	080003bb 	.word	0x080003bb
 8000374:	080003f9 	.word	0x080003f9
 8000378:	08000437 	.word	0x08000437
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 800037c:	4b64      	ldr	r3, [pc, #400]	; (8000510 <keypad_scan+0x1c8>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	4618      	mov	r0, r3
 8000386:	f002 fc8e 	bl	8002ca6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 800038a:	4b62      	ldr	r3, [pc, #392]	; (8000514 <keypad_scan+0x1cc>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2201      	movs	r2, #1
 8000390:	2102      	movs	r1, #2
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fc87 	bl	8002ca6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8000398:	4b5f      	ldr	r3, [pc, #380]	; (8000518 <keypad_scan+0x1d0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fc7f 	bl	8002ca6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80003a8:	4b5c      	ldr	r3, [pc, #368]	; (800051c <keypad_scan+0x1d4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fc77 	bl	8002ca6 <HAL_GPIO_WritePin>
        break;
 80003b8:	e05c      	b.n	8000474 <keypad_scan+0x12c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003ba:	4b55      	ldr	r3, [pc, #340]	; (8000510 <keypad_scan+0x1c8>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2201      	movs	r2, #1
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fc6f 	bl	8002ca6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 80003c8:	4b52      	ldr	r3, [pc, #328]	; (8000514 <keypad_scan+0x1cc>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2200      	movs	r2, #0
 80003ce:	2102      	movs	r1, #2
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 fc68 	bl	8002ca6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80003d6:	4b50      	ldr	r3, [pc, #320]	; (8000518 <keypad_scan+0x1d0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 fc60 	bl	8002ca6 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80003e6:	4b4d      	ldr	r3, [pc, #308]	; (800051c <keypad_scan+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f0:	4618      	mov	r0, r3
 80003f2:	f002 fc58 	bl	8002ca6 <HAL_GPIO_WritePin>
        break;
 80003f6:	e03d      	b.n	8000474 <keypad_scan+0x12c>

      case 2:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003f8:	4b45      	ldr	r3, [pc, #276]	; (8000510 <keypad_scan+0x1c8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2201      	movs	r2, #1
 80003fe:	2101      	movs	r1, #1
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fc50 	bl	8002ca6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8000406:	4b43      	ldr	r3, [pc, #268]	; (8000514 <keypad_scan+0x1cc>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2201      	movs	r2, #1
 800040c:	2102      	movs	r1, #2
 800040e:	4618      	mov	r0, r3
 8000410:	f002 fc49 	bl	8002ca6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 8000414:	4b40      	ldr	r3, [pc, #256]	; (8000518 <keypad_scan+0x1d0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041e:	4618      	mov	r0, r3
 8000420:	f002 fc41 	bl	8002ca6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8000424:	4b3d      	ldr	r3, [pc, #244]	; (800051c <keypad_scan+0x1d4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2201      	movs	r2, #1
 800042a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800042e:	4618      	mov	r0, r3
 8000430:	f002 fc39 	bl	8002ca6 <HAL_GPIO_WritePin>
		break;
 8000434:	e01e      	b.n	8000474 <keypad_scan+0x12c>

	  case 3:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8000436:	4b36      	ldr	r3, [pc, #216]	; (8000510 <keypad_scan+0x1c8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2201      	movs	r2, #1
 800043c:	2101      	movs	r1, #1
 800043e:	4618      	mov	r0, r3
 8000440:	f002 fc31 	bl	8002ca6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8000444:	4b33      	ldr	r3, [pc, #204]	; (8000514 <keypad_scan+0x1cc>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2201      	movs	r2, #1
 800044a:	2102      	movs	r1, #2
 800044c:	4618      	mov	r0, r3
 800044e:	f002 fc2a 	bl	8002ca6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8000452:	4b31      	ldr	r3, [pc, #196]	; (8000518 <keypad_scan+0x1d0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2201      	movs	r2, #1
 8000458:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045c:	4618      	mov	r0, r3
 800045e:	f002 fc22 	bl	8002ca6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 8000462:	4b2e      	ldr	r3, [pc, #184]	; (800051c <keypad_scan+0x1d4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800046c:	4618      	mov	r0, r3
 800046e:	f002 fc1a 	bl	8002ca6 <HAL_GPIO_WritePin>
		break;
 8000472:	bf00      	nop
    }
// Read current rows
	if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 8000474:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <keypad_scan+0x1d8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800047c:	4618      	mov	r0, r3
 800047e:	f002 fbfb 	bl	8002c78 <HAL_GPIO_ReadPin>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d104      	bne.n	8000492 <keypad_scan+0x14a>
	  return keys[0][i];
 8000488:	1d3a      	adds	r2, r7, #4
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	4413      	add	r3, r2
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	e037      	b.n	8000502 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 8000492:	4b24      	ldr	r3, [pc, #144]	; (8000524 <keypad_scan+0x1dc>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049a:	4618      	mov	r0, r3
 800049c:	f002 fbec 	bl	8002c78 <HAL_GPIO_ReadPin>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d105      	bne.n	80004b2 <keypad_scan+0x16a>
	  return keys[1][i];
 80004a6:	f107 0208 	add.w	r2, r7, #8
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	4413      	add	r3, r2
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	e027      	b.n	8000502 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <keypad_scan+0x1e0>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 fbdc 	bl	8002c78 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d105      	bne.n	80004d2 <keypad_scan+0x18a>
	  return keys[2][i];
 80004c6:	f107 020c 	add.w	r2, r7, #12
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	4413      	add	r3, r2
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	e017      	b.n	8000502 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <keypad_scan+0x1e4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fbcc 	bl	8002c78 <HAL_GPIO_ReadPin>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d105      	bne.n	80004f2 <keypad_scan+0x1aa>
	  return keys[3][i];
 80004e6:	f107 0210 	add.w	r2, r7, #16
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	e007      	b.n	8000502 <keypad_scan+0x1ba>
  for(int i = 0; i < 4; i++)
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	3301      	adds	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	f77f af2f 	ble.w	800035e <keypad_scan+0x16>
  }
return 0; // No key pressed
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	371c      	adds	r7, #28
 8000506:	46bd      	mov	sp, r7
 8000508:	bd90      	pop	{r4, r7, pc}
 800050a:	bf00      	nop
 800050c:	0800ba34 	.word	0x0800ba34
 8000510:	20000010 	.word	0x20000010
 8000514:	20000014 	.word	0x20000014
 8000518:	20000018 	.word	0x20000018
 800051c:	2000001c 	.word	0x2000001c
 8000520:	20000000 	.word	0x20000000
 8000524:	20000004 	.word	0x20000004
 8000528:	20000008 	.word	0x20000008
 800052c:	2000000c 	.word	0x2000000c

08000530 <tipo_dato>:


uint8_t tipo_dato(char input){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if(input=='C'||input=='R'||input=='P')
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b43      	cmp	r3, #67	; 0x43
 800053e:	d005      	beq.n	800054c <tipo_dato+0x1c>
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b52      	cmp	r3, #82	; 0x52
 8000544:	d002      	beq.n	800054c <tipo_dato+0x1c>
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b50      	cmp	r3, #80	; 0x50
 800054a:	d101      	bne.n	8000550 <tipo_dato+0x20>
		return 2;
 800054c:	2302      	movs	r3, #2
 800054e:	e012      	b.n	8000576 <tipo_dato+0x46>
	if(input=='V')
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	2b56      	cmp	r3, #86	; 0x56
 8000554:	d101      	bne.n	800055a <tipo_dato+0x2a>
		return 3;
 8000556:	2303      	movs	r3, #3
 8000558:	e00d      	b.n	8000576 <tipo_dato+0x46>
	if(input=='D')
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b44      	cmp	r3, #68	; 0x44
 800055e:	d101      	bne.n	8000564 <tipo_dato+0x34>
		return 4;
 8000560:	2304      	movs	r3, #4
 8000562:	e008      	b.n	8000576 <tipo_dato+0x46>
	if(input>='0'&&input<='9')
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b2f      	cmp	r3, #47	; 0x2f
 8000568:	d904      	bls.n	8000574 <tipo_dato+0x44>
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b39      	cmp	r3, #57	; 0x39
 800056e:	d801      	bhi.n	8000574 <tipo_dato+0x44>
		return 1;
 8000570:	2301      	movs	r3, #1
 8000572:	e000      	b.n	8000576 <tipo_dato+0x46>
	else
		return 0;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f001 fbab 	bl	8001ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f959 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fb37 	bl	8000c00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000592:	f000 fb1f 	bl	8000bd4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000596:	f000 f9b1 	bl	80008fc <MX_ADC1_Init>
  MX_I2C1_Init();
 800059a:	f000 fa19 	bl	80009d0 <MX_I2C1_Init>
  MX_TIM2_Init();
 800059e:	f000 fa7d 	bl	8000a9c <MX_TIM2_Init>
  MX_SPI1_Init();
 80005a2:	f000 fa43 	bl	8000a2c <MX_SPI1_Init>
  MX_TIM3_Init();
 80005a6:	f000 fac7 	bl	8000b38 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80005aa:	f00a f813 	bl	800a5d4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  enviar_spi_dac(0);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fc7c 	bl	8000eac <enviar_spi_dac>
  keypad_init();
 80005b4:	f7ff fe64 	bl	8000280 <keypad_init>
  HAL_Delay(10);
 80005b8:	200a      	movs	r0, #10
 80005ba:	f001 fbf3 	bl	8001da4 <HAL_Delay>
  LCD_I2C_init();
 80005be:	f7ff fe37 	bl	8000230 <LCD_I2C_init>

	//esto podria estar encapsulado
  	  LCD_I2C_cmd(LCD_LINEA1);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff fdca 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   UTN FRP   ");
 80005c8:	488d      	ldr	r0, [pc, #564]	; (8000800 <main+0x280>)
 80005ca:	f7ff fe44 	bl	8000256 <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA2);
 80005ce:	20c0      	movs	r0, #192	; 0xc0
 80005d0:	f7ff fdc4 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   Carga DC   ");
 80005d4:	488b      	ldr	r0, [pc, #556]	; (8000804 <main+0x284>)
 80005d6:	f7ff fe3e 	bl	8000256 <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA4);
 80005da:	20d4      	movs	r0, #212	; 0xd4
 80005dc:	f7ff fdbe 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   A.Gotte/A.Jose   ");
 80005e0:	4889      	ldr	r0, [pc, #548]	; (8000808 <main+0x288>)
 80005e2:	f7ff fe38 	bl	8000256 <LCD_I2C_write_text>
	  HAL_Delay(4000);
 80005e6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80005ea:	f001 fbdb 	bl	8001da4 <HAL_Delay>
	  LCD_I2C_cmd(LCD_CLEAR);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff fdb4 	bl	800015c <LCD_I2C_cmd>

  HAL_TIM_Base_Start_IT(&htim2);
 80005f4:	4885      	ldr	r0, [pc, #532]	; (800080c <main+0x28c>)
 80005f6:	f005 fd33 	bl	8006060 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80005fa:	4885      	ldr	r0, [pc, #532]	; (8000810 <main+0x290>)
 80005fc:	f005 fd30 	bl	8006060 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, input_adc, 4);//cuelga el programa
 8000600:	2204      	movs	r2, #4
 8000602:	4984      	ldr	r1, [pc, #528]	; (8000814 <main+0x294>)
 8000604:	4884      	ldr	r0, [pc, #528]	; (8000818 <main+0x298>)
 8000606:	f001 fcc9 	bl	8001f9c <HAL_ADC_Start_DMA>



	//se deberia hacer un POST

  char modo_carga = 'C';
 800060a:	2343      	movs	r3, #67	; 0x43
 800060c:	73fb      	strb	r3, [r7, #15]
  char input_valor[5]="";
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	713b      	strb	r3, [r7, #4]
  //char buffer_val[20]="val:  NNNN [utm]";

  uint8_t cont_digitos_input_val = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	73bb      	strb	r3, [r7, #14]
  uint8_t flag_update_display = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	737b      	strb	r3, [r7, #13]
  uint16_t control_spi = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	813b      	strh	r3, [r7, #8]
  uint16_t set_point = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	817b      	strh	r3, [r7, #10]
  //uint16_t temperatura_sensor = 0;
  enviar_spi_dac(control_spi);
 8000626:	893b      	ldrh	r3, [r7, #8]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fc3f 	bl	8000eac <enviar_spi_dac>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(flag_update_display_1_seg){//update display modo stand by
 800062e:	4b7b      	ldr	r3, [pc, #492]	; (800081c <main+0x29c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <main+0xca>

		  //HAL_ADC_Start(&hadc1);
		  //HAL_ADC_PollForConversion(&hadc1, 5);
		  //adc2use[0]=HAL_ADC_GetValue(&hadc1);
		  //display_update_stat(modo_carga,input_valor,input_adc[0]);
		  display_update_stat(modo_carga,input_valor,adc2use[0]);
 8000636:	4b7a      	ldr	r3, [pc, #488]	; (8000820 <main+0x2a0>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	4639      	mov	r1, r7
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fd70 	bl	8001124 <display_update_stat>
		  flag_update_display_1_seg=0;
 8000644:	4b75      	ldr	r3, [pc, #468]	; (800081c <main+0x29c>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
	  }

	  if(tipo_dato(input_keypad)==2){//tipo_dato()=2 si input es C,P,R,usb
 800064a:	4b76      	ldr	r3, [pc, #472]	; (8000824 <main+0x2a4>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff6e 	bl	8000530 <tipo_dato>
 8000654:	4603      	mov	r3, r0
 8000656:	2b02      	cmp	r3, #2
 8000658:	f040 8098 	bne.w	800078c <main+0x20c>
		  //ingresa a la configuracion de modo
		  flag_config=1;
 800065c:	4b72      	ldr	r3, [pc, #456]	; (8000828 <main+0x2a8>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]

		  while(flag_config){
 8000662:	e08e      	b.n	8000782 <main+0x202>
			  if(tipo_dato(input_keypad)==1 && cont_digitos_input_val<4){//tipo_dato()=1 si input es >=0 y <=9
 8000664:	4b6f      	ldr	r3, [pc, #444]	; (8000824 <main+0x2a4>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff61 	bl	8000530 <tipo_dato>
 800066e:	4603      	mov	r3, r0
 8000670:	2b01      	cmp	r3, #1
 8000672:	d112      	bne.n	800069a <main+0x11a>
 8000674:	7bbb      	ldrb	r3, [r7, #14]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d80f      	bhi.n	800069a <main+0x11a>
				  //input_valor[cont_digitos_input_val]=input_keypad;
				  agregar_digito(input_valor, input_keypad);
 800067a:	4b6a      	ldr	r3, [pc, #424]	; (8000824 <main+0x2a4>)
 800067c:	781a      	ldrb	r2, [r3, #0]
 800067e:	463b      	mov	r3, r7
 8000680:	4611      	mov	r1, r2
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fbe0 	bl	8000e48 <agregar_digito>
				  input_keypad=0;
 8000688:	4b66      	ldr	r3, [pc, #408]	; (8000824 <main+0x2a4>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
				  cont_digitos_input_val++;
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	3301      	adds	r3, #1
 8000692:	73bb      	strb	r3, [r7, #14]
				  flag_update_display=1;
 8000694:	2301      	movs	r3, #1
 8000696:	737b      	strb	r3, [r7, #13]
 8000698:	e068      	b.n	800076c <main+0x1ec>
			  }
			  else if(input_keypad=='D'&&cont_digitos_input_val>0){
 800069a:	4b62      	ldr	r3, [pc, #392]	; (8000824 <main+0x2a4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b44      	cmp	r3, #68	; 0x44
 80006a0:	d10f      	bne.n	80006c2 <main+0x142>
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00c      	beq.n	80006c2 <main+0x142>
				  borrar_ultimo_digito(input_valor);
 80006a8:	463b      	mov	r3, r7
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fbe8 	bl	8000e80 <borrar_ultimo_digito>
				  input_keypad=0;
 80006b0:	4b5c      	ldr	r3, [pc, #368]	; (8000824 <main+0x2a4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
				  cont_digitos_input_val--;
 80006b6:	7bbb      	ldrb	r3, [r7, #14]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	73bb      	strb	r3, [r7, #14]
				  flag_update_display=1;
 80006bc:	2301      	movs	r3, #1
 80006be:	737b      	strb	r3, [r7, #13]
 80006c0:	e054      	b.n	800076c <main+0x1ec>
			  }
			  else if(input_keypad=='K'){
 80006c2:	4b58      	ldr	r3, [pc, #352]	; (8000824 <main+0x2a4>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b4b      	cmp	r3, #75	; 0x4b
 80006c8:	d10f      	bne.n	80006ea <main+0x16a>
				  input_keypad=0;
 80006ca:	4b56      	ldr	r3, [pc, #344]	; (8000824 <main+0x2a4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
				  //validar parametro ingresado
				  set_point=atoi(input_valor);
 80006d0:	463b      	mov	r3, r7
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00a fc30 	bl	800af38 <atoi>
 80006d8:	4603      	mov	r3, r0
 80006da:	817b      	strh	r3, [r7, #10]
				  flag_config=0;//sale del while y vuelve al super loop
 80006dc:	4b52      	ldr	r3, [pc, #328]	; (8000828 <main+0x2a8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
				  flag_update_display_1_seg=1;
 80006e2:	4b4e      	ldr	r3, [pc, #312]	; (800081c <main+0x29c>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	e040      	b.n	800076c <main+0x1ec>
				  //validar parametro ingresado
			  }
			  else if(tipo_dato(input_keypad)==2){
 80006ea:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <main+0x2a4>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff1e 	bl	8000530 <tipo_dato>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d108      	bne.n	800070c <main+0x18c>
				  modo_carga=input_keypad;//guardar el modo que se selecciono
 80006fa:	4b4a      	ldr	r3, [pc, #296]	; (8000824 <main+0x2a4>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	73fb      	strb	r3, [r7, #15]
				  input_keypad=0;
 8000700:	4b48      	ldr	r3, [pc, #288]	; (8000824 <main+0x2a4>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
				  //borrar buffer
				  flag_update_display=1;
 8000706:	2301      	movs	r3, #1
 8000708:	737b      	strb	r3, [r7, #13]
 800070a:	e02f      	b.n	800076c <main+0x1ec>
			  }
			  else if(tipo_dato(input_keypad)==3){
 800070c:	4b45      	ldr	r3, [pc, #276]	; (8000824 <main+0x2a4>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff0d 	bl	8000530 <tipo_dato>
 8000716:	4603      	mov	r3, r0
 8000718:	2b03      	cmp	r3, #3
 800071a:	d127      	bne.n	800076c <main+0x1ec>
				  sprintf(str, "$USB#\n");//manda la solicitud de conexion
 800071c:	4943      	ldr	r1, [pc, #268]	; (800082c <main+0x2ac>)
 800071e:	4844      	ldr	r0, [pc, #272]	; (8000830 <main+0x2b0>)
 8000720:	f00a fcca 	bl	800b0b8 <siprintf>
				  memset(buffer_usb, '\0',64);
 8000724:	2240      	movs	r2, #64	; 0x40
 8000726:	2100      	movs	r1, #0
 8000728:	4842      	ldr	r0, [pc, #264]	; (8000834 <main+0x2b4>)
 800072a:	f00a fce5 	bl	800b0f8 <memset>
				  CDC_Transmit_FS((uint8_t*) str, strlen(str));
 800072e:	4840      	ldr	r0, [pc, #256]	; (8000830 <main+0x2b0>)
 8000730:	f7ff fd0c 	bl	800014c <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	b29b      	uxth	r3, r3
 8000738:	4619      	mov	r1, r3
 800073a:	483d      	ldr	r0, [pc, #244]	; (8000830 <main+0x2b0>)
 800073c:	f00a f81e 	bl	800a77c <CDC_Transmit_FS>
				  //un contador o delay
				  HAL_Delay(1000);
 8000740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000744:	f001 fb2e 	bl	8001da4 <HAL_Delay>
				  if(buffer_usb[0]=='$' && buffer_usb[1]=='O' && buffer_usb[2]=='K' && buffer_usb[3]=='#'){//si responde la pc, entra al bucle
 8000748:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <main+0x2b4>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b24      	cmp	r3, #36	; 0x24
 800074e:	d10d      	bne.n	800076c <main+0x1ec>
 8000750:	4b38      	ldr	r3, [pc, #224]	; (8000834 <main+0x2b4>)
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	2b4f      	cmp	r3, #79	; 0x4f
 8000756:	d109      	bne.n	800076c <main+0x1ec>
 8000758:	4b36      	ldr	r3, [pc, #216]	; (8000834 <main+0x2b4>)
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	2b4b      	cmp	r3, #75	; 0x4b
 800075e:	d105      	bne.n	800076c <main+0x1ec>
 8000760:	4b34      	ldr	r3, [pc, #208]	; (8000834 <main+0x2b4>)
 8000762:	78db      	ldrb	r3, [r3, #3]
 8000764:	2b23      	cmp	r3, #35	; 0x23
 8000766:	d101      	bne.n	800076c <main+0x1ec>
					  modo_usb();
 8000768:	f000 fe30 	bl	80013cc <modo_usb>
				  }
			  }
		  if(flag_update_display){
 800076c:	7b7b      	ldrb	r3, [r7, #13]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d007      	beq.n	8000782 <main+0x202>
			  display_update_conf(modo_carga,input_valor);
 8000772:	463a      	mov	r2, r7
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fc33 	bl	8000fe4 <display_update_conf>
			  flag_update_display=0;
 800077e:	2300      	movs	r3, #0
 8000780:	737b      	strb	r3, [r7, #13]
		  while(flag_config){
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <main+0x2a8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	f47f af6c 	bne.w	8000664 <main+0xe4>
		  }
		}//fin while config
	  }//fin if config
	  if(flag_on_off){
 800078c:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <main+0x2b8>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	f43f af4c 	beq.w	800062e <main+0xae>
		  //setting del modo de trabajo
		  while(flag_on_off){
 8000796:	e025      	b.n	80007e4 <main+0x264>
			  if(flag_update_loop_control){
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <main+0x2bc>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d012      	beq.n	80007c6 <main+0x246>

					 control_spi=control_carga(modo_carga,adc2use[0],adc2use[1],set_point);
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <main+0x2a0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	b299      	uxth	r1, r3
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <main+0x2a0>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	897b      	ldrh	r3, [r7, #10]
 80007ae:	7bf8      	ldrb	r0, [r7, #15]
 80007b0:	f000 fff4 	bl	800179c <control_carga>
 80007b4:	4603      	mov	r3, r0
 80007b6:	813b      	strh	r3, [r7, #8]
					 enviar_spi_dac(control_spi);
 80007b8:	893b      	ldrh	r3, [r7, #8]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fb76 	bl	8000eac <enviar_spi_dac>
					 flag_update_loop_control=0;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <main+0x2bc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]

			  }
			  if(flag_update_display_1_seg){
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <main+0x29c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00a      	beq.n	80007e4 <main+0x264>
				  display_update_running(modo_carga,adc2use[0],adc2use[1]);
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <main+0x2a0>)
 80007d0:	6819      	ldr	r1, [r3, #0]
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <main+0x2a0>)
 80007d4:	685a      	ldr	r2, [r3, #4]
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fef7 	bl	80015cc <display_update_running>
				  flag_update_display_1_seg=0;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <main+0x29c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
		  while(flag_on_off){
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <main+0x2b8>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1d5      	bne.n	8000798 <main+0x218>
				  }
		  }//fin while flag_on_off
		  //configuracion post carga activa
		  input_keypad=0;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <main+0x2a4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
		  control_spi=0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	813b      	strh	r3, [r7, #8]
		  enviar_spi_dac(control_spi);
 80007f6:	893b      	ldrh	r3, [r7, #8]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fb57 	bl	8000eac <enviar_spi_dac>
	  if(flag_update_display_1_seg){//update display modo stand by
 80007fe:	e716      	b.n	800062e <main+0xae>
 8000800:	0800ba44 	.word	0x0800ba44
 8000804:	0800ba54 	.word	0x0800ba54
 8000808:	0800ba64 	.word	0x0800ba64
 800080c:	20000328 	.word	0x20000328
 8000810:	20000370 	.word	0x20000370
 8000814:	200003c0 	.word	0x200003c0
 8000818:	20000208 	.word	0x20000208
 800081c:	200003ba 	.word	0x200003ba
 8000820:	200003d0 	.word	0x200003d0
 8000824:	20000436 	.word	0x20000436
 8000828:	200003b9 	.word	0x200003b9
 800082c:	0800ba7c 	.word	0x0800ba7c
 8000830:	20000418 	.word	0x20000418
 8000834:	200003d8 	.word	0x200003d8
 8000838:	200003b8 	.word	0x200003b8
 800083c:	200003bb 	.word	0x200003bb

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	; 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084a:	2228      	movs	r2, #40	; 0x28
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f00a fc52 	bl	800b0f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087e:	2301      	movs	r3, #1
 8000880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800088c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000890:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000896:	4618      	mov	r0, r3
 8000898:	f004 fc66 	bl	8005168 <HAL_RCC_OscConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008a2:	f001 f811 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	230f      	movs	r3, #15
 80008a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2102      	movs	r1, #2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f004 fed2 	bl	800566c <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008ce:	f000 fffb 	bl	80018c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80008d2:	2312      	movs	r3, #18
 80008d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80008d6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80008da:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f005 f83c 	bl	8005960 <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008ee:	f000 ffeb 	bl	80018c8 <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3750      	adds	r7, #80	; 0x50
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800090c:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <MX_ADC1_Init+0xcc>)
 800090e:	4a2f      	ldr	r2, [pc, #188]	; (80009cc <MX_ADC1_Init+0xd0>)
 8000910:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000918:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <MX_ADC1_Init+0xcc>)
 800091c:	2201      	movs	r2, #1
 800091e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000920:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000922:	2200      	movs	r2, #0
 8000924:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000926:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000928:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800092c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000936:	2204      	movs	r2, #4
 8000938:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800093a:	4823      	ldr	r0, [pc, #140]	; (80009c8 <MX_ADC1_Init+0xcc>)
 800093c:	f001 fa56 	bl	8001dec <HAL_ADC_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000946:	f000 ffbf 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800094a:	2301      	movs	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094e:	2301      	movs	r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	481b      	ldr	r0, [pc, #108]	; (80009c8 <MX_ADC1_Init+0xcc>)
 800095c:	f001 fc18 	bl	8002190 <HAL_ADC_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 ffaf 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800096a:	2302      	movs	r3, #2
 800096c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800096e:	2302      	movs	r3, #2
 8000970:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	4619      	mov	r1, r3
 8000976:	4814      	ldr	r0, [pc, #80]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000978:	f001 fc0a 	bl	8002190 <HAL_ADC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000982:	f000 ffa1 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000986:	2303      	movs	r3, #3
 8000988:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800098a:	2303      	movs	r3, #3
 800098c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000994:	f001 fbfc 	bl	8002190 <HAL_ADC_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800099e:	f000 ff93 	bl	80018c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009a2:	2304      	movs	r3, #4
 80009a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009a6:	2304      	movs	r3, #4
 80009a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_ADC1_Init+0xcc>)
 80009b0:	f001 fbee 	bl	8002190 <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80009ba:	f000 ff85 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000208 	.word	0x20000208
 80009cc:	40012400 	.word	0x40012400

080009d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <MX_I2C1_Init+0x54>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 80000;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009dc:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <MX_I2C1_Init+0x58>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_I2C1_Init+0x50>)
 8000a0e:	f002 f993 	bl	8002d38 <HAL_I2C_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a18:	f000 ff56 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000027c 	.word	0x2000027c
 8000a24:	40005400 	.word	0x40005400
 8000a28:	00013880 	.word	0x00013880

08000a2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a32:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <MX_SPI1_Init+0x6c>)
 8000a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a62:	2228      	movs	r2, #40	; 0x28
 8000a64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a7a:	220a      	movs	r2, #10
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a80:	f005 f824 	bl	8005acc <HAL_SPI_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000a8a:	f000 ff1d 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200002d0 	.word	0x200002d0
 8000a98:	40013000 	.word	0x40013000

08000a9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000abe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ac2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000ac6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ad0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ad4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae2:	4814      	ldr	r0, [pc, #80]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ae4:	f005 fa6c 	bl	8005fc0 <HAL_TIM_Base_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000aee:	f000 feeb 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4619      	mov	r1, r3
 8000afe:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000b00:	f005 fc08 	bl	8006314 <HAL_TIM_ConfigClockSource>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b0a:	f000 fedd 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b16:	463b      	mov	r3, r7
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000b1c:	f005 fdde 	bl	80066dc <HAL_TIMEx_MasterConfigSynchronization>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b26:	f000 fecf 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000328 	.word	0x20000328

08000b38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b56:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <MX_TIM3_Init+0x98>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b5c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000b60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1499;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b6a:	f240 52db 	movw	r2, #1499	; 0x5db
 8000b6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b7c:	4813      	ldr	r0, [pc, #76]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b7e:	f005 fa1f 	bl	8005fc0 <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b88:	f000 fe9e 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b9a:	f005 fbbb 	bl	8006314 <HAL_TIM_ConfigClockSource>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ba4:	f000 fe90 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000bb6:	f005 fd91 	bl	80066dc <HAL_TIMEx_MasterConfigSynchronization>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bc0:	f000 fe82 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000370 	.word	0x20000370
 8000bd0:	40000400 	.word	0x40000400

08000bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_DMA_Init+0x28>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <MX_DMA_Init+0x28>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <MX_DMA_Init+0x28>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	40021000 	.word	0x40021000

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c14:	4b49      	ldr	r3, [pc, #292]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a48      	ldr	r2, [pc, #288]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b46      	ldr	r3, [pc, #280]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2c:	4b43      	ldr	r3, [pc, #268]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a42      	ldr	r2, [pc, #264]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c32:	f043 0320 	orr.w	r3, r3, #32
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b40      	ldr	r3, [pc, #256]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0320 	and.w	r3, r3, #32
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b3d      	ldr	r3, [pc, #244]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a3c      	ldr	r2, [pc, #240]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a36      	ldr	r2, [pc, #216]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c62:	f043 0308 	orr.w	r3, r3, #8
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c7a:	4831      	ldr	r0, [pc, #196]	; (8000d40 <MX_GPIO_Init+0x140>)
 8000c7c:	f002 f813 	bl	8002ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2140      	movs	r1, #64	; 0x40
 8000c84:	482f      	ldr	r0, [pc, #188]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c86:	f002 f80e 	bl	8002ca6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f640 6103 	movw	r1, #3587	; 0xe03
 8000c90:	482d      	ldr	r0, [pc, #180]	; (8000d48 <MX_GPIO_Init+0x148>)
 8000c92:	f002 f808 	bl	8002ca6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000c96:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4824      	ldr	r0, [pc, #144]	; (8000d40 <MX_GPIO_Init+0x140>)
 8000cb0:	f001 fe5e 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481e      	ldr	r0, [pc, #120]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000ccc:	f001 fe50 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000cd0:	f640 6303 	movw	r3, #3587	; 0xe03
 8000cd4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4817      	ldr	r0, [pc, #92]	; (8000d48 <MX_GPIO_Init+0x148>)
 8000cea:	f001 fe41 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000cee:	f44f 4371 	mov.w	r3, #61696	; 0xf100
 8000cf2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	4811      	ldr	r0, [pc, #68]	; (8000d48 <MX_GPIO_Init+0x148>)
 8000d04:	f001 fe34 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_GPIO_Init+0x14c>)
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000d1e:	f001 fe27 	bl	8002970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2017      	movs	r0, #23
 8000d28:	f001 fd03 	bl	8002732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d2c:	2017      	movs	r0, #23
 8000d2e:	f001 fd1c 	bl	800276a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d32:	bf00      	nop
 8000d34:	3720      	adds	r7, #32
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40011000 	.word	0x40011000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40010c00 	.word	0x40010c00
 8000d4c:	10210000 	.word	0x10210000

08000d50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//definiciones de los callback y funciones
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // INT Source is pin A9
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d60:	d126      	bne.n	8000db0 <HAL_GPIO_EXTI_Callback+0x60>
    {
    //if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET&&!flag_config){
    	//while()
    if(!flag_on_off && !flag_config){
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d113      	bne.n	8000d92 <HAL_GPIO_EXTI_Callback+0x42>
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10f      	bne.n	8000d92 <HAL_GPIO_EXTI_Callback+0x42>
    		flag_on_off=1;// conecta la carga
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
    		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7e:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d80:	f001 ff91 	bl	8002ca6 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d8c:	f001 ff8b 	bl	8002ca6 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
    }

    }
}
 8000d90:	e00e      	b.n	8000db0 <HAL_GPIO_EXTI_Callback+0x60>
    	flag_on_off=0;// desconecta la carga
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d9e:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000da0:	f001 ff81 	bl	8002ca6 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000dac:	f001 ff7b 	bl	8002ca6 <HAL_GPIO_WritePin>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200003b8 	.word	0x200003b8
 8000dbc:	200003b9 	.word	0x200003b9
 8000dc0:	40011000 	.word	0x40011000
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM2){
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd8:	d11b      	bne.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x4a>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dde:	4814      	ldr	r0, [pc, #80]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000de0:	f001 ff79 	bl	8002cd6 <HAL_GPIO_TogglePin>
	 input_keypad=keypad_scan();//condicionar la lectura a que no este en modo activo la carga
 8000de4:	f7ff fab0 	bl	8000348 <keypad_scan>
 8000de8:	4603      	mov	r3, r0
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000dee:	701a      	strb	r2, [r3, #0]
	 //flag_update_loop_control=1; //movemos al timer3

	 if(cont_timer_update>=5){//cada segundo y medio actualiza el display
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d906      	bls.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x3e>

		 flag_update_display_1_seg=1;//update nombre
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
		 cont_timer_update=0;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e005      	b.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x4a>
		 //temperatura_sensor=leer_temperatura();
	 }
	 else cont_timer_update++;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e10:	701a      	strb	r2, [r3, #0]
 }
 if(htim->Instance == TIM3){
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d104      	bne.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0x5e>
 	 //disparar control de la carga
	 validar_ADC();
 8000e1c:	f000 f876 	bl	8000f0c <validar_ADC>
	 flag_update_loop_control=1; //flag ciclo de control
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
  }
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40011000 	.word	0x40011000
 8000e34:	20000436 	.word	0x20000436
 8000e38:	200003bc 	.word	0x200003bc
 8000e3c:	200003ba 	.word	0x200003ba
 8000e40:	40000400 	.word	0x40000400
 8000e44:	200003bb 	.word	0x200003bb

08000e48 <agregar_digito>:

void agregar_digito(char *buffer, char digito) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
    size_t longitud = strlen(buffer);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff f979 	bl	800014c <strlen>
 8000e5a:	60f8      	str	r0, [r7, #12]

    if (longitud < BUFFER_SIZE_input) {
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d80a      	bhi.n	8000e78 <agregar_digito+0x30>
        buffer[longitud] = digito;
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	78fa      	ldrb	r2, [r7, #3]
 8000e6a:	701a      	strb	r2, [r3, #0]
        buffer[longitud + 1] = '\0';
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
    }
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <borrar_ultimo_digito>:

void borrar_ultimo_digito(char *buffer) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
    size_t longitud = strlen(buffer);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff f95f 	bl	800014c <strlen>
 8000e8e:	60f8      	str	r0, [r7, #12]

    if (longitud > 0) {
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d005      	beq.n	8000ea2 <borrar_ultimo_digito+0x22>
        buffer[longitud - 1] = '\0';
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
    }
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <enviar_spi_dac>:
		temperature_milicelsius=0;
	}
	 return temperature_milicelsius;
}

void enviar_spi_dac(uint16_t dato){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
	if(dato<=0x0FFF){
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ebc:	d21f      	bcs.n	8000efe <enviar_spi_dac+0x52>
		uint16_t send = 0x3000;
 8000ebe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ec2:	81fb      	strh	r3, [r7, #14]
		send = send|dato;
 8000ec4:	89fa      	ldrh	r2, [r7, #14]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2140      	movs	r1, #64	; 0x40
 8000ed2:	480c      	ldr	r0, [pc, #48]	; (8000f04 <enviar_spi_dac+0x58>)
 8000ed4:	f001 fee7 	bl	8002ca6 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &send, 2, 10);
 8000ed8:	f107 010e 	add.w	r1, r7, #14
 8000edc:	230a      	movs	r3, #10
 8000ede:	2202      	movs	r2, #2
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <enviar_spi_dac+0x5c>)
 8000ee2:	f004 fe77 	bl	8005bd4 <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&hspi1)!=HAL_SPI_STATE_READY);
 8000ee6:	bf00      	nop
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <enviar_spi_dac+0x5c>)
 8000eea:	f004 ffb6 	bl	8005e5a <HAL_SPI_GetState>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d1f9      	bne.n	8000ee8 <enviar_spi_dac+0x3c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <enviar_spi_dac+0x58>)
 8000efa:	f001 fed4 	bl	8002ca6 <HAL_GPIO_WritePin>

		return;
	}
}
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40010800 	.word	0x40010800
 8000f08:	200002d0 	.word	0x200002d0

08000f0c <validar_ADC>:
void validar_ADC(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	//valida que adc de corriente usar o si el sense esta activo
	//corriente
	if(input_adc[2]>LIM_HAL_SENSOR_5A){
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <validar_ADC+0xc8>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d910      	bls.n	8000f3e <validar_ADC+0x32>
		adc2use[1]=input_adc[3]*FACTOR_ADC_30A_CURRENT_mult;
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <validar_ADC+0xc8>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f641 429e 	movw	r2, #7326	; 0x1c9e
 8000f24:	fb02 f303 	mul.w	r3, r2, r3
 8000f28:	4a2b      	ldr	r2, [pc, #172]	; (8000fd8 <validar_ADC+0xcc>)
 8000f2a:	6053      	str	r3, [r2, #4]
		adc2use[1]=adc2use[1]/FACTOR_ADC_30A_CURRENT_div;
 8000f2c:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <validar_ADC+0xcc>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	4a2a      	ldr	r2, [pc, #168]	; (8000fdc <validar_ADC+0xd0>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	0b5b      	lsrs	r3, r3, #13
 8000f38:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <validar_ADC+0xcc>)
 8000f3a:	6053      	str	r3, [r2, #4]
 8000f3c:	e014      	b.n	8000f68 <validar_ADC+0x5c>
	}else{
		adc2use[1]=input_adc[2]+OFFSET_5A_restar;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <validar_ADC+0xc8>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	3364      	adds	r3, #100	; 0x64
 8000f44:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <validar_ADC+0xcc>)
 8000f46:	6053      	str	r3, [r2, #4]
		adc2use[1]=adc2use[1]*FACTOR_ADC_5A_CURRENT_mult;
 8000f48:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <validar_ADC+0xcc>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f240 5219 	movw	r2, #1305	; 0x519
 8000f50:	fb02 f303 	mul.w	r3, r2, r3
 8000f54:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <validar_ADC+0xcc>)
 8000f56:	6053      	str	r3, [r2, #4]
		adc2use[1]=adc2use[1]/FACTOR_ADC_5A_CURRENT_div;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <validar_ADC+0xcc>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <validar_ADC+0xd0>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	0b5b      	lsrs	r3, r3, #13
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <validar_ADC+0xcc>)
 8000f66:	6053      	str	r3, [r2, #4]
	}
	//tension
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==GPIO_PIN_SET){
 8000f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6c:	481c      	ldr	r0, [pc, #112]	; (8000fe0 <validar_ADC+0xd4>)
 8000f6e:	f001 fe83 	bl	8002c78 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d115      	bne.n	8000fa4 <validar_ADC+0x98>
		adc2use[0]=input_adc[0]*FACTOR_ADC_VOLTAGE_mult;//inputadc[0]marron linea baja impedancia
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <validar_ADC+0xc8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f642 725f 	movw	r2, #12127	; 0x2f5f
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <validar_ADC+0xcc>)
 8000f86:	6013      	str	r3, [r2, #0]
		adc2use[0]=adc2use[0]/FACTOR_ADC_VOLTAGE_div;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <validar_ADC+0xcc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <validar_ADC+0xd0>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	0b5b      	lsrs	r3, r3, #13
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <validar_ADC+0xcc>)
 8000f96:	6013      	str	r3, [r2, #0]
		adc2use[0]=adc2use[0]+OFFSET_ADC_VOLTAGE_low;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <validar_ADC+0xcc>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	335f      	adds	r3, #95	; 0x5f
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <validar_ADC+0xcc>)
 8000fa0:	6013      	str	r3, [r2, #0]
		adc2use[0]=input_adc[0]*FACTOR_ADC_VOLTAGE_mult;//quitar linea para usar sense
		//adc2use[0]=input_adc[1]*FACTOR_ADC_VOLTAGE_mult;
		adc2use[0]=adc2use[0]/FACTOR_ADC_VOLTAGE_div;
		adc2use[0]=adc2use[0]+OFFSET_ADC_VOLTAGE_low;
	}
}
 8000fa2:	e014      	b.n	8000fce <validar_ADC+0xc2>
		adc2use[0]=input_adc[0]*FACTOR_ADC_VOLTAGE_mult;//quitar linea para usar sense
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <validar_ADC+0xc8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f642 725f 	movw	r2, #12127	; 0x2f5f
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <validar_ADC+0xcc>)
 8000fb2:	6013      	str	r3, [r2, #0]
		adc2use[0]=adc2use[0]/FACTOR_ADC_VOLTAGE_div;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <validar_ADC+0xcc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <validar_ADC+0xd0>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	0b5b      	lsrs	r3, r3, #13
 8000fc0:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <validar_ADC+0xcc>)
 8000fc2:	6013      	str	r3, [r2, #0]
		adc2use[0]=adc2use[0]+OFFSET_ADC_VOLTAGE_low;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <validar_ADC+0xcc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	335f      	adds	r3, #95	; 0x5f
 8000fca:	4a03      	ldr	r2, [pc, #12]	; (8000fd8 <validar_ADC+0xcc>)
 8000fcc:	6013      	str	r3, [r2, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200003c0 	.word	0x200003c0
 8000fd8:	200003d0 	.word	0x200003d0
 8000fdc:	d1b71759 	.word	0xd1b71759
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <display_update_conf>:

void display_update_conf(char modo_op, char *dato){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	; 0x38
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]

	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
	snprintf(buffer_fun, sizeof(buffer_fun), "Config Modo C%s:", char_as_str);
 8001020:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001024:	f107 0020 	add.w	r0, r7, #32
 8001028:	4a38      	ldr	r2, [pc, #224]	; (800110c <display_update_conf+0x128>)
 800102a:	2114      	movs	r1, #20
 800102c:	f00a f810 	bl	800b050 <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff f893 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff f890 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 800103c:	f107 0320 	add.w	r3, r7, #32
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f908 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA3);
 8001046:	2094      	movs	r0, #148	; 0x94
 8001048:	f7ff f888 	bl	800015c <LCD_I2C_cmd>
	switch(modo_op){//print del modo
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	3b43      	subs	r3, #67	; 0x43
 8001050:	2b13      	cmp	r3, #19
 8001052:	d84b      	bhi.n	80010ec <display_update_conf+0x108>
 8001054:	a201      	add	r2, pc, #4	; (adr r2, 800105c <display_update_conf+0x78>)
 8001056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105a:	bf00      	nop
 800105c:	080010ad 	.word	0x080010ad
 8001060:	080010ed 	.word	0x080010ed
 8001064:	080010ed 	.word	0x080010ed
 8001068:	080010ed 	.word	0x080010ed
 800106c:	080010ed 	.word	0x080010ed
 8001070:	080010ed 	.word	0x080010ed
 8001074:	080010ed 	.word	0x080010ed
 8001078:	080010ed 	.word	0x080010ed
 800107c:	080010ed 	.word	0x080010ed
 8001080:	080010ed 	.word	0x080010ed
 8001084:	080010ed 	.word	0x080010ed
 8001088:	080010ed 	.word	0x080010ed
 800108c:	080010ed 	.word	0x080010ed
 8001090:	080010dd 	.word	0x080010dd
 8001094:	080010ed 	.word	0x080010ed
 8001098:	080010cd 	.word	0x080010cd
 800109c:	080010ed 	.word	0x080010ed
 80010a0:	080010ed 	.word	0x080010ed
 80010a4:	080010ed 	.word	0x080010ed
 80010a8:	080010bd 	.word	0x080010bd

	case 'C':
		snprintf(buffer_dato, sizeof(buffer_dato), "Current: %s0 [mA]", dato);
 80010ac:	f107 000c 	add.w	r0, r7, #12
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <display_update_conf+0x12c>)
 80010b4:	2114      	movs	r1, #20
 80010b6:	f009 ffcb 	bl	800b050 <sniprintf>
		break;
 80010ba:	e01e      	b.n	80010fa <display_update_conf+0x116>
	case 'V':
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %s0 [mV]", dato);
 80010bc:	f107 000c 	add.w	r0, r7, #12
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <display_update_conf+0x130>)
 80010c4:	2114      	movs	r1, #20
 80010c6:	f009 ffc3 	bl	800b050 <sniprintf>
		break;
 80010ca:	e016      	b.n	80010fa <display_update_conf+0x116>
	case 'R':
		snprintf(buffer_dato, sizeof(buffer_dato), "Resist.: %s [mR]", dato);
 80010cc:	f107 000c 	add.w	r0, r7, #12
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <display_update_conf+0x134>)
 80010d4:	2114      	movs	r1, #20
 80010d6:	f009 ffbb 	bl	800b050 <sniprintf>
		break;
 80010da:	e00e      	b.n	80010fa <display_update_conf+0x116>
	case 'P':
		snprintf(buffer_dato, sizeof(buffer_dato), "Power.: %s00 [W]", dato);
 80010dc:	f107 000c 	add.w	r0, r7, #12
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	4a0e      	ldr	r2, [pc, #56]	; (800111c <display_update_conf+0x138>)
 80010e4:	2114      	movs	r1, #20
 80010e6:	f009 ffb3 	bl	800b050 <sniprintf>
		break;
 80010ea:	e006      	b.n	80010fa <display_update_conf+0x116>
	default:
		snprintf(buffer_dato, sizeof(buffer_dato), "Error: case def");
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <display_update_conf+0x13c>)
 80010f2:	2114      	movs	r1, #20
 80010f4:	4618      	mov	r0, r3
 80010f6:	f009 ffab 	bl	800b050 <sniprintf>
	}
	LCD_I2C_write_text(buffer_dato);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f8a9 	bl	8000256 <LCD_I2C_write_text>

}
 8001104:	bf00      	nop
 8001106:	3738      	adds	r7, #56	; 0x38
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	0800ba84 	.word	0x0800ba84
 8001110:	0800ba98 	.word	0x0800ba98
 8001114:	0800baac 	.word	0x0800baac
 8001118:	0800bac0 	.word	0x0800bac0
 800111c:	0800bad4 	.word	0x0800bad4
 8001120:	0800bae8 	.word	0x0800bae8

08001124 <display_update_stat>:

void display_update_stat(char modo_op, char *dato,uint32_t volt){
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b093      	sub	sp, #76	; 0x4c
 8001128:	af02      	add	r7, sp, #8
 800112a:	4603      	mov	r3, r0
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	73fb      	strb	r3, [r7, #15]
	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001138:	2300      	movs	r3, #0
 800113a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
 8001142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
	//uint32_t volt_convertido = 0;
	//volt_convertido=volt*FACTOR_ADC_VOLTAGE_mult;//122;
	//volt_convertido=volt_convertido/FACTOR_ADC_VOLTAGE_div;//100;

	snprintf(buffer_fun, sizeof(buffer_fun), "Modo C%s:", char_as_str);
 8001162:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001166:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800116a:	4a8d      	ldr	r2, [pc, #564]	; (80013a0 <display_update_stat+0x27c>)
 800116c:	2114      	movs	r1, #20
 800116e:	f009 ff6f 	bl	800b050 <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 8001172:	2001      	movs	r0, #1
 8001174:	f7fe fff2 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 8001178:	2000      	movs	r0, #0
 800117a:	f7fe ffef 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 800117e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f867 	bl	8000256 <LCD_I2C_write_text>

	switch(modo_op){//print del modo
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	3b43      	subs	r3, #67	; 0x43
 800118c:	2b13      	cmp	r3, #19
 800118e:	f200 80f8 	bhi.w	8001382 <display_update_stat+0x25e>
 8001192:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <display_update_stat+0x74>)
 8001194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001198:	080011e9 	.word	0x080011e9
 800119c:	08001383 	.word	0x08001383
 80011a0:	08001383 	.word	0x08001383
 80011a4:	08001383 	.word	0x08001383
 80011a8:	08001383 	.word	0x08001383
 80011ac:	08001383 	.word	0x08001383
 80011b0:	08001383 	.word	0x08001383
 80011b4:	08001383 	.word	0x08001383
 80011b8:	08001383 	.word	0x08001383
 80011bc:	08001383 	.word	0x08001383
 80011c0:	08001383 	.word	0x08001383
 80011c4:	08001383 	.word	0x08001383
 80011c8:	08001383 	.word	0x08001383
 80011cc:	08001313 	.word	0x08001313
 80011d0:	08001383 	.word	0x08001383
 80011d4:	08001291 	.word	0x08001291
 80011d8:	08001383 	.word	0x08001383
 80011dc:	08001383 	.word	0x08001383
 80011e0:	08001383 	.word	0x08001383
 80011e4:	08001259 	.word	0x08001259

	case 'C':
		LCD_I2C_cmd(LCD_LINEA2);
 80011e8:	20c0      	movs	r0, #192	; 0xc0
 80011ea:	f7fe ffb7 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]", (int)volt/100,(int)volt%100);//
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a6c      	ldr	r2, [pc, #432]	; (80013a4 <display_update_stat+0x280>)
 80011f2:	fb82 1203 	smull	r1, r2, r2, r3
 80011f6:	1152      	asrs	r2, r2, #5
 80011f8:	17db      	asrs	r3, r3, #31
 80011fa:	1ad4      	subs	r4, r2, r3
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4b69      	ldr	r3, [pc, #420]	; (80013a4 <display_update_stat+0x280>)
 8001200:	fb83 1302 	smull	r1, r3, r3, r2
 8001204:	1159      	asrs	r1, r3, #5
 8001206:	17d3      	asrs	r3, r2, #31
 8001208:	1acb      	subs	r3, r1, r3
 800120a:	2164      	movs	r1, #100	; 0x64
 800120c:	fb01 f303 	mul.w	r3, r1, r3
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	f107 0014 	add.w	r0, r7, #20
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	4623      	mov	r3, r4
 800121a:	4a63      	ldr	r2, [pc, #396]	; (80013a8 <display_update_stat+0x284>)
 800121c:	2114      	movs	r1, #20
 800121e:	f009 ff17 	bl	800b050 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f815 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 800122c:	2094      	movs	r0, #148	; 0x94
 800122e:	f7fe ff95 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Current: %s0 [mA]", dato);
 8001232:	f107 0014 	add.w	r0, r7, #20
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	4a5c      	ldr	r2, [pc, #368]	; (80013ac <display_update_stat+0x288>)
 800123a:	2114      	movs	r1, #20
 800123c:	f009 ff08 	bl	800b050 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f806 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 800124a:	20d4      	movs	r0, #212	; 0xd4
 800124c:	f7fe ff86 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[W]");
 8001250:	4857      	ldr	r0, [pc, #348]	; (80013b0 <display_update_stat+0x28c>)
 8001252:	f7ff f800 	bl	8000256 <LCD_I2C_write_text>

		break;
 8001256:	e09f      	b.n	8001398 <display_update_stat+0x274>
	case 'V':
		LCD_I2C_cmd(LCD_LINEA2);
 8001258:	20c0      	movs	r0, #192	; 0xc0
 800125a:	f7fe ff7f 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %s0 [mV]", dato);
 800125e:	f107 0014 	add.w	r0, r7, #20
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	4a53      	ldr	r2, [pc, #332]	; (80013b4 <display_update_stat+0x290>)
 8001266:	2114      	movs	r1, #20
 8001268:	f009 fef2 	bl	800b050 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4618      	mov	r0, r3
 8001272:	f7fe fff0 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8001276:	2094      	movs	r0, #148	; 0x94
 8001278:	f7fe ff70 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 800127c:	484e      	ldr	r0, [pc, #312]	; (80013b8 <display_update_stat+0x294>)
 800127e:	f7fe ffea 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8001282:	20d4      	movs	r0, #212	; 0xd4
 8001284:	f7fe ff6a 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[mW]");
 8001288:	484c      	ldr	r0, [pc, #304]	; (80013bc <display_update_stat+0x298>)
 800128a:	f7fe ffe4 	bl	8000256 <LCD_I2C_write_text>
		break;
 800128e:	e083      	b.n	8001398 <display_update_stat+0x274>
	case 'R':
		LCD_I2C_cmd(LCD_CLEAR);
 8001290:	2001      	movs	r0, #1
 8001292:	f7fe ff63 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_cmd(LCD_LINEA1);
 8001296:	2000      	movs	r0, #0
 8001298:	f7fe ff60 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Res: %s[mohm]", dato);
 800129c:	f107 0014 	add.w	r0, r7, #20
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4a47      	ldr	r2, [pc, #284]	; (80013c0 <display_update_stat+0x29c>)
 80012a4:	2114      	movs	r1, #20
 80012a6:	f009 fed3 	bl	800b050 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7fe ffd1 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA2);
 80012b4:	20c0      	movs	r0, #192	; 0xc0
 80012b6:	f7fe ff51 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]",  (int)volt/100,(int)volt%100);//
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a39      	ldr	r2, [pc, #228]	; (80013a4 <display_update_stat+0x280>)
 80012be:	fb82 1203 	smull	r1, r2, r2, r3
 80012c2:	1152      	asrs	r2, r2, #5
 80012c4:	17db      	asrs	r3, r3, #31
 80012c6:	1ad4      	subs	r4, r2, r3
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <display_update_stat+0x280>)
 80012cc:	fb83 1302 	smull	r1, r3, r3, r2
 80012d0:	1159      	asrs	r1, r3, #5
 80012d2:	17d3      	asrs	r3, r2, #31
 80012d4:	1acb      	subs	r3, r1, r3
 80012d6:	2164      	movs	r1, #100	; 0x64
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f107 0014 	add.w	r0, r7, #20
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	4623      	mov	r3, r4
 80012e6:	4a30      	ldr	r2, [pc, #192]	; (80013a8 <display_update_stat+0x284>)
 80012e8:	2114      	movs	r1, #20
 80012ea:	f009 feb1 	bl	800b050 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7fe ffaf 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 80012f8:	2094      	movs	r0, #148	; 0x94
 80012fa:	f7fe ff2f 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 80012fe:	482e      	ldr	r0, [pc, #184]	; (80013b8 <display_update_stat+0x294>)
 8001300:	f7fe ffa9 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8001304:	20d4      	movs	r0, #212	; 0xd4
 8001306:	f7fe ff29 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[mW]");
 800130a:	482c      	ldr	r0, [pc, #176]	; (80013bc <display_update_stat+0x298>)
 800130c:	f7fe ffa3 	bl	8000256 <LCD_I2C_write_text>
		break;
 8001310:	e042      	b.n	8001398 <display_update_stat+0x274>
	case 'P':
		LCD_I2C_cmd(LCD_LINEA2);
 8001312:	20c0      	movs	r0, #192	; 0xc0
 8001314:	f7fe ff22 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]",  (int)volt/100,(int)volt%100);//
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a22      	ldr	r2, [pc, #136]	; (80013a4 <display_update_stat+0x280>)
 800131c:	fb82 1203 	smull	r1, r2, r2, r3
 8001320:	1152      	asrs	r2, r2, #5
 8001322:	17db      	asrs	r3, r3, #31
 8001324:	1ad4      	subs	r4, r2, r3
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <display_update_stat+0x280>)
 800132a:	fb83 1302 	smull	r1, r3, r3, r2
 800132e:	1159      	asrs	r1, r3, #5
 8001330:	17d3      	asrs	r3, r2, #31
 8001332:	1acb      	subs	r3, r1, r3
 8001334:	2164      	movs	r1, #100	; 0x64
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f107 0014 	add.w	r0, r7, #20
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	4623      	mov	r3, r4
 8001344:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <display_update_stat+0x284>)
 8001346:	2114      	movs	r1, #20
 8001348:	f009 fe82 	bl	800b050 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4618      	mov	r0, r3
 8001352:	f7fe ff80 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8001356:	2094      	movs	r0, #148	; 0x94
 8001358:	f7fe ff00 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 800135c:	4816      	ldr	r0, [pc, #88]	; (80013b8 <display_update_stat+0x294>)
 800135e:	f7fe ff7a 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8001362:	20d4      	movs	r0, #212	; 0xd4
 8001364:	f7fe fefa 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Power: %s00 [mW]", dato);
 8001368:	f107 0014 	add.w	r0, r7, #20
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <display_update_stat+0x2a0>)
 8001370:	2114      	movs	r1, #20
 8001372:	f009 fe6d 	bl	800b050 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe ff6b 	bl	8000256 <LCD_I2C_write_text>

		break;
 8001380:	e00a      	b.n	8001398 <display_update_stat+0x274>
	default:
		LCD_I2C_cmd(LCD_LINEA1);
 8001382:	2000      	movs	r0, #0
 8001384:	f7fe feea 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Error: monit");
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <display_update_stat+0x2a4>)
 800138e:	2114      	movs	r1, #20
 8001390:	4618      	mov	r0, r3
 8001392:	f009 fe5d 	bl	800b050 <sniprintf>
	}

}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	3744      	adds	r7, #68	; 0x44
 800139c:	46bd      	mov	sp, r7
 800139e:	bd90      	pop	{r4, r7, pc}
 80013a0:	0800baf8 	.word	0x0800baf8
 80013a4:	51eb851f 	.word	0x51eb851f
 80013a8:	0800bb04 	.word	0x0800bb04
 80013ac:	0800ba98 	.word	0x0800ba98
 80013b0:	0800bb1c 	.word	0x0800bb1c
 80013b4:	0800baac 	.word	0x0800baac
 80013b8:	0800bb28 	.word	0x0800bb28
 80013bc:	0800bb38 	.word	0x0800bb38
 80013c0:	0800bb48 	.word	0x0800bb48
 80013c4:	0800bb58 	.word	0x0800bb58
 80013c8:	0800bb6c 	.word	0x0800bb6c

080013cc <modo_usb>:

void modo_usb(){
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b08d      	sub	sp, #52	; 0x34
 80013d0:	af02      	add	r7, sp, #8
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013d8:	4872      	ldr	r0, [pc, #456]	; (80015a4 <modo_usb+0x1d8>)
 80013da:	f001 fc64 	bl	8002ca6 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80013de:	2201      	movs	r2, #1
 80013e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e4:	4870      	ldr	r0, [pc, #448]	; (80015a8 <modo_usb+0x1dc>)
 80013e6:	f001 fc5e 	bl	8002ca6 <HAL_GPIO_WritePin>
uint16_t control_spi = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	843b      	strh	r3, [r7, #32]

int valor = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
char mode = 'C';
 80013f2:	2343      	movs	r3, #67	; 0x43
 80013f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
char str_aux[30]="";
 80013f8:	2300      	movs	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
 800140a:	615a      	str	r2, [r3, #20]
 800140c:	831a      	strh	r2, [r3, #24]
uint8_t flag_USB = 1;
 800140e:	2301      	movs	r3, #1
 8001410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
input_keypad=0;
 8001414:	4b65      	ldr	r3, [pc, #404]	; (80015ac <modo_usb+0x1e0>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
	while(flag_USB==1){
 800141a:	e0a4      	b.n	8001566 <modo_usb+0x19a>
  //lectura de datos USB
		if (buffer_usb[0]=='$' && buffer_usb[1]=='C' && buffer_usb[9]=='#') {//comando config
 800141c:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <modo_usb+0x1e4>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b24      	cmp	r3, #36	; 0x24
 8001422:	d140      	bne.n	80014a6 <modo_usb+0xda>
 8001424:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <modo_usb+0x1e4>)
 8001426:	785b      	ldrb	r3, [r3, #1]
 8001428:	2b43      	cmp	r3, #67	; 0x43
 800142a:	d13c      	bne.n	80014a6 <modo_usb+0xda>
 800142c:	4b60      	ldr	r3, [pc, #384]	; (80015b0 <modo_usb+0x1e4>)
 800142e:	7a5b      	ldrb	r3, [r3, #9]
 8001430:	2b23      	cmp	r3, #35	; 0x23
 8001432:	d138      	bne.n	80014a6 <modo_usb+0xda>
			sprintf(str, "$D,%c,%04d,%04d,%04d", mode,valor,(int)adc2use[0],(int)adc2use[1]);
 8001434:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001438:	4b5e      	ldr	r3, [pc, #376]	; (80015b4 <modo_usb+0x1e8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <modo_usb+0x1e8>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	9100      	str	r1, [sp, #0]
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	495b      	ldr	r1, [pc, #364]	; (80015b8 <modo_usb+0x1ec>)
 800144a:	485c      	ldr	r0, [pc, #368]	; (80015bc <modo_usb+0x1f0>)
 800144c:	f009 fe34 	bl	800b0b8 <siprintf>
			mode=buffer_usb[3];
 8001450:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <modo_usb+0x1e4>)
 8001452:	78db      	ldrb	r3, [r3, #3]
 8001454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			sprintf(str_aux, "%c%c%c%c",buffer_usb[5],buffer_usb[6],buffer_usb[7],buffer_usb[8]);
 8001458:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <modo_usb+0x1e4>)
 800145a:	795b      	ldrb	r3, [r3, #5]
 800145c:	4619      	mov	r1, r3
 800145e:	4b54      	ldr	r3, [pc, #336]	; (80015b0 <modo_usb+0x1e4>)
 8001460:	799b      	ldrb	r3, [r3, #6]
 8001462:	461c      	mov	r4, r3
 8001464:	4b52      	ldr	r3, [pc, #328]	; (80015b0 <modo_usb+0x1e4>)
 8001466:	79db      	ldrb	r3, [r3, #7]
 8001468:	461a      	mov	r2, r3
 800146a:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <modo_usb+0x1e4>)
 800146c:	7a1b      	ldrb	r3, [r3, #8]
 800146e:	4638      	mov	r0, r7
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	9200      	str	r2, [sp, #0]
 8001474:	4623      	mov	r3, r4
 8001476:	460a      	mov	r2, r1
 8001478:	4951      	ldr	r1, [pc, #324]	; (80015c0 <modo_usb+0x1f4>)
 800147a:	f009 fe1d 	bl	800b0b8 <siprintf>
			valor=atoi(str_aux);
 800147e:	463b      	mov	r3, r7
 8001480:	4618      	mov	r0, r3
 8001482:	f009 fd59 	bl	800af38 <atoi>
 8001486:	6278      	str	r0, [r7, #36]	; 0x24
			CDC_Transmit_FS((uint8_t*) str, strlen(str));
 8001488:	484c      	ldr	r0, [pc, #304]	; (80015bc <modo_usb+0x1f0>)
 800148a:	f7fe fe5f 	bl	800014c <strlen>
 800148e:	4603      	mov	r3, r0
 8001490:	b29b      	uxth	r3, r3
 8001492:	4619      	mov	r1, r3
 8001494:	4849      	ldr	r0, [pc, #292]	; (80015bc <modo_usb+0x1f0>)
 8001496:	f009 f971 	bl	800a77c <CDC_Transmit_FS>
			memset(buffer_usb, '\0',64);
 800149a:	2240      	movs	r2, #64	; 0x40
 800149c:	2100      	movs	r1, #0
 800149e:	4844      	ldr	r0, [pc, #272]	; (80015b0 <modo_usb+0x1e4>)
 80014a0:	f009 fe2a 	bl	800b0f8 <memset>
 80014a4:	e02b      	b.n	80014fe <modo_usb+0x132>

		}else if(buffer_usb[0]=='$' && buffer_usb[1]=='R' && buffer_usb[2]=='e' && buffer_usb[3]=='q'){//comando request
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <modo_usb+0x1e4>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b24      	cmp	r3, #36	; 0x24
 80014ac:	d127      	bne.n	80014fe <modo_usb+0x132>
 80014ae:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <modo_usb+0x1e4>)
 80014b0:	785b      	ldrb	r3, [r3, #1]
 80014b2:	2b52      	cmp	r3, #82	; 0x52
 80014b4:	d123      	bne.n	80014fe <modo_usb+0x132>
 80014b6:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <modo_usb+0x1e4>)
 80014b8:	789b      	ldrb	r3, [r3, #2]
 80014ba:	2b65      	cmp	r3, #101	; 0x65
 80014bc:	d11f      	bne.n	80014fe <modo_usb+0x132>
 80014be:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <modo_usb+0x1e4>)
 80014c0:	78db      	ldrb	r3, [r3, #3]
 80014c2:	2b71      	cmp	r3, #113	; 0x71
 80014c4:	d11b      	bne.n	80014fe <modo_usb+0x132>
			sprintf(str, "$D,%c,%04d,%04d,%04d", mode,valor,(int)adc2use[0],(int)adc2use[1]);
 80014c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <modo_usb+0x1e8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4619      	mov	r1, r3
 80014d0:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <modo_usb+0x1e8>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	9100      	str	r1, [sp, #0]
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	4937      	ldr	r1, [pc, #220]	; (80015b8 <modo_usb+0x1ec>)
 80014dc:	4837      	ldr	r0, [pc, #220]	; (80015bc <modo_usb+0x1f0>)
 80014de:	f009 fdeb 	bl	800b0b8 <siprintf>
			CDC_Transmit_FS((uint8_t*) str, strlen(str));
 80014e2:	4836      	ldr	r0, [pc, #216]	; (80015bc <modo_usb+0x1f0>)
 80014e4:	f7fe fe32 	bl	800014c <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4619      	mov	r1, r3
 80014ee:	4833      	ldr	r0, [pc, #204]	; (80015bc <modo_usb+0x1f0>)
 80014f0:	f009 f944 	bl	800a77c <CDC_Transmit_FS>
			memset(buffer_usb, '\0',64);
 80014f4:	2240      	movs	r2, #64	; 0x40
 80014f6:	2100      	movs	r1, #0
 80014f8:	482d      	ldr	r0, [pc, #180]	; (80015b0 <modo_usb+0x1e4>)
 80014fa:	f009 fdfd 	bl	800b0f8 <memset>
		}
  //lectura fin modo usb
		if(tipo_dato(input_keypad)==3){
 80014fe:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <modo_usb+0x1e0>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f814 	bl	8000530 <tipo_dato>
 8001508:	4603      	mov	r3, r0
 800150a:	2b03      	cmp	r3, #3
 800150c:	d102      	bne.n	8001514 <modo_usb+0x148>
			flag_USB=0;
 800150e:	2300      	movs	r3, #0
 8001510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		}
  //call a funciones de control y display
		if(flag_update_loop_control){
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <modo_usb+0x1f8>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d014      	beq.n	8001546 <modo_usb+0x17a>

			 control_spi=control_carga(mode,adc2use[0],adc2use[1],(uint16_t)valor);
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <modo_usb+0x1e8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b299      	uxth	r1, r3
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <modo_usb+0x1e8>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	b29a      	uxth	r2, r3
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	b29b      	uxth	r3, r3
 800152c:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 8001530:	f000 f934 	bl	800179c <control_carga>
 8001534:	4603      	mov	r3, r0
 8001536:	843b      	strh	r3, [r7, #32]
			 enviar_spi_dac(control_spi);
 8001538:	8c3b      	ldrh	r3, [r7, #32]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fcb6 	bl	8000eac <enviar_spi_dac>
			 flag_update_loop_control=0;
 8001540:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <modo_usb+0x1f8>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]

		  }
		  if(flag_update_display_1_seg){
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <modo_usb+0x1fc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00b      	beq.n	8001566 <modo_usb+0x19a>
			  display_update_running(mode,adc2use[0],adc2use[1]);
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <modo_usb+0x1e8>)
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <modo_usb+0x1e8>)
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f836 	bl	80015cc <display_update_running>
			  flag_update_display_1_seg=0;
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <modo_usb+0x1fc>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
	while(flag_USB==1){
 8001566:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800156a:	2b01      	cmp	r3, #1
 800156c:	f43f af56 	beq.w	800141c <modo_usb+0x50>
			  }
	}//fin while
	  input_keypad=0;
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <modo_usb+0x1e0>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
	  control_spi=0;
 8001576:	2300      	movs	r3, #0
 8001578:	843b      	strh	r3, [r7, #32]
	  enviar_spi_dac(control_spi);
 800157a:	8c3b      	ldrh	r3, [r7, #32]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fc95 	bl	8000eac <enviar_spi_dac>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);//led
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <modo_usb+0x1d8>)
 800158a:	f001 fb8c 	bl	8002ca6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);//cooler
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <modo_usb+0x1dc>)
 8001596:	f001 fb86 	bl	8002ca6 <HAL_GPIO_WritePin>
}//fin modo usb
 800159a:	bf00      	nop
 800159c:	372c      	adds	r7, #44	; 0x2c
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40011000 	.word	0x40011000
 80015a8:	40010c00 	.word	0x40010c00
 80015ac:	20000436 	.word	0x20000436
 80015b0:	200003d8 	.word	0x200003d8
 80015b4:	200003d0 	.word	0x200003d0
 80015b8:	0800bb7c 	.word	0x0800bb7c
 80015bc:	20000418 	.word	0x20000418
 80015c0:	0800bb94 	.word	0x0800bb94
 80015c4:	200003bb 	.word	0x200003bb
 80015c8:	200003ba 	.word	0x200003ba

080015cc <display_update_running>:

void display_update_running(char modo_op,uint32_t volt, uint32_t corriente){
 80015cc:	b590      	push	{r4, r7, lr}
 80015ce:	b095      	sub	sp, #84	; 0x54
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	4603      	mov	r3, r0
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	73fb      	strb	r3, [r7, #15]
	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
	uint32_t volt_convertido = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t corriente_convertido = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t potencia =0;
 8001612:	2300      	movs	r3, #0
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t resistencia =0;
 8001616:	2300      	movs	r3, #0
 8001618:	877b      	strh	r3, [r7, #58]	; 0x3a
	volt_convertido=volt*FACTOR_ADC_VOLTAGE_mult;//122;
	volt_convertido=volt_convertido/FACTOR_ADC_VOLTAGE_div;//100;
	corriente_convertido=corriente*FACTOR_ADC_30A_CURRENT_mult;//8437;
	corriente_convertido=corriente_convertido/FACTOR_ADC_30A_CURRENT_div;//10000;
	*/
	potencia = volt*corriente;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
	potencia=potencia/1000;
 8001624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001626:	4a54      	ldr	r2, [pc, #336]	; (8001778 <display_update_running+0x1ac>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	63fb      	str	r3, [r7, #60]	; 0x3c
	resistencia=volt/corriente;
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	fbb2 f3f3 	udiv	r3, r2, r3
 8001638:	877b      	strh	r3, [r7, #58]	; 0x3a


	LCD_I2C_cmd(LCD_CLEAR);
 800163a:	2001      	movs	r0, #1
 800163c:	f7fe fd8e 	bl	800015c <LCD_I2C_cmd>
	if(modo_op == 'R'){
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b52      	cmp	r3, #82	; 0x52
 8001644:	d11c      	bne.n	8001680 <display_update_running+0xb4>
		LCD_I2C_cmd(LCD_LINEA1);
 8001646:	2000      	movs	r0, #0
 8001648:	f7fe fd88 	bl	800015c <LCD_I2C_cmd>
		if(resistencia>4999)snprintf(buffer_dato, sizeof(buffer_dato), "Res: O.Lim");
 800164c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800164e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001652:	4293      	cmp	r3, r2
 8001654:	d907      	bls.n	8001666 <display_update_running+0x9a>
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4a48      	ldr	r2, [pc, #288]	; (800177c <display_update_running+0x1b0>)
 800165c:	2114      	movs	r1, #20
 800165e:	4618      	mov	r0, r3
 8001660:	f009 fcf6 	bl	800b050 <sniprintf>
 8001664:	e006      	b.n	8001674 <display_update_running+0xa8>
		else snprintf(buffer_dato, sizeof(buffer_dato), "Res: %d[ohm]", resistencia);
 8001666:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001668:	f107 0010 	add.w	r0, r7, #16
 800166c:	4a44      	ldr	r2, [pc, #272]	; (8001780 <display_update_running+0x1b4>)
 800166e:	2114      	movs	r1, #20
 8001670:	f009 fcee 	bl	800b050 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe fdec 	bl	8000256 <LCD_I2C_write_text>
 800167e:	e00f      	b.n	80016a0 <display_update_running+0xd4>
	}
	else{
		snprintf(buffer_fun, sizeof(buffer_fun), "Running Modo C%s:", char_as_str);
 8001680:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001684:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001688:	4a3e      	ldr	r2, [pc, #248]	; (8001784 <display_update_running+0x1b8>)
 800168a:	2114      	movs	r1, #20
 800168c:	f009 fce0 	bl	800b050 <sniprintf>
		LCD_I2C_cmd(LCD_LINEA1);
 8001690:	2000      	movs	r0, #0
 8001692:	f7fe fd63 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text(buffer_fun);
 8001696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fddb 	bl	8000256 <LCD_I2C_write_text>
	}
	LCD_I2C_cmd(LCD_LINEA2);
 80016a0:	20c0      	movs	r0, #192	; 0xc0
 80016a2:	f7fe fd5b 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]",  (int)volt/100,(int)volt%100);//
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	4a37      	ldr	r2, [pc, #220]	; (8001788 <display_update_running+0x1bc>)
 80016aa:	fb82 1203 	smull	r1, r2, r2, r3
 80016ae:	1152      	asrs	r2, r2, #5
 80016b0:	17db      	asrs	r3, r3, #31
 80016b2:	1ad4      	subs	r4, r2, r3
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	4b34      	ldr	r3, [pc, #208]	; (8001788 <display_update_running+0x1bc>)
 80016b8:	fb83 1302 	smull	r1, r3, r3, r2
 80016bc:	1159      	asrs	r1, r3, #5
 80016be:	17d3      	asrs	r3, r2, #31
 80016c0:	1acb      	subs	r3, r1, r3
 80016c2:	2164      	movs	r1, #100	; 0x64
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f107 0010 	add.w	r0, r7, #16
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	4623      	mov	r3, r4
 80016d2:	4a2e      	ldr	r2, [pc, #184]	; (800178c <display_update_running+0x1c0>)
 80016d4:	2114      	movs	r1, #20
 80016d6:	f009 fcbb 	bl	800b050 <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fdb9 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA3);
 80016e4:	2094      	movs	r0, #148	; 0x94
 80016e6:	f7fe fd39 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Current: %d.%02d [A]", (int)corriente/100,(int)corriente%100);//
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a26      	ldr	r2, [pc, #152]	; (8001788 <display_update_running+0x1bc>)
 80016ee:	fb82 1203 	smull	r1, r2, r2, r3
 80016f2:	1152      	asrs	r2, r2, #5
 80016f4:	17db      	asrs	r3, r3, #31
 80016f6:	1ad4      	subs	r4, r2, r3
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <display_update_running+0x1bc>)
 80016fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001700:	1159      	asrs	r1, r3, #5
 8001702:	17d3      	asrs	r3, r2, #31
 8001704:	1acb      	subs	r3, r1, r3
 8001706:	2164      	movs	r1, #100	; 0x64
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f107 0010 	add.w	r0, r7, #16
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4623      	mov	r3, r4
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <display_update_running+0x1c4>)
 8001718:	2114      	movs	r1, #20
 800171a:	f009 fc99 	bl	800b050 <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fd97 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA4);
 8001728:	20d4      	movs	r0, #212	; 0xd4
 800172a:	f7fe fd17 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Pot: %d.%d [W]", (int)potencia/10,(int)potencia%10);//
 800172e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001730:	4a18      	ldr	r2, [pc, #96]	; (8001794 <display_update_running+0x1c8>)
 8001732:	fb82 1203 	smull	r1, r2, r2, r3
 8001736:	1092      	asrs	r2, r2, #2
 8001738:	17db      	asrs	r3, r3, #31
 800173a:	1ad4      	subs	r4, r2, r3
 800173c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <display_update_running+0x1c8>)
 8001740:	fb83 2301 	smull	r2, r3, r3, r1
 8001744:	109a      	asrs	r2, r3, #2
 8001746:	17cb      	asrs	r3, r1, #31
 8001748:	1ad2      	subs	r2, r2, r3
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	1aca      	subs	r2, r1, r3
 8001754:	f107 0010 	add.w	r0, r7, #16
 8001758:	9200      	str	r2, [sp, #0]
 800175a:	4623      	mov	r3, r4
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <display_update_running+0x1cc>)
 800175e:	2114      	movs	r1, #20
 8001760:	f009 fc76 	bl	800b050 <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fd74 	bl	8000256 <LCD_I2C_write_text>
}
 800176e:	bf00      	nop
 8001770:	374c      	adds	r7, #76	; 0x4c
 8001772:	46bd      	mov	sp, r7
 8001774:	bd90      	pop	{r4, r7, pc}
 8001776:	bf00      	nop
 8001778:	10624dd3 	.word	0x10624dd3
 800177c:	0800bba0 	.word	0x0800bba0
 8001780:	0800bbac 	.word	0x0800bbac
 8001784:	0800bbbc 	.word	0x0800bbbc
 8001788:	51eb851f 	.word	0x51eb851f
 800178c:	0800bb04 	.word	0x0800bb04
 8001790:	0800bbd0 	.word	0x0800bbd0
 8001794:	66666667 	.word	0x66666667
 8001798:	0800bbe8 	.word	0x0800bbe8

0800179c <control_carga>:

uint16_t control_carga(char modo, uint16_t voltage, uint16_t current, uint16_t set_point){
 800179c:	b490      	push	{r4, r7}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4604      	mov	r4, r0
 80017a4:	4608      	mov	r0, r1
 80017a6:	4611      	mov	r1, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	71fb      	strb	r3, [r7, #7]
 80017ae:	4603      	mov	r3, r0
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]
 80017b6:	4613      	mov	r3, r2
 80017b8:	803b      	strh	r3, [r7, #0]
	uint32_t calculo = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
	uint16_t DAC_nuevo_valor = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	817b      	strh	r3, [r7, #10]
	volt_convertido=voltage*FACTOR_ADC_VOLTAGE_mult;//122;
	volt_convertido=volt_convertido/FACTOR_ADC_VOLTAGE_div;//100;
	corriente_convertido=current*FACTOR_ADC_30A_CURRENT_mult;//8437;
	corriente_convertido=corriente_convertido/FACTOR_ADC_30A_CURRENT_div;//10000;
	 */
	switch(modo){
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	3b43      	subs	r3, #67	; 0x43
 80017c6:	2b13      	cmp	r3, #19
 80017c8:	d871      	bhi.n	80018ae <control_carga+0x112>
 80017ca:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <control_carga+0x34>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	08001821 	.word	0x08001821
 80017d4:	080018af 	.word	0x080018af
 80017d8:	080018af 	.word	0x080018af
 80017dc:	080018af 	.word	0x080018af
 80017e0:	080018af 	.word	0x080018af
 80017e4:	080018af 	.word	0x080018af
 80017e8:	080018af 	.word	0x080018af
 80017ec:	080018af 	.word	0x080018af
 80017f0:	080018af 	.word	0x080018af
 80017f4:	080018af 	.word	0x080018af
 80017f8:	080018af 	.word	0x080018af
 80017fc:	080018af 	.word	0x080018af
 8001800:	080018af 	.word	0x080018af
 8001804:	08001845 	.word	0x08001845
 8001808:	080018af 	.word	0x080018af
 800180c:	08001879 	.word	0x08001879
 8001810:	080018af 	.word	0x080018af
 8001814:	080018af 	.word	0x080018af
 8001818:	080018af 	.word	0x080018af
 800181c:	0800183f 	.word	0x0800183f
	case 'C'://seteo directo
		calculo = set_point * 4095;//dac resol
 8001820:	883a      	ldrh	r2, [r7, #0]
 8001822:	4613      	mov	r3, r2
 8001824:	031b      	lsls	r3, r3, #12
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
		calculo = calculo /N_TRANSISTORES; //div num MOSFET
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	60fb      	str	r3, [r7, #12]
		calculo = calculo /I_MAX_x_TRANSISTOR;//div corriente max por cada mosfet 250->2500 mA
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a24      	ldr	r2, [pc, #144]	; (80018c4 <control_carga+0x128>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	095b      	lsrs	r3, r3, #5
 800183a:	60fb      	str	r3, [r7, #12]
		break;
 800183c:	e039      	b.n	80018b2 <control_carga+0x116>
	case 'V':
		//rev
		calculo = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
		break;
 8001842:	e036      	b.n	80018b2 <control_carga+0x116>
	case 'P':
		calculo = set_point * 1000;// agregamos ceros para que se alinee la coma y el resultado sea con las cifras correspondientes
 8001844:	883b      	ldrh	r3, [r7, #0]
 8001846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	60fb      	str	r3, [r7, #12]
		calculo=calculo/voltage;//P/V=I
 8001850:	88bb      	ldrh	r3, [r7, #4]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	60fb      	str	r3, [r7, #12]
		calculo = calculo * 4095;//dac resol
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4613      	mov	r3, r2
 800185e:	031b      	lsls	r3, r3, #12
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
		calculo = calculo /N_TRANSISTORES; //div num MOSFET
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	60fb      	str	r3, [r7, #12]
		calculo = calculo /I_MAX_x_TRANSISTOR;//div corriente max por cada mosfet 250->2500 mA
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <control_carga+0x128>)
 800186e:	fba2 2303 	umull	r2, r3, r2, r3
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	60fb      	str	r3, [r7, #12]
		break;
 8001876:	e01c      	b.n	80018b2 <control_carga+0x116>
	case 'R':
		calculo=voltage*1000;//ceros para acomodar la coma
 8001878:	88bb      	ldrh	r3, [r7, #4]
 800187a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	60fb      	str	r3, [r7, #12]
		calculo=voltage/set_point;//por ley de ohm
 8001884:	88ba      	ldrh	r2, [r7, #4]
 8001886:	883b      	ldrh	r3, [r7, #0]
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	b29b      	uxth	r3, r3
 800188e:	60fb      	str	r3, [r7, #12]
		calculo = calculo * 4095;//dac resol
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4613      	mov	r3, r2
 8001894:	031b      	lsls	r3, r3, #12
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
		calculo = calculo /N_TRANSISTORES; //div num MOSFET
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
		calculo = calculo /I_MAX_x_TRANSISTOR;//div corriente max por cada mosfet 250->2500 mA
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <control_carga+0x128>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	095b      	lsrs	r3, r3, #5
 80018aa:	60fb      	str	r3, [r7, #12]
		break;
 80018ac:	e001      	b.n	80018b2 <control_carga+0x116>
	default:
		calculo=0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]

	}
	DAC_nuevo_valor=(uint16_t)calculo;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	817b      	strh	r3, [r7, #10]
	return DAC_nuevo_valor;
 80018b6:	897b      	ldrh	r3, [r7, #10]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc90      	pop	{r4, r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	10624dd3 	.word	0x10624dd3

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <Error_Handler+0x8>
	...

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_MspInit+0x5c>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_MspInit+0x5c>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_MspInit+0x5c>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_MspInit+0x5c>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_MspInit+0x5c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_MspInit+0x5c>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_MspInit+0x60>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_MspInit+0x60>)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000

08001938 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a28      	ldr	r2, [pc, #160]	; (80019f4 <HAL_ADC_MspInit+0xbc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d149      	bne.n	80019ec <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <HAL_ADC_MspInit+0xc0>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a26      	ldr	r2, [pc, #152]	; (80019f8 <HAL_ADC_MspInit+0xc0>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_ADC_MspInit+0xc0>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_ADC_MspInit+0xc0>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <HAL_ADC_MspInit+0xc0>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_ADC_MspInit+0xc0>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001988:	231e      	movs	r3, #30
 800198a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198c:	2303      	movs	r3, #3
 800198e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4619      	mov	r1, r3
 8001996:	4819      	ldr	r0, [pc, #100]	; (80019fc <HAL_ADC_MspInit+0xc4>)
 8001998:	f000 ffea 	bl	8002970 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_ADC_MspInit+0xc8>)
 800199e:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_ADC_MspInit+0xcc>)
 80019a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_ADC_MspInit+0xc8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_ADC_MspInit+0xc8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_ADC_MspInit+0xc8>)
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_ADC_MspInit+0xc8>)
 80019b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_ADC_MspInit+0xc8>)
 80019be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_ADC_MspInit+0xc8>)
 80019c6:	2220      	movs	r2, #32
 80019c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <HAL_ADC_MspInit+0xc8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019d0:	480b      	ldr	r0, [pc, #44]	; (8001a00 <HAL_ADC_MspInit+0xc8>)
 80019d2:	f000 fee5 	bl	80027a0 <HAL_DMA_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80019dc:	f7ff ff74 	bl	80018c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_ADC_MspInit+0xc8>)
 80019e4:	621a      	str	r2, [r3, #32]
 80019e6:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_ADC_MspInit+0xc8>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40012400 	.word	0x40012400
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010800 	.word	0x40010800
 8001a00:	20000238 	.word	0x20000238
 8001a04:	40020008 	.word	0x40020008

08001a08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <HAL_I2C_MspInit+0x70>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d123      	bne.n	8001a70 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_I2C_MspInit+0x74>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <HAL_I2C_MspInit+0x74>)
 8001a2e:	f043 0308 	orr.w	r3, r3, #8
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_I2C_MspInit+0x74>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a40:	23c0      	movs	r3, #192	; 0xc0
 8001a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a44:	2312      	movs	r3, #18
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	4619      	mov	r1, r3
 8001a52:	480b      	ldr	r0, [pc, #44]	; (8001a80 <HAL_I2C_MspInit+0x78>)
 8001a54:	f000 ff8c 	bl	8002970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_I2C_MspInit+0x74>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <HAL_I2C_MspInit+0x74>)
 8001a5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a62:	61d3      	str	r3, [r2, #28]
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_I2C_MspInit+0x74>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a70:	bf00      	nop
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40005400 	.word	0x40005400
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010c00 	.word	0x40010c00

08001a84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <HAL_SPI_MspInit+0x70>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d123      	bne.n	8001aec <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_SPI_MspInit+0x74>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <HAL_SPI_MspInit+0x74>)
 8001aaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_SPI_MspInit+0x74>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_SPI_MspInit+0x74>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <HAL_SPI_MspInit+0x74>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_SPI_MspInit+0x74>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ad4:	23a0      	movs	r3, #160	; 0xa0
 8001ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <HAL_SPI_MspInit+0x78>)
 8001ae8:	f000 ff42 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001aec:	bf00      	nop
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40013000 	.word	0x40013000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010800 	.word	0x40010800

08001b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b10:	d114      	bne.n	8001b3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	61d3      	str	r3, [r2, #28]
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	201c      	movs	r0, #28
 8001b30:	f000 fdff 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b34:	201c      	movs	r0, #28
 8001b36:	f000 fe18 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b3a:	e018      	b.n	8001b6e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <HAL_TIM_Base_MspInit+0x7c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d113      	bne.n	8001b6e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	61d3      	str	r3, [r2, #28]
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	201d      	movs	r0, #29
 8001b64:	f000 fde5 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b68:	201d      	movs	r0, #29
 8001b6a:	f000 fdfe 	bl	800276a <HAL_NVIC_EnableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40000400 	.word	0x40000400

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler+0x4>

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc6:	f000 f8d1 	bl	8001d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001bd6:	f001 fe7e 	bl	80038d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20001108 	.word	0x20001108

08001be4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001be8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bec:	f001 f88c 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <TIM2_IRQHandler+0x10>)
 8001bfa:	f004 fa83 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000328 	.word	0x20000328

08001c08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <TIM3_IRQHandler+0x10>)
 8001c0e:	f004 fa79 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000370 	.word	0x20000370

08001c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <_sbrk+0x5c>)
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <_sbrk+0x60>)
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <_sbrk+0x64>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <_sbrk+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d207      	bcs.n	8001c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c4c:	f009 fa5c 	bl	800b108 <__errno>
 8001c50:	4603      	mov	r3, r0
 8001c52:	220c      	movs	r2, #12
 8001c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e009      	b.n	8001c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <_sbrk+0x64>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <_sbrk+0x64>)
 8001c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20005000 	.word	0x20005000
 8001c7c:	00000400 	.word	0x00000400
 8001c80:	20000438 	.word	0x20000438
 8001c84:	20001760 	.word	0x20001760

08001c88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c94:	f7ff fff8 	bl	8001c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c9a:	490c      	ldr	r1, [pc, #48]	; (8001ccc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cae:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cb0:	4c09      	ldr	r4, [pc, #36]	; (8001cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cbe:	f009 fa29 	bl	800b114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cc2:	f7fe fc5d 	bl	8000580 <main>
  bx lr
 8001cc6:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ccc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001cd0:	0800bda8 	.word	0x0800bda8
  ldr r2, =_sbss
 8001cd4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001cd8:	20001760 	.word	0x20001760

08001cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC1_2_IRQHandler>
	...

08001ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_Init+0x28>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <HAL_Init+0x28>)
 8001cea:	f043 0310 	orr.w	r3, r3, #16
 8001cee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f000 fd13 	bl	800271c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	f000 f808 	bl	8001d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfc:	f7ff fdea 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40022000 	.word	0x40022000

08001d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x54>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_InitTick+0x58>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fd2b 	bl	8002786 <HAL_SYSTICK_Config>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00e      	b.n	8001d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d80a      	bhi.n	8001d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f000 fcf3 	bl	8002732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <HAL_InitTick+0x5c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000020 	.word	0x20000020
 8001d64:	20000028 	.word	0x20000028
 8001d68:	20000024 	.word	0x20000024

08001d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_IncTick+0x1c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_IncTick+0x20>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <HAL_IncTick+0x20>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000028 	.word	0x20000028
 8001d8c:	2000043c 	.word	0x2000043c

08001d90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return uwTick;
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <HAL_GetTick+0x10>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	2000043c 	.word	0x2000043c

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff fff0 	bl	8001d90 <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffe0 	bl	8001d90 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000028 	.word	0x20000028

08001dec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0be      	b.n	8001f8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fd84 	bl	8001938 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 faff 	bl	8002434 <ADC_ConversionStop_Disable>
 8001e36:	4603      	mov	r3, r0
 8001e38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 8099 	bne.w	8001f7a <HAL_ADC_Init+0x18e>
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 8095 	bne.w	8001f7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e58:	f023 0302 	bic.w	r3, r3, #2
 8001e5c:	f043 0202 	orr.w	r2, r3, #2
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7b1b      	ldrb	r3, [r3, #12]
 8001e72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e84:	d003      	beq.n	8001e8e <HAL_ADC_Init+0xa2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d102      	bne.n	8001e94 <HAL_ADC_Init+0xa8>
 8001e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e92:	e000      	b.n	8001e96 <HAL_ADC_Init+0xaa>
 8001e94:	2300      	movs	r3, #0
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7d1b      	ldrb	r3, [r3, #20]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d119      	bne.n	8001ed8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7b1b      	ldrb	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	035a      	lsls	r2, r3, #13
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e00b      	b.n	8001ed8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	f043 0220 	orr.w	r2, r3, #32
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	f043 0201 	orr.w	r2, r3, #1
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <HAL_ADC_Init+0x1a8>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f08:	d003      	beq.n	8001f12 <HAL_ADC_Init+0x126>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d104      	bne.n	8001f1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	051b      	lsls	r3, r3, #20
 8001f1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_ADC_Init+0x1ac>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10b      	bne.n	8001f58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f56:	e018      	b.n	8001f8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	f023 0312 	bic.w	r3, r3, #18
 8001f60:	f043 0210 	orr.w	r2, r3, #16
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f78:	e007      	b.n	8001f8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	f043 0210 	orr.w	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	ffe1f7fd 	.word	0xffe1f7fd
 8001f98:	ff1f0efe 	.word	0xff1f0efe

08001f9c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a64      	ldr	r2, [pc, #400]	; (8002144 <HAL_ADC_Start_DMA+0x1a8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d004      	beq.n	8001fc0 <HAL_ADC_Start_DMA+0x24>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a63      	ldr	r2, [pc, #396]	; (8002148 <HAL_ADC_Start_DMA+0x1ac>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d106      	bne.n	8001fce <HAL_ADC_Start_DMA+0x32>
 8001fc0:	4b60      	ldr	r3, [pc, #384]	; (8002144 <HAL_ADC_Start_DMA+0x1a8>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f040 80b3 	bne.w	8002134 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_Start_DMA+0x40>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e0ae      	b.n	800213a <HAL_ADC_Start_DMA+0x19e>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f9cb 	bl	8002380 <ADC_Enable>
 8001fea:	4603      	mov	r3, r0
 8001fec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 809a 	bne.w	800212a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a4e      	ldr	r2, [pc, #312]	; (8002148 <HAL_ADC_Start_DMA+0x1ac>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d105      	bne.n	8002020 <HAL_ADC_Start_DMA+0x84>
 8002014:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <HAL_ADC_Start_DMA+0x1a8>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d115      	bne.n	800204c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002036:	2b00      	cmp	r3, #0
 8002038:	d026      	beq.n	8002088 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002042:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800204a:	e01d      	b.n	8002088 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a39      	ldr	r2, [pc, #228]	; (8002144 <HAL_ADC_Start_DMA+0x1a8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d004      	beq.n	800206c <HAL_ADC_Start_DMA+0xd0>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a38      	ldr	r2, [pc, #224]	; (8002148 <HAL_ADC_Start_DMA+0x1ac>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d10d      	bne.n	8002088 <HAL_ADC_Start_DMA+0xec>
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_ADC_Start_DMA+0x1a8>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002080:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	f023 0206 	bic.w	r2, r3, #6
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
 80020a0:	e002      	b.n	80020a8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <HAL_ADC_Start_DMA+0x1b0>)
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a24      	ldr	r2, [pc, #144]	; (8002150 <HAL_ADC_Start_DMA+0x1b4>)
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a23      	ldr	r2, [pc, #140]	; (8002154 <HAL_ADC_Start_DMA+0x1b8>)
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0202 	mvn.w	r2, #2
 80020d0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020e0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a18      	ldr	r0, [r3, #32]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	334c      	adds	r3, #76	; 0x4c
 80020ec:	4619      	mov	r1, r3
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f000 fbaf 	bl	8002854 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002100:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002104:	d108      	bne.n	8002118 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002114:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002116:	e00f      	b.n	8002138 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002126:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002128:	e006      	b.n	8002138 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002132:	e001      	b.n	8002138 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002138:	7dfb      	ldrb	r3, [r7, #23]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40012400 	.word	0x40012400
 8002148:	40012800 	.word	0x40012800
 800214c:	080024b7 	.word	0x080024b7
 8002150:	08002533 	.word	0x08002533
 8002154:	0800254f 	.word	0x0800254f

08002158 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
	...

08002190 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x20>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e0dc      	b.n	800236a <HAL_ADC_ConfigChannel+0x1da>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b06      	cmp	r3, #6
 80021be:	d81c      	bhi.n	80021fa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3b05      	subs	r3, #5
 80021d2:	221f      	movs	r2, #31
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	4019      	ands	r1, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3b05      	subs	r3, #5
 80021ec:	fa00 f203 	lsl.w	r2, r0, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34
 80021f8:	e03c      	b.n	8002274 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	d81c      	bhi.n	800223c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	3b23      	subs	r3, #35	; 0x23
 8002214:	221f      	movs	r2, #31
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	4019      	ands	r1, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3b23      	subs	r3, #35	; 0x23
 800222e:	fa00 f203 	lsl.w	r2, r0, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	631a      	str	r2, [r3, #48]	; 0x30
 800223a:	e01b      	b.n	8002274 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b41      	subs	r3, #65	; 0x41
 800224e:	221f      	movs	r2, #31
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	4019      	ands	r1, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	3b41      	subs	r3, #65	; 0x41
 8002268:	fa00 f203 	lsl.w	r2, r0, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b09      	cmp	r3, #9
 800227a:	d91c      	bls.n	80022b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68d9      	ldr	r1, [r3, #12]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	3b1e      	subs	r3, #30
 800228e:	2207      	movs	r2, #7
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	4019      	ands	r1, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6898      	ldr	r0, [r3, #8]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	3b1e      	subs	r3, #30
 80022a8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	60da      	str	r2, [r3, #12]
 80022b4:	e019      	b.n	80022ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6919      	ldr	r1, [r3, #16]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	2207      	movs	r2, #7
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	4019      	ands	r1, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6898      	ldr	r0, [r3, #8]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4613      	mov	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4413      	add	r3, r2
 80022de:	fa00 f203 	lsl.w	r2, r0, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d003      	beq.n	80022fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022f6:	2b11      	cmp	r3, #17
 80022f8:	d132      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_ADC_ConfigChannel+0x1e4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d125      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d126      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002320:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b10      	cmp	r3, #16
 8002328:	d11a      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_ADC_ConfigChannel+0x1e8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a13      	ldr	r2, [pc, #76]	; (800237c <HAL_ADC_ConfigChannel+0x1ec>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	0c9a      	lsrs	r2, r3, #18
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002340:	e002      	b.n	8002348 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3b01      	subs	r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f9      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x1b2>
 800234e:	e007      	b.n	8002360 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	40012400 	.word	0x40012400
 8002378:	20000020 	.word	0x20000020
 800237c:	431bde83 	.word	0x431bde83

08002380 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d040      	beq.n	8002420 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023ae:	4b1f      	ldr	r3, [pc, #124]	; (800242c <ADC_Enable+0xac>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a1f      	ldr	r2, [pc, #124]	; (8002430 <ADC_Enable+0xb0>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	0c9b      	lsrs	r3, r3, #18
 80023ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023bc:	e002      	b.n	80023c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023ca:	f7ff fce1 	bl	8001d90 <HAL_GetTick>
 80023ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023d0:	e01f      	b.n	8002412 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023d2:	f7ff fcdd 	bl	8001d90 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d918      	bls.n	8002412 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d011      	beq.n	8002412 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	f043 0210 	orr.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e007      	b.n	8002422 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d1d8      	bne.n	80023d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000020 	.word	0x20000020
 8002430:	431bde83 	.word	0x431bde83

08002434 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d12e      	bne.n	80024ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0201 	bic.w	r2, r2, #1
 800245c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800245e:	f7ff fc97 	bl	8001d90 <HAL_GetTick>
 8002462:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002464:	e01b      	b.n	800249e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002466:	f7ff fc93 	bl	8001d90 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d914      	bls.n	800249e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10d      	bne.n	800249e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	f043 0210 	orr.w	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e007      	b.n	80024ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d0dc      	beq.n	8002466 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d127      	bne.n	8002520 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024ea:	d115      	bne.n	8002518 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d111      	bne.n	8002518 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7ff fe1d 	bl	8002158 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800251e:	e004      	b.n	800252a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7ff fe12 	bl	800216a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	f043 0204 	orr.w	r2, r3, #4
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f7ff fe01 	bl	800217c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	db0b      	blt.n	8002612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4906      	ldr	r1, [pc, #24]	; (800261c <__NVIC_EnableIRQ+0x34>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2001      	movs	r0, #1
 800260a:	fa00 f202 	lsl.w	r2, r0, r2
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e8:	d301      	bcc.n	80026ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00f      	b.n	800270e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <SysTick_Config+0x40>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f6:	210f      	movs	r1, #15
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f7ff ff90 	bl	8002620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <SysTick_Config+0x40>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002706:	4b04      	ldr	r3, [pc, #16]	; (8002718 <SysTick_Config+0x40>)
 8002708:	2207      	movs	r2, #7
 800270a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	e000e010 	.word	0xe000e010

0800271c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff2d 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002744:	f7ff ff42 	bl	80025cc <__NVIC_GetPriorityGrouping>
 8002748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7ff ff90 	bl	8002674 <NVIC_EncodePriority>
 8002754:	4602      	mov	r2, r0
 8002756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff5f 	bl	8002620 <__NVIC_SetPriority>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff35 	bl	80025e8 <__NVIC_EnableIRQ>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffa2 	bl	80026d8 <SysTick_Config>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e043      	b.n	800283e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_DMA_Init+0xa8>)
 80027be:	4413      	add	r3, r2
 80027c0:	4a22      	ldr	r2, [pc, #136]	; (800284c <HAL_DMA_Init+0xac>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	009a      	lsls	r2, r3, #2
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_DMA_Init+0xb0>)
 80027d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002804:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002810:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	bffdfff8 	.word	0xbffdfff8
 800284c:	cccccccd 	.word	0xcccccccd
 8002850:	40020000 	.word	0x40020000

08002854 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_DMA_Start_IT+0x20>
 8002870:	2302      	movs	r3, #2
 8002872:	e04b      	b.n	800290c <HAL_DMA_Start_IT+0xb8>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d13a      	bne.n	80028fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f831 	bl	8002914 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 020e 	orr.w	r2, r2, #14
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e00f      	b.n	80028ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0204 	bic.w	r2, r2, #4
 80028da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 020a 	orr.w	r2, r2, #10
 80028ea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	e005      	b.n	800290a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800290a:	7dfb      	ldrb	r3, [r7, #23]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b10      	cmp	r3, #16
 8002940:	d108      	bne.n	8002954 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002952:	e007      	b.n	8002964 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	60da      	str	r2, [r3, #12]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
	...

08002970 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002970:	b480      	push	{r7}
 8002972:	b08b      	sub	sp, #44	; 0x2c
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800297a:	2300      	movs	r3, #0
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800297e:	2300      	movs	r3, #0
 8002980:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002982:	e169      	b.n	8002c58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002984:	2201      	movs	r2, #1
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	429a      	cmp	r2, r3
 800299e:	f040 8158 	bne.w	8002c52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4a9a      	ldr	r2, [pc, #616]	; (8002c10 <HAL_GPIO_Init+0x2a0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d05e      	beq.n	8002a6a <HAL_GPIO_Init+0xfa>
 80029ac:	4a98      	ldr	r2, [pc, #608]	; (8002c10 <HAL_GPIO_Init+0x2a0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d875      	bhi.n	8002a9e <HAL_GPIO_Init+0x12e>
 80029b2:	4a98      	ldr	r2, [pc, #608]	; (8002c14 <HAL_GPIO_Init+0x2a4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d058      	beq.n	8002a6a <HAL_GPIO_Init+0xfa>
 80029b8:	4a96      	ldr	r2, [pc, #600]	; (8002c14 <HAL_GPIO_Init+0x2a4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d86f      	bhi.n	8002a9e <HAL_GPIO_Init+0x12e>
 80029be:	4a96      	ldr	r2, [pc, #600]	; (8002c18 <HAL_GPIO_Init+0x2a8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d052      	beq.n	8002a6a <HAL_GPIO_Init+0xfa>
 80029c4:	4a94      	ldr	r2, [pc, #592]	; (8002c18 <HAL_GPIO_Init+0x2a8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d869      	bhi.n	8002a9e <HAL_GPIO_Init+0x12e>
 80029ca:	4a94      	ldr	r2, [pc, #592]	; (8002c1c <HAL_GPIO_Init+0x2ac>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d04c      	beq.n	8002a6a <HAL_GPIO_Init+0xfa>
 80029d0:	4a92      	ldr	r2, [pc, #584]	; (8002c1c <HAL_GPIO_Init+0x2ac>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d863      	bhi.n	8002a9e <HAL_GPIO_Init+0x12e>
 80029d6:	4a92      	ldr	r2, [pc, #584]	; (8002c20 <HAL_GPIO_Init+0x2b0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d046      	beq.n	8002a6a <HAL_GPIO_Init+0xfa>
 80029dc:	4a90      	ldr	r2, [pc, #576]	; (8002c20 <HAL_GPIO_Init+0x2b0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d85d      	bhi.n	8002a9e <HAL_GPIO_Init+0x12e>
 80029e2:	2b12      	cmp	r3, #18
 80029e4:	d82a      	bhi.n	8002a3c <HAL_GPIO_Init+0xcc>
 80029e6:	2b12      	cmp	r3, #18
 80029e8:	d859      	bhi.n	8002a9e <HAL_GPIO_Init+0x12e>
 80029ea:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <HAL_GPIO_Init+0x80>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002a6b 	.word	0x08002a6b
 80029f4:	08002a45 	.word	0x08002a45
 80029f8:	08002a57 	.word	0x08002a57
 80029fc:	08002a99 	.word	0x08002a99
 8002a00:	08002a9f 	.word	0x08002a9f
 8002a04:	08002a9f 	.word	0x08002a9f
 8002a08:	08002a9f 	.word	0x08002a9f
 8002a0c:	08002a9f 	.word	0x08002a9f
 8002a10:	08002a9f 	.word	0x08002a9f
 8002a14:	08002a9f 	.word	0x08002a9f
 8002a18:	08002a9f 	.word	0x08002a9f
 8002a1c:	08002a9f 	.word	0x08002a9f
 8002a20:	08002a9f 	.word	0x08002a9f
 8002a24:	08002a9f 	.word	0x08002a9f
 8002a28:	08002a9f 	.word	0x08002a9f
 8002a2c:	08002a9f 	.word	0x08002a9f
 8002a30:	08002a9f 	.word	0x08002a9f
 8002a34:	08002a4d 	.word	0x08002a4d
 8002a38:	08002a61 	.word	0x08002a61
 8002a3c:	4a79      	ldr	r2, [pc, #484]	; (8002c24 <HAL_GPIO_Init+0x2b4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a42:	e02c      	b.n	8002a9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	623b      	str	r3, [r7, #32]
          break;
 8002a4a:	e029      	b.n	8002aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	3304      	adds	r3, #4
 8002a52:	623b      	str	r3, [r7, #32]
          break;
 8002a54:	e024      	b.n	8002aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	623b      	str	r3, [r7, #32]
          break;
 8002a5e:	e01f      	b.n	8002aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	330c      	adds	r3, #12
 8002a66:	623b      	str	r3, [r7, #32]
          break;
 8002a68:	e01a      	b.n	8002aa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a72:	2304      	movs	r3, #4
 8002a74:	623b      	str	r3, [r7, #32]
          break;
 8002a76:	e013      	b.n	8002aa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d105      	bne.n	8002a8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a80:	2308      	movs	r3, #8
 8002a82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	611a      	str	r2, [r3, #16]
          break;
 8002a8a:	e009      	b.n	8002aa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	615a      	str	r2, [r3, #20]
          break;
 8002a96:	e003      	b.n	8002aa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	623b      	str	r3, [r7, #32]
          break;
 8002a9c:	e000      	b.n	8002aa0 <HAL_GPIO_Init+0x130>
          break;
 8002a9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2bff      	cmp	r3, #255	; 0xff
 8002aa4:	d801      	bhi.n	8002aaa <HAL_GPIO_Init+0x13a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	e001      	b.n	8002aae <HAL_GPIO_Init+0x13e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2bff      	cmp	r3, #255	; 0xff
 8002ab4:	d802      	bhi.n	8002abc <HAL_GPIO_Init+0x14c>
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	e002      	b.n	8002ac2 <HAL_GPIO_Init+0x152>
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	3b08      	subs	r3, #8
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	210f      	movs	r1, #15
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	6a39      	ldr	r1, [r7, #32]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8002adc:	431a      	orrs	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80b1 	beq.w	8002c52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002af0:	4b4d      	ldr	r3, [pc, #308]	; (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	4a4c      	ldr	r2, [pc, #304]	; (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6193      	str	r3, [r2, #24]
 8002afc:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <HAL_GPIO_Init+0x2b8>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b08:	4a48      	ldr	r2, [pc, #288]	; (8002c2c <HAL_GPIO_Init+0x2bc>)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	089b      	lsrs	r3, r3, #2
 8002b0e:	3302      	adds	r3, #2
 8002b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	220f      	movs	r2, #15
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a40      	ldr	r2, [pc, #256]	; (8002c30 <HAL_GPIO_Init+0x2c0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d013      	beq.n	8002b5c <HAL_GPIO_Init+0x1ec>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a3f      	ldr	r2, [pc, #252]	; (8002c34 <HAL_GPIO_Init+0x2c4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00d      	beq.n	8002b58 <HAL_GPIO_Init+0x1e8>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a3e      	ldr	r2, [pc, #248]	; (8002c38 <HAL_GPIO_Init+0x2c8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d007      	beq.n	8002b54 <HAL_GPIO_Init+0x1e4>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a3d      	ldr	r2, [pc, #244]	; (8002c3c <HAL_GPIO_Init+0x2cc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_GPIO_Init+0x1e0>
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e006      	b.n	8002b5e <HAL_GPIO_Init+0x1ee>
 8002b50:	2304      	movs	r3, #4
 8002b52:	e004      	b.n	8002b5e <HAL_GPIO_Init+0x1ee>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e002      	b.n	8002b5e <HAL_GPIO_Init+0x1ee>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_GPIO_Init+0x1ee>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	f002 0203 	and.w	r2, r2, #3
 8002b64:	0092      	lsls	r2, r2, #2
 8002b66:	4093      	lsls	r3, r2
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b6e:	492f      	ldr	r1, [pc, #188]	; (8002c2c <HAL_GPIO_Init+0x2bc>)
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	3302      	adds	r3, #2
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d006      	beq.n	8002b96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b88:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	492c      	ldr	r1, [pc, #176]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
 8002b94:	e006      	b.n	8002ba4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b96:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	4928      	ldr	r1, [pc, #160]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d006      	beq.n	8002bbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bb0:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	4922      	ldr	r1, [pc, #136]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60cb      	str	r3, [r1, #12]
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bbe:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	491e      	ldr	r1, [pc, #120]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d006      	beq.n	8002be6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4918      	ldr	r1, [pc, #96]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]
 8002be4:	e006      	b.n	8002bf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	4914      	ldr	r1, [pc, #80]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d021      	beq.n	8002c44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	490e      	ldr	r1, [pc, #56]	; (8002c40 <HAL_GPIO_Init+0x2d0>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]
 8002c0c:	e021      	b.n	8002c52 <HAL_GPIO_Init+0x2e2>
 8002c0e:	bf00      	nop
 8002c10:	10320000 	.word	0x10320000
 8002c14:	10310000 	.word	0x10310000
 8002c18:	10220000 	.word	0x10220000
 8002c1c:	10210000 	.word	0x10210000
 8002c20:	10120000 	.word	0x10120000
 8002c24:	10110000 	.word	0x10110000
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	40010800 	.word	0x40010800
 8002c34:	40010c00 	.word	0x40010c00
 8002c38:	40011000 	.word	0x40011000
 8002c3c:	40011400 	.word	0x40011400
 8002c40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_GPIO_Init+0x304>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	4909      	ldr	r1, [pc, #36]	; (8002c74 <HAL_GPIO_Init+0x304>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	3301      	adds	r3, #1
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f47f ae8e 	bne.w	8002984 <HAL_GPIO_Init+0x14>
  }
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	372c      	adds	r7, #44	; 0x2c
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	40010400 	.word	0x40010400

08002c78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	887b      	ldrh	r3, [r7, #2]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e001      	b.n	8002c9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	807b      	strh	r3, [r7, #2]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cb6:	787b      	ldrb	r3, [r7, #1]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cbc:	887a      	ldrh	r2, [r7, #2]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cc2:	e003      	b.n	8002ccc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	041a      	lsls	r2, r3, #16
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	611a      	str	r2, [r3, #16]
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ce8:	887a      	ldrh	r2, [r7, #2]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4013      	ands	r3, r2
 8002cee:	041a      	lsls	r2, r3, #16
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43d9      	mvns	r1, r3
 8002cf4:	887b      	ldrh	r3, [r7, #2]
 8002cf6:	400b      	ands	r3, r1
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	611a      	str	r2, [r3, #16]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d1e:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe f812 	bl	8000d50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40010400 	.word	0x40010400

08002d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e12b      	b.n	8002fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe fe52 	bl	8001a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2224      	movs	r2, #36	; 0x24
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d9c:	f002 fdae 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 8002da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a81      	ldr	r2, [pc, #516]	; (8002fac <HAL_I2C_Init+0x274>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d807      	bhi.n	8002dbc <HAL_I2C_Init+0x84>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a80      	ldr	r2, [pc, #512]	; (8002fb0 <HAL_I2C_Init+0x278>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	bf94      	ite	ls
 8002db4:	2301      	movls	r3, #1
 8002db6:	2300      	movhi	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e006      	b.n	8002dca <HAL_I2C_Init+0x92>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a7d      	ldr	r2, [pc, #500]	; (8002fb4 <HAL_I2C_Init+0x27c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	bf94      	ite	ls
 8002dc4:	2301      	movls	r3, #1
 8002dc6:	2300      	movhi	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0e7      	b.n	8002fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a78      	ldr	r2, [pc, #480]	; (8002fb8 <HAL_I2C_Init+0x280>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0c9b      	lsrs	r3, r3, #18
 8002ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a6a      	ldr	r2, [pc, #424]	; (8002fac <HAL_I2C_Init+0x274>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d802      	bhi.n	8002e0c <HAL_I2C_Init+0xd4>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	e009      	b.n	8002e20 <HAL_I2C_Init+0xe8>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	4a69      	ldr	r2, [pc, #420]	; (8002fbc <HAL_I2C_Init+0x284>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	3301      	adds	r3, #1
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	495c      	ldr	r1, [pc, #368]	; (8002fac <HAL_I2C_Init+0x274>)
 8002e3c:	428b      	cmp	r3, r1
 8002e3e:	d819      	bhi.n	8002e74 <HAL_I2C_Init+0x13c>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e59      	subs	r1, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e4e:	1c59      	adds	r1, r3, #1
 8002e50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e54:	400b      	ands	r3, r1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_I2C_Init+0x138>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1e59      	subs	r1, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6e:	e051      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002e70:	2304      	movs	r3, #4
 8002e72:	e04f      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d111      	bne.n	8002ea0 <HAL_I2C_Init+0x168>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1e58      	subs	r0, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	440b      	add	r3, r1
 8002e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e012      	b.n	8002ec6 <HAL_I2C_Init+0x18e>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1e58      	subs	r0, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	0099      	lsls	r1, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Init+0x196>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e022      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_I2C_Init+0x1bc>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e58      	subs	r0, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	440b      	add	r3, r1
 8002ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef2:	e00f      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e58      	subs	r0, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	6809      	ldr	r1, [r1, #0]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6911      	ldr	r1, [r2, #16]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	4311      	orrs	r1, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	000186a0 	.word	0x000186a0
 8002fb0:	001e847f 	.word	0x001e847f
 8002fb4:	003d08ff 	.word	0x003d08ff
 8002fb8:	431bde83 	.word	0x431bde83
 8002fbc:	10624dd3 	.word	0x10624dd3

08002fc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	460b      	mov	r3, r1
 8002fce:	817b      	strh	r3, [r7, #10]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd4:	f7fe fedc 	bl	8001d90 <HAL_GetTick>
 8002fd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	f040 80e0 	bne.w	80031a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	2319      	movs	r3, #25
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4970      	ldr	r1, [pc, #448]	; (80031b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f972 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
 8003000:	e0d3      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_I2C_Master_Transmit+0x50>
 800300c:	2302      	movs	r3, #2
 800300e:	e0cc      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d007      	beq.n	8003036 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003044:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2221      	movs	r2, #33	; 0x21
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2210      	movs	r2, #16
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	893a      	ldrh	r2, [r7, #8]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4a50      	ldr	r2, [pc, #320]	; (80031b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003078:	8979      	ldrh	r1, [r7, #10]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	6a3a      	ldr	r2, [r7, #32]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f8aa 	bl	80031d8 <I2C_MasterRequestWrite>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e08d      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030a4:	e066      	b.n	8003174 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	6a39      	ldr	r1, [r7, #32]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fa30 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d107      	bne.n	80030ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e06b      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b04      	cmp	r3, #4
 800310e:	d11b      	bne.n	8003148 <HAL_I2C_Master_Transmit+0x188>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	d017      	beq.n	8003148 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	6a39      	ldr	r1, [r7, #32]
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fa27 	bl	80035a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00d      	beq.n	8003174 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	2b04      	cmp	r3, #4
 800315e:	d107      	bne.n	8003170 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e01a      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	d194      	bne.n	80030a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	00100002 	.word	0x00100002
 80031b8:	ffff0000 	.word	0xffff0000

080031bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ca:	b2db      	uxtb	r3, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
	...

080031d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	460b      	mov	r3, r1
 80031e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d006      	beq.n	8003202 <I2C_MasterRequestWrite+0x2a>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d003      	beq.n	8003202 <I2C_MasterRequestWrite+0x2a>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003200:	d108      	bne.n	8003214 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e00b      	b.n	800322c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	2b12      	cmp	r3, #18
 800321a:	d107      	bne.n	800322c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800322a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f84f 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00d      	beq.n	8003260 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003252:	d103      	bne.n	800325c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e035      	b.n	80032cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003268:	d108      	bne.n	800327c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003278:	611a      	str	r2, [r3, #16]
 800327a:	e01b      	b.n	80032b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800327c:	897b      	ldrh	r3, [r7, #10]
 800327e:	11db      	asrs	r3, r3, #7
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 0306 	and.w	r3, r3, #6
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f063 030f 	orn	r3, r3, #15
 800328c:	b2da      	uxtb	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	490e      	ldr	r1, [pc, #56]	; (80032d4 <I2C_MasterRequestWrite+0xfc>)
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f898 	bl	80033d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e010      	b.n	80032cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032aa:	897b      	ldrh	r3, [r7, #10]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4907      	ldr	r1, [pc, #28]	; (80032d8 <I2C_MasterRequestWrite+0x100>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f888 	bl	80033d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	00010008 	.word	0x00010008
 80032d8:	00010002 	.word	0x00010002

080032dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ec:	e048      	b.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d044      	beq.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7fe fd4b 	bl	8001d90 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d139      	bne.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	0c1b      	lsrs	r3, r3, #16
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d10d      	bne.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	43da      	mvns	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	e00c      	b.n	800334c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	43da      	mvns	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	429a      	cmp	r2, r3
 8003350:	d116      	bne.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e023      	b.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10d      	bne.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	43da      	mvns	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4013      	ands	r3, r2
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	e00c      	b.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	43da      	mvns	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4013      	ands	r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d093      	beq.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033de:	e071      	b.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d123      	bne.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003408:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f043 0204 	orr.w	r2, r3, #4
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e067      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d041      	beq.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	f7fe fca6 	bl	8001d90 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d136      	bne.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d10c      	bne.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4013      	ands	r3, r2
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf14      	ite	ne
 8003472:	2301      	movne	r3, #1
 8003474:	2300      	moveq	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	e00b      	b.n	8003492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	43da      	mvns	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4013      	ands	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d016      	beq.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e021      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10c      	bne.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e00b      	b.n	8003500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	43da      	mvns	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4013      	ands	r3, r2
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf14      	ite	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2300      	moveq	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	f47f af6d 	bne.w	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800351c:	e034      	b.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f886 	bl	8003630 <I2C_IsAcknowledgeFailed>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e034      	b.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d028      	beq.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fe fc2b 	bl	8001d90 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d11d      	bne.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003556:	2b80      	cmp	r3, #128	; 0x80
 8003558:	d016      	beq.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e007      	b.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b80      	cmp	r3, #128	; 0x80
 8003594:	d1c3      	bne.n	800351e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ac:	e034      	b.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f83e 	bl	8003630 <I2C_IsAcknowledgeFailed>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e034      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d028      	beq.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7fe fbe3 	bl	8001d90 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d11d      	bne.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d016      	beq.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e007      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b04      	cmp	r3, #4
 8003624:	d1c3      	bne.n	80035ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003646:	d11b      	bne.n	8003680 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003650:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f043 0204 	orr.w	r2, r3, #4
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800368c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800368e:	b08b      	sub	sp, #44	; 0x2c
 8003690:	af06      	add	r7, sp, #24
 8003692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0f1      	b.n	8003882 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f007 f996 	bl	800a9e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2203      	movs	r2, #3
 80036bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f003 f89f 	bl	8006808 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	687e      	ldr	r6, [r7, #4]
 80036d2:	466d      	mov	r5, sp
 80036d4:	f106 0410 	add.w	r4, r6, #16
 80036d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	602b      	str	r3, [r5, #0]
 80036e0:	1d33      	adds	r3, r6, #4
 80036e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036e4:	6838      	ldr	r0, [r7, #0]
 80036e6:	f003 f869 	bl	80067bc <USB_CoreInit>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0c2      	b.n	8003882 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f003 f89a 	bl	800683c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003708:	2300      	movs	r3, #0
 800370a:	73fb      	strb	r3, [r7, #15]
 800370c:	e040      	b.n	8003790 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	440b      	add	r3, r1
 800371e:	3301      	adds	r3, #1
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	440b      	add	r3, r1
 8003734:	7bfa      	ldrb	r2, [r7, #15]
 8003736:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	440b      	add	r3, r1
 8003748:	3303      	adds	r3, #3
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800374e:	7bfa      	ldrb	r2, [r7, #15]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	440b      	add	r3, r1
 800375c:	3338      	adds	r3, #56	; 0x38
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003762:	7bfa      	ldrb	r2, [r7, #15]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	440b      	add	r3, r1
 8003770:	333c      	adds	r3, #60	; 0x3c
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003776:	7bfa      	ldrb	r2, [r7, #15]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	440b      	add	r3, r1
 8003784:	3340      	adds	r3, #64	; 0x40
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	3301      	adds	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	429a      	cmp	r2, r3
 8003798:	d3b9      	bcc.n	800370e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
 800379e:	e044      	b.n	800382a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	440b      	add	r3, r1
 80037ae:	f203 1369 	addw	r3, r3, #361	; 0x169
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	440b      	add	r3, r1
 80037c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037cc:	7bfa      	ldrb	r2, [r7, #15]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	440b      	add	r3, r1
 80037da:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037e2:	7bfa      	ldrb	r2, [r7, #15]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	440b      	add	r3, r1
 80037f0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037f8:	7bfa      	ldrb	r2, [r7, #15]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	440b      	add	r3, r1
 8003806:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	440b      	add	r3, r1
 800381c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	3301      	adds	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d3b5      	bcc.n	80037a0 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	687e      	ldr	r6, [r7, #4]
 800383c:	466d      	mov	r5, sp
 800383e:	f106 0410 	add.w	r4, r6, #16
 8003842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	602b      	str	r3, [r5, #0]
 800384a:	1d33      	adds	r3, r6, #4
 800384c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800384e:	6838      	ldr	r0, [r7, #0]
 8003850:	f003 f800 	bl	8006854 <USB_DevInit>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e00d      	b.n	8003882 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f005 fa81 	bl	8008d82 <USB_DevDisconnect>

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800388a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_PCD_Start+0x16>
 800389c:	2302      	movs	r3, #2
 800389e:	e016      	b.n	80038ce <HAL_PCD_Start+0x44>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f002 ff95 	bl	80067dc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80038b2:	2101      	movs	r1, #1
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f007 fb08 	bl	800aeca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f005 fa55 	bl	8008d6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b088      	sub	sp, #32
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f005 fa57 	bl	8008d96 <USB_ReadInterrupts>
 80038e8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fb1b 	bl	8003f30 <PCD_EP_ISR_Handler>

    return;
 80038fa:	e119      	b.n	8003b30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003902:	2b00      	cmp	r3, #0
 8003904:	d013      	beq.n	800392e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003918:	b292      	uxth	r2, r2
 800391a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f007 f8db 	bl	800aada <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003924:	2100      	movs	r1, #0
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f905 	bl	8003b36 <HAL_PCD_SetAddress>

    return;
 800392c:	e100      	b.n	8003b30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00c      	beq.n	8003952 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003940:	b29a      	uxth	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800394a:	b292      	uxth	r2, r2
 800394c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003950:	e0ee      	b.n	8003b30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00c      	beq.n	8003976 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800396e:	b292      	uxth	r2, r2
 8003970:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003974:	e0dc      	b.n	8003b30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d027      	beq.n	80039d0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003988:	b29a      	uxth	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0204 	bic.w	r2, r2, #4
 8003992:	b292      	uxth	r2, r2
 8003994:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0208 	bic.w	r2, r2, #8
 80039aa:	b292      	uxth	r2, r2
 80039ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f007 f8cb 	bl	800ab4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039be:	b29a      	uxth	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039c8:	b292      	uxth	r2, r2
 80039ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80039ce:	e0af      	b.n	8003b30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8083 	beq.w	8003ae2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80039dc:	2300      	movs	r3, #0
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e010      	b.n	8003a04 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	7ffb      	ldrb	r3, [r7, #31]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	441a      	add	r2, r3
 80039ee:	7ffb      	ldrb	r3, [r7, #31]
 80039f0:	8812      	ldrh	r2, [r2, #0]
 80039f2:	b292      	uxth	r2, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	3320      	adds	r3, #32
 80039f8:	443b      	add	r3, r7
 80039fa:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80039fe:	7ffb      	ldrb	r3, [r7, #31]
 8003a00:	3301      	adds	r3, #1
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	7ffb      	ldrb	r3, [r7, #31]
 8003a06:	2b07      	cmp	r3, #7
 8003a08:	d9eb      	bls.n	80039e2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	b292      	uxth	r2, r2
 8003a1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	b292      	uxth	r2, r2
 8003a36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003a3a:	bf00      	nop
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f6      	beq.n	8003a3c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a60:	b292      	uxth	r2, r2
 8003a62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003a66:	2300      	movs	r3, #0
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e00f      	b.n	8003a8c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003a6c:	7ffb      	ldrb	r3, [r7, #31]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	4611      	mov	r1, r2
 8003a74:	7ffa      	ldrb	r2, [r7, #31]
 8003a76:	0092      	lsls	r2, r2, #2
 8003a78:	440a      	add	r2, r1
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	3320      	adds	r3, #32
 8003a7e:	443b      	add	r3, r7
 8003a80:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003a84:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003a86:	7ffb      	ldrb	r3, [r7, #31]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	7ffb      	ldrb	r3, [r7, #31]
 8003a8e:	2b07      	cmp	r3, #7
 8003a90:	d9ec      	bls.n	8003a6c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0208 	orr.w	r2, r2, #8
 8003aa4:	b292      	uxth	r2, r2
 8003aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003abc:	b292      	uxth	r2, r2
 8003abe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0204 	orr.w	r2, r2, #4
 8003ad4:	b292      	uxth	r2, r2
 8003ad6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f007 f81c 	bl	800ab18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003ae0:	e026      	b.n	8003b30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00f      	beq.n	8003b0c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003afe:	b292      	uxth	r2, r2
 8003b00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f006 ffda 	bl	800aabe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b0a:	e011      	b.n	8003b30 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00c      	beq.n	8003b30 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b28:	b292      	uxth	r2, r2
 8003b2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b2e:	bf00      	nop
  }
}
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_PCD_SetAddress+0x1a>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e013      	b.n	8003b78 <HAL_PCD_SetAddress+0x42>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f005 f8ed 	bl	8008d48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	4608      	mov	r0, r1
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4603      	mov	r3, r0
 8003b90:	70fb      	strb	r3, [r7, #3]
 8003b92:	460b      	mov	r3, r1
 8003b94:	803b      	strh	r3, [r7, #0]
 8003b96:	4613      	mov	r3, r2
 8003b98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	da0e      	bge.n	8003bc4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	705a      	strb	r2, [r3, #1]
 8003bc2:	e00e      	b.n	8003be2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	f003 0207 	and.w	r2, r3, #7
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bee:	883a      	ldrh	r2, [r7, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	78ba      	ldrb	r2, [r7, #2]
 8003bf8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bfa:	78bb      	ldrb	r3, [r7, #2]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d102      	bne.n	8003c06 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_PCD_EP_Open+0x94>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e00e      	b.n	8003c32 <HAL_PCD_EP_Open+0xb2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68f9      	ldr	r1, [r7, #12]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f002 fe36 	bl	8006894 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003c30:	7afb      	ldrb	r3, [r7, #11]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	460b      	mov	r3, r1
 8003c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	da0e      	bge.n	8003c6c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	4613      	mov	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	705a      	strb	r2, [r3, #1]
 8003c6a:	e00e      	b.n	8003c8a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	f003 0207 	and.w	r2, r3, #7
 8003c72:	4613      	mov	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_PCD_EP_Close+0x6a>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e00e      	b.n	8003cc2 <HAL_PCD_EP_Close+0x88>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68f9      	ldr	r1, [r7, #12]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f003 f9ae 	bl	8007014 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cda:	7afb      	ldrb	r3, [r7, #11]
 8003cdc:	f003 0207 	and.w	r2, r3, #7
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2200      	movs	r2, #0
 8003d02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2200      	movs	r2, #0
 8003d08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d0a:	7afb      	ldrb	r3, [r7, #11]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6979      	ldr	r1, [r7, #20]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f003 fb65 	bl	80073ec <USB_EPStartXfer>

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	f003 0207 	and.w	r2, r3, #7
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	440b      	add	r3, r1
 8003d4a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b086      	sub	sp, #24
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	460b      	mov	r3, r1
 8003d68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d6a:	7afb      	ldrb	r3, [r7, #11]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2201      	movs	r2, #1
 8003da4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da6:	7afb      	ldrb	r3, [r7, #11]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6979      	ldr	r1, [r7, #20]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f003 fb17 	bl	80073ec <USB_EPStartXfer>

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	f003 0207 	and.w	r2, r3, #7
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d901      	bls.n	8003de6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e04c      	b.n	8003e80 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	da0e      	bge.n	8003e0c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	705a      	strb	r2, [r3, #1]
 8003e0a:	e00c      	b.n	8003e26 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_PCD_EP_SetStall+0x7e>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e01c      	b.n	8003e80 <HAL_PCD_EP_SetStall+0xb8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f004 fe7a 	bl	8008b4e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d108      	bne.n	8003e76 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4610      	mov	r0, r2
 8003e72:	f004 ff9f 	bl	8008db4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d901      	bls.n	8003ea6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e040      	b.n	8003f28 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	da0e      	bge.n	8003ecc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	705a      	strb	r2, [r3, #1]
 8003eca:	e00e      	b.n	8003eea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 0207 	and.w	r2, r3, #7
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_PCD_EP_ClrStall+0x82>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e00e      	b.n	8003f28 <HAL_PCD_EP_ClrStall+0xa0>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68f9      	ldr	r1, [r7, #12]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f004 fe68 	bl	8008bee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b096      	sub	sp, #88	; 0x58
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f38:	e3bf      	b.n	80046ba <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003f54:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f040 8179 	bne.w	8004250 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d152      	bne.n	8004010 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7a:	81fb      	strh	r3, [r7, #14]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	89fb      	ldrh	r3, [r7, #14]
 8003f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3328      	adds	r3, #40	; 0x28
 8003f92:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fbe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	441a      	add	r2, r3
 8003fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fcc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003fce:	2100      	movs	r1, #0
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f006 fd5a 	bl	800aa8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 836b 	beq.w	80046ba <PCD_EP_ISR_Handler+0x78a>
 8003fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f040 8366 	bne.w	80046ba <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	b292      	uxth	r2, r2
 8004002:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800400e:	e354      	b.n	80046ba <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004016:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004022:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402a:	2b00      	cmp	r3, #0
 800402c:	d034      	beq.n	8004098 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	3306      	adds	r3, #6
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004058:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004066:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800406c:	b29b      	uxth	r3, r3
 800406e:	f004 fef1 	bl	8008e54 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29a      	uxth	r2, r3
 800407a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800407e:	4013      	ands	r3, r2
 8004080:	823b      	strh	r3, [r7, #16]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	8a3a      	ldrh	r2, [r7, #16]
 8004088:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800408c:	b292      	uxth	r2, r2
 800408e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f006 fccd 	bl	800aa30 <HAL_PCD_SetupStageCallback>
 8004096:	e310      	b.n	80046ba <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004098:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800409c:	2b00      	cmp	r3, #0
 800409e:	f280 830c 	bge.w	80046ba <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040ae:	4013      	ands	r3, r2
 80040b0:	83fb      	strh	r3, [r7, #30]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	8bfa      	ldrh	r2, [r7, #30]
 80040b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040bc:	b292      	uxth	r2, r2
 80040be:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4413      	add	r3, r2
 80040d4:	3306      	adds	r3, #6
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ea:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80040ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d019      	beq.n	8004128 <PCD_EP_ISR_Handler+0x1f8>
 80040f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d015      	beq.n	8004128 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004102:	6959      	ldr	r1, [r3, #20]
 8004104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004106:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800410a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800410c:	b29b      	uxth	r3, r3
 800410e:	f004 fea1 	bl	8008e54 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	441a      	add	r2, r3
 800411c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004120:	2100      	movs	r1, #0
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f006 fc96 	bl	800aa54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004132:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413a:	2b00      	cmp	r3, #0
 800413c:	f040 82bd 	bne.w	80046ba <PCD_EP_ISR_Handler+0x78a>
 8004140:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004144:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004148:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800414c:	f000 82b5 	beq.w	80046ba <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415e:	b29b      	uxth	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	4413      	add	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800417a:	b29a      	uxth	r2, r3
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	801a      	strh	r2, [r3, #0]
 8004180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	2b3e      	cmp	r3, #62	; 0x3e
 8004186:	d91d      	bls.n	80041c4 <PCD_EP_ISR_Handler+0x294>
 8004188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	647b      	str	r3, [r7, #68]	; 0x44
 8004190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <PCD_EP_ISR_Handler+0x272>
 800419c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419e:	3b01      	subs	r3, #1
 80041a0:	647b      	str	r3, [r7, #68]	; 0x44
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	029b      	lsls	r3, r3, #10
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	4313      	orrs	r3, r2
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041bc:	b29a      	uxth	r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	801a      	strh	r2, [r3, #0]
 80041c2:	e026      	b.n	8004212 <PCD_EP_ISR_Handler+0x2e2>
 80041c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <PCD_EP_ISR_Handler+0x2b2>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041da:	b29a      	uxth	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	e017      	b.n	8004212 <PCD_EP_ISR_Handler+0x2e2>
 80041e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	085b      	lsrs	r3, r3, #1
 80041e8:	647b      	str	r3, [r7, #68]	; 0x44
 80041ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <PCD_EP_ISR_Handler+0x2cc>
 80041f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f8:	3301      	adds	r3, #1
 80041fa:	647b      	str	r3, [r7, #68]	; 0x44
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b29a      	uxth	r2, r3
 8004202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004204:	b29b      	uxth	r3, r3
 8004206:	029b      	lsls	r3, r3, #10
 8004208:	b29b      	uxth	r3, r3
 800420a:	4313      	orrs	r3, r2
 800420c:	b29a      	uxth	r2, r3
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	827b      	strh	r3, [r7, #18]
 8004224:	8a7b      	ldrh	r3, [r7, #18]
 8004226:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800422a:	827b      	strh	r3, [r7, #18]
 800422c:	8a7b      	ldrh	r3, [r7, #18]
 800422e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004232:	827b      	strh	r3, [r7, #18]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	8a7b      	ldrh	r3, [r7, #18]
 800423a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424a:	b29b      	uxth	r3, r3
 800424c:	8013      	strh	r3, [r2, #0]
 800424e:	e234      	b.n	80046ba <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004264:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004268:	2b00      	cmp	r3, #0
 800426a:	f280 80fc 	bge.w	8004466 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29a      	uxth	r2, r3
 8004280:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004284:	4013      	ands	r3, r2
 8004286:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800429c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042a0:	b292      	uxth	r2, r2
 80042a2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80042a4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	4413      	add	r3, r2
 80042b8:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80042ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042bc:	7b1b      	ldrb	r3, [r3, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d125      	bne.n	800430e <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4413      	add	r3, r2
 80042d6:	3306      	adds	r3, #6
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80042ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8092 	beq.w	800441c <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fe:	6959      	ldr	r1, [r3, #20]
 8004300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004302:	88da      	ldrh	r2, [r3, #6]
 8004304:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004308:	f004 fda4 	bl	8008e54 <USB_ReadPMA>
 800430c:	e086      	b.n	800441c <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800430e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004310:	78db      	ldrb	r3, [r3, #3]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d10a      	bne.n	800432c <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004316:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800431a:	461a      	mov	r2, r3
 800431c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9d9 	bl	80046d6 <HAL_PCD_EP_DB_Receive>
 8004324:	4603      	mov	r3, r0
 8004326:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800432a:	e077      	b.n	800441c <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	441a      	add	r2, r3
 8004358:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800435c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004368:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800436c:	b29b      	uxth	r3, r3
 800436e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d024      	beq.n	80043d4 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004392:	b29b      	uxth	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4413      	add	r3, r2
 800439e:	3302      	adds	r3, #2
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80043b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d02e      	beq.n	800441c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c4:	6959      	ldr	r1, [r3, #20]
 80043c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c8:	891a      	ldrh	r2, [r3, #8]
 80043ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80043ce:	f004 fd41 	bl	8008e54 <USB_ReadPMA>
 80043d2:	e023      	b.n	800441c <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043dc:	b29b      	uxth	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4413      	add	r3, r2
 80043e8:	3306      	adds	r3, #6
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043fc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004400:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800440e:	6959      	ldr	r1, [r3, #20]
 8004410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004412:	895a      	ldrh	r2, [r3, #10]
 8004414:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004418:	f004 fd1c 	bl	8008e54 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800441c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004424:	441a      	add	r2, r3
 8004426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004428:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800442a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004432:	441a      	add	r2, r3
 8004434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004436:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <PCD_EP_ISR_Handler+0x51c>
 8004440:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	429a      	cmp	r2, r3
 800444a:	d206      	bcs.n	800445a <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800444c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	4619      	mov	r1, r3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f006 fafe 	bl	800aa54 <HAL_PCD_DataOutStageCallback>
 8004458:	e005      	b.n	8004466 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004460:	4618      	mov	r0, r3
 8004462:	f002 ffc3 	bl	80073ec <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004466:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8123 	beq.w	80046ba <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8004474:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4413      	add	r3, r2
 8004486:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	441a      	add	r2, r3
 80044b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80044b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80044c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c6:	78db      	ldrb	r3, [r3, #3]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	f040 80a2 	bne.w	8004612 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80044ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d0:	2200      	movs	r2, #0
 80044d2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80044d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d6:	7b1b      	ldrb	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8093 	beq.w	8004604 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d046      	beq.n	8004578 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ec:	785b      	ldrb	r3, [r3, #1]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d126      	bne.n	8004540 <PCD_EP_ISR_Handler+0x610>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004500:	b29b      	uxth	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	4413      	add	r3, r2
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
 800450a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	011a      	lsls	r2, r3, #4
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	4413      	add	r3, r2
 8004514:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004518:	623b      	str	r3, [r7, #32]
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004524:	b29a      	uxth	r2, r3
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	b29b      	uxth	r3, r3
 8004530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004538:	b29a      	uxth	r2, r3
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	801a      	strh	r2, [r3, #0]
 800453e:	e061      	b.n	8004604 <PCD_EP_ISR_Handler+0x6d4>
 8004540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004542:	785b      	ldrb	r3, [r3, #1]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d15d      	bne.n	8004604 <PCD_EP_ISR_Handler+0x6d4>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004556:	b29b      	uxth	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	4413      	add	r3, r2
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	011a      	lsls	r2, r3, #4
 8004566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004568:	4413      	add	r3, r2
 800456a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	2200      	movs	r2, #0
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	e045      	b.n	8004604 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004580:	785b      	ldrb	r3, [r3, #1]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d126      	bne.n	80045d4 <PCD_EP_ISR_Handler+0x6a4>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	637b      	str	r3, [r7, #52]	; 0x34
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004594:	b29b      	uxth	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459a:	4413      	add	r3, r2
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
 800459e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	011a      	lsls	r2, r3, #4
 80045a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a6:	4413      	add	r3, r2
 80045a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045ac:	633b      	str	r3, [r7, #48]	; 0x30
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	801a      	strh	r2, [r3, #0]
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	801a      	strh	r2, [r3, #0]
 80045d2:	e017      	b.n	8004604 <PCD_EP_ISR_Handler+0x6d4>
 80045d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d6:	785b      	ldrb	r3, [r3, #1]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d113      	bne.n	8004604 <PCD_EP_ISR_Handler+0x6d4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ea:	4413      	add	r3, r2
 80045ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	011a      	lsls	r2, r3, #4
 80045f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f6:	4413      	add	r3, r2
 80045f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	2200      	movs	r2, #0
 8004602:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	4619      	mov	r1, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f006 fa3d 	bl	800aa8a <HAL_PCD_DataInStageCallback>
 8004610:	e053      	b.n	80046ba <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004612:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d146      	bne.n	80046ac <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004626:	b29b      	uxth	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4413      	add	r3, r2
 8004632:	3302      	adds	r3, #2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6812      	ldr	r2, [r2, #0]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004646:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800464a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004652:	429a      	cmp	r2, r3
 8004654:	d907      	bls.n	8004666 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8004656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800465e:	1ad2      	subs	r2, r2, r3
 8004660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004662:	619a      	str	r2, [r3, #24]
 8004664:	e002      	b.n	800466c <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8004666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004668:	2200      	movs	r2, #0
 800466a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800466c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	4619      	mov	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f006 fa05 	bl	800aa8a <HAL_PCD_DataInStageCallback>
 8004680:	e01b      	b.n	80046ba <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800468a:	441a      	add	r2, r3
 800468c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004698:	441a      	add	r2, r3
 800469a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046a4:	4618      	mov	r0, r3
 80046a6:	f002 fea1 	bl	80073ec <USB_EPStartXfer>
 80046aa:	e006      	b.n	80046ba <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80046ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046b0:	461a      	mov	r2, r3
 80046b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f91b 	bl	80048f0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	b21b      	sxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f6ff ac37 	blt.w	8003f3a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3758      	adds	r7, #88	; 0x58
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b088      	sub	sp, #32
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	4613      	mov	r3, r2
 80046e2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d07e      	beq.n	80047ec <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	3302      	adds	r3, #2
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004716:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	8b7b      	ldrh	r3, [r7, #26]
 800471e:	429a      	cmp	r2, r3
 8004720:	d306      	bcc.n	8004730 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	8b7b      	ldrh	r3, [r7, #26]
 8004728:	1ad2      	subs	r2, r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	619a      	str	r2, [r3, #24]
 800472e:	e002      	b.n	8004736 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2200      	movs	r2, #0
 8004734:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d123      	bne.n	8004786 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004758:	833b      	strh	r3, [r7, #24]
 800475a:	8b3b      	ldrh	r3, [r7, #24]
 800475c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004760:	833b      	strh	r3, [r7, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	8b3b      	ldrh	r3, [r7, #24]
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01f      	beq.n	80047d0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	82fb      	strh	r3, [r7, #22]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	441a      	add	r2, r3
 80047ba:	8afb      	ldrh	r3, [r7, #22]
 80047bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80047d0:	8b7b      	ldrh	r3, [r7, #26]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8087 	beq.w	80048e6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	6959      	ldr	r1, [r3, #20]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	891a      	ldrh	r2, [r3, #8]
 80047e4:	8b7b      	ldrh	r3, [r7, #26]
 80047e6:	f004 fb35 	bl	8008e54 <USB_ReadPMA>
 80047ea:	e07c      	b.n	80048e6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	3306      	adds	r3, #6
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004814:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	8b7b      	ldrh	r3, [r7, #26]
 800481c:	429a      	cmp	r2, r3
 800481e:	d306      	bcc.n	800482e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	8b7b      	ldrh	r3, [r7, #26]
 8004826:	1ad2      	subs	r2, r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	619a      	str	r2, [r3, #24]
 800482c:	e002      	b.n	8004834 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2200      	movs	r2, #0
 8004832:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d123      	bne.n	8004884 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	83fb      	strh	r3, [r7, #30]
 8004858:	8bfb      	ldrh	r3, [r7, #30]
 800485a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800485e:	83fb      	strh	r3, [r7, #30]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	441a      	add	r2, r3
 800486e:	8bfb      	ldrh	r3, [r7, #30]
 8004870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004880:	b29b      	uxth	r3, r3
 8004882:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d11f      	bne.n	80048ce <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a8:	83bb      	strh	r3, [r7, #28]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	441a      	add	r2, r3
 80048b8:	8bbb      	ldrh	r3, [r7, #28]
 80048ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80048ce:	8b7b      	ldrh	r3, [r7, #26]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	6959      	ldr	r1, [r3, #20]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	895a      	ldrh	r2, [r3, #10]
 80048e0:	8b7b      	ldrh	r3, [r7, #26]
 80048e2:	f004 fab7 	bl	8008e54 <USB_ReadPMA>
    }
  }

  return count;
 80048e6:	8b7b      	ldrh	r3, [r7, #26]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b0a4      	sub	sp, #144	; 0x90
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 81dd 	beq.w	8004cc4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004912:	b29b      	uxth	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4413      	add	r3, r2
 800491e:	3302      	adds	r3, #2
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004932:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800493e:	429a      	cmp	r2, r3
 8004940:	d907      	bls.n	8004952 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800494a:	1ad2      	subs	r2, r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	619a      	str	r2, [r3, #24]
 8004950:	e002      	b.n	8004958 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f040 80b9 	bne.w	8004ad4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d126      	bne.n	80049b8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004978:	b29b      	uxth	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	4413      	add	r3, r2
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	011a      	lsls	r2, r3, #4
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	4413      	add	r3, r2
 800498c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800499c:	b29a      	uxth	r2, r3
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	801a      	strh	r2, [r3, #0]
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	e01a      	b.n	80049ee <HAL_PCD_EP_DB_Transmit+0xfe>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	785b      	ldrb	r3, [r3, #1]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d116      	bne.n	80049ee <HAL_PCD_EP_DB_Transmit+0xfe>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d4:	4413      	add	r3, r2
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	011a      	lsls	r2, r3, #4
 80049de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e0:	4413      	add	r3, r2
 80049e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049e6:	633b      	str	r3, [r7, #48]	; 0x30
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	2200      	movs	r2, #0
 80049ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	785b      	ldrb	r3, [r3, #1]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d126      	bne.n	8004a4a <HAL_PCD_EP_DB_Transmit+0x15a>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	011a      	lsls	r2, r3, #4
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	801a      	strh	r2, [r3, #0]
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	801a      	strh	r2, [r3, #0]
 8004a48:	e017      	b.n	8004a7a <HAL_PCD_EP_DB_Transmit+0x18a>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d113      	bne.n	8004a7a <HAL_PCD_EP_DB_Transmit+0x18a>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	4413      	add	r3, r2
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	011a      	lsls	r2, r3, #4
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a72:	623b      	str	r3, [r7, #32]
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	2200      	movs	r2, #0
 8004a78:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f006 f802 	bl	800aa8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 82fc 	beq.w	800508a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	82fb      	strh	r3, [r7, #22]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	8afb      	ldrh	r3, [r7, #22]
 8004abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	8013      	strh	r3, [r2, #0]
 8004ad2:	e2da      	b.n	800508a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ad4:	88fb      	ldrh	r3, [r7, #6]
 8004ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d021      	beq.n	8004b22 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	f040 82ae 	bne.w	800508a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	695a      	ldr	r2, [r3, #20]
 8004b32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b36:	441a      	add	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b44:	441a      	add	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	6a1a      	ldr	r2, [r3, #32]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d30b      	bcc.n	8004b6e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b66:	1ad2      	subs	r2, r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	621a      	str	r2, [r3, #32]
 8004b6c:	e017      	b.n	8004b9e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d108      	bne.n	8004b88 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004b76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b86:	e00a      	b.n	8004b9e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	785b      	ldrb	r3, [r3, #1]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d165      	bne.n	8004c72 <HAL_PCD_EP_DB_Transmit+0x382>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bba:	4413      	add	r3, r2
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	011a      	lsls	r2, r3, #4
 8004bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bdc:	801a      	strh	r2, [r3, #0]
 8004bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004be2:	2b3e      	cmp	r3, #62	; 0x3e
 8004be4:	d91d      	bls.n	8004c22 <HAL_PCD_EP_DB_Transmit+0x332>
 8004be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <HAL_PCD_EP_DB_Transmit+0x310>
 8004bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	029b      	lsls	r3, r3, #10
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	801a      	strh	r2, [r3, #0]
 8004c20:	e044      	b.n	8004cac <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <HAL_PCD_EP_DB_Transmit+0x350>
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	801a      	strh	r2, [r3, #0]
 8004c3e:	e035      	b.n	8004cac <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c44:	085b      	lsrs	r3, r3, #1
 8004c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_PCD_EP_DB_Transmit+0x36a>
 8004c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c56:	3301      	adds	r3, #1
 8004c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	029b      	lsls	r3, r3, #10
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	e01c      	b.n	8004cac <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	785b      	ldrb	r3, [r3, #1]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d118      	bne.n	8004cac <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8e:	4413      	add	r3, r2
 8004c90:	647b      	str	r3, [r7, #68]	; 0x44
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	011a      	lsls	r2, r3, #4
 8004c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004caa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	6959      	ldr	r1, [r3, #20]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	891a      	ldrh	r2, [r3, #8]
 8004cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f004 f884 	bl	8008dca <USB_WritePMA>
 8004cc2:	e1e2      	b.n	800508a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	3306      	adds	r3, #6
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cec:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	699a      	ldr	r2, [r3, #24]
 8004cf4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d307      	bcc.n	8004d0c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	699a      	ldr	r2, [r3, #24]
 8004d00:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d04:	1ad2      	subs	r2, r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	619a      	str	r2, [r3, #24]
 8004d0a:	e002      	b.n	8004d12 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f040 80c0 	bne.w	8004e9c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d126      	bne.n	8004d72 <HAL_PCD_EP_DB_Transmit+0x482>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d38:	4413      	add	r3, r2
 8004d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	011a      	lsls	r2, r3, #4
 8004d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d44:	4413      	add	r3, r2
 8004d46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d6e:	801a      	strh	r2, [r3, #0]
 8004d70:	e01a      	b.n	8004da8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	785b      	ldrb	r3, [r3, #1]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d116      	bne.n	8004da8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d8e:	4413      	add	r3, r2
 8004d90:	667b      	str	r3, [r7, #100]	; 0x64
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	011a      	lsls	r2, r3, #4
 8004d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004da0:	663b      	str	r3, [r7, #96]	; 0x60
 8004da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da4:	2200      	movs	r2, #0
 8004da6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	677b      	str	r3, [r7, #116]	; 0x74
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	785b      	ldrb	r3, [r3, #1]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d12b      	bne.n	8004e0e <HAL_PCD_EP_DB_Transmit+0x51e>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dca:	4413      	add	r3, r2
 8004dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	011a      	lsls	r2, r3, #4
 8004dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ddc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004df2:	801a      	strh	r2, [r3, #0]
 8004df4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e0a:	801a      	strh	r2, [r3, #0]
 8004e0c:	e017      	b.n	8004e3e <HAL_PCD_EP_DB_Transmit+0x54e>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d113      	bne.n	8004e3e <HAL_PCD_EP_DB_Transmit+0x54e>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e24:	4413      	add	r3, r2
 8004e26:	677b      	str	r3, [r7, #116]	; 0x74
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	011a      	lsls	r2, r3, #4
 8004e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e30:	4413      	add	r3, r2
 8004e32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e36:	673b      	str	r3, [r7, #112]	; 0x70
 8004e38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	4619      	mov	r1, r3
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f005 fe20 	bl	800aa8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f040 811a 	bne.w	800508a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e70:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	441a      	add	r2, r3
 8004e82:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	8013      	strh	r3, [r2, #0]
 8004e9a:	e0f6      	b.n	800508a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d121      	bne.n	8004eea <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	441a      	add	r2, r3
 8004ed2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	f040 80ca 	bne.w	800508a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004efe:	441a      	add	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f0c:	441a      	add	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6a1a      	ldr	r2, [r3, #32]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d30b      	bcc.n	8004f36 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	6a1a      	ldr	r2, [r3, #32]
 8004f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f2e:	1ad2      	subs	r2, r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	621a      	str	r2, [r3, #32]
 8004f34:	e017      	b.n	8004f66 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d108      	bne.n	8004f50 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004f3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f4e:	e00a      	b.n	8004f66 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d165      	bne.n	8005040 <HAL_PCD_EP_DB_Transmit+0x750>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f88:	4413      	add	r3, r2
 8004f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	011a      	lsls	r2, r3, #4
 8004f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f94:	4413      	add	r3, r2
 8004f96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004faa:	801a      	strh	r2, [r3, #0]
 8004fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fb0:	2b3e      	cmp	r3, #62	; 0x3e
 8004fb2:	d91d      	bls.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x700>
 8004fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fb8:	095b      	lsrs	r3, r3, #5
 8004fba:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <HAL_PCD_EP_DB_Transmit+0x6de>
 8004fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	029b      	lsls	r3, r3, #10
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fec:	801a      	strh	r2, [r3, #0]
 8004fee:	e041      	b.n	8005074 <HAL_PCD_EP_DB_Transmit+0x784>
 8004ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10a      	bne.n	800500e <HAL_PCD_EP_DB_Transmit+0x71e>
 8004ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005006:	b29a      	uxth	r2, r3
 8005008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800500a:	801a      	strh	r2, [r3, #0]
 800500c:	e032      	b.n	8005074 <HAL_PCD_EP_DB_Transmit+0x784>
 800500e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	66bb      	str	r3, [r7, #104]	; 0x68
 8005016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_PCD_EP_DB_Transmit+0x738>
 8005022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005024:	3301      	adds	r3, #1
 8005026:	66bb      	str	r3, [r7, #104]	; 0x68
 8005028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	b29a      	uxth	r2, r3
 800502e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005030:	b29b      	uxth	r3, r3
 8005032:	029b      	lsls	r3, r3, #10
 8005034:	b29b      	uxth	r3, r3
 8005036:	4313      	orrs	r3, r2
 8005038:	b29a      	uxth	r2, r3
 800503a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800503c:	801a      	strh	r2, [r3, #0]
 800503e:	e019      	b.n	8005074 <HAL_PCD_EP_DB_Transmit+0x784>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	785b      	ldrb	r3, [r3, #1]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d115      	bne.n	8005074 <HAL_PCD_EP_DB_Transmit+0x784>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005050:	b29b      	uxth	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005056:	4413      	add	r3, r2
 8005058:	657b      	str	r3, [r7, #84]	; 0x54
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	011a      	lsls	r2, r3, #4
 8005060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005062:	4413      	add	r3, r2
 8005064:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005068:	653b      	str	r3, [r7, #80]	; 0x50
 800506a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800506e:	b29a      	uxth	r2, r3
 8005070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005072:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	6959      	ldr	r1, [r3, #20]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	895a      	ldrh	r2, [r3, #10]
 8005080:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005084:	b29b      	uxth	r3, r3
 8005086:	f003 fea0 	bl	8008dca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b29b      	uxth	r3, r3
 800509c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a4:	82bb      	strh	r3, [r7, #20]
 80050a6:	8abb      	ldrh	r3, [r7, #20]
 80050a8:	f083 0310 	eor.w	r3, r3, #16
 80050ac:	82bb      	strh	r3, [r7, #20]
 80050ae:	8abb      	ldrh	r3, [r7, #20]
 80050b0:	f083 0320 	eor.w	r3, r3, #32
 80050b4:	82bb      	strh	r3, [r7, #20]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	441a      	add	r2, r3
 80050c4:	8abb      	ldrh	r3, [r7, #20]
 80050c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3790      	adds	r7, #144	; 0x90
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	460b      	mov	r3, r1
 80050f0:	817b      	strh	r3, [r7, #10]
 80050f2:	4613      	mov	r3, r2
 80050f4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80050f6:	897b      	ldrh	r3, [r7, #10]
 80050f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005102:	897b      	ldrh	r3, [r7, #10]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4413      	add	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e009      	b.n	800512e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800511a:	897a      	ldrh	r2, [r7, #10]
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800512e:	893b      	ldrh	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d107      	bne.n	8005144 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2200      	movs	r2, #0
 8005138:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	b29a      	uxth	r2, r3
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	80da      	strh	r2, [r3, #6]
 8005142:	e00b      	b.n	800515c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2201      	movs	r2, #1
 8005148:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	b29a      	uxth	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0c1b      	lsrs	r3, r3, #16
 8005156:	b29a      	uxth	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e272      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8087 	beq.w	8005296 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005188:	4b92      	ldr	r3, [pc, #584]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f003 030c 	and.w	r3, r3, #12
 8005190:	2b04      	cmp	r3, #4
 8005192:	d00c      	beq.n	80051ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005194:	4b8f      	ldr	r3, [pc, #572]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f003 030c 	and.w	r3, r3, #12
 800519c:	2b08      	cmp	r3, #8
 800519e:	d112      	bne.n	80051c6 <HAL_RCC_OscConfig+0x5e>
 80051a0:	4b8c      	ldr	r3, [pc, #560]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d10b      	bne.n	80051c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ae:	4b89      	ldr	r3, [pc, #548]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d06c      	beq.n	8005294 <HAL_RCC_OscConfig+0x12c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d168      	bne.n	8005294 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e24c      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ce:	d106      	bne.n	80051de <HAL_RCC_OscConfig+0x76>
 80051d0:	4b80      	ldr	r3, [pc, #512]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a7f      	ldr	r2, [pc, #508]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80051d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	e02e      	b.n	800523c <HAL_RCC_OscConfig+0xd4>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10c      	bne.n	8005200 <HAL_RCC_OscConfig+0x98>
 80051e6:	4b7b      	ldr	r3, [pc, #492]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a7a      	ldr	r2, [pc, #488]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80051ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	4b78      	ldr	r3, [pc, #480]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a77      	ldr	r2, [pc, #476]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80051f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	e01d      	b.n	800523c <HAL_RCC_OscConfig+0xd4>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005208:	d10c      	bne.n	8005224 <HAL_RCC_OscConfig+0xbc>
 800520a:	4b72      	ldr	r3, [pc, #456]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a71      	ldr	r2, [pc, #452]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 8005210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	4b6f      	ldr	r3, [pc, #444]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a6e      	ldr	r2, [pc, #440]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 800521c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	e00b      	b.n	800523c <HAL_RCC_OscConfig+0xd4>
 8005224:	4b6b      	ldr	r3, [pc, #428]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a6a      	ldr	r2, [pc, #424]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 800522a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	4b68      	ldr	r3, [pc, #416]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a67      	ldr	r2, [pc, #412]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 8005236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800523a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d013      	beq.n	800526c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005244:	f7fc fda4 	bl	8001d90 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800524c:	f7fc fda0 	bl	8001d90 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b64      	cmp	r3, #100	; 0x64
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e200      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800525e:	4b5d      	ldr	r3, [pc, #372]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0f0      	beq.n	800524c <HAL_RCC_OscConfig+0xe4>
 800526a:	e014      	b.n	8005296 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526c:	f7fc fd90 	bl	8001d90 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005274:	f7fc fd8c 	bl	8001d90 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b64      	cmp	r3, #100	; 0x64
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e1ec      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005286:	4b53      	ldr	r3, [pc, #332]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f0      	bne.n	8005274 <HAL_RCC_OscConfig+0x10c>
 8005292:	e000      	b.n	8005296 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d063      	beq.n	800536a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052a2:	4b4c      	ldr	r3, [pc, #304]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f003 030c 	and.w	r3, r3, #12
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80052ae:	4b49      	ldr	r3, [pc, #292]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d11c      	bne.n	80052f4 <HAL_RCC_OscConfig+0x18c>
 80052ba:	4b46      	ldr	r3, [pc, #280]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d116      	bne.n	80052f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052c6:	4b43      	ldr	r3, [pc, #268]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_RCC_OscConfig+0x176>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d001      	beq.n	80052de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e1c0      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052de:	4b3d      	ldr	r3, [pc, #244]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4939      	ldr	r1, [pc, #228]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052f2:	e03a      	b.n	800536a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d020      	beq.n	800533e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052fc:	4b36      	ldr	r3, [pc, #216]	; (80053d8 <HAL_RCC_OscConfig+0x270>)
 80052fe:	2201      	movs	r2, #1
 8005300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005302:	f7fc fd45 	bl	8001d90 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800530a:	f7fc fd41 	bl	8001d90 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e1a1      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800531c:	4b2d      	ldr	r3, [pc, #180]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005328:	4b2a      	ldr	r3, [pc, #168]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	4927      	ldr	r1, [pc, #156]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 8005338:	4313      	orrs	r3, r2
 800533a:	600b      	str	r3, [r1, #0]
 800533c:	e015      	b.n	800536a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800533e:	4b26      	ldr	r3, [pc, #152]	; (80053d8 <HAL_RCC_OscConfig+0x270>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7fc fd24 	bl	8001d90 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800534c:	f7fc fd20 	bl	8001d90 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e180      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800535e:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d03a      	beq.n	80053ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d019      	beq.n	80053b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800537e:	4b17      	ldr	r3, [pc, #92]	; (80053dc <HAL_RCC_OscConfig+0x274>)
 8005380:	2201      	movs	r2, #1
 8005382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005384:	f7fc fd04 	bl	8001d90 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800538c:	f7fc fd00 	bl	8001d90 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e160      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800539e:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <HAL_RCC_OscConfig+0x26c>)
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80053aa:	2001      	movs	r0, #1
 80053ac:	f000 faba 	bl	8005924 <RCC_Delay>
 80053b0:	e01c      	b.n	80053ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053b2:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <HAL_RCC_OscConfig+0x274>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053b8:	f7fc fcea 	bl	8001d90 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053be:	e00f      	b.n	80053e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c0:	f7fc fce6 	bl	8001d90 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d908      	bls.n	80053e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e146      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
 80053d2:	bf00      	nop
 80053d4:	40021000 	.word	0x40021000
 80053d8:	42420000 	.word	0x42420000
 80053dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053e0:	4b92      	ldr	r3, [pc, #584]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e9      	bne.n	80053c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80a6 	beq.w	8005546 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053fa:	2300      	movs	r3, #0
 80053fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fe:	4b8b      	ldr	r3, [pc, #556]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10d      	bne.n	8005426 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800540a:	4b88      	ldr	r3, [pc, #544]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	4a87      	ldr	r2, [pc, #540]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 8005410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005414:	61d3      	str	r3, [r2, #28]
 8005416:	4b85      	ldr	r3, [pc, #532]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005422:	2301      	movs	r3, #1
 8005424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005426:	4b82      	ldr	r3, [pc, #520]	; (8005630 <HAL_RCC_OscConfig+0x4c8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542e:	2b00      	cmp	r3, #0
 8005430:	d118      	bne.n	8005464 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005432:	4b7f      	ldr	r3, [pc, #508]	; (8005630 <HAL_RCC_OscConfig+0x4c8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a7e      	ldr	r2, [pc, #504]	; (8005630 <HAL_RCC_OscConfig+0x4c8>)
 8005438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800543e:	f7fc fca7 	bl	8001d90 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005446:	f7fc fca3 	bl	8001d90 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b64      	cmp	r3, #100	; 0x64
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e103      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005458:	4b75      	ldr	r3, [pc, #468]	; (8005630 <HAL_RCC_OscConfig+0x4c8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d106      	bne.n	800547a <HAL_RCC_OscConfig+0x312>
 800546c:	4b6f      	ldr	r3, [pc, #444]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	4a6e      	ldr	r2, [pc, #440]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	6213      	str	r3, [r2, #32]
 8005478:	e02d      	b.n	80054d6 <HAL_RCC_OscConfig+0x36e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10c      	bne.n	800549c <HAL_RCC_OscConfig+0x334>
 8005482:	4b6a      	ldr	r3, [pc, #424]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	4a69      	ldr	r2, [pc, #420]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	6213      	str	r3, [r2, #32]
 800548e:	4b67      	ldr	r3, [pc, #412]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	4a66      	ldr	r2, [pc, #408]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 8005494:	f023 0304 	bic.w	r3, r3, #4
 8005498:	6213      	str	r3, [r2, #32]
 800549a:	e01c      	b.n	80054d6 <HAL_RCC_OscConfig+0x36e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	2b05      	cmp	r3, #5
 80054a2:	d10c      	bne.n	80054be <HAL_RCC_OscConfig+0x356>
 80054a4:	4b61      	ldr	r3, [pc, #388]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	4a60      	ldr	r2, [pc, #384]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80054aa:	f043 0304 	orr.w	r3, r3, #4
 80054ae:	6213      	str	r3, [r2, #32]
 80054b0:	4b5e      	ldr	r3, [pc, #376]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	4a5d      	ldr	r2, [pc, #372]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	6213      	str	r3, [r2, #32]
 80054bc:	e00b      	b.n	80054d6 <HAL_RCC_OscConfig+0x36e>
 80054be:	4b5b      	ldr	r3, [pc, #364]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	4a5a      	ldr	r2, [pc, #360]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80054c4:	f023 0301 	bic.w	r3, r3, #1
 80054c8:	6213      	str	r3, [r2, #32]
 80054ca:	4b58      	ldr	r3, [pc, #352]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	4a57      	ldr	r2, [pc, #348]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80054d0:	f023 0304 	bic.w	r3, r3, #4
 80054d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d015      	beq.n	800550a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054de:	f7fc fc57 	bl	8001d90 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e4:	e00a      	b.n	80054fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e6:	f7fc fc53 	bl	8001d90 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d901      	bls.n	80054fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e0b1      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fc:	4b4b      	ldr	r3, [pc, #300]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0ee      	beq.n	80054e6 <HAL_RCC_OscConfig+0x37e>
 8005508:	e014      	b.n	8005534 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800550a:	f7fc fc41 	bl	8001d90 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005510:	e00a      	b.n	8005528 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005512:	f7fc fc3d 	bl	8001d90 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005520:	4293      	cmp	r3, r2
 8005522:	d901      	bls.n	8005528 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e09b      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005528:	4b40      	ldr	r3, [pc, #256]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1ee      	bne.n	8005512 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005534:	7dfb      	ldrb	r3, [r7, #23]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d105      	bne.n	8005546 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800553a:	4b3c      	ldr	r3, [pc, #240]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	4a3b      	ldr	r2, [pc, #236]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 8005540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005544:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8087 	beq.w	800565e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005550:	4b36      	ldr	r3, [pc, #216]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 030c 	and.w	r3, r3, #12
 8005558:	2b08      	cmp	r3, #8
 800555a:	d061      	beq.n	8005620 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d146      	bne.n	80055f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005564:	4b33      	ldr	r3, [pc, #204]	; (8005634 <HAL_RCC_OscConfig+0x4cc>)
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556a:	f7fc fc11 	bl	8001d90 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005572:	f7fc fc0d 	bl	8001d90 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e06d      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005584:	4b29      	ldr	r3, [pc, #164]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f0      	bne.n	8005572 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005598:	d108      	bne.n	80055ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800559a:	4b24      	ldr	r3, [pc, #144]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	4921      	ldr	r1, [pc, #132]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055ac:	4b1f      	ldr	r3, [pc, #124]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a19      	ldr	r1, [r3, #32]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	430b      	orrs	r3, r1
 80055be:	491b      	ldr	r1, [pc, #108]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055c4:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <HAL_RCC_OscConfig+0x4cc>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ca:	f7fc fbe1 	bl	8001d90 <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055d0:	e008      	b.n	80055e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d2:	f7fc fbdd 	bl	8001d90 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e03d      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055e4:	4b11      	ldr	r3, [pc, #68]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0f0      	beq.n	80055d2 <HAL_RCC_OscConfig+0x46a>
 80055f0:	e035      	b.n	800565e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f2:	4b10      	ldr	r3, [pc, #64]	; (8005634 <HAL_RCC_OscConfig+0x4cc>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f8:	f7fc fbca 	bl	8001d90 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005600:	f7fc fbc6 	bl	8001d90 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e026      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005612:	4b06      	ldr	r3, [pc, #24]	; (800562c <HAL_RCC_OscConfig+0x4c4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f0      	bne.n	8005600 <HAL_RCC_OscConfig+0x498>
 800561e:	e01e      	b.n	800565e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d107      	bne.n	8005638 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e019      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
 800562c:	40021000 	.word	0x40021000
 8005630:	40007000 	.word	0x40007000
 8005634:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <HAL_RCC_OscConfig+0x500>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	429a      	cmp	r2, r3
 800564a:	d106      	bne.n	800565a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005656:	429a      	cmp	r2, r3
 8005658:	d001      	beq.n	800565e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40021000 	.word	0x40021000

0800566c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0d0      	b.n	8005822 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005680:	4b6a      	ldr	r3, [pc, #424]	; (800582c <HAL_RCC_ClockConfig+0x1c0>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d910      	bls.n	80056b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568e:	4b67      	ldr	r3, [pc, #412]	; (800582c <HAL_RCC_ClockConfig+0x1c0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f023 0207 	bic.w	r2, r3, #7
 8005696:	4965      	ldr	r1, [pc, #404]	; (800582c <HAL_RCC_ClockConfig+0x1c0>)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	4313      	orrs	r3, r2
 800569c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b63      	ldr	r3, [pc, #396]	; (800582c <HAL_RCC_ClockConfig+0x1c0>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0b8      	b.n	8005822 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d020      	beq.n	80056fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c8:	4b59      	ldr	r3, [pc, #356]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4a58      	ldr	r2, [pc, #352]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 80056ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056e0:	4b53      	ldr	r3, [pc, #332]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	4a52      	ldr	r2, [pc, #328]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 80056e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80056ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ec:	4b50      	ldr	r3, [pc, #320]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	494d      	ldr	r1, [pc, #308]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d040      	beq.n	800578c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d107      	bne.n	8005722 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005712:	4b47      	ldr	r3, [pc, #284]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d115      	bne.n	800574a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e07f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d107      	bne.n	800573a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800572a:	4b41      	ldr	r3, [pc, #260]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e073      	b.n	8005822 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800573a:	4b3d      	ldr	r3, [pc, #244]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e06b      	b.n	8005822 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800574a:	4b39      	ldr	r3, [pc, #228]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f023 0203 	bic.w	r2, r3, #3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	4936      	ldr	r1, [pc, #216]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 8005758:	4313      	orrs	r3, r2
 800575a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800575c:	f7fc fb18 	bl	8001d90 <HAL_GetTick>
 8005760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005762:	e00a      	b.n	800577a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005764:	f7fc fb14 	bl	8001d90 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005772:	4293      	cmp	r3, r2
 8005774:	d901      	bls.n	800577a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e053      	b.n	8005822 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577a:	4b2d      	ldr	r3, [pc, #180]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f003 020c 	and.w	r2, r3, #12
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	429a      	cmp	r2, r3
 800578a:	d1eb      	bne.n	8005764 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800578c:	4b27      	ldr	r3, [pc, #156]	; (800582c <HAL_RCC_ClockConfig+0x1c0>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d210      	bcs.n	80057bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579a:	4b24      	ldr	r3, [pc, #144]	; (800582c <HAL_RCC_ClockConfig+0x1c0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f023 0207 	bic.w	r2, r3, #7
 80057a2:	4922      	ldr	r1, [pc, #136]	; (800582c <HAL_RCC_ClockConfig+0x1c0>)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	4b20      	ldr	r3, [pc, #128]	; (800582c <HAL_RCC_ClockConfig+0x1c0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e032      	b.n	8005822 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c8:	4b19      	ldr	r3, [pc, #100]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4916      	ldr	r1, [pc, #88]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057e6:	4b12      	ldr	r3, [pc, #72]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	490e      	ldr	r1, [pc, #56]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057fa:	f000 f821 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80057fe:	4602      	mov	r2, r0
 8005800:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <HAL_RCC_ClockConfig+0x1c4>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	490a      	ldr	r1, [pc, #40]	; (8005834 <HAL_RCC_ClockConfig+0x1c8>)
 800580c:	5ccb      	ldrb	r3, [r1, r3]
 800580e:	fa22 f303 	lsr.w	r3, r2, r3
 8005812:	4a09      	ldr	r2, [pc, #36]	; (8005838 <HAL_RCC_ClockConfig+0x1cc>)
 8005814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <HAL_RCC_ClockConfig+0x1d0>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f7fc fa76 	bl	8001d0c <HAL_InitTick>

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40022000 	.word	0x40022000
 8005830:	40021000 	.word	0x40021000
 8005834:	0800bc40 	.word	0x0800bc40
 8005838:	20000020 	.word	0x20000020
 800583c:	20000024 	.word	0x20000024

08005840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	2300      	movs	r3, #0
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	2300      	movs	r3, #0
 8005854:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800585a:	4b1e      	ldr	r3, [pc, #120]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 030c 	and.w	r3, r3, #12
 8005866:	2b04      	cmp	r3, #4
 8005868:	d002      	beq.n	8005870 <HAL_RCC_GetSysClockFreq+0x30>
 800586a:	2b08      	cmp	r3, #8
 800586c:	d003      	beq.n	8005876 <HAL_RCC_GetSysClockFreq+0x36>
 800586e:	e027      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005870:	4b19      	ldr	r3, [pc, #100]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005872:	613b      	str	r3, [r7, #16]
      break;
 8005874:	e027      	b.n	80058c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	0c9b      	lsrs	r3, r3, #18
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	4a17      	ldr	r2, [pc, #92]	; (80058dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005880:	5cd3      	ldrb	r3, [r2, r3]
 8005882:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d010      	beq.n	80058b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800588e:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	0c5b      	lsrs	r3, r3, #17
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800589a:	5cd3      	ldrb	r3, [r2, r3]
 800589c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80058a2:	fb03 f202 	mul.w	r2, r3, r2
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	e004      	b.n	80058ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a0c      	ldr	r2, [pc, #48]	; (80058e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80058b4:	fb02 f303 	mul.w	r3, r2, r3
 80058b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	613b      	str	r3, [r7, #16]
      break;
 80058be:	e002      	b.n	80058c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058c0:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80058c2:	613b      	str	r3, [r7, #16]
      break;
 80058c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058c6:	693b      	ldr	r3, [r7, #16]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40021000 	.word	0x40021000
 80058d8:	007a1200 	.word	0x007a1200
 80058dc:	0800bc58 	.word	0x0800bc58
 80058e0:	0800bc68 	.word	0x0800bc68
 80058e4:	003d0900 	.word	0x003d0900

080058e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058ec:	4b02      	ldr	r3, [pc, #8]	; (80058f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80058ee:	681b      	ldr	r3, [r3, #0]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr
 80058f8:	20000020 	.word	0x20000020

080058fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005900:	f7ff fff2 	bl	80058e8 <HAL_RCC_GetHCLKFreq>
 8005904:	4602      	mov	r2, r0
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	0a1b      	lsrs	r3, r3, #8
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	4903      	ldr	r1, [pc, #12]	; (8005920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005912:	5ccb      	ldrb	r3, [r1, r3]
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005918:	4618      	mov	r0, r3
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40021000 	.word	0x40021000
 8005920:	0800bc50 	.word	0x0800bc50

08005924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800592c:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <RCC_Delay+0x34>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0a      	ldr	r2, [pc, #40]	; (800595c <RCC_Delay+0x38>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	0a5b      	lsrs	r3, r3, #9
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005940:	bf00      	nop
  }
  while (Delay --);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1e5a      	subs	r2, r3, #1
 8005946:	60fa      	str	r2, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1f9      	bne.n	8005940 <RCC_Delay+0x1c>
}
 800594c:	bf00      	nop
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr
 8005958:	20000020 	.word	0x20000020
 800595c:	10624dd3 	.word	0x10624dd3

08005960 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d07d      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800597c:	2300      	movs	r3, #0
 800597e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005980:	4b4f      	ldr	r3, [pc, #316]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10d      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800598c:	4b4c      	ldr	r3, [pc, #304]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	4a4b      	ldr	r2, [pc, #300]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005996:	61d3      	str	r3, [r2, #28]
 8005998:	4b49      	ldr	r3, [pc, #292]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a8:	4b46      	ldr	r3, [pc, #280]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d118      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059b4:	4b43      	ldr	r3, [pc, #268]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a42      	ldr	r2, [pc, #264]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059c0:	f7fc f9e6 	bl	8001d90 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c6:	e008      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c8:	f7fc f9e2 	bl	8001d90 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b64      	cmp	r3, #100	; 0x64
 80059d4:	d901      	bls.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e06d      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059da:	4b3a      	ldr	r3, [pc, #232]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059e6:	4b36      	ldr	r3, [pc, #216]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d02e      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d027      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a04:	4b2e      	ldr	r3, [pc, #184]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a0e:	4b2e      	ldr	r3, [pc, #184]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a14:	4b2c      	ldr	r3, [pc, #176]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a1a:	4a29      	ldr	r2, [pc, #164]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d014      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2a:	f7fc f9b1 	bl	8001d90 <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a30:	e00a      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a32:	f7fc f9ad 	bl	8001d90 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e036      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a48:	4b1d      	ldr	r3, [pc, #116]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0ee      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a54:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	4917      	ldr	r1, [pc, #92]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a66:	7dfb      	ldrb	r3, [r7, #23]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d105      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a6c:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a84:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	490b      	ldr	r1, [pc, #44]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005aa2:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	4904      	ldr	r1, [pc, #16]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	40007000 	.word	0x40007000
 8005ac8:	42420440 	.word	0x42420440

08005acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e076      	b.n	8005bcc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d108      	bne.n	8005af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aee:	d009      	beq.n	8005b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	61da      	str	r2, [r3, #28]
 8005af6:	e005      	b.n	8005b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fb ffb0 	bl	8001a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	431a      	orrs	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b88:	ea42 0103 	orr.w	r1, r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	0c1a      	lsrs	r2, r3, #16
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f002 0204 	and.w	r2, r2, #4
 8005baa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69da      	ldr	r2, [r3, #28]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_SPI_Transmit+0x22>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e12d      	b.n	8005e52 <HAL_SPI_Transmit+0x27e>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bfe:	f7fc f8c7 	bl	8001d90 <HAL_GetTick>
 8005c02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d002      	beq.n	8005c1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c14:	2302      	movs	r3, #2
 8005c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c18:	e116      	b.n	8005e48 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_SPI_Transmit+0x52>
 8005c20:	88fb      	ldrh	r3, [r7, #6]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c2a:	e10d      	b.n	8005e48 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2203      	movs	r2, #3
 8005c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	88fa      	ldrh	r2, [r7, #6]
 8005c44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	88fa      	ldrh	r2, [r7, #6]
 8005c4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c72:	d10f      	bne.n	8005c94 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d007      	beq.n	8005cb2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cba:	d14f      	bne.n	8005d5c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_SPI_Transmit+0xf6>
 8005cc4:	8afb      	ldrh	r3, [r7, #22]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d142      	bne.n	8005d50 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cce:	881a      	ldrh	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	1c9a      	adds	r2, r3, #2
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cee:	e02f      	b.n	8005d50 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d112      	bne.n	8005d24 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	881a      	ldrh	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d22:	e015      	b.n	8005d50 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d24:	f7fc f834 	bl	8001d90 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d803      	bhi.n	8005d3c <HAL_SPI_Transmit+0x168>
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d102      	bne.n	8005d42 <HAL_SPI_Transmit+0x16e>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005d4e:	e07b      	b.n	8005e48 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ca      	bne.n	8005cf0 <HAL_SPI_Transmit+0x11c>
 8005d5a:	e050      	b.n	8005dfe <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_SPI_Transmit+0x196>
 8005d64:	8afb      	ldrh	r3, [r7, #22]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d144      	bne.n	8005df4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d90:	e030      	b.n	8005df4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d113      	bne.n	8005dc8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	7812      	ldrb	r2, [r2, #0]
 8005dac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dc6:	e015      	b.n	8005df4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc8:	f7fb ffe2 	bl	8001d90 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d803      	bhi.n	8005de0 <HAL_SPI_Transmit+0x20c>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d102      	bne.n	8005de6 <HAL_SPI_Transmit+0x212>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005df2:	e029      	b.n	8005e48 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1c9      	bne.n	8005d92 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f8be 	bl	8005f84 <SPI_EndRxTxTransaction>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2220      	movs	r2, #32
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	77fb      	strb	r3, [r7, #31]
 8005e3e:	e003      	b.n	8005e48 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3720      	adds	r7, #32
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e68:	b2db      	uxtb	r3, r3
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr

08005e74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	4613      	mov	r3, r2
 8005e82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e84:	f7fb ff84 	bl	8001d90 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	4413      	add	r3, r2
 8005e92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e94:	f7fb ff7c 	bl	8001d90 <HAL_GetTick>
 8005e98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e9a:	4b39      	ldr	r3, [pc, #228]	; (8005f80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	015b      	lsls	r3, r3, #5
 8005ea0:	0d1b      	lsrs	r3, r3, #20
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eaa:	e054      	b.n	8005f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb2:	d050      	beq.n	8005f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eb4:	f7fb ff6c 	bl	8001d90 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d902      	bls.n	8005eca <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d13d      	bne.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ed8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ee2:	d111      	bne.n	8005f08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eec:	d004      	beq.n	8005ef8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef6:	d107      	bne.n	8005f08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f10:	d10f      	bne.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e017      	b.n	8005f76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	bf0c      	ite	eq
 8005f66:	2301      	moveq	r3, #1
 8005f68:	2300      	movne	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d19b      	bne.n	8005eac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000020 	.word	0x20000020

08005f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2200      	movs	r2, #0
 8005f98:	2180      	movs	r1, #128	; 0x80
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7ff ff6a 	bl	8005e74 <SPI_WaitFlagStateUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e000      	b.n	8005fb8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e041      	b.n	8006056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7fb fd8a 	bl	8001b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4610      	mov	r0, r2
 8006000:	f000 fa74 	bl	80064ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	d001      	beq.n	8006078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e03a      	b.n	80060ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <HAL_TIM_Base_Start_IT+0x98>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00e      	beq.n	80060b8 <HAL_TIM_Base_Start_IT+0x58>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a2:	d009      	beq.n	80060b8 <HAL_TIM_Base_Start_IT+0x58>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a14      	ldr	r2, [pc, #80]	; (80060fc <HAL_TIM_Base_Start_IT+0x9c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d004      	beq.n	80060b8 <HAL_TIM_Base_Start_IT+0x58>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a13      	ldr	r2, [pc, #76]	; (8006100 <HAL_TIM_Base_Start_IT+0xa0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d111      	bne.n	80060dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b06      	cmp	r3, #6
 80060c8:	d010      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0201 	orr.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060da:	e007      	b.n	80060ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40000400 	.word	0x40000400
 8006100:	40000800 	.word	0x40000800

08006104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b02      	cmp	r3, #2
 8006118:	d122      	bne.n	8006160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b02      	cmp	r3, #2
 8006126:	d11b      	bne.n	8006160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0202 	mvn.w	r2, #2
 8006130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f9b4 	bl	80064b4 <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f9a7 	bl	80064a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f9b6 	bl	80064c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b04      	cmp	r3, #4
 800616c:	d122      	bne.n	80061b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b04      	cmp	r3, #4
 800617a:	d11b      	bne.n	80061b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0204 	mvn.w	r2, #4
 8006184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f98a 	bl	80064b4 <HAL_TIM_IC_CaptureCallback>
 80061a0:	e005      	b.n	80061ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f97d 	bl	80064a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f98c 	bl	80064c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d122      	bne.n	8006208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d11b      	bne.n	8006208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0208 	mvn.w	r2, #8
 80061d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2204      	movs	r2, #4
 80061de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f960 	bl	80064b4 <HAL_TIM_IC_CaptureCallback>
 80061f4:	e005      	b.n	8006202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f953 	bl	80064a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f962 	bl	80064c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0310 	and.w	r3, r3, #16
 8006212:	2b10      	cmp	r3, #16
 8006214:	d122      	bne.n	800625c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b10      	cmp	r3, #16
 8006222:	d11b      	bne.n	800625c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0210 	mvn.w	r2, #16
 800622c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2208      	movs	r2, #8
 8006232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f936 	bl	80064b4 <HAL_TIM_IC_CaptureCallback>
 8006248:	e005      	b.n	8006256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f929 	bl	80064a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f938 	bl	80064c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b01      	cmp	r3, #1
 8006268:	d10e      	bne.n	8006288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b01      	cmp	r3, #1
 8006276:	d107      	bne.n	8006288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0201 	mvn.w	r2, #1
 8006280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fa fda0 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006292:	2b80      	cmp	r3, #128	; 0x80
 8006294:	d10e      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a0:	2b80      	cmp	r3, #128	; 0x80
 80062a2:	d107      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa7b 	bl	80067aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062be:	2b40      	cmp	r3, #64	; 0x40
 80062c0:	d10e      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	d107      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f8fc 	bl	80064d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	d10e      	bne.n	800630c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d107      	bne.n	800630c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0220 	mvn.w	r2, #32
 8006304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa46 	bl	8006798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800630c:	bf00      	nop
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_TIM_ConfigClockSource+0x1c>
 800632c:	2302      	movs	r3, #2
 800632e:	e0b4      	b.n	800649a <HAL_TIM_ConfigClockSource+0x186>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800634e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006368:	d03e      	beq.n	80063e8 <HAL_TIM_ConfigClockSource+0xd4>
 800636a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636e:	f200 8087 	bhi.w	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006376:	f000 8086 	beq.w	8006486 <HAL_TIM_ConfigClockSource+0x172>
 800637a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637e:	d87f      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 8006380:	2b70      	cmp	r3, #112	; 0x70
 8006382:	d01a      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0xa6>
 8006384:	2b70      	cmp	r3, #112	; 0x70
 8006386:	d87b      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 8006388:	2b60      	cmp	r3, #96	; 0x60
 800638a:	d050      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x11a>
 800638c:	2b60      	cmp	r3, #96	; 0x60
 800638e:	d877      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 8006390:	2b50      	cmp	r3, #80	; 0x50
 8006392:	d03c      	beq.n	800640e <HAL_TIM_ConfigClockSource+0xfa>
 8006394:	2b50      	cmp	r3, #80	; 0x50
 8006396:	d873      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d058      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x13a>
 800639c:	2b40      	cmp	r3, #64	; 0x40
 800639e:	d86f      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 80063a0:	2b30      	cmp	r3, #48	; 0x30
 80063a2:	d064      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x15a>
 80063a4:	2b30      	cmp	r3, #48	; 0x30
 80063a6:	d86b      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d060      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x15a>
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d867      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d05c      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x15a>
 80063b4:	2b10      	cmp	r3, #16
 80063b6:	d05a      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x15a>
 80063b8:	e062      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063ca:	f000 f968 	bl	800669e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	609a      	str	r2, [r3, #8]
      break;
 80063e6:	e04f      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063f8:	f000 f951 	bl	800669e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800640a:	609a      	str	r2, [r3, #8]
      break;
 800640c:	e03c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800641a:	461a      	mov	r2, r3
 800641c:	f000 f8c8 	bl	80065b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2150      	movs	r1, #80	; 0x50
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f91f 	bl	800666a <TIM_ITRx_SetConfig>
      break;
 800642c:	e02c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800643a:	461a      	mov	r2, r3
 800643c:	f000 f8e6 	bl	800660c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2160      	movs	r1, #96	; 0x60
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f90f 	bl	800666a <TIM_ITRx_SetConfig>
      break;
 800644c:	e01c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800645a:	461a      	mov	r2, r3
 800645c:	f000 f8a8 	bl	80065b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2140      	movs	r1, #64	; 0x40
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f8ff 	bl	800666a <TIM_ITRx_SetConfig>
      break;
 800646c:	e00c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f000 f8f6 	bl	800666a <TIM_ITRx_SetConfig>
      break;
 800647e:	e003      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	73fb      	strb	r3, [r7, #15]
      break;
 8006484:	e000      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bc80      	pop	{r7}
 80064c4:	4770      	bx	lr

080064c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bc80      	pop	{r7}
 80064d6:	4770      	bx	lr

080064d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bc80      	pop	{r7}
 80064e8:	4770      	bx	lr
	...

080064ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a29      	ldr	r2, [pc, #164]	; (80065a4 <TIM_Base_SetConfig+0xb8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00b      	beq.n	800651c <TIM_Base_SetConfig+0x30>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650a:	d007      	beq.n	800651c <TIM_Base_SetConfig+0x30>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a26      	ldr	r2, [pc, #152]	; (80065a8 <TIM_Base_SetConfig+0xbc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_Base_SetConfig+0x30>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a25      	ldr	r2, [pc, #148]	; (80065ac <TIM_Base_SetConfig+0xc0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d108      	bne.n	800652e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a1c      	ldr	r2, [pc, #112]	; (80065a4 <TIM_Base_SetConfig+0xb8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00b      	beq.n	800654e <TIM_Base_SetConfig+0x62>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653c:	d007      	beq.n	800654e <TIM_Base_SetConfig+0x62>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a19      	ldr	r2, [pc, #100]	; (80065a8 <TIM_Base_SetConfig+0xbc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d003      	beq.n	800654e <TIM_Base_SetConfig+0x62>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a18      	ldr	r2, [pc, #96]	; (80065ac <TIM_Base_SetConfig+0xc0>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d108      	bne.n	8006560 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a07      	ldr	r2, [pc, #28]	; (80065a4 <TIM_Base_SetConfig+0xb8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d103      	bne.n	8006594 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	615a      	str	r2, [r3, #20]
}
 800659a:	bf00      	nop
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	bc80      	pop	{r7}
 80065a2:	4770      	bx	lr
 80065a4:	40012c00 	.word	0x40012c00
 80065a8:	40000400 	.word	0x40000400
 80065ac:	40000800 	.word	0x40000800

080065b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0201 	bic.w	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 030a 	bic.w	r3, r3, #10
 80065ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr

0800660c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f023 0210 	bic.w	r2, r3, #16
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	031b      	lsls	r3, r3, #12
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006648:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	621a      	str	r2, [r3, #32]
}
 8006660:	bf00      	nop
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr

0800666a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800666a:	b480      	push	{r7}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4313      	orrs	r3, r2
 8006688:	f043 0307 	orr.w	r3, r3, #7
 800668c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	609a      	str	r2, [r3, #8]
}
 8006694:	bf00      	nop
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr

0800669e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800669e:	b480      	push	{r7}
 80066a0:	b087      	sub	sp, #28
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	607a      	str	r2, [r7, #4]
 80066aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	021a      	lsls	r2, r3, #8
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	609a      	str	r2, [r3, #8]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr

080066dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e046      	b.n	8006782 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a16      	ldr	r2, [pc, #88]	; (800678c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00e      	beq.n	8006756 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006740:	d009      	beq.n	8006756 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a12      	ldr	r2, [pc, #72]	; (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d004      	beq.n	8006756 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a10      	ldr	r2, [pc, #64]	; (8006794 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d10c      	bne.n	8006770 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800675c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	4313      	orrs	r3, r2
 8006766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr
 800678c:	40012c00 	.word	0x40012c00
 8006790:	40000400 	.word	0x40000400
 8006794:	40000800 	.word	0x40000800

08006798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80067bc:	b084      	sub	sp, #16
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	f107 0014 	add.w	r0, r7, #20
 80067ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bc80      	pop	{r7}
 80067d8:	b004      	add	sp, #16
 80067da:	4770      	bx	lr

080067dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80067ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80067f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr

08006808 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006810:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006814:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	b29b      	uxth	r3, r3
 8006822:	43db      	mvns	r3, r3
 8006824:	b29b      	uxth	r3, r3
 8006826:	4013      	ands	r3, r2
 8006828:	b29a      	uxth	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr

0800683c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr

08006854 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006854:	b084      	sub	sp, #16
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	f107 0014 	add.w	r0, r7, #20
 8006862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	b004      	add	sp, #16
 8006892:	4770      	bx	lr

08006894 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006894:	b480      	push	{r7}
 8006896:	b09d      	sub	sp, #116	; 0x74
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80068b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	78db      	ldrb	r3, [r3, #3]
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d81f      	bhi.n	8006906 <USB_ActivateEndpoint+0x72>
 80068c6:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <USB_ActivateEndpoint+0x38>)
 80068c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068cc:	080068dd 	.word	0x080068dd
 80068d0:	080068f9 	.word	0x080068f9
 80068d4:	0800690f 	.word	0x0800690f
 80068d8:	080068eb 	.word	0x080068eb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80068dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80068e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80068e8:	e012      	b.n	8006910 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80068ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80068ee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80068f2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80068f6:	e00b      	b.n	8006910 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80068f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80068fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006900:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006904:	e004      	b.n	8006910 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800690c:	e000      	b.n	8006910 <USB_ActivateEndpoint+0x7c>
      break;
 800690e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	441a      	add	r2, r3
 800691a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800691e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800692a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692e:	b29b      	uxth	r3, r3
 8006930:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006948:	b29a      	uxth	r2, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	b29b      	uxth	r3, r3
 8006950:	4313      	orrs	r3, r2
 8006952:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	441a      	add	r2, r3
 8006960:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800696c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006974:	b29b      	uxth	r3, r3
 8006976:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	7b1b      	ldrb	r3, [r3, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 8178 	bne.w	8006c72 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 8084 	beq.w	8006a94 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	61bb      	str	r3, [r7, #24]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	4413      	add	r3, r2
 800699e:	61bb      	str	r3, [r7, #24]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	011a      	lsls	r2, r3, #4
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	88db      	ldrh	r3, [r3, #6]
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	827b      	strh	r3, [r7, #18]
 80069ce:	8a7b      	ldrh	r3, [r7, #18]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01b      	beq.n	8006a10 <USB_ActivateEndpoint+0x17c>
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	823b      	strh	r3, [r7, #16]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	441a      	add	r2, r3
 80069fa:	8a3b      	ldrh	r3, [r7, #16]
 80069fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	78db      	ldrb	r3, [r3, #3]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d020      	beq.n	8006a5a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a2e:	81bb      	strh	r3, [r7, #12]
 8006a30:	89bb      	ldrh	r3, [r7, #12]
 8006a32:	f083 0320 	eor.w	r3, r3, #32
 8006a36:	81bb      	strh	r3, [r7, #12]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	441a      	add	r2, r3
 8006a42:	89bb      	ldrh	r3, [r7, #12]
 8006a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	8013      	strh	r3, [r2, #0]
 8006a58:	e2d5      	b.n	8007006 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a70:	81fb      	strh	r3, [r7, #14]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	441a      	add	r2, r3
 8006a7c:	89fb      	ldrh	r3, [r7, #14]
 8006a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	8013      	strh	r3, [r2, #0]
 8006a92:	e2b8      	b.n	8007006 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	633b      	str	r3, [r7, #48]	; 0x30
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	4413      	add	r3, r2
 8006aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	011a      	lsls	r2, r3, #4
 8006aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	88db      	ldrh	r3, [r3, #6]
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	4413      	add	r3, r2
 8006ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	011a      	lsls	r2, r3, #4
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	801a      	strh	r2, [r3, #0]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	2b3e      	cmp	r3, #62	; 0x3e
 8006b02:	d91d      	bls.n	8006b40 <USB_ActivateEndpoint+0x2ac>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <USB_ActivateEndpoint+0x28a>
 8006b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	029b      	lsls	r3, r3, #10
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	801a      	strh	r2, [r3, #0]
 8006b3e:	e026      	b.n	8006b8e <USB_ActivateEndpoint+0x2fa>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10a      	bne.n	8006b5e <USB_ActivateEndpoint+0x2ca>
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	e017      	b.n	8006b8e <USB_ActivateEndpoint+0x2fa>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <USB_ActivateEndpoint+0x2e4>
 8006b72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b74:	3301      	adds	r3, #1
 8006b76:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	029b      	lsls	r3, r3, #10
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	4313      	orrs	r3, r2
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01b      	beq.n	8006bde <USB_ActivateEndpoint+0x34a>
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbc:	843b      	strh	r3, [r7, #32]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	441a      	add	r2, r3
 8006bc8:	8c3b      	ldrh	r3, [r7, #32]
 8006bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d124      	bne.n	8006c30 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfc:	83bb      	strh	r3, [r7, #28]
 8006bfe:	8bbb      	ldrh	r3, [r7, #28]
 8006c00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c04:	83bb      	strh	r3, [r7, #28]
 8006c06:	8bbb      	ldrh	r3, [r7, #28]
 8006c08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c0c:	83bb      	strh	r3, [r7, #28]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	441a      	add	r2, r3
 8006c18:	8bbb      	ldrh	r3, [r7, #28]
 8006c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	8013      	strh	r3, [r2, #0]
 8006c2e:	e1ea      	b.n	8007006 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c46:	83fb      	strh	r3, [r7, #30]
 8006c48:	8bfb      	ldrh	r3, [r7, #30]
 8006c4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c4e:	83fb      	strh	r3, [r7, #30]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	441a      	add	r2, r3
 8006c5a:	8bfb      	ldrh	r3, [r7, #30]
 8006c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	8013      	strh	r3, [r2, #0]
 8006c70:	e1c9      	b.n	8007006 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	78db      	ldrb	r3, [r3, #3]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d11e      	bne.n	8006cb8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c90:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	441a      	add	r2, r3
 8006c9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006caa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	8013      	strh	r3, [r2, #0]
 8006cb6:	e01d      	b.n	8006cf4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	441a      	add	r2, r3
 8006cdc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d04:	4413      	add	r3, r2
 8006d06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	011a      	lsls	r2, r3, #4
 8006d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d16:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	891b      	ldrh	r3, [r3, #8]
 8006d1c:	085b      	lsrs	r3, r3, #1
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d26:	801a      	strh	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d38:	4413      	add	r3, r2
 8006d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	011a      	lsls	r2, r3, #4
 8006d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006d4a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	895b      	ldrh	r3, [r3, #10]
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d5a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f040 8093 	bne.w	8006e8c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006d76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d01b      	beq.n	8006dba <USB_ActivateEndpoint+0x526>
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d98:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	441a      	add	r2, r3
 8006da4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006dc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d01b      	beq.n	8006e0a <USB_ActivateEndpoint+0x576>
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	441a      	add	r2, r3
 8006df4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e20:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e28:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e2a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e30:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e68:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	441a      	add	r2, r3
 8006e74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]
 8006e8a:	e0bc      	b.n	8007006 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01d      	beq.n	8006ee4 <USB_ActivateEndpoint+0x650>
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	441a      	add	r2, r3
 8006ecc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006ef4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01d      	beq.n	8006f3c <USB_ActivateEndpoint+0x6a8>
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f16:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	441a      	add	r2, r3
 8006f24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	78db      	ldrb	r3, [r3, #3]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d024      	beq.n	8006f8e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	881b      	ldrh	r3, [r3, #0]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f62:	f083 0320 	eor.w	r3, r3, #32
 8006f66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	441a      	add	r2, r3
 8006f74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	8013      	strh	r3, [r2, #0]
 8006f8c:	e01d      	b.n	8006fca <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	441a      	add	r2, r3
 8006fb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	441a      	add	r2, r3
 8006fee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007002:	b29b      	uxth	r3, r3
 8007004:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007006:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800700a:	4618      	mov	r0, r3
 800700c:	3774      	adds	r7, #116	; 0x74
 800700e:	46bd      	mov	sp, r7
 8007010:	bc80      	pop	{r7}
 8007012:	4770      	bx	lr

08007014 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007014:	b480      	push	{r7}
 8007016:	b08d      	sub	sp, #52	; 0x34
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	7b1b      	ldrb	r3, [r3, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	f040 808e 	bne.w	8007144 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d044      	beq.n	80070ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	81bb      	strh	r3, [r7, #12]
 800703e:	89bb      	ldrh	r3, [r7, #12]
 8007040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01b      	beq.n	8007080 <USB_DeactivateEndpoint+0x6c>
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	817b      	strh	r3, [r7, #10]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	897b      	ldrh	r3, [r7, #10]
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007078:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007096:	813b      	strh	r3, [r7, #8]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	441a      	add	r2, r3
 80070a2:	893b      	ldrh	r3, [r7, #8]
 80070a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	8013      	strh	r3, [r2, #0]
 80070b8:	e192      	b.n	80073e0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	827b      	strh	r3, [r7, #18]
 80070c8:	8a7b      	ldrh	r3, [r7, #18]
 80070ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d01b      	beq.n	800710a <USB_DeactivateEndpoint+0xf6>
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e8:	823b      	strh	r3, [r7, #16]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	441a      	add	r2, r3
 80070f4:	8a3b      	ldrh	r3, [r7, #16]
 80070f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007106:	b29b      	uxth	r3, r3
 8007108:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4413      	add	r3, r2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800711c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007120:	81fb      	strh	r3, [r7, #14]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	441a      	add	r2, r3
 800712c:	89fb      	ldrh	r3, [r7, #14]
 800712e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800713a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713e:	b29b      	uxth	r3, r3
 8007140:	8013      	strh	r3, [r2, #0]
 8007142:	e14d      	b.n	80073e0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	785b      	ldrb	r3, [r3, #1]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f040 80a5 	bne.w	8007298 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	843b      	strh	r3, [r7, #32]
 800715c:	8c3b      	ldrh	r3, [r7, #32]
 800715e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d01b      	beq.n	800719e <USB_DeactivateEndpoint+0x18a>
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29b      	uxth	r3, r3
 8007174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717c:	83fb      	strh	r3, [r7, #30]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	441a      	add	r2, r3
 8007188:	8bfb      	ldrh	r3, [r7, #30]
 800718a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719a:	b29b      	uxth	r3, r3
 800719c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	83bb      	strh	r3, [r7, #28]
 80071ac:	8bbb      	ldrh	r3, [r7, #28]
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d01b      	beq.n	80071ee <USB_DeactivateEndpoint+0x1da>
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071cc:	837b      	strh	r3, [r7, #26]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	441a      	add	r2, r3
 80071d8:	8b7b      	ldrh	r3, [r7, #26]
 80071da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007204:	833b      	strh	r3, [r7, #24]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	441a      	add	r2, r3
 8007210:	8b3b      	ldrh	r3, [r7, #24]
 8007212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800721e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007222:	b29b      	uxth	r3, r3
 8007224:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	b29b      	uxth	r3, r3
 8007234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723c:	82fb      	strh	r3, [r7, #22]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	441a      	add	r2, r3
 8007248:	8afb      	ldrh	r3, [r7, #22]
 800724a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725a:	b29b      	uxth	r3, r3
 800725c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007274:	82bb      	strh	r3, [r7, #20]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	441a      	add	r2, r3
 8007280:	8abb      	ldrh	r3, [r7, #20]
 8007282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800728a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800728e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007292:	b29b      	uxth	r3, r3
 8007294:	8013      	strh	r3, [r2, #0]
 8007296:	e0a3      	b.n	80073e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80072a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80072a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d01b      	beq.n	80072e8 <USB_DeactivateEndpoint+0x2d4>
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	441a      	add	r2, r3
 80072d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80072d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80072f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80072f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01b      	beq.n	8007338 <USB_DeactivateEndpoint+0x324>
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007316:	853b      	strh	r3, [r7, #40]	; 0x28
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	441a      	add	r2, r3
 8007322:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800732c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007330:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007334:	b29b      	uxth	r3, r3
 8007336:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800734a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	441a      	add	r2, r3
 800735a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800735c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736c:	b29b      	uxth	r3, r3
 800736e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007386:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	441a      	add	r2, r3
 8007392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800739c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073be:	847b      	strh	r3, [r7, #34]	; 0x22
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	441a      	add	r2, r3
 80073ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073dc:	b29b      	uxth	r3, r3
 80073de:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3734      	adds	r7, #52	; 0x34
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr

080073ec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b0c2      	sub	sp, #264	; 0x108
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073fa:	6018      	str	r0, [r3, #0]
 80073fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007404:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	785b      	ldrb	r3, [r3, #1]
 8007412:	2b01      	cmp	r3, #1
 8007414:	f040 86b7 	bne.w	8008186 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	699a      	ldr	r2, [r3, #24]
 8007424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	429a      	cmp	r2, r3
 8007432:	d908      	bls.n	8007446 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007444:	e007      	b.n	8007456 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800744a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	7b1b      	ldrb	r3, [r3, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d13a      	bne.n	80074dc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6959      	ldr	r1, [r3, #20]
 8007472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	88da      	ldrh	r2, [r3, #6]
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007482:	b29b      	uxth	r3, r3
 8007484:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007488:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800748c:	6800      	ldr	r0, [r0, #0]
 800748e:	f001 fc9c 	bl	8008dca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	613b      	str	r3, [r7, #16]
 800749e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	461a      	mov	r2, r3
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	4413      	add	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]
 80074b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	011a      	lsls	r2, r3, #4
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	4413      	add	r3, r2
 80074c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	801a      	strh	r2, [r3, #0]
 80074d8:	f000 be1f 	b.w	800811a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80074dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	78db      	ldrb	r3, [r3, #3]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	f040 8462 	bne.w	8007db2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80074ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6a1a      	ldr	r2, [r3, #32]
 80074fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	429a      	cmp	r2, r3
 8007508:	f240 83df 	bls.w	8007cca <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800750c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007532:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	441a      	add	r2, r3
 8007550:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800755c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007564:	b29b      	uxth	r3, r3
 8007566:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6a1a      	ldr	r2, [r3, #32]
 8007574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007578:	1ad2      	subs	r2, r2, r3
 800757a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800758a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 81c7 	beq.w	800793c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	633b      	str	r3, [r7, #48]	; 0x30
 80075ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	785b      	ldrb	r3, [r3, #1]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d177      	bne.n	80076ba <USB_EPStartXfer+0x2ce>
 80075ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	4413      	add	r3, r2
 80075ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	011a      	lsls	r2, r3, #4
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	4413      	add	r3, r2
 8007600:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007610:	b29a      	uxth	r2, r3
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	801a      	strh	r2, [r3, #0]
 8007616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761a:	2b3e      	cmp	r3, #62	; 0x3e
 800761c:	d921      	bls.n	8007662 <USB_EPStartXfer+0x276>
 800761e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007622:	095b      	lsrs	r3, r3, #5
 8007624:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762c:	f003 031f 	and.w	r3, r3, #31
 8007630:	2b00      	cmp	r3, #0
 8007632:	d104      	bne.n	800763e <USB_EPStartXfer+0x252>
 8007634:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007638:	3b01      	subs	r3, #1
 800763a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800763e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29a      	uxth	r2, r3
 8007644:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007648:	b29b      	uxth	r3, r3
 800764a:	029b      	lsls	r3, r3, #10
 800764c:	b29b      	uxth	r3, r3
 800764e:	4313      	orrs	r3, r2
 8007650:	b29b      	uxth	r3, r3
 8007652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765a:	b29a      	uxth	r2, r3
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	801a      	strh	r2, [r3, #0]
 8007660:	e050      	b.n	8007704 <USB_EPStartXfer+0x318>
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <USB_EPStartXfer+0x294>
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007678:	b29a      	uxth	r2, r3
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	e041      	b.n	8007704 <USB_EPStartXfer+0x318>
 8007680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007684:	085b      	lsrs	r3, r3, #1
 8007686:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800768a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d004      	beq.n	80076a0 <USB_EPStartXfer+0x2b4>
 8007696:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800769a:	3301      	adds	r3, #1
 800769c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	029b      	lsls	r3, r3, #10
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	4313      	orrs	r3, r2
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	e024      	b.n	8007704 <USB_EPStartXfer+0x318>
 80076ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d11c      	bne.n	8007704 <USB_EPStartXfer+0x318>
 80076ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076d8:	b29b      	uxth	r3, r3
 80076da:	461a      	mov	r2, r3
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	4413      	add	r3, r2
 80076e0:	633b      	str	r3, [r7, #48]	; 0x30
 80076e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	011a      	lsls	r2, r3, #4
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	4413      	add	r3, r2
 80076f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fe:	b29a      	uxth	r2, r3
 8007700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007702:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	895b      	ldrh	r3, [r3, #10]
 8007710:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6959      	ldr	r1, [r3, #20]
 8007720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007724:	b29b      	uxth	r3, r3
 8007726:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800772a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800772e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007732:	6800      	ldr	r0, [r0, #0]
 8007734:	f001 fb49 	bl	8008dca <USB_WritePMA>
            ep->xfer_buff += len;
 8007738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800773c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695a      	ldr	r2, [r3, #20]
 8007744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007748:	441a      	add	r2, r3
 800774a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6a1a      	ldr	r2, [r3, #32]
 8007762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	429a      	cmp	r2, r3
 8007770:	d90f      	bls.n	8007792 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6a1a      	ldr	r2, [r3, #32]
 800777e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	621a      	str	r2, [r3, #32]
 8007790:	e00e      	b.n	80077b0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007796:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80077a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2200      	movs	r2, #0
 80077ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d177      	bne.n	80078b0 <USB_EPStartXfer+0x4c4>
 80077c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	61bb      	str	r3, [r7, #24]
 80077cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077da:	b29b      	uxth	r3, r3
 80077dc:	461a      	mov	r2, r3
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	4413      	add	r3, r2
 80077e2:	61bb      	str	r3, [r7, #24]
 80077e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	011a      	lsls	r2, r3, #4
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	4413      	add	r3, r2
 80077f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007806:	b29a      	uxth	r2, r3
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	801a      	strh	r2, [r3, #0]
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007810:	2b3e      	cmp	r3, #62	; 0x3e
 8007812:	d921      	bls.n	8007858 <USB_EPStartXfer+0x46c>
 8007814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007818:	095b      	lsrs	r3, r3, #5
 800781a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800781e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007822:	f003 031f 	and.w	r3, r3, #31
 8007826:	2b00      	cmp	r3, #0
 8007828:	d104      	bne.n	8007834 <USB_EPStartXfer+0x448>
 800782a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800782e:	3b01      	subs	r3, #1
 8007830:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29a      	uxth	r2, r3
 800783a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800783e:	b29b      	uxth	r3, r3
 8007840:	029b      	lsls	r3, r3, #10
 8007842:	b29b      	uxth	r3, r3
 8007844:	4313      	orrs	r3, r2
 8007846:	b29b      	uxth	r3, r3
 8007848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800784c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007850:	b29a      	uxth	r2, r3
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	801a      	strh	r2, [r3, #0]
 8007856:	e056      	b.n	8007906 <USB_EPStartXfer+0x51a>
 8007858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <USB_EPStartXfer+0x48a>
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800786a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786e:	b29a      	uxth	r2, r3
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	801a      	strh	r2, [r3, #0]
 8007874:	e047      	b.n	8007906 <USB_EPStartXfer+0x51a>
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	d004      	beq.n	8007896 <USB_EPStartXfer+0x4aa>
 800788c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007890:	3301      	adds	r3, #1
 8007892:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29a      	uxth	r2, r3
 800789c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	029b      	lsls	r3, r3, #10
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	4313      	orrs	r3, r2
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	e02a      	b.n	8007906 <USB_EPStartXfer+0x51a>
 80078b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	785b      	ldrb	r3, [r3, #1]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d122      	bne.n	8007906 <USB_EPStartXfer+0x51a>
 80078c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	623b      	str	r3, [r7, #32]
 80078cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078da:	b29b      	uxth	r3, r3
 80078dc:	461a      	mov	r2, r3
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	4413      	add	r3, r2
 80078e2:	623b      	str	r3, [r7, #32]
 80078e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	011a      	lsls	r2, r3, #4
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	4413      	add	r3, r2
 80078f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078fa:	61fb      	str	r3, [r7, #28]
 80078fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007900:	b29a      	uxth	r2, r3
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	891b      	ldrh	r3, [r3, #8]
 8007912:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6959      	ldr	r1, [r3, #20]
 8007922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007926:	b29b      	uxth	r3, r3
 8007928:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800792c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007930:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007934:	6800      	ldr	r0, [r0, #0]
 8007936:	f001 fa48 	bl	8008dca <USB_WritePMA>
 800793a:	e3ee      	b.n	800811a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800793c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	785b      	ldrb	r3, [r3, #1]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d177      	bne.n	8007a3c <USB_EPStartXfer+0x650>
 800794c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	64bb      	str	r3, [r7, #72]	; 0x48
 8007958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800795c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007966:	b29b      	uxth	r3, r3
 8007968:	461a      	mov	r2, r3
 800796a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796c:	4413      	add	r3, r2
 800796e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	011a      	lsls	r2, r3, #4
 800797e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007980:	4413      	add	r3, r2
 8007982:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007986:	647b      	str	r3, [r7, #68]	; 0x44
 8007988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007992:	b29a      	uxth	r2, r3
 8007994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800799c:	2b3e      	cmp	r3, #62	; 0x3e
 800799e:	d921      	bls.n	80079e4 <USB_EPStartXfer+0x5f8>
 80079a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a4:	095b      	lsrs	r3, r3, #5
 80079a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ae:	f003 031f 	and.w	r3, r3, #31
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d104      	bne.n	80079c0 <USB_EPStartXfer+0x5d4>
 80079b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079ba:	3b01      	subs	r3, #1
 80079bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	4313      	orrs	r3, r2
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079dc:	b29a      	uxth	r2, r3
 80079de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e0:	801a      	strh	r2, [r3, #0]
 80079e2:	e056      	b.n	8007a92 <USB_EPStartXfer+0x6a6>
 80079e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10a      	bne.n	8007a02 <USB_EPStartXfer+0x616>
 80079ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079fe:	801a      	strh	r2, [r3, #0]
 8007a00:	e047      	b.n	8007a92 <USB_EPStartXfer+0x6a6>
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a06:	085b      	lsrs	r3, r3, #1
 8007a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <USB_EPStartXfer+0x636>
 8007a18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	029b      	lsls	r3, r3, #10
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	4313      	orrs	r3, r2
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	e02a      	b.n	8007a92 <USB_EPStartXfer+0x6a6>
 8007a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	785b      	ldrb	r3, [r3, #1]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d122      	bne.n	8007a92 <USB_EPStartXfer+0x6a6>
 8007a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	653b      	str	r3, [r7, #80]	; 0x50
 8007a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a6c:	4413      	add	r3, r2
 8007a6e:	653b      	str	r3, [r7, #80]	; 0x50
 8007a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	011a      	lsls	r2, r3, #4
 8007a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a80:	4413      	add	r3, r2
 8007a82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	891b      	ldrh	r3, [r3, #8]
 8007a9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6959      	ldr	r1, [r3, #20]
 8007aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ab8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007abc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007ac0:	6800      	ldr	r0, [r0, #0]
 8007ac2:	f001 f982 	bl	8008dca <USB_WritePMA>
            ep->xfer_buff += len;
 8007ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	695a      	ldr	r2, [r3, #20]
 8007ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad6:	441a      	add	r2, r3
 8007ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6a1a      	ldr	r2, [r3, #32]
 8007af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d90f      	bls.n	8007b20 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6a1a      	ldr	r2, [r3, #32]
 8007b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b10:	1ad2      	subs	r2, r2, r3
 8007b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	621a      	str	r2, [r3, #32]
 8007b1e:	e00e      	b.n	8007b3e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	643b      	str	r3, [r7, #64]	; 0x40
 8007b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d177      	bne.n	8007c4a <USB_EPStartXfer+0x85e>
 8007b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	461a      	mov	r2, r3
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	4413      	add	r3, r2
 8007b7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	011a      	lsls	r2, r3, #4
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	4413      	add	r3, r2
 8007b90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b94:	637b      	str	r3, [r7, #52]	; 0x34
 8007b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba4:	801a      	strh	r2, [r3, #0]
 8007ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007baa:	2b3e      	cmp	r3, #62	; 0x3e
 8007bac:	d921      	bls.n	8007bf2 <USB_EPStartXfer+0x806>
 8007bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb2:	095b      	lsrs	r3, r3, #5
 8007bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bbc:	f003 031f 	and.w	r3, r3, #31
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <USB_EPStartXfer+0x7e2>
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	029b      	lsls	r3, r3, #10
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	4313      	orrs	r3, r2
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bee:	801a      	strh	r2, [r3, #0]
 8007bf0:	e050      	b.n	8007c94 <USB_EPStartXfer+0x8a8>
 8007bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10a      	bne.n	8007c10 <USB_EPStartXfer+0x824>
 8007bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0c:	801a      	strh	r2, [r3, #0]
 8007c0e:	e041      	b.n	8007c94 <USB_EPStartXfer+0x8a8>
 8007c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c14:	085b      	lsrs	r3, r3, #1
 8007c16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d004      	beq.n	8007c30 <USB_EPStartXfer+0x844>
 8007c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	029b      	lsls	r3, r3, #10
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	4313      	orrs	r3, r2
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c46:	801a      	strh	r2, [r3, #0]
 8007c48:	e024      	b.n	8007c94 <USB_EPStartXfer+0x8a8>
 8007c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	785b      	ldrb	r3, [r3, #1]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d11c      	bne.n	8007c94 <USB_EPStartXfer+0x8a8>
 8007c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c6e:	4413      	add	r3, r2
 8007c70:	643b      	str	r3, [r7, #64]	; 0x40
 8007c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	011a      	lsls	r2, r3, #4
 8007c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c82:	4413      	add	r3, r2
 8007c84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	895b      	ldrh	r3, [r3, #10]
 8007ca0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6959      	ldr	r1, [r3, #20]
 8007cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007cba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007cbe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007cc2:	6800      	ldr	r0, [r0, #0]
 8007cc4:	f001 f881 	bl	8008dca <USB_WritePMA>
 8007cc8:	e227      	b.n	800811a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d00:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	441a      	add	r2, r3
 8007d1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	461a      	mov	r2, r3
 8007d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d56:	4413      	add	r3, r2
 8007d58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	011a      	lsls	r2, r3, #4
 8007d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d70:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	891b      	ldrh	r3, [r3, #8]
 8007d88:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6959      	ldr	r1, [r3, #20]
 8007d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007da2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007da6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007daa:	6800      	ldr	r0, [r0, #0]
 8007dac:	f001 f80d 	bl	8008dca <USB_WritePMA>
 8007db0:	e1b3      	b.n	800811a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6a1a      	ldr	r2, [r3, #32]
 8007dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc2:	1ad2      	subs	r2, r2, r3
 8007dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80c6 	beq.w	8007f84 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	673b      	str	r3, [r7, #112]	; 0x70
 8007e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	785b      	ldrb	r3, [r3, #1]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d177      	bne.n	8007f04 <USB_EPStartXfer+0xb18>
 8007e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e34:	4413      	add	r3, r2
 8007e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	011a      	lsls	r2, r3, #4
 8007e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e48:	4413      	add	r3, r2
 8007e4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e4e:	667b      	str	r3, [r7, #100]	; 0x64
 8007e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e5e:	801a      	strh	r2, [r3, #0]
 8007e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e64:	2b3e      	cmp	r3, #62	; 0x3e
 8007e66:	d921      	bls.n	8007eac <USB_EPStartXfer+0xac0>
 8007e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e6c:	095b      	lsrs	r3, r3, #5
 8007e6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e76:	f003 031f 	and.w	r3, r3, #31
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d104      	bne.n	8007e88 <USB_EPStartXfer+0xa9c>
 8007e7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e82:	3b01      	subs	r3, #1
 8007e84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	029b      	lsls	r3, r3, #10
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ea8:	801a      	strh	r2, [r3, #0]
 8007eaa:	e050      	b.n	8007f4e <USB_EPStartXfer+0xb62>
 8007eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10a      	bne.n	8007eca <USB_EPStartXfer+0xade>
 8007eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ec6:	801a      	strh	r2, [r3, #0]
 8007ec8:	e041      	b.n	8007f4e <USB_EPStartXfer+0xb62>
 8007eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ece:	085b      	lsrs	r3, r3, #1
 8007ed0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d004      	beq.n	8007eea <USB_EPStartXfer+0xafe>
 8007ee0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007eea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	029b      	lsls	r3, r3, #10
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	4313      	orrs	r3, r2
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f00:	801a      	strh	r2, [r3, #0]
 8007f02:	e024      	b.n	8007f4e <USB_EPStartXfer+0xb62>
 8007f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	785b      	ldrb	r3, [r3, #1]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d11c      	bne.n	8007f4e <USB_EPStartXfer+0xb62>
 8007f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f28:	4413      	add	r3, r2
 8007f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8007f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	011a      	lsls	r2, r3, #4
 8007f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f4c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	895b      	ldrh	r3, [r3, #10]
 8007f5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6959      	ldr	r1, [r3, #20]
 8007f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f7c:	6800      	ldr	r0, [r0, #0]
 8007f7e:	f000 ff24 	bl	8008dca <USB_WritePMA>
 8007f82:	e0ca      	b.n	800811a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	785b      	ldrb	r3, [r3, #1]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d177      	bne.n	8008084 <USB_EPStartXfer+0xc98>
 8007f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fb4:	4413      	add	r3, r2
 8007fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	011a      	lsls	r2, r3, #4
 8007fc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fc8:	4413      	add	r3, r2
 8007fca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fce:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fd2:	881b      	ldrh	r3, [r3, #0]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fde:	801a      	strh	r2, [r3, #0]
 8007fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8007fe6:	d921      	bls.n	800802c <USB_EPStartXfer+0xc40>
 8007fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fec:	095b      	lsrs	r3, r3, #5
 8007fee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff6:	f003 031f 	and.w	r3, r3, #31
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d104      	bne.n	8008008 <USB_EPStartXfer+0xc1c>
 8007ffe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008002:	3b01      	subs	r3, #1
 8008004:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29a      	uxth	r2, r3
 800800e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008012:	b29b      	uxth	r3, r3
 8008014:	029b      	lsls	r3, r3, #10
 8008016:	b29b      	uxth	r3, r3
 8008018:	4313      	orrs	r3, r2
 800801a:	b29b      	uxth	r3, r3
 800801c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008024:	b29a      	uxth	r2, r3
 8008026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008028:	801a      	strh	r2, [r3, #0]
 800802a:	e05c      	b.n	80080e6 <USB_EPStartXfer+0xcfa>
 800802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10a      	bne.n	800804a <USB_EPStartXfer+0xc5e>
 8008034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29b      	uxth	r3, r3
 800803a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008042:	b29a      	uxth	r2, r3
 8008044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008046:	801a      	strh	r2, [r3, #0]
 8008048:	e04d      	b.n	80080e6 <USB_EPStartXfer+0xcfa>
 800804a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800804e:	085b      	lsrs	r3, r3, #1
 8008050:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <USB_EPStartXfer+0xc7e>
 8008060:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008064:	3301      	adds	r3, #1
 8008066:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800806a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29a      	uxth	r2, r3
 8008070:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008074:	b29b      	uxth	r3, r3
 8008076:	029b      	lsls	r3, r3, #10
 8008078:	b29b      	uxth	r3, r3
 800807a:	4313      	orrs	r3, r2
 800807c:	b29a      	uxth	r2, r3
 800807e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008080:	801a      	strh	r2, [r3, #0]
 8008082:	e030      	b.n	80080e6 <USB_EPStartXfer+0xcfa>
 8008084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	785b      	ldrb	r3, [r3, #1]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d128      	bne.n	80080e6 <USB_EPStartXfer+0xcfa>
 8008094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080b8:	4413      	add	r3, r2
 80080ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	011a      	lsls	r2, r3, #4
 80080cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080d0:	4413      	add	r3, r2
 80080d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080de:	b29a      	uxth	r2, r3
 80080e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	891b      	ldrh	r3, [r3, #8]
 80080f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6959      	ldr	r1, [r3, #20]
 8008102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008106:	b29b      	uxth	r3, r3
 8008108:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800810c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008110:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008114:	6800      	ldr	r0, [r0, #0]
 8008116:	f000 fe58 	bl	8008dca <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800811a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	b29b      	uxth	r3, r3
 8008138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800813c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008140:	817b      	strh	r3, [r7, #10]
 8008142:	897b      	ldrh	r3, [r7, #10]
 8008144:	f083 0310 	eor.w	r3, r3, #16
 8008148:	817b      	strh	r3, [r7, #10]
 800814a:	897b      	ldrh	r3, [r7, #10]
 800814c:	f083 0320 	eor.w	r3, r3, #32
 8008150:	817b      	strh	r3, [r7, #10]
 8008152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	441a      	add	r2, r3
 800816c:	897b      	ldrh	r3, [r7, #10]
 800816e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800817a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817e:	b29b      	uxth	r3, r3
 8008180:	8013      	strh	r3, [r2, #0]
 8008182:	f000 bcde 	b.w	8008b42 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800818a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	7b1b      	ldrb	r3, [r3, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f040 80bb 	bne.w	800830e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	699a      	ldr	r2, [r3, #24]
 80081a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d917      	bls.n	80081e4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80081b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80081c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d4:	1ad2      	subs	r2, r2, r3
 80081d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	619a      	str	r2, [r3, #24]
 80081e2:	e00e      	b.n	8008202 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80081e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80081f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2200      	movs	r2, #0
 8008200:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008214:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800821e:	b29b      	uxth	r3, r3
 8008220:	461a      	mov	r2, r3
 8008222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008226:	4413      	add	r3, r2
 8008228:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800822c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	011a      	lsls	r2, r3, #4
 800823a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800823e:	4413      	add	r3, r2
 8008240:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	b29b      	uxth	r3, r3
 8008250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008254:	b29a      	uxth	r2, r3
 8008256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800825a:	801a      	strh	r2, [r3, #0]
 800825c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008260:	2b3e      	cmp	r3, #62	; 0x3e
 8008262:	d924      	bls.n	80082ae <USB_EPStartXfer+0xec2>
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008268:	095b      	lsrs	r3, r3, #5
 800826a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800826e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008272:	f003 031f 	and.w	r3, r3, #31
 8008276:	2b00      	cmp	r3, #0
 8008278:	d104      	bne.n	8008284 <USB_EPStartXfer+0xe98>
 800827a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800827e:	3b01      	subs	r3, #1
 8008280:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	b29a      	uxth	r2, r3
 800828c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008290:	b29b      	uxth	r3, r3
 8008292:	029b      	lsls	r3, r3, #10
 8008294:	b29b      	uxth	r3, r3
 8008296:	4313      	orrs	r3, r2
 8008298:	b29b      	uxth	r3, r3
 800829a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800829e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082a8:	801a      	strh	r2, [r3, #0]
 80082aa:	f000 bc10 	b.w	8008ace <USB_EPStartXfer+0x16e2>
 80082ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10c      	bne.n	80082d0 <USB_EPStartXfer+0xee4>
 80082b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	b29b      	uxth	r3, r3
 80082be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082cc:	801a      	strh	r2, [r3, #0]
 80082ce:	e3fe      	b.n	8008ace <USB_EPStartXfer+0x16e2>
 80082d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d4:	085b      	lsrs	r3, r3, #1
 80082d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d004      	beq.n	80082f0 <USB_EPStartXfer+0xf04>
 80082e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082ea:	3301      	adds	r3, #1
 80082ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	029b      	lsls	r3, r3, #10
 8008300:	b29b      	uxth	r3, r3
 8008302:	4313      	orrs	r3, r2
 8008304:	b29a      	uxth	r2, r3
 8008306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800830a:	801a      	strh	r2, [r3, #0]
 800830c:	e3df      	b.n	8008ace <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800830e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	78db      	ldrb	r3, [r3, #3]
 800831a:	2b02      	cmp	r3, #2
 800831c:	f040 8218 	bne.w	8008750 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	785b      	ldrb	r3, [r3, #1]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f040 809d 	bne.w	800846c <USB_EPStartXfer+0x1080>
 8008332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800834e:	b29b      	uxth	r3, r3
 8008350:	461a      	mov	r2, r3
 8008352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008356:	4413      	add	r3, r2
 8008358:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800835c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	011a      	lsls	r2, r3, #4
 800836a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800836e:	4413      	add	r3, r2
 8008370:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008378:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	b29b      	uxth	r3, r3
 8008380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008384:	b29a      	uxth	r2, r3
 8008386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800838a:	801a      	strh	r2, [r3, #0]
 800838c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	2b3e      	cmp	r3, #62	; 0x3e
 800839a:	d92b      	bls.n	80083f4 <USB_EPStartXfer+0x1008>
 800839c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	095b      	lsrs	r3, r3, #5
 80083aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f003 031f 	and.w	r3, r3, #31
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d104      	bne.n	80083cc <USB_EPStartXfer+0xfe0>
 80083c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c6:	3b01      	subs	r3, #1
 80083c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d8:	b29b      	uxth	r3, r3
 80083da:	029b      	lsls	r3, r3, #10
 80083dc:	b29b      	uxth	r3, r3
 80083de:	4313      	orrs	r3, r2
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083f0:	801a      	strh	r2, [r3, #0]
 80083f2:	e070      	b.n	80084d6 <USB_EPStartXfer+0x10ea>
 80083f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10c      	bne.n	800841e <USB_EPStartXfer+0x1032>
 8008404:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	b29b      	uxth	r3, r3
 800840c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008414:	b29a      	uxth	r2, r3
 8008416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800841a:	801a      	strh	r2, [r3, #0]
 800841c:	e05b      	b.n	80084d6 <USB_EPStartXfer+0x10ea>
 800841e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	085b      	lsrs	r3, r3, #1
 800842c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d004      	beq.n	800844e <USB_EPStartXfer+0x1062>
 8008444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008448:	3301      	adds	r3, #1
 800844a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800844e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008452:	881b      	ldrh	r3, [r3, #0]
 8008454:	b29a      	uxth	r2, r3
 8008456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845a:	b29b      	uxth	r3, r3
 800845c:	029b      	lsls	r3, r3, #10
 800845e:	b29b      	uxth	r3, r3
 8008460:	4313      	orrs	r3, r2
 8008462:	b29a      	uxth	r2, r3
 8008464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008468:	801a      	strh	r2, [r3, #0]
 800846a:	e034      	b.n	80084d6 <USB_EPStartXfer+0x10ea>
 800846c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	785b      	ldrb	r3, [r3, #1]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d12c      	bne.n	80084d6 <USB_EPStartXfer+0x10ea>
 800847c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800848a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008498:	b29b      	uxth	r3, r3
 800849a:	461a      	mov	r2, r3
 800849c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084a0:	4413      	add	r3, r2
 80084a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	011a      	lsls	r2, r3, #4
 80084b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084b8:	4413      	add	r3, r2
 80084ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084d4:	801a      	strh	r2, [r3, #0]
 80084d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80084e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	785b      	ldrb	r3, [r3, #1]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f040 809d 	bne.w	8008630 <USB_EPStartXfer+0x1244>
 80084f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008508:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008512:	b29b      	uxth	r3, r3
 8008514:	461a      	mov	r2, r3
 8008516:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800851a:	4413      	add	r3, r2
 800851c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	011a      	lsls	r2, r3, #4
 800852e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008532:	4413      	add	r3, r2
 8008534:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800853c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b29b      	uxth	r3, r3
 8008544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008548:	b29a      	uxth	r2, r3
 800854a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	2b3e      	cmp	r3, #62	; 0x3e
 800855e:	d92b      	bls.n	80085b8 <USB_EPStartXfer+0x11cc>
 8008560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	095b      	lsrs	r3, r3, #5
 800856e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	f003 031f 	and.w	r3, r3, #31
 8008582:	2b00      	cmp	r3, #0
 8008584:	d104      	bne.n	8008590 <USB_EPStartXfer+0x11a4>
 8008586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800858a:	3b01      	subs	r3, #1
 800858c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008590:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b29a      	uxth	r2, r3
 8008598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800859c:	b29b      	uxth	r3, r3
 800859e:	029b      	lsls	r3, r3, #10
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	4313      	orrs	r3, r2
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ae:	b29a      	uxth	r2, r3
 80085b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085b4:	801a      	strh	r2, [r3, #0]
 80085b6:	e069      	b.n	800868c <USB_EPStartXfer+0x12a0>
 80085b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10c      	bne.n	80085e2 <USB_EPStartXfer+0x11f6>
 80085c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d8:	b29a      	uxth	r2, r3
 80085da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085de:	801a      	strh	r2, [r3, #0]
 80085e0:	e054      	b.n	800868c <USB_EPStartXfer+0x12a0>
 80085e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	085b      	lsrs	r3, r3, #1
 80085f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	2b00      	cmp	r3, #0
 8008606:	d004      	beq.n	8008612 <USB_EPStartXfer+0x1226>
 8008608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800860c:	3301      	adds	r3, #1
 800860e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008612:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008616:	881b      	ldrh	r3, [r3, #0]
 8008618:	b29a      	uxth	r2, r3
 800861a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800861e:	b29b      	uxth	r3, r3
 8008620:	029b      	lsls	r3, r3, #10
 8008622:	b29b      	uxth	r3, r3
 8008624:	4313      	orrs	r3, r2
 8008626:	b29a      	uxth	r2, r3
 8008628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800862c:	801a      	strh	r2, [r3, #0]
 800862e:	e02d      	b.n	800868c <USB_EPStartXfer+0x12a0>
 8008630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	785b      	ldrb	r3, [r3, #1]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d125      	bne.n	800868c <USB_EPStartXfer+0x12a0>
 8008640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800864e:	b29b      	uxth	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008656:	4413      	add	r3, r2
 8008658:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800865c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	011a      	lsls	r2, r3, #4
 800866a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800866e:	4413      	add	r3, r2
 8008670:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008674:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800867c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	b29a      	uxth	r2, r3
 8008686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800868a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800868c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 8218 	beq.w	8008ace <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800869e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80086c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <USB_EPStartXfer+0x12ea>
 80086ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80086ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10d      	bne.n	80086f2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80086da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f040 81f5 	bne.w	8008ace <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80086e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f040 81ee 	bne.w	8008ace <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80086f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	b29b      	uxth	r3, r3
 8008710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008718:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800871c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800872a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	441a      	add	r2, r3
 8008736:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800873a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800873e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008746:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800874a:	b29b      	uxth	r3, r3
 800874c:	8013      	strh	r3, [r2, #0]
 800874e:	e1be      	b.n	8008ace <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	78db      	ldrb	r3, [r3, #3]
 800875c:	2b01      	cmp	r3, #1
 800875e:	f040 81b4 	bne.w	8008aca <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699a      	ldr	r2, [r3, #24]
 800876e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	429a      	cmp	r2, r3
 800877c:	d917      	bls.n	80087ae <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800877e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800878e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699a      	ldr	r2, [r3, #24]
 800879a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800879e:	1ad2      	subs	r2, r2, r3
 80087a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	619a      	str	r2, [r3, #24]
 80087ac:	e00e      	b.n	80087cc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80087ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80087be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2200      	movs	r2, #0
 80087ca:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80087cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	785b      	ldrb	r3, [r3, #1]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f040 8085 	bne.w	80088e8 <USB_EPStartXfer+0x14fc>
 80087de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008802:	4413      	add	r3, r2
 8008804:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800880c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	011a      	lsls	r2, r3, #4
 8008816:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800881a:	4413      	add	r3, r2
 800881c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008824:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	b29b      	uxth	r3, r3
 800882c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008830:	b29a      	uxth	r2, r3
 8008832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008836:	801a      	strh	r2, [r3, #0]
 8008838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800883c:	2b3e      	cmp	r3, #62	; 0x3e
 800883e:	d923      	bls.n	8008888 <USB_EPStartXfer+0x149c>
 8008840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008844:	095b      	lsrs	r3, r3, #5
 8008846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800884a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800884e:	f003 031f 	and.w	r3, r3, #31
 8008852:	2b00      	cmp	r3, #0
 8008854:	d104      	bne.n	8008860 <USB_EPStartXfer+0x1474>
 8008856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800885a:	3b01      	subs	r3, #1
 800885c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008860:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	b29a      	uxth	r2, r3
 8008868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800886c:	b29b      	uxth	r3, r3
 800886e:	029b      	lsls	r3, r3, #10
 8008870:	b29b      	uxth	r3, r3
 8008872:	4313      	orrs	r3, r2
 8008874:	b29b      	uxth	r3, r3
 8008876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800887a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800887e:	b29a      	uxth	r2, r3
 8008880:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008884:	801a      	strh	r2, [r3, #0]
 8008886:	e060      	b.n	800894a <USB_EPStartXfer+0x155e>
 8008888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10c      	bne.n	80088aa <USB_EPStartXfer+0x14be>
 8008890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	b29b      	uxth	r3, r3
 8008898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800889c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088a6:	801a      	strh	r2, [r3, #0]
 80088a8:	e04f      	b.n	800894a <USB_EPStartXfer+0x155e>
 80088aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ae:	085b      	lsrs	r3, r3, #1
 80088b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80088b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d004      	beq.n	80088ca <USB_EPStartXfer+0x14de>
 80088c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088c4:	3301      	adds	r3, #1
 80088c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80088ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088ce:	881b      	ldrh	r3, [r3, #0]
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	029b      	lsls	r3, r3, #10
 80088da:	b29b      	uxth	r3, r3
 80088dc:	4313      	orrs	r3, r2
 80088de:	b29a      	uxth	r2, r3
 80088e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	e030      	b.n	800894a <USB_EPStartXfer+0x155e>
 80088e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d128      	bne.n	800894a <USB_EPStartXfer+0x155e>
 80088f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008914:	b29b      	uxth	r3, r3
 8008916:	461a      	mov	r2, r3
 8008918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800891c:	4413      	add	r3, r2
 800891e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	011a      	lsls	r2, r3, #4
 8008930:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008934:	4413      	add	r3, r2
 8008936:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800893a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800893e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008942:	b29a      	uxth	r2, r3
 8008944:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008948:	801a      	strh	r2, [r3, #0]
 800894a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	785b      	ldrb	r3, [r3, #1]
 8008964:	2b00      	cmp	r3, #0
 8008966:	f040 8085 	bne.w	8008a74 <USB_EPStartXfer+0x1688>
 800896a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008986:	b29b      	uxth	r3, r3
 8008988:	461a      	mov	r2, r3
 800898a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800898e:	4413      	add	r3, r2
 8008990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	011a      	lsls	r2, r3, #4
 80089a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80089a6:	4413      	add	r3, r2
 80089a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089bc:	b29a      	uxth	r2, r3
 80089be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089c2:	801a      	strh	r2, [r3, #0]
 80089c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089c8:	2b3e      	cmp	r3, #62	; 0x3e
 80089ca:	d923      	bls.n	8008a14 <USB_EPStartXfer+0x1628>
 80089cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089da:	f003 031f 	and.w	r3, r3, #31
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d104      	bne.n	80089ec <USB_EPStartXfer+0x1600>
 80089e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089e6:	3b01      	subs	r3, #1
 80089e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	029b      	lsls	r3, r3, #10
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	4313      	orrs	r3, r2
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a10:	801a      	strh	r2, [r3, #0]
 8008a12:	e05c      	b.n	8008ace <USB_EPStartXfer+0x16e2>
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10c      	bne.n	8008a36 <USB_EPStartXfer+0x164a>
 8008a1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a32:	801a      	strh	r2, [r3, #0]
 8008a34:	e04b      	b.n	8008ace <USB_EPStartXfer+0x16e2>
 8008a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3a:	085b      	lsrs	r3, r3, #1
 8008a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d004      	beq.n	8008a56 <USB_EPStartXfer+0x166a>
 8008a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a50:	3301      	adds	r3, #1
 8008a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	029b      	lsls	r3, r3, #10
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	b29a      	uxth	r2, r3
 8008a6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a70:	801a      	strh	r2, [r3, #0]
 8008a72:	e02c      	b.n	8008ace <USB_EPStartXfer+0x16e2>
 8008a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	785b      	ldrb	r3, [r3, #1]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d124      	bne.n	8008ace <USB_EPStartXfer+0x16e2>
 8008a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	461a      	mov	r2, r3
 8008a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	011a      	lsls	r2, r3, #4
 8008aae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	e001      	b.n	8008ace <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e03a      	b.n	8008b44 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008af8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008afc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b00:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008b04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008b08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b0c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	441a      	add	r2, r3
 8008b2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b085      	sub	sp, #20
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	785b      	ldrb	r3, [r3, #1]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d020      	beq.n	8008ba2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b76:	81bb      	strh	r3, [r7, #12]
 8008b78:	89bb      	ldrh	r3, [r7, #12]
 8008b7a:	f083 0310 	eor.w	r3, r3, #16
 8008b7e:	81bb      	strh	r3, [r7, #12]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	441a      	add	r2, r3
 8008b8a:	89bb      	ldrh	r3, [r7, #12]
 8008b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	8013      	strh	r3, [r2, #0]
 8008ba0:	e01f      	b.n	8008be2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb8:	81fb      	strh	r3, [r7, #14]
 8008bba:	89fb      	ldrh	r3, [r7, #14]
 8008bbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bc0:	81fb      	strh	r3, [r7, #14]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	441a      	add	r2, r3
 8008bcc:	89fb      	ldrh	r3, [r7, #14]
 8008bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr

08008bee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b087      	sub	sp, #28
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	7b1b      	ldrb	r3, [r3, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f040 809d 	bne.w	8008d3c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d04c      	beq.n	8008ca4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	823b      	strh	r3, [r7, #16]
 8008c18:	8a3b      	ldrh	r3, [r7, #16]
 8008c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d01b      	beq.n	8008c5a <USB_EPClearStall+0x6c>
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c38:	81fb      	strh	r3, [r7, #14]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	441a      	add	r2, r3
 8008c44:	89fb      	ldrh	r3, [r7, #14]
 8008c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	78db      	ldrb	r3, [r3, #3]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d06c      	beq.n	8008d3c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c78:	81bb      	strh	r3, [r7, #12]
 8008c7a:	89bb      	ldrh	r3, [r7, #12]
 8008c7c:	f083 0320 	eor.w	r3, r3, #32
 8008c80:	81bb      	strh	r3, [r7, #12]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	441a      	add	r2, r3
 8008c8c:	89bb      	ldrh	r3, [r7, #12]
 8008c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	8013      	strh	r3, [r2, #0]
 8008ca2:	e04b      	b.n	8008d3c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	82fb      	strh	r3, [r7, #22]
 8008cb2:	8afb      	ldrh	r3, [r7, #22]
 8008cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01b      	beq.n	8008cf4 <USB_EPClearStall+0x106>
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd2:	82bb      	strh	r3, [r7, #20]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	441a      	add	r2, r3
 8008cde:	8abb      	ldrh	r3, [r7, #20]
 8008ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0a:	827b      	strh	r3, [r7, #18]
 8008d0c:	8a7b      	ldrh	r3, [r7, #18]
 8008d0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d12:	827b      	strh	r3, [r7, #18]
 8008d14:	8a7b      	ldrh	r3, [r7, #18]
 8008d16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d1a:	827b      	strh	r3, [r7, #18]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	441a      	add	r2, r3
 8008d26:	8a7b      	ldrh	r3, [r7, #18]
 8008d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	371c      	adds	r7, #28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bc80      	pop	{r7}
 8008d46:	4770      	bx	lr

08008d48 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d103      	bne.n	8008d62 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2280      	movs	r2, #128	; 0x80
 8008d5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bc80      	pop	{r7}
 8008d6c:	4770      	bx	lr

08008d6e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bc80      	pop	{r7}
 8008d80:	4770      	bx	lr

08008d82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bc80      	pop	{r7}
 8008d94:	4770      	bx	lr

08008d96 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b085      	sub	sp, #20
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008da8:	68fb      	ldr	r3, [r7, #12]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bc80      	pop	{r7}
 8008db2:	4770      	bx	lr

08008db4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr

08008dca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b08b      	sub	sp, #44	; 0x2c
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	460b      	mov	r3, r1
 8008dda:	80fb      	strh	r3, [r7, #6]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008de0:	88bb      	ldrh	r3, [r7, #4]
 8008de2:	3301      	adds	r3, #1
 8008de4:	085b      	lsrs	r3, r3, #1
 8008de6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008df0:	88fb      	ldrh	r3, [r7, #6]
 8008df2:	005a      	lsls	r2, r3, #1
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dfc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
 8008e02:	e01e      	b.n	8008e42 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	021b      	lsls	r3, r3, #8
 8008e12:	b21a      	sxth	r2, r3
 8008e14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	b21b      	sxth	r3, r3
 8008e1c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	8a7a      	ldrh	r2, [r7, #18]
 8008e22:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	3302      	adds	r3, #2
 8008e28:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	3301      	adds	r3, #1
 8008e34:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	627b      	str	r3, [r7, #36]	; 0x24
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1dd      	bne.n	8008e04 <USB_WritePMA+0x3a>
  }
}
 8008e48:	bf00      	nop
 8008e4a:	bf00      	nop
 8008e4c:	372c      	adds	r7, #44	; 0x2c
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bc80      	pop	{r7}
 8008e52:	4770      	bx	lr

08008e54 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b08b      	sub	sp, #44	; 0x2c
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4611      	mov	r1, r2
 8008e60:	461a      	mov	r2, r3
 8008e62:	460b      	mov	r3, r1
 8008e64:	80fb      	strh	r3, [r7, #6]
 8008e66:	4613      	mov	r3, r2
 8008e68:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e6a:	88bb      	ldrh	r3, [r7, #4]
 8008e6c:	085b      	lsrs	r3, r3, #1
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e7a:	88fb      	ldrh	r3, [r7, #6]
 8008e7c:	005a      	lsls	r2, r3, #1
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e86:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e8c:	e01b      	b.n	8008ec6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	3302      	adds	r3, #2
 8008e9a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	0a1b      	lsrs	r3, r3, #8
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008eba:	6a3b      	ldr	r3, [r7, #32]
 8008ebc:	3302      	adds	r3, #2
 8008ebe:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e0      	bne.n	8008e8e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008ecc:	88bb      	ldrh	r3, [r7, #4]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	701a      	strb	r2, [r3, #0]
  }
}
 8008ee8:	bf00      	nop
 8008eea:	372c      	adds	r7, #44	; 0x2c
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bc80      	pop	{r7}
 8008ef0:	4770      	bx	lr

08008ef2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	460b      	mov	r3, r1
 8008efc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	7c1b      	ldrb	r3, [r3, #16]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d115      	bne.n	8008f36 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f0e:	2202      	movs	r2, #2
 8008f10:	2181      	movs	r1, #129	; 0x81
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 fe9d 	bl	800ac52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f22:	2202      	movs	r2, #2
 8008f24:	2101      	movs	r1, #1
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f001 fe93 	bl	800ac52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008f34:	e012      	b.n	8008f5c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f36:	2340      	movs	r3, #64	; 0x40
 8008f38:	2202      	movs	r2, #2
 8008f3a:	2181      	movs	r1, #129	; 0x81
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f001 fe88 	bl	800ac52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f48:	2340      	movs	r3, #64	; 0x40
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f001 fe7f 	bl	800ac52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	2203      	movs	r2, #3
 8008f60:	2182      	movs	r1, #130	; 0x82
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 fe75 	bl	800ac52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f6e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f72:	f001 ff95 	bl	800aea0 <USBD_static_malloc>
 8008f76:	4602      	mov	r2, r0
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d102      	bne.n	8008f8e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	73fb      	strb	r3, [r7, #15]
 8008f8c:	e026      	b.n	8008fdc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f94:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	7c1b      	ldrb	r3, [r3, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d109      	bne.n	8008fcc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 ff35 	bl	800ae34 <USBD_LL_PrepareReceive>
 8008fca:	e007      	b.n	8008fdc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fd2:	2340      	movs	r3, #64	; 0x40
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f001 ff2c 	bl	800ae34 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ff6:	2181      	movs	r1, #129	; 0x81
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 fe50 	bl	800ac9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009004:	2101      	movs	r1, #1
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f001 fe49 	bl	800ac9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009014:	2182      	movs	r1, #130	; 0x82
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 fe41 	bl	800ac9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00e      	beq.n	800904a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800903c:	4618      	mov	r0, r3
 800903e:	f001 ff3b 	bl	800aeb8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009064:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800907a:	2b00      	cmp	r3, #0
 800907c:	d039      	beq.n	80090f2 <USBD_CDC_Setup+0x9e>
 800907e:	2b20      	cmp	r3, #32
 8009080:	d17f      	bne.n	8009182 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	88db      	ldrh	r3, [r3, #6]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d029      	beq.n	80090de <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	b25b      	sxtb	r3, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	da11      	bge.n	80090b8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80090a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	88d2      	ldrh	r2, [r2, #6]
 80090a6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090a8:	6939      	ldr	r1, [r7, #16]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	88db      	ldrh	r3, [r3, #6]
 80090ae:	461a      	mov	r2, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 fa0a 	bl	800a4ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80090b6:	e06b      	b.n	8009190 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	785a      	ldrb	r2, [r3, #1]
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	88db      	ldrh	r3, [r3, #6]
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090ce:	6939      	ldr	r1, [r7, #16]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	88db      	ldrh	r3, [r3, #6]
 80090d4:	461a      	mov	r2, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 fa25 	bl	800a526 <USBD_CtlPrepareRx>
      break;
 80090dc:	e058      	b.n	8009190 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	7850      	ldrb	r0, [r2, #1]
 80090ea:	2200      	movs	r2, #0
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	4798      	blx	r3
      break;
 80090f0:	e04e      	b.n	8009190 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	785b      	ldrb	r3, [r3, #1]
 80090f6:	2b0b      	cmp	r3, #11
 80090f8:	d02e      	beq.n	8009158 <USBD_CDC_Setup+0x104>
 80090fa:	2b0b      	cmp	r3, #11
 80090fc:	dc38      	bgt.n	8009170 <USBD_CDC_Setup+0x11c>
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <USBD_CDC_Setup+0xb4>
 8009102:	2b0a      	cmp	r3, #10
 8009104:	d014      	beq.n	8009130 <USBD_CDC_Setup+0xdc>
 8009106:	e033      	b.n	8009170 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800910e:	2b03      	cmp	r3, #3
 8009110:	d107      	bne.n	8009122 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009112:	f107 030c 	add.w	r3, r7, #12
 8009116:	2202      	movs	r2, #2
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f001 f9d5 	bl	800a4ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009120:	e02e      	b.n	8009180 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 f966 	bl	800a3f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800912a:	2302      	movs	r3, #2
 800912c:	75fb      	strb	r3, [r7, #23]
          break;
 800912e:	e027      	b.n	8009180 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009136:	2b03      	cmp	r3, #3
 8009138:	d107      	bne.n	800914a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800913a:	f107 030f 	add.w	r3, r7, #15
 800913e:	2201      	movs	r2, #1
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f001 f9c1 	bl	800a4ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009148:	e01a      	b.n	8009180 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 f952 	bl	800a3f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009152:	2302      	movs	r3, #2
 8009154:	75fb      	strb	r3, [r7, #23]
          break;
 8009156:	e013      	b.n	8009180 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915e:	2b03      	cmp	r3, #3
 8009160:	d00d      	beq.n	800917e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 f946 	bl	800a3f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800916a:	2302      	movs	r3, #2
 800916c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800916e:	e006      	b.n	800917e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 f93f 	bl	800a3f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009178:	2302      	movs	r3, #2
 800917a:	75fb      	strb	r3, [r7, #23]
          break;
 800917c:	e000      	b.n	8009180 <USBD_CDC_Setup+0x12c>
          break;
 800917e:	bf00      	nop
      }
      break;
 8009180:	e006      	b.n	8009190 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 f936 	bl	800a3f6 <USBD_CtlError>
      ret = USBD_FAIL;
 800918a:	2302      	movs	r3, #2
 800918c:	75fb      	strb	r3, [r7, #23]
      break;
 800918e:	bf00      	nop
  }

  return ret;
 8009190:	7dfb      	ldrb	r3, [r7, #23]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	460b      	mov	r3, r1
 80091a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ac:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091b4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d03a      	beq.n	8009236 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80091c0:	78fa      	ldrb	r2, [r7, #3]
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	4613      	mov	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	331c      	adds	r3, #28
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d029      	beq.n	800922a <USBD_CDC_DataIn+0x90>
 80091d6:	78fa      	ldrb	r2, [r7, #3]
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	440b      	add	r3, r1
 80091e4:	331c      	adds	r3, #28
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	78f9      	ldrb	r1, [r7, #3]
 80091ea:	68b8      	ldr	r0, [r7, #8]
 80091ec:	460b      	mov	r3, r1
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	4403      	add	r3, r0
 80091f6:	3338      	adds	r3, #56	; 0x38
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	fbb2 f1f3 	udiv	r1, r2, r3
 80091fe:	fb01 f303 	mul.w	r3, r1, r3
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	d110      	bne.n	800922a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009208:	78fa      	ldrb	r2, [r7, #3]
 800920a:	6879      	ldr	r1, [r7, #4]
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	440b      	add	r3, r1
 8009216:	331c      	adds	r3, #28
 8009218:	2200      	movs	r2, #0
 800921a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800921c:	78f9      	ldrb	r1, [r7, #3]
 800921e:	2300      	movs	r3, #0
 8009220:	2200      	movs	r2, #0
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f001 fde3 	bl	800adee <USBD_LL_Transmit>
 8009228:	e003      	b.n	8009232 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	e000      	b.n	8009238 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009236:	2302      	movs	r3, #2
  }
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009252:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 fe0e 	bl	800ae7a <USBD_LL_GetRxDataSize>
 800925e:	4602      	mov	r2, r0
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00d      	beq.n	800928c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009284:	4611      	mov	r1, r2
 8009286:	4798      	blx	r3

    return USBD_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	e000      	b.n	800928e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800928c:	2302      	movs	r3, #2
  }
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d015      	beq.n	80092dc <USBD_CDC_EP0_RxReady+0x46>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80092b6:	2bff      	cmp	r3, #255	; 0xff
 80092b8:	d010      	beq.n	80092dc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80092c8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092d0:	b292      	uxth	r2, r2
 80092d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	22ff      	movs	r2, #255	; 0xff
 80092d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2243      	movs	r2, #67	; 0x43
 80092f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80092f6:	4b03      	ldr	r3, [pc, #12]	; (8009304 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bc80      	pop	{r7}
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	200000b4 	.word	0x200000b4

08009308 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2243      	movs	r2, #67	; 0x43
 8009314:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009316:	4b03      	ldr	r3, [pc, #12]	; (8009324 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	bc80      	pop	{r7}
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	20000070 	.word	0x20000070

08009328 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2243      	movs	r2, #67	; 0x43
 8009334:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009336:	4b03      	ldr	r3, [pc, #12]	; (8009344 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	bc80      	pop	{r7}
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	200000f8 	.word	0x200000f8

08009348 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	220a      	movs	r2, #10
 8009354:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009356:	4b03      	ldr	r3, [pc, #12]	; (8009364 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009358:	4618      	mov	r0, r3
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	bc80      	pop	{r7}
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	2000002c 	.word	0x2000002c

08009368 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009372:	2302      	movs	r3, #2
 8009374:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d005      	beq.n	8009388 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	bc80      	pop	{r7}
 8009392:	4770      	bx	lr

08009394 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80093b2:	88fa      	ldrh	r2, [r7, #6]
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	371c      	adds	r7, #28
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bc80      	pop	{r7}
 80093c4:	4770      	bx	lr

080093c6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b085      	sub	sp, #20
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bc80      	pop	{r7}
 80093ea:	4770      	bx	lr

080093ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009402:	2b00      	cmp	r3, #0
 8009404:	d01c      	beq.n	8009440 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800940c:	2b00      	cmp	r3, #0
 800940e:	d115      	bne.n	800943c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2201      	movs	r2, #1
 8009414:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800942e:	b29b      	uxth	r3, r3
 8009430:	2181      	movs	r1, #129	; 0x81
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f001 fcdb 	bl	800adee <USBD_LL_Transmit>

      return USBD_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	e002      	b.n	8009442 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800943c:	2301      	movs	r3, #1
 800943e:	e000      	b.n	8009442 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009440:	2302      	movs	r3, #2
  }
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009458:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009460:	2b00      	cmp	r3, #0
 8009462:	d017      	beq.n	8009494 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	7c1b      	ldrb	r3, [r3, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d109      	bne.n	8009480 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009476:	2101      	movs	r1, #1
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 fcdb 	bl	800ae34 <USBD_LL_PrepareReceive>
 800947e:	e007      	b.n	8009490 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009486:	2340      	movs	r3, #64	; 0x40
 8009488:	2101      	movs	r1, #1
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f001 fcd2 	bl	800ae34 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	e000      	b.n	8009496 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009494:	2302      	movs	r3, #2
  }
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	60f8      	str	r0, [r7, #12]
 80094a6:	60b9      	str	r1, [r7, #8]
 80094a8:	4613      	mov	r3, r2
 80094aa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80094b2:	2302      	movs	r3, #2
 80094b4:	e01a      	b.n	80094ec <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2201      	movs	r2, #1
 80094da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	79fa      	ldrb	r2, [r7, #7]
 80094e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f001 fb3f 	bl	800ab68 <USBD_LL_Init>

  return USBD_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d006      	beq.n	8009516 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	73fb      	strb	r3, [r7, #15]
 8009514:	e001      	b.n	800951a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009516:	2302      	movs	r3, #2
 8009518:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800951a:	7bfb      	ldrb	r3, [r7, #15]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	bc80      	pop	{r7}
 8009524:	4770      	bx	lr

08009526 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 fb74 	bl	800ac1c <USBD_LL_Start>

  return USBD_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800953e:	b480      	push	{r7}
 8009540:	b083      	sub	sp, #12
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	bc80      	pop	{r7}
 8009550:	4770      	bx	lr

08009552 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800955e:	2302      	movs	r3, #2
 8009560:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00c      	beq.n	8009586 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	78fa      	ldrb	r2, [r7, #3]
 8009576:	4611      	mov	r1, r2
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	4798      	blx	r3
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009586:	7bfb      	ldrb	r3, [r7, #15]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	78fa      	ldrb	r2, [r7, #3]
 80095a6:	4611      	mov	r1, r2
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	4798      	blx	r3

  return USBD_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b082      	sub	sp, #8
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fed8 	bl	800a37e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80095dc:	461a      	mov	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095ea:	f003 031f 	and.w	r3, r3, #31
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d016      	beq.n	8009620 <USBD_LL_SetupStage+0x6a>
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d81c      	bhi.n	8009630 <USBD_LL_SetupStage+0x7a>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <USBD_LL_SetupStage+0x4a>
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d008      	beq.n	8009610 <USBD_LL_SetupStage+0x5a>
 80095fe:	e017      	b.n	8009630 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f9cb 	bl	80099a4 <USBD_StdDevReq>
      break;
 800960e:	e01a      	b.n	8009646 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fa2d 	bl	8009a78 <USBD_StdItfReq>
      break;
 800961e:	e012      	b.n	8009646 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fa6d 	bl	8009b08 <USBD_StdEPReq>
      break;
 800962e:	e00a      	b.n	8009646 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009636:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800963a:	b2db      	uxtb	r3, r3
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f001 fb4c 	bl	800acdc <USBD_LL_StallEP>
      break;
 8009644:	bf00      	nop
  }

  return USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	460b      	mov	r3, r1
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800965e:	7afb      	ldrb	r3, [r7, #11]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d14b      	bne.n	80096fc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800966a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009672:	2b03      	cmp	r3, #3
 8009674:	d134      	bne.n	80096e0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	429a      	cmp	r2, r3
 8009680:	d919      	bls.n	80096b6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	68da      	ldr	r2, [r3, #12]
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	1ad2      	subs	r2, r2, r3
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	68da      	ldr	r2, [r3, #12]
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009698:	429a      	cmp	r2, r3
 800969a:	d203      	bcs.n	80096a4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	e002      	b.n	80096aa <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	461a      	mov	r2, r3
 80096ac:	6879      	ldr	r1, [r7, #4]
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 ff57 	bl	800a562 <USBD_CtlContinueRx>
 80096b4:	e038      	b.n	8009728 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00a      	beq.n	80096d8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096c8:	2b03      	cmp	r3, #3
 80096ca:	d105      	bne.n	80096d8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 ff54 	bl	800a586 <USBD_CtlSendStatus>
 80096de:	e023      	b.n	8009728 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096e6:	2b05      	cmp	r3, #5
 80096e8:	d11e      	bne.n	8009728 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80096f2:	2100      	movs	r1, #0
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f001 faf1 	bl	800acdc <USBD_LL_StallEP>
 80096fa:	e015      	b.n	8009728 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00d      	beq.n	8009724 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800970e:	2b03      	cmp	r3, #3
 8009710:	d108      	bne.n	8009724 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	7afa      	ldrb	r2, [r7, #11]
 800971c:	4611      	mov	r1, r2
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	4798      	blx	r3
 8009722:	e001      	b.n	8009728 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009724:	2302      	movs	r3, #2
 8009726:	e000      	b.n	800972a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b086      	sub	sp, #24
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	460b      	mov	r3, r1
 800973c:	607a      	str	r2, [r7, #4]
 800973e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009740:	7afb      	ldrb	r3, [r7, #11]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d17f      	bne.n	8009846 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3314      	adds	r3, #20
 800974a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009752:	2b02      	cmp	r3, #2
 8009754:	d15c      	bne.n	8009810 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	68da      	ldr	r2, [r3, #12]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	429a      	cmp	r2, r3
 8009760:	d915      	bls.n	800978e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	68da      	ldr	r2, [r3, #12]
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	1ad2      	subs	r2, r2, r3
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	b29b      	uxth	r3, r3
 8009776:	461a      	mov	r2, r3
 8009778:	6879      	ldr	r1, [r7, #4]
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 fec1 	bl	800a502 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009780:	2300      	movs	r3, #0
 8009782:	2200      	movs	r2, #0
 8009784:	2100      	movs	r1, #0
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f001 fb54 	bl	800ae34 <USBD_LL_PrepareReceive>
 800978c:	e04e      	b.n	800982c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	6912      	ldr	r2, [r2, #16]
 8009796:	fbb3 f1f2 	udiv	r1, r3, r2
 800979a:	fb01 f202 	mul.w	r2, r1, r2
 800979e:	1a9b      	subs	r3, r3, r2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d11c      	bne.n	80097de <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	689a      	ldr	r2, [r3, #8]
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d316      	bcc.n	80097de <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	689a      	ldr	r2, [r3, #8]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d20f      	bcs.n	80097de <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097be:	2200      	movs	r2, #0
 80097c0:	2100      	movs	r1, #0
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 fe9d 	bl	800a502 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097d0:	2300      	movs	r3, #0
 80097d2:	2200      	movs	r2, #0
 80097d4:	2100      	movs	r1, #0
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f001 fb2c 	bl	800ae34 <USBD_LL_PrepareReceive>
 80097dc:	e026      	b.n	800982c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d105      	bne.n	8009800 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009800:	2180      	movs	r1, #128	; 0x80
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f001 fa6a 	bl	800acdc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fecf 	bl	800a5ac <USBD_CtlReceiveStatus>
 800980e:	e00d      	b.n	800982c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009816:	2b04      	cmp	r3, #4
 8009818:	d004      	beq.n	8009824 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009820:	2b00      	cmp	r3, #0
 8009822:	d103      	bne.n	800982c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009824:	2180      	movs	r1, #128	; 0x80
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f001 fa58 	bl	800acdc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009832:	2b01      	cmp	r3, #1
 8009834:	d11d      	bne.n	8009872 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f7ff fe81 	bl	800953e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009844:	e015      	b.n	8009872 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00d      	beq.n	800986e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009858:	2b03      	cmp	r3, #3
 800985a:	d108      	bne.n	800986e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	7afa      	ldrb	r2, [r7, #11]
 8009866:	4611      	mov	r1, r2
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	4798      	blx	r3
 800986c:	e001      	b.n	8009872 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800986e:	2302      	movs	r3, #2
 8009870:	e000      	b.n	8009874 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009884:	2340      	movs	r3, #64	; 0x40
 8009886:	2200      	movs	r2, #0
 8009888:	2100      	movs	r1, #0
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f001 f9e1 	bl	800ac52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2240      	movs	r2, #64	; 0x40
 800989c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098a0:	2340      	movs	r3, #64	; 0x40
 80098a2:	2200      	movs	r2, #0
 80098a4:	2180      	movs	r1, #128	; 0x80
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f001 f9d3 	bl	800ac52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2240      	movs	r2, #64	; 0x40
 80098b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d009      	beq.n	80098f4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	6852      	ldr	r2, [r2, #4]
 80098ec:	b2d2      	uxtb	r2, r2
 80098ee:	4611      	mov	r1, r2
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	4798      	blx	r3
  }

  return USBD_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	460b      	mov	r3, r1
 8009908:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	78fa      	ldrb	r2, [r7, #3]
 800990e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	bc80      	pop	{r7}
 800991a:	4770      	bx	lr

0800991c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2204      	movs	r2, #4
 8009934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	bc80      	pop	{r7}
 8009942:	4770      	bx	lr

08009944 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009952:	2b04      	cmp	r3, #4
 8009954:	d105      	bne.n	8009962 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	bc80      	pop	{r7}
 800996c:	4770      	bx	lr

0800996e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b082      	sub	sp, #8
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800997c:	2b03      	cmp	r3, #3
 800997e:	d10b      	bne.n	8009998 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d005      	beq.n	8009998 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099ba:	2b40      	cmp	r3, #64	; 0x40
 80099bc:	d005      	beq.n	80099ca <USBD_StdDevReq+0x26>
 80099be:	2b40      	cmp	r3, #64	; 0x40
 80099c0:	d84f      	bhi.n	8009a62 <USBD_StdDevReq+0xbe>
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d009      	beq.n	80099da <USBD_StdDevReq+0x36>
 80099c6:	2b20      	cmp	r3, #32
 80099c8:	d14b      	bne.n	8009a62 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	4798      	blx	r3
      break;
 80099d8:	e048      	b.n	8009a6c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b09      	cmp	r3, #9
 80099e0:	d839      	bhi.n	8009a56 <USBD_StdDevReq+0xb2>
 80099e2:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <USBD_StdDevReq+0x44>)
 80099e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e8:	08009a39 	.word	0x08009a39
 80099ec:	08009a4d 	.word	0x08009a4d
 80099f0:	08009a57 	.word	0x08009a57
 80099f4:	08009a43 	.word	0x08009a43
 80099f8:	08009a57 	.word	0x08009a57
 80099fc:	08009a1b 	.word	0x08009a1b
 8009a00:	08009a11 	.word	0x08009a11
 8009a04:	08009a57 	.word	0x08009a57
 8009a08:	08009a2f 	.word	0x08009a2f
 8009a0c:	08009a25 	.word	0x08009a25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f9dc 	bl	8009dd0 <USBD_GetDescriptor>
          break;
 8009a18:	e022      	b.n	8009a60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fb3f 	bl	800a0a0 <USBD_SetAddress>
          break;
 8009a22:	e01d      	b.n	8009a60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fb7e 	bl	800a128 <USBD_SetConfig>
          break;
 8009a2c:	e018      	b.n	8009a60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fc07 	bl	800a244 <USBD_GetConfig>
          break;
 8009a36:	e013      	b.n	8009a60 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fc37 	bl	800a2ae <USBD_GetStatus>
          break;
 8009a40:	e00e      	b.n	8009a60 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fc65 	bl	800a314 <USBD_SetFeature>
          break;
 8009a4a:	e009      	b.n	8009a60 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fc74 	bl	800a33c <USBD_ClrFeature>
          break;
 8009a54:	e004      	b.n	8009a60 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fccc 	bl	800a3f6 <USBD_CtlError>
          break;
 8009a5e:	bf00      	nop
      }
      break;
 8009a60:	e004      	b.n	8009a6c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fcc6 	bl	800a3f6 <USBD_CtlError>
      break;
 8009a6a:	bf00      	nop
  }

  return ret;
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop

08009a78 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a8e:	2b40      	cmp	r3, #64	; 0x40
 8009a90:	d005      	beq.n	8009a9e <USBD_StdItfReq+0x26>
 8009a92:	2b40      	cmp	r3, #64	; 0x40
 8009a94:	d82e      	bhi.n	8009af4 <USBD_StdItfReq+0x7c>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <USBD_StdItfReq+0x26>
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	d12a      	bne.n	8009af4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d81d      	bhi.n	8009ae6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	889b      	ldrh	r3, [r3, #4]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d813      	bhi.n	8009adc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	4798      	blx	r3
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	88db      	ldrh	r3, [r3, #6]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d110      	bne.n	8009af0 <USBD_StdItfReq+0x78>
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10d      	bne.n	8009af0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fd56 	bl	800a586 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ada:	e009      	b.n	8009af0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fc89 	bl	800a3f6 <USBD_CtlError>
          break;
 8009ae4:	e004      	b.n	8009af0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fc84 	bl	800a3f6 <USBD_CtlError>
          break;
 8009aee:	e000      	b.n	8009af2 <USBD_StdItfReq+0x7a>
          break;
 8009af0:	bf00      	nop
      }
      break;
 8009af2:	e004      	b.n	8009afe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fc7d 	bl	800a3f6 <USBD_CtlError>
      break;
 8009afc:	bf00      	nop
  }

  return USBD_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	889b      	ldrh	r3, [r3, #4]
 8009b1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b24:	2b40      	cmp	r3, #64	; 0x40
 8009b26:	d007      	beq.n	8009b38 <USBD_StdEPReq+0x30>
 8009b28:	2b40      	cmp	r3, #64	; 0x40
 8009b2a:	f200 8146 	bhi.w	8009dba <USBD_StdEPReq+0x2b2>
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00a      	beq.n	8009b48 <USBD_StdEPReq+0x40>
 8009b32:	2b20      	cmp	r3, #32
 8009b34:	f040 8141 	bne.w	8009dba <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	4798      	blx	r3
      break;
 8009b46:	e13d      	b.n	8009dc4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b50:	2b20      	cmp	r3, #32
 8009b52:	d10a      	bne.n	8009b6a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	4798      	blx	r3
 8009b62:	4603      	mov	r3, r0
 8009b64:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
 8009b68:	e12d      	b.n	8009dc6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	785b      	ldrb	r3, [r3, #1]
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d007      	beq.n	8009b82 <USBD_StdEPReq+0x7a>
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	f300 811b 	bgt.w	8009dae <USBD_StdEPReq+0x2a6>
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d072      	beq.n	8009c62 <USBD_StdEPReq+0x15a>
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d03a      	beq.n	8009bf6 <USBD_StdEPReq+0xee>
 8009b80:	e115      	b.n	8009dae <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d002      	beq.n	8009b92 <USBD_StdEPReq+0x8a>
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	d015      	beq.n	8009bbc <USBD_StdEPReq+0xb4>
 8009b90:	e02b      	b.n	8009bea <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b92:	7bbb      	ldrb	r3, [r7, #14]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00c      	beq.n	8009bb2 <USBD_StdEPReq+0xaa>
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
 8009b9a:	2b80      	cmp	r3, #128	; 0x80
 8009b9c:	d009      	beq.n	8009bb2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f001 f89a 	bl	800acdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009ba8:	2180      	movs	r1, #128	; 0x80
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f001 f896 	bl	800acdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bb0:	e020      	b.n	8009bf4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fc1e 	bl	800a3f6 <USBD_CtlError>
              break;
 8009bba:	e01b      	b.n	8009bf4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	885b      	ldrh	r3, [r3, #2]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10e      	bne.n	8009be2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009bc4:	7bbb      	ldrb	r3, [r7, #14]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00b      	beq.n	8009be2 <USBD_StdEPReq+0xda>
 8009bca:	7bbb      	ldrb	r3, [r7, #14]
 8009bcc:	2b80      	cmp	r3, #128	; 0x80
 8009bce:	d008      	beq.n	8009be2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	88db      	ldrh	r3, [r3, #6]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d104      	bne.n	8009be2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f001 f87d 	bl	800acdc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fccf 	bl	800a586 <USBD_CtlSendStatus>

              break;
 8009be8:	e004      	b.n	8009bf4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fc02 	bl	800a3f6 <USBD_CtlError>
              break;
 8009bf2:	bf00      	nop
          }
          break;
 8009bf4:	e0e0      	b.n	8009db8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d002      	beq.n	8009c06 <USBD_StdEPReq+0xfe>
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d015      	beq.n	8009c30 <USBD_StdEPReq+0x128>
 8009c04:	e026      	b.n	8009c54 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c06:	7bbb      	ldrb	r3, [r7, #14]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00c      	beq.n	8009c26 <USBD_StdEPReq+0x11e>
 8009c0c:	7bbb      	ldrb	r3, [r7, #14]
 8009c0e:	2b80      	cmp	r3, #128	; 0x80
 8009c10:	d009      	beq.n	8009c26 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c12:	7bbb      	ldrb	r3, [r7, #14]
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 f860 	bl	800acdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c1c:	2180      	movs	r1, #128	; 0x80
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f001 f85c 	bl	800acdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c24:	e01c      	b.n	8009c60 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fbe4 	bl	800a3f6 <USBD_CtlError>
              break;
 8009c2e:	e017      	b.n	8009c60 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	885b      	ldrh	r3, [r3, #2]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d112      	bne.n	8009c5e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
 8009c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d004      	beq.n	8009c4c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c42:	7bbb      	ldrb	r3, [r7, #14]
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 f867 	bl	800ad1a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fc9a 	bl	800a586 <USBD_CtlSendStatus>
              }
              break;
 8009c52:	e004      	b.n	8009c5e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fbcd 	bl	800a3f6 <USBD_CtlError>
              break;
 8009c5c:	e000      	b.n	8009c60 <USBD_StdEPReq+0x158>
              break;
 8009c5e:	bf00      	nop
          }
          break;
 8009c60:	e0aa      	b.n	8009db8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d002      	beq.n	8009c72 <USBD_StdEPReq+0x16a>
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d032      	beq.n	8009cd6 <USBD_StdEPReq+0x1ce>
 8009c70:	e097      	b.n	8009da2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d007      	beq.n	8009c88 <USBD_StdEPReq+0x180>
 8009c78:	7bbb      	ldrb	r3, [r7, #14]
 8009c7a:	2b80      	cmp	r3, #128	; 0x80
 8009c7c:	d004      	beq.n	8009c88 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fbb8 	bl	800a3f6 <USBD_CtlError>
                break;
 8009c86:	e091      	b.n	8009dac <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	da0b      	bge.n	8009ca8 <USBD_StdEPReq+0x1a0>
 8009c90:	7bbb      	ldrb	r3, [r7, #14]
 8009c92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c96:	4613      	mov	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	3310      	adds	r3, #16
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	e00b      	b.n	8009cc0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
 8009caa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cae:	4613      	mov	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4413      	add	r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2202      	movs	r2, #2
 8009ccc:	4619      	mov	r1, r3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fbfb 	bl	800a4ca <USBD_CtlSendData>
              break;
 8009cd4:	e06a      	b.n	8009dac <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	da11      	bge.n	8009d02 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	f003 020f 	and.w	r2, r3, #15
 8009ce4:	6879      	ldr	r1, [r7, #4]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	440b      	add	r3, r1
 8009cf0:	3318      	adds	r3, #24
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d117      	bne.n	8009d28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009cf8:	6839      	ldr	r1, [r7, #0]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fb7b 	bl	800a3f6 <USBD_CtlError>
                  break;
 8009d00:	e054      	b.n	8009dac <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	f003 020f 	and.w	r2, r3, #15
 8009d08:	6879      	ldr	r1, [r7, #4]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	440b      	add	r3, r1
 8009d14:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d104      	bne.n	8009d28 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fb68 	bl	800a3f6 <USBD_CtlError>
                  break;
 8009d26:	e041      	b.n	8009dac <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	da0b      	bge.n	8009d48 <USBD_StdEPReq+0x240>
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
 8009d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d36:	4613      	mov	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4413      	add	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	3310      	adds	r3, #16
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	4413      	add	r3, r2
 8009d44:	3304      	adds	r3, #4
 8009d46:	e00b      	b.n	8009d60 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d48:	7bbb      	ldrb	r3, [r7, #14]
 8009d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d4e:	4613      	mov	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4413      	add	r3, r2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	3304      	adds	r3, #4
 8009d60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <USBD_StdEPReq+0x266>
 8009d68:	7bbb      	ldrb	r3, [r7, #14]
 8009d6a:	2b80      	cmp	r3, #128	; 0x80
 8009d6c:	d103      	bne.n	8009d76 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	2200      	movs	r2, #0
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	e00e      	b.n	8009d94 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d76:	7bbb      	ldrb	r3, [r7, #14]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 ffec 	bl	800ad58 <USBD_LL_IsStallEP>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	e002      	b.n	8009d94 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2200      	movs	r2, #0
 8009d92:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	2202      	movs	r2, #2
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fb95 	bl	800a4ca <USBD_CtlSendData>
              break;
 8009da0:	e004      	b.n	8009dac <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009da2:	6839      	ldr	r1, [r7, #0]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fb26 	bl	800a3f6 <USBD_CtlError>
              break;
 8009daa:	bf00      	nop
          }
          break;
 8009dac:	e004      	b.n	8009db8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fb20 	bl	800a3f6 <USBD_CtlError>
          break;
 8009db6:	bf00      	nop
      }
      break;
 8009db8:	e004      	b.n	8009dc4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fb1a 	bl	800a3f6 <USBD_CtlError>
      break;
 8009dc2:	bf00      	nop
  }

  return ret;
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009dde:	2300      	movs	r3, #0
 8009de0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009de2:	2300      	movs	r3, #0
 8009de4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	885b      	ldrh	r3, [r3, #2]
 8009dea:	0a1b      	lsrs	r3, r3, #8
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	3b01      	subs	r3, #1
 8009df0:	2b06      	cmp	r3, #6
 8009df2:	f200 8128 	bhi.w	800a046 <USBD_GetDescriptor+0x276>
 8009df6:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <USBD_GetDescriptor+0x2c>)
 8009df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfc:	08009e19 	.word	0x08009e19
 8009e00:	08009e31 	.word	0x08009e31
 8009e04:	08009e71 	.word	0x08009e71
 8009e08:	0800a047 	.word	0x0800a047
 8009e0c:	0800a047 	.word	0x0800a047
 8009e10:	08009fe7 	.word	0x08009fe7
 8009e14:	0800a013 	.word	0x0800a013
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	7c12      	ldrb	r2, [r2, #16]
 8009e24:	f107 0108 	add.w	r1, r7, #8
 8009e28:	4610      	mov	r0, r2
 8009e2a:	4798      	blx	r3
 8009e2c:	60f8      	str	r0, [r7, #12]
      break;
 8009e2e:	e112      	b.n	800a056 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	7c1b      	ldrb	r3, [r3, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10d      	bne.n	8009e54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e40:	f107 0208 	add.w	r2, r7, #8
 8009e44:	4610      	mov	r0, r2
 8009e46:	4798      	blx	r3
 8009e48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	2202      	movs	r2, #2
 8009e50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e52:	e100      	b.n	800a056 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	f107 0208 	add.w	r2, r7, #8
 8009e60:	4610      	mov	r0, r2
 8009e62:	4798      	blx	r3
 8009e64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	701a      	strb	r2, [r3, #0]
      break;
 8009e6e:	e0f2      	b.n	800a056 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	885b      	ldrh	r3, [r3, #2]
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b05      	cmp	r3, #5
 8009e78:	f200 80ac 	bhi.w	8009fd4 <USBD_GetDescriptor+0x204>
 8009e7c:	a201      	add	r2, pc, #4	; (adr r2, 8009e84 <USBD_GetDescriptor+0xb4>)
 8009e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e82:	bf00      	nop
 8009e84:	08009e9d 	.word	0x08009e9d
 8009e88:	08009ed1 	.word	0x08009ed1
 8009e8c:	08009f05 	.word	0x08009f05
 8009e90:	08009f39 	.word	0x08009f39
 8009e94:	08009f6d 	.word	0x08009f6d
 8009e98:	08009fa1 	.word	0x08009fa1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00b      	beq.n	8009ec0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	7c12      	ldrb	r2, [r2, #16]
 8009eb4:	f107 0108 	add.w	r1, r7, #8
 8009eb8:	4610      	mov	r0, r2
 8009eba:	4798      	blx	r3
 8009ebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ebe:	e091      	b.n	8009fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa97 	bl	800a3f6 <USBD_CtlError>
            err++;
 8009ec8:	7afb      	ldrb	r3, [r7, #11]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ece:	e089      	b.n	8009fe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00b      	beq.n	8009ef4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	7c12      	ldrb	r2, [r2, #16]
 8009ee8:	f107 0108 	add.w	r1, r7, #8
 8009eec:	4610      	mov	r0, r2
 8009eee:	4798      	blx	r3
 8009ef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ef2:	e077      	b.n	8009fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fa7d 	bl	800a3f6 <USBD_CtlError>
            err++;
 8009efc:	7afb      	ldrb	r3, [r7, #11]
 8009efe:	3301      	adds	r3, #1
 8009f00:	72fb      	strb	r3, [r7, #11]
          break;
 8009f02:	e06f      	b.n	8009fe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	7c12      	ldrb	r2, [r2, #16]
 8009f1c:	f107 0108 	add.w	r1, r7, #8
 8009f20:	4610      	mov	r0, r2
 8009f22:	4798      	blx	r3
 8009f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f26:	e05d      	b.n	8009fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fa63 	bl	800a3f6 <USBD_CtlError>
            err++;
 8009f30:	7afb      	ldrb	r3, [r7, #11]
 8009f32:	3301      	adds	r3, #1
 8009f34:	72fb      	strb	r3, [r7, #11]
          break;
 8009f36:	e055      	b.n	8009fe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00b      	beq.n	8009f5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	7c12      	ldrb	r2, [r2, #16]
 8009f50:	f107 0108 	add.w	r1, r7, #8
 8009f54:	4610      	mov	r0, r2
 8009f56:	4798      	blx	r3
 8009f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f5a:	e043      	b.n	8009fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fa49 	bl	800a3f6 <USBD_CtlError>
            err++;
 8009f64:	7afb      	ldrb	r3, [r7, #11]
 8009f66:	3301      	adds	r3, #1
 8009f68:	72fb      	strb	r3, [r7, #11]
          break;
 8009f6a:	e03b      	b.n	8009fe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f72:	695b      	ldr	r3, [r3, #20]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f7e:	695b      	ldr	r3, [r3, #20]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	7c12      	ldrb	r2, [r2, #16]
 8009f84:	f107 0108 	add.w	r1, r7, #8
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f8e:	e029      	b.n	8009fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa2f 	bl	800a3f6 <USBD_CtlError>
            err++;
 8009f98:	7afb      	ldrb	r3, [r7, #11]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f9e:	e021      	b.n	8009fe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	7c12      	ldrb	r2, [r2, #16]
 8009fb8:	f107 0108 	add.w	r1, r7, #8
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	4798      	blx	r3
 8009fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fc2:	e00f      	b.n	8009fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fa15 	bl	800a3f6 <USBD_CtlError>
            err++;
 8009fcc:	7afb      	ldrb	r3, [r7, #11]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fd2:	e007      	b.n	8009fe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fa0d 	bl	800a3f6 <USBD_CtlError>
          err++;
 8009fdc:	7afb      	ldrb	r3, [r7, #11]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009fe2:	e038      	b.n	800a056 <USBD_GetDescriptor+0x286>
 8009fe4:	e037      	b.n	800a056 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	7c1b      	ldrb	r3, [r3, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d109      	bne.n	800a002 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff6:	f107 0208 	add.w	r2, r7, #8
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	4798      	blx	r3
 8009ffe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a000:	e029      	b.n	800a056 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f9f6 	bl	800a3f6 <USBD_CtlError>
        err++;
 800a00a:	7afb      	ldrb	r3, [r7, #11]
 800a00c:	3301      	adds	r3, #1
 800a00e:	72fb      	strb	r3, [r7, #11]
      break;
 800a010:	e021      	b.n	800a056 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	7c1b      	ldrb	r3, [r3, #16]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10d      	bne.n	800a036 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a022:	f107 0208 	add.w	r2, r7, #8
 800a026:	4610      	mov	r0, r2
 800a028:	4798      	blx	r3
 800a02a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3301      	adds	r3, #1
 800a030:	2207      	movs	r2, #7
 800a032:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a034:	e00f      	b.n	800a056 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f9dc 	bl	800a3f6 <USBD_CtlError>
        err++;
 800a03e:	7afb      	ldrb	r3, [r7, #11]
 800a040:	3301      	adds	r3, #1
 800a042:	72fb      	strb	r3, [r7, #11]
      break;
 800a044:	e007      	b.n	800a056 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f9d4 	bl	800a3f6 <USBD_CtlError>
      err++;
 800a04e:	7afb      	ldrb	r3, [r7, #11]
 800a050:	3301      	adds	r3, #1
 800a052:	72fb      	strb	r3, [r7, #11]
      break;
 800a054:	bf00      	nop
  }

  if (err != 0U)
 800a056:	7afb      	ldrb	r3, [r7, #11]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d11c      	bne.n	800a096 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a05c:	893b      	ldrh	r3, [r7, #8]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d011      	beq.n	800a086 <USBD_GetDescriptor+0x2b6>
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	88db      	ldrh	r3, [r3, #6]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00d      	beq.n	800a086 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	88da      	ldrh	r2, [r3, #6]
 800a06e:	893b      	ldrh	r3, [r7, #8]
 800a070:	4293      	cmp	r3, r2
 800a072:	bf28      	it	cs
 800a074:	4613      	movcs	r3, r2
 800a076:	b29b      	uxth	r3, r3
 800a078:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a07a:	893b      	ldrh	r3, [r7, #8]
 800a07c:	461a      	mov	r2, r3
 800a07e:	68f9      	ldr	r1, [r7, #12]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fa22 	bl	800a4ca <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	88db      	ldrh	r3, [r3, #6]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d104      	bne.n	800a098 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 fa79 	bl	800a586 <USBD_CtlSendStatus>
 800a094:	e000      	b.n	800a098 <USBD_GetDescriptor+0x2c8>
    return;
 800a096:	bf00      	nop
    }
  }
}
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop

0800a0a0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	889b      	ldrh	r3, [r3, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d130      	bne.n	800a114 <USBD_SetAddress+0x74>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	88db      	ldrh	r3, [r3, #6]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d12c      	bne.n	800a114 <USBD_SetAddress+0x74>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	885b      	ldrh	r3, [r3, #2]
 800a0be:	2b7f      	cmp	r3, #127	; 0x7f
 800a0c0:	d828      	bhi.n	800a114 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	885b      	ldrh	r3, [r3, #2]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d4:	2b03      	cmp	r3, #3
 800a0d6:	d104      	bne.n	800a0e2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f98b 	bl	800a3f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0e0:	e01d      	b.n	800a11e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	7bfa      	ldrb	r2, [r7, #15]
 800a0e6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fe5e 	bl	800adb0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fa46 	bl	800a586 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d004      	beq.n	800a10a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2202      	movs	r2, #2
 800a104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a108:	e009      	b.n	800a11e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a112:	e004      	b.n	800a11e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f96d 	bl	800a3f6 <USBD_CtlError>
  }
}
 800a11c:	bf00      	nop
 800a11e:	bf00      	nop
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	885b      	ldrh	r3, [r3, #2]
 800a136:	b2da      	uxtb	r2, r3
 800a138:	4b41      	ldr	r3, [pc, #260]	; (800a240 <USBD_SetConfig+0x118>)
 800a13a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a13c:	4b40      	ldr	r3, [pc, #256]	; (800a240 <USBD_SetConfig+0x118>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d904      	bls.n	800a14e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f955 	bl	800a3f6 <USBD_CtlError>
 800a14c:	e075      	b.n	800a23a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a154:	2b02      	cmp	r3, #2
 800a156:	d002      	beq.n	800a15e <USBD_SetConfig+0x36>
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d023      	beq.n	800a1a4 <USBD_SetConfig+0x7c>
 800a15c:	e062      	b.n	800a224 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a15e:	4b38      	ldr	r3, [pc, #224]	; (800a240 <USBD_SetConfig+0x118>)
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d01a      	beq.n	800a19c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a166:	4b36      	ldr	r3, [pc, #216]	; (800a240 <USBD_SetConfig+0x118>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2203      	movs	r2, #3
 800a174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a178:	4b31      	ldr	r3, [pc, #196]	; (800a240 <USBD_SetConfig+0x118>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff f9e7 	bl	8009552 <USBD_SetClassConfig>
 800a184:	4603      	mov	r3, r0
 800a186:	2b02      	cmp	r3, #2
 800a188:	d104      	bne.n	800a194 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f932 	bl	800a3f6 <USBD_CtlError>
            return;
 800a192:	e052      	b.n	800a23a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 f9f6 	bl	800a586 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a19a:	e04e      	b.n	800a23a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f9f2 	bl	800a586 <USBD_CtlSendStatus>
        break;
 800a1a2:	e04a      	b.n	800a23a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a1a4:	4b26      	ldr	r3, [pc, #152]	; (800a240 <USBD_SetConfig+0x118>)
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d112      	bne.n	800a1d2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a1b4:	4b22      	ldr	r3, [pc, #136]	; (800a240 <USBD_SetConfig+0x118>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a1be:	4b20      	ldr	r3, [pc, #128]	; (800a240 <USBD_SetConfig+0x118>)
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7ff f9e3 	bl	8009590 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f9db 	bl	800a586 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1d0:	e033      	b.n	800a23a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a1d2:	4b1b      	ldr	r3, [pc, #108]	; (800a240 <USBD_SetConfig+0x118>)
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d01d      	beq.n	800a21c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff f9d1 	bl	8009590 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a1ee:	4b14      	ldr	r3, [pc, #80]	; (800a240 <USBD_SetConfig+0x118>)
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a1f8:	4b11      	ldr	r3, [pc, #68]	; (800a240 <USBD_SetConfig+0x118>)
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7ff f9a7 	bl	8009552 <USBD_SetClassConfig>
 800a204:	4603      	mov	r3, r0
 800a206:	2b02      	cmp	r3, #2
 800a208:	d104      	bne.n	800a214 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f8f2 	bl	800a3f6 <USBD_CtlError>
            return;
 800a212:	e012      	b.n	800a23a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f9b6 	bl	800a586 <USBD_CtlSendStatus>
        break;
 800a21a:	e00e      	b.n	800a23a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f9b2 	bl	800a586 <USBD_CtlSendStatus>
        break;
 800a222:	e00a      	b.n	800a23a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a224:	6839      	ldr	r1, [r7, #0]
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 f8e5 	bl	800a3f6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a22c:	4b04      	ldr	r3, [pc, #16]	; (800a240 <USBD_SetConfig+0x118>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7ff f9ac 	bl	8009590 <USBD_ClrClassConfig>
        break;
 800a238:	bf00      	nop
    }
  }
}
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	20000440 	.word	0x20000440

0800a244 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	88db      	ldrh	r3, [r3, #6]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d004      	beq.n	800a260 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f8cc 	bl	800a3f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a25e:	e022      	b.n	800a2a6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a266:	2b02      	cmp	r3, #2
 800a268:	dc02      	bgt.n	800a270 <USBD_GetConfig+0x2c>
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	dc03      	bgt.n	800a276 <USBD_GetConfig+0x32>
 800a26e:	e015      	b.n	800a29c <USBD_GetConfig+0x58>
 800a270:	2b03      	cmp	r3, #3
 800a272:	d00b      	beq.n	800a28c <USBD_GetConfig+0x48>
 800a274:	e012      	b.n	800a29c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3308      	adds	r3, #8
 800a280:	2201      	movs	r2, #1
 800a282:	4619      	mov	r1, r3
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f920 	bl	800a4ca <USBD_CtlSendData>
        break;
 800a28a:	e00c      	b.n	800a2a6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3304      	adds	r3, #4
 800a290:	2201      	movs	r2, #1
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f918 	bl	800a4ca <USBD_CtlSendData>
        break;
 800a29a:	e004      	b.n	800a2a6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f8a9 	bl	800a3f6 <USBD_CtlError>
        break;
 800a2a4:	bf00      	nop
}
 800a2a6:	bf00      	nop
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b082      	sub	sp, #8
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d81e      	bhi.n	800a302 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	88db      	ldrh	r3, [r3, #6]
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d004      	beq.n	800a2d6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f891 	bl	800a3f6 <USBD_CtlError>
        break;
 800a2d4:	e01a      	b.n	800a30c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d005      	beq.n	800a2f2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	f043 0202 	orr.w	r2, r3, #2
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	330c      	adds	r3, #12
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f8e5 	bl	800a4ca <USBD_CtlSendData>
      break;
 800a300:	e004      	b.n	800a30c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f876 	bl	800a3f6 <USBD_CtlError>
      break;
 800a30a:	bf00      	nop
  }
}
 800a30c:	bf00      	nop
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	885b      	ldrh	r3, [r3, #2]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d106      	bne.n	800a334 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2201      	movs	r2, #1
 800a32a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f929 	bl	800a586 <USBD_CtlSendStatus>
  }
}
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a34c:	3b01      	subs	r3, #1
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d80b      	bhi.n	800a36a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	885b      	ldrh	r3, [r3, #2]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d10c      	bne.n	800a374 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f90f 	bl	800a586 <USBD_CtlSendStatus>
      }
      break;
 800a368:	e004      	b.n	800a374 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f842 	bl	800a3f6 <USBD_CtlError>
      break;
 800a372:	e000      	b.n	800a376 <USBD_ClrFeature+0x3a>
      break;
 800a374:	bf00      	nop
  }
}
 800a376:	bf00      	nop
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	785a      	ldrb	r2, [r3, #1]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	3302      	adds	r3, #2
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	3303      	adds	r3, #3
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	021b      	lsls	r3, r3, #8
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	3305      	adds	r3, #5
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	021b      	lsls	r3, r3, #8
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	4413      	add	r3, r2
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	3306      	adds	r3, #6
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	3307      	adds	r3, #7
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	021b      	lsls	r3, r3, #8
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	4413      	add	r3, r2
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	80da      	strh	r2, [r3, #6]

}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bc80      	pop	{r7}
 800a3f4:	4770      	bx	lr

0800a3f6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a400:	2180      	movs	r1, #128	; 0x80
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fc6a 	bl	800acdc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a408:	2100      	movs	r1, #0
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fc66 	bl	800acdc <USBD_LL_StallEP>
}
 800a410:	bf00      	nop
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d032      	beq.n	800a494 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 f834 	bl	800a49c <USBD_GetLen>
 800a434:	4603      	mov	r3, r0
 800a436:	3301      	adds	r3, #1
 800a438:	b29b      	uxth	r3, r3
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	75fa      	strb	r2, [r7, #23]
 800a448:	461a      	mov	r2, r3
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	4413      	add	r3, r2
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	7812      	ldrb	r2, [r2, #0]
 800a452:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a454:	7dfb      	ldrb	r3, [r7, #23]
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	75fa      	strb	r2, [r7, #23]
 800a45a:	461a      	mov	r2, r3
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	4413      	add	r3, r2
 800a460:	2203      	movs	r2, #3
 800a462:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a464:	e012      	b.n	800a48c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	60fa      	str	r2, [r7, #12]
 800a46c:	7dfa      	ldrb	r2, [r7, #23]
 800a46e:	1c51      	adds	r1, r2, #1
 800a470:	75f9      	strb	r1, [r7, #23]
 800a472:	4611      	mov	r1, r2
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	440a      	add	r2, r1
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	75fa      	strb	r2, [r7, #23]
 800a482:	461a      	mov	r2, r3
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4413      	add	r3, r2
 800a488:	2200      	movs	r2, #0
 800a48a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1e8      	bne.n	800a466 <USBD_GetString+0x4e>
    }
  }
}
 800a494:	bf00      	nop
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a4a8:	e005      	b.n	800a4b6 <USBD_GetLen+0x1a>
  {
    len++;
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1f5      	bne.n	800a4aa <USBD_GetLen+0xe>
  }

  return len;
 800a4be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bc80      	pop	{r7}
 800a4c8:	4770      	bx	lr

0800a4ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	60b9      	str	r1, [r7, #8]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a4e0:	88fa      	ldrh	r2, [r7, #6]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a4e6:	88fa      	ldrh	r2, [r7, #6]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4ec:	88fb      	ldrh	r3, [r7, #6]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 fc7b 	bl	800adee <USBD_LL_Transmit>

  return USBD_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	60f8      	str	r0, [r7, #12]
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	4613      	mov	r3, r2
 800a50e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a510:	88fb      	ldrh	r3, [r7, #6]
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	2100      	movs	r1, #0
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fc69 	bl	800adee <USBD_LL_Transmit>

  return USBD_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b084      	sub	sp, #16
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	60f8      	str	r0, [r7, #12]
 800a52e:	60b9      	str	r1, [r7, #8]
 800a530:	4613      	mov	r3, r2
 800a532:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2203      	movs	r2, #3
 800a538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a53c:	88fa      	ldrh	r2, [r7, #6]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a544:	88fa      	ldrh	r2, [r7, #6]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a54c:	88fb      	ldrh	r3, [r7, #6]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	2100      	movs	r1, #0
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f000 fc6e 	bl	800ae34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	60f8      	str	r0, [r7, #12]
 800a56a:	60b9      	str	r1, [r7, #8]
 800a56c:	4613      	mov	r3, r2
 800a56e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a570:	88fb      	ldrh	r3, [r7, #6]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	2100      	movs	r1, #0
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 fc5c 	bl	800ae34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b082      	sub	sp, #8
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2204      	movs	r2, #4
 800a592:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a596:	2300      	movs	r3, #0
 800a598:	2200      	movs	r2, #0
 800a59a:	2100      	movs	r1, #0
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fc26 	bl	800adee <USBD_LL_Transmit>

  return USBD_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2205      	movs	r2, #5
 800a5b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5bc:	2300      	movs	r3, #0
 800a5be:	2200      	movs	r2, #0
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fc36 	bl	800ae34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	4912      	ldr	r1, [pc, #72]	; (800a624 <MX_USB_DEVICE_Init+0x50>)
 800a5dc:	4812      	ldr	r0, [pc, #72]	; (800a628 <MX_USB_DEVICE_Init+0x54>)
 800a5de:	f7fe ff5e 	bl	800949e <USBD_Init>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5e8:	f7f7 f96e 	bl	80018c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a5ec:	490f      	ldr	r1, [pc, #60]	; (800a62c <MX_USB_DEVICE_Init+0x58>)
 800a5ee:	480e      	ldr	r0, [pc, #56]	; (800a628 <MX_USB_DEVICE_Init+0x54>)
 800a5f0:	f7fe ff80 	bl	80094f4 <USBD_RegisterClass>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5fa:	f7f7 f965 	bl	80018c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5fe:	490c      	ldr	r1, [pc, #48]	; (800a630 <MX_USB_DEVICE_Init+0x5c>)
 800a600:	4809      	ldr	r0, [pc, #36]	; (800a628 <MX_USB_DEVICE_Init+0x54>)
 800a602:	f7fe feb1 	bl	8009368 <USBD_CDC_RegisterInterface>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a60c:	f7f7 f95c 	bl	80018c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a610:	4805      	ldr	r0, [pc, #20]	; (800a628 <MX_USB_DEVICE_Init+0x54>)
 800a612:	f7fe ff88 	bl	8009526 <USBD_Start>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a61c:	f7f7 f954 	bl	80018c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a620:	bf00      	nop
 800a622:	bd80      	pop	{r7, pc}
 800a624:	2000014c 	.word	0x2000014c
 800a628:	20000444 	.word	0x20000444
 800a62c:	20000038 	.word	0x20000038
 800a630:	2000013c 	.word	0x2000013c

0800a634 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a638:	2200      	movs	r2, #0
 800a63a:	4905      	ldr	r1, [pc, #20]	; (800a650 <CDC_Init_FS+0x1c>)
 800a63c:	4805      	ldr	r0, [pc, #20]	; (800a654 <CDC_Init_FS+0x20>)
 800a63e:	f7fe fea9 	bl	8009394 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a642:	4905      	ldr	r1, [pc, #20]	; (800a658 <CDC_Init_FS+0x24>)
 800a644:	4803      	ldr	r0, [pc, #12]	; (800a654 <CDC_Init_FS+0x20>)
 800a646:	f7fe febe 	bl	80093c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a64a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	20000b08 	.word	0x20000b08
 800a654:	20000444 	.word	0x20000444
 800a658:	20000708 	.word	0x20000708

0800a65c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a660:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a662:	4618      	mov	r0, r3
 800a664:	46bd      	mov	sp, r7
 800a666:	bc80      	pop	{r7}
 800a668:	4770      	bx	lr
	...

0800a66c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	4603      	mov	r3, r0
 800a674:	6039      	str	r1, [r7, #0]
 800a676:	71fb      	strb	r3, [r7, #7]
 800a678:	4613      	mov	r3, r2
 800a67a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a67c:	79fb      	ldrb	r3, [r7, #7]
 800a67e:	2b23      	cmp	r3, #35	; 0x23
 800a680:	d84a      	bhi.n	800a718 <CDC_Control_FS+0xac>
 800a682:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <CDC_Control_FS+0x1c>)
 800a684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a688:	0800a719 	.word	0x0800a719
 800a68c:	0800a719 	.word	0x0800a719
 800a690:	0800a719 	.word	0x0800a719
 800a694:	0800a719 	.word	0x0800a719
 800a698:	0800a719 	.word	0x0800a719
 800a69c:	0800a719 	.word	0x0800a719
 800a6a0:	0800a719 	.word	0x0800a719
 800a6a4:	0800a719 	.word	0x0800a719
 800a6a8:	0800a719 	.word	0x0800a719
 800a6ac:	0800a719 	.word	0x0800a719
 800a6b0:	0800a719 	.word	0x0800a719
 800a6b4:	0800a719 	.word	0x0800a719
 800a6b8:	0800a719 	.word	0x0800a719
 800a6bc:	0800a719 	.word	0x0800a719
 800a6c0:	0800a719 	.word	0x0800a719
 800a6c4:	0800a719 	.word	0x0800a719
 800a6c8:	0800a719 	.word	0x0800a719
 800a6cc:	0800a719 	.word	0x0800a719
 800a6d0:	0800a719 	.word	0x0800a719
 800a6d4:	0800a719 	.word	0x0800a719
 800a6d8:	0800a719 	.word	0x0800a719
 800a6dc:	0800a719 	.word	0x0800a719
 800a6e0:	0800a719 	.word	0x0800a719
 800a6e4:	0800a719 	.word	0x0800a719
 800a6e8:	0800a719 	.word	0x0800a719
 800a6ec:	0800a719 	.word	0x0800a719
 800a6f0:	0800a719 	.word	0x0800a719
 800a6f4:	0800a719 	.word	0x0800a719
 800a6f8:	0800a719 	.word	0x0800a719
 800a6fc:	0800a719 	.word	0x0800a719
 800a700:	0800a719 	.word	0x0800a719
 800a704:	0800a719 	.word	0x0800a719
 800a708:	0800a719 	.word	0x0800a719
 800a70c:	0800a719 	.word	0x0800a719
 800a710:	0800a719 	.word	0x0800a719
 800a714:	0800a719 	.word	0x0800a719
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a718:	bf00      	nop
  }

  return (USBD_OK);
 800a71a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	bc80      	pop	{r7}
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop

0800a728 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a732:	6879      	ldr	r1, [r7, #4]
 800a734:	480f      	ldr	r0, [pc, #60]	; (800a774 <CDC_Receive_FS+0x4c>)
 800a736:	f7fe fe46 	bl	80093c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a73a:	480e      	ldr	r0, [pc, #56]	; (800a774 <CDC_Receive_FS+0x4c>)
 800a73c:	f7fe fe85 	bl	800944a <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	73fb      	strb	r3, [r7, #15]
  memset(buffer_usb, '\0',64);
 800a746:	2240      	movs	r2, #64	; 0x40
 800a748:	2100      	movs	r1, #0
 800a74a:	480b      	ldr	r0, [pc, #44]	; (800a778 <CDC_Receive_FS+0x50>)
 800a74c:	f000 fcd4 	bl	800b0f8 <memset>
  memcpy(buffer_usb, Buf, len);
 800a750:	7bfb      	ldrb	r3, [r7, #15]
 800a752:	461a      	mov	r2, r3
 800a754:	6879      	ldr	r1, [r7, #4]
 800a756:	4808      	ldr	r0, [pc, #32]	; (800a778 <CDC_Receive_FS+0x50>)
 800a758:	f000 fd02 	bl	800b160 <memcpy>
  memset(Buf, '\0', len);
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
 800a75e:	461a      	mov	r2, r3
 800a760:	2100      	movs	r1, #0
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fcc8 	bl	800b0f8 <memset>
  return (USBD_OK);
 800a768:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20000444 	.word	0x20000444
 800a778:	200003d8 	.word	0x200003d8

0800a77c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	460b      	mov	r3, r1
 800a786:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a78c:	4b0d      	ldr	r3, [pc, #52]	; (800a7c4 <CDC_Transmit_FS+0x48>)
 800a78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a792:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e00b      	b.n	800a7ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a7a2:	887b      	ldrh	r3, [r7, #2]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	6879      	ldr	r1, [r7, #4]
 800a7a8:	4806      	ldr	r0, [pc, #24]	; (800a7c4 <CDC_Transmit_FS+0x48>)
 800a7aa:	f7fe fdf3 	bl	8009394 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a7ae:	4805      	ldr	r0, [pc, #20]	; (800a7c4 <CDC_Transmit_FS+0x48>)
 800a7b0:	f7fe fe1c 	bl	80093ec <USBD_CDC_TransmitPacket>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20000444 	.word	0x20000444

0800a7c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	6039      	str	r1, [r7, #0]
 800a7d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	2212      	movs	r2, #18
 800a7d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a7da:	4b03      	ldr	r3, [pc, #12]	; (800a7e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bc80      	pop	{r7}
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	20000168 	.word	0x20000168

0800a7ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	6039      	str	r1, [r7, #0]
 800a7f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	2204      	movs	r2, #4
 800a7fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7fe:	4b03      	ldr	r3, [pc, #12]	; (800a80c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a800:	4618      	mov	r0, r3
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	bc80      	pop	{r7}
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	2000017c 	.word	0x2000017c

0800a810 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	6039      	str	r1, [r7, #0]
 800a81a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a81c:	79fb      	ldrb	r3, [r7, #7]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d105      	bne.n	800a82e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	4907      	ldr	r1, [pc, #28]	; (800a844 <USBD_FS_ProductStrDescriptor+0x34>)
 800a826:	4808      	ldr	r0, [pc, #32]	; (800a848 <USBD_FS_ProductStrDescriptor+0x38>)
 800a828:	f7ff fdf6 	bl	800a418 <USBD_GetString>
 800a82c:	e004      	b.n	800a838 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	4904      	ldr	r1, [pc, #16]	; (800a844 <USBD_FS_ProductStrDescriptor+0x34>)
 800a832:	4805      	ldr	r0, [pc, #20]	; (800a848 <USBD_FS_ProductStrDescriptor+0x38>)
 800a834:	f7ff fdf0 	bl	800a418 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a838:	4b02      	ldr	r3, [pc, #8]	; (800a844 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20000f08 	.word	0x20000f08
 800a848:	0800bbf8 	.word	0x0800bbf8

0800a84c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	4603      	mov	r3, r0
 800a854:	6039      	str	r1, [r7, #0]
 800a856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	4904      	ldr	r1, [pc, #16]	; (800a86c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a85c:	4804      	ldr	r0, [pc, #16]	; (800a870 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a85e:	f7ff fddb 	bl	800a418 <USBD_GetString>
  return USBD_StrDesc;
 800a862:	4b02      	ldr	r3, [pc, #8]	; (800a86c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a864:	4618      	mov	r0, r3
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20000f08 	.word	0x20000f08
 800a870:	0800bc10 	.word	0x0800bc10

0800a874 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	4603      	mov	r3, r0
 800a87c:	6039      	str	r1, [r7, #0]
 800a87e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	221a      	movs	r2, #26
 800a884:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a886:	f000 f843 	bl	800a910 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a88a:	4b02      	ldr	r3, [pc, #8]	; (800a894 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	20000180 	.word	0x20000180

0800a898 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	6039      	str	r1, [r7, #0]
 800a8a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a8a4:	79fb      	ldrb	r3, [r7, #7]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d105      	bne.n	800a8b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	4907      	ldr	r1, [pc, #28]	; (800a8cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8ae:	4808      	ldr	r0, [pc, #32]	; (800a8d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8b0:	f7ff fdb2 	bl	800a418 <USBD_GetString>
 800a8b4:	e004      	b.n	800a8c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	4904      	ldr	r1, [pc, #16]	; (800a8cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8ba:	4805      	ldr	r0, [pc, #20]	; (800a8d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8bc:	f7ff fdac 	bl	800a418 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8c0:	4b02      	ldr	r3, [pc, #8]	; (800a8cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20000f08 	.word	0x20000f08
 800a8d0:	0800bc24 	.word	0x0800bc24

0800a8d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	4603      	mov	r3, r0
 800a8dc:	6039      	str	r1, [r7, #0]
 800a8de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8e0:	79fb      	ldrb	r3, [r7, #7]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d105      	bne.n	800a8f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	4907      	ldr	r1, [pc, #28]	; (800a908 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8ea:	4808      	ldr	r0, [pc, #32]	; (800a90c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8ec:	f7ff fd94 	bl	800a418 <USBD_GetString>
 800a8f0:	e004      	b.n	800a8fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	4904      	ldr	r1, [pc, #16]	; (800a908 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8f6:	4805      	ldr	r0, [pc, #20]	; (800a90c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8f8:	f7ff fd8e 	bl	800a418 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8fc:	4b02      	ldr	r3, [pc, #8]	; (800a908 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	20000f08 	.word	0x20000f08
 800a90c:	0800bc30 	.word	0x0800bc30

0800a910 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a916:	4b0f      	ldr	r3, [pc, #60]	; (800a954 <Get_SerialNum+0x44>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a91c:	4b0e      	ldr	r3, [pc, #56]	; (800a958 <Get_SerialNum+0x48>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a922:	4b0e      	ldr	r3, [pc, #56]	; (800a95c <Get_SerialNum+0x4c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4413      	add	r3, r2
 800a92e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d009      	beq.n	800a94a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a936:	2208      	movs	r2, #8
 800a938:	4909      	ldr	r1, [pc, #36]	; (800a960 <Get_SerialNum+0x50>)
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 f814 	bl	800a968 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a940:	2204      	movs	r2, #4
 800a942:	4908      	ldr	r1, [pc, #32]	; (800a964 <Get_SerialNum+0x54>)
 800a944:	68b8      	ldr	r0, [r7, #8]
 800a946:	f000 f80f 	bl	800a968 <IntToUnicode>
  }
}
 800a94a:	bf00      	nop
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	1ffff7e8 	.word	0x1ffff7e8
 800a958:	1ffff7ec 	.word	0x1ffff7ec
 800a95c:	1ffff7f0 	.word	0x1ffff7f0
 800a960:	20000182 	.word	0x20000182
 800a964:	20000192 	.word	0x20000192

0800a968 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a968:	b480      	push	{r7}
 800a96a:	b087      	sub	sp, #28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	4613      	mov	r3, r2
 800a974:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a976:	2300      	movs	r3, #0
 800a978:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a97a:	2300      	movs	r3, #0
 800a97c:	75fb      	strb	r3, [r7, #23]
 800a97e:	e027      	b.n	800a9d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	0f1b      	lsrs	r3, r3, #28
 800a984:	2b09      	cmp	r3, #9
 800a986:	d80b      	bhi.n	800a9a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	0f1b      	lsrs	r3, r3, #28
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	7dfb      	ldrb	r3, [r7, #23]
 800a990:	005b      	lsls	r3, r3, #1
 800a992:	4619      	mov	r1, r3
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	440b      	add	r3, r1
 800a998:	3230      	adds	r2, #48	; 0x30
 800a99a:	b2d2      	uxtb	r2, r2
 800a99c:	701a      	strb	r2, [r3, #0]
 800a99e:	e00a      	b.n	800a9b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	0f1b      	lsrs	r3, r3, #28
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	7dfb      	ldrb	r3, [r7, #23]
 800a9a8:	005b      	lsls	r3, r3, #1
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	440b      	add	r3, r1
 800a9b0:	3237      	adds	r2, #55	; 0x37
 800a9b2:	b2d2      	uxtb	r2, r2
 800a9b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	011b      	lsls	r3, r3, #4
 800a9ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a9bc:	7dfb      	ldrb	r3, [r7, #23]
 800a9be:	005b      	lsls	r3, r3, #1
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a9ca:	7dfb      	ldrb	r3, [r7, #23]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	75fb      	strb	r3, [r7, #23]
 800a9d0:	7dfa      	ldrb	r2, [r7, #23]
 800a9d2:	79fb      	ldrb	r3, [r7, #7]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d3d3      	bcc.n	800a980 <IntToUnicode+0x18>
  }
}
 800a9d8:	bf00      	nop
 800a9da:	bf00      	nop
 800a9dc:	371c      	adds	r7, #28
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bc80      	pop	{r7}
 800a9e2:	4770      	bx	lr

0800a9e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a0d      	ldr	r2, [pc, #52]	; (800aa28 <HAL_PCD_MspInit+0x44>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d113      	bne.n	800aa1e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a9f6:	4b0d      	ldr	r3, [pc, #52]	; (800aa2c <HAL_PCD_MspInit+0x48>)
 800a9f8:	69db      	ldr	r3, [r3, #28]
 800a9fa:	4a0c      	ldr	r2, [pc, #48]	; (800aa2c <HAL_PCD_MspInit+0x48>)
 800a9fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa00:	61d3      	str	r3, [r2, #28]
 800aa02:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <HAL_PCD_MspInit+0x48>)
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2100      	movs	r1, #0
 800aa12:	2014      	movs	r0, #20
 800aa14:	f7f7 fe8d 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800aa18:	2014      	movs	r0, #20
 800aa1a:	f7f7 fea6 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa1e:	bf00      	nop
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	40005c00 	.word	0x40005c00
 800aa2c:	40021000 	.word	0x40021000

0800aa30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800aa44:	4619      	mov	r1, r3
 800aa46:	4610      	mov	r0, r2
 800aa48:	f7fe fdb5 	bl	80095b6 <USBD_LL_SetupStage>
}
 800aa4c:	bf00      	nop
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800aa66:	78fa      	ldrb	r2, [r7, #3]
 800aa68:	6879      	ldr	r1, [r7, #4]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	00db      	lsls	r3, r3, #3
 800aa72:	440b      	add	r3, r1
 800aa74:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	78fb      	ldrb	r3, [r7, #3]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	f7fe fde7 	bl	8009650 <USBD_LL_DataOutStage>
}
 800aa82:	bf00      	nop
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	460b      	mov	r3, r1
 800aa94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800aa9c:	78fa      	ldrb	r2, [r7, #3]
 800aa9e:	6879      	ldr	r1, [r7, #4]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	00db      	lsls	r3, r3, #3
 800aaa8:	440b      	add	r3, r1
 800aaaa:	333c      	adds	r3, #60	; 0x3c
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	78fb      	ldrb	r3, [r7, #3]
 800aab0:	4619      	mov	r1, r3
 800aab2:	f7fe fe3e 	bl	8009732 <USBD_LL_DataInStage>
}
 800aab6:	bf00      	nop
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe ff4e 	bl	800996e <USBD_LL_SOF>
}
 800aad2:	bf00      	nop
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b084      	sub	sp, #16
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aae2:	2301      	movs	r3, #1
 800aae4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d001      	beq.n	800aaf2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aaee:	f7f6 feeb 	bl	80018c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aaf8:	7bfa      	ldrb	r2, [r7, #15]
 800aafa:	4611      	mov	r1, r2
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe fefe 	bl	80098fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fe feb7 	bl	800987c <USBD_LL_Reset>
}
 800ab0e:	bf00      	nop
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
	...

0800ab18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fe fef8 	bl	800991c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d005      	beq.n	800ab40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab34:	4b04      	ldr	r3, [pc, #16]	; (800ab48 <HAL_PCD_SuspendCallback+0x30>)
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	4a03      	ldr	r2, [pc, #12]	; (800ab48 <HAL_PCD_SuspendCallback+0x30>)
 800ab3a:	f043 0306 	orr.w	r3, r3, #6
 800ab3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab40:	bf00      	nop
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	e000ed00 	.word	0xe000ed00

0800ab4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe fef2 	bl	8009944 <USBD_LL_Resume>
}
 800ab60:	bf00      	nop
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab70:	4a28      	ldr	r2, [pc, #160]	; (800ac14 <USBD_LL_Init+0xac>)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a26      	ldr	r2, [pc, #152]	; (800ac14 <USBD_LL_Init+0xac>)
 800ab7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab80:	4b24      	ldr	r3, [pc, #144]	; (800ac14 <USBD_LL_Init+0xac>)
 800ab82:	4a25      	ldr	r2, [pc, #148]	; (800ac18 <USBD_LL_Init+0xb0>)
 800ab84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab86:	4b23      	ldr	r3, [pc, #140]	; (800ac14 <USBD_LL_Init+0xac>)
 800ab88:	2208      	movs	r2, #8
 800ab8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab8c:	4b21      	ldr	r3, [pc, #132]	; (800ac14 <USBD_LL_Init+0xac>)
 800ab8e:	2202      	movs	r2, #2
 800ab90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab92:	4b20      	ldr	r3, [pc, #128]	; (800ac14 <USBD_LL_Init+0xac>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab98:	4b1e      	ldr	r3, [pc, #120]	; (800ac14 <USBD_LL_Init+0xac>)
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab9e:	4b1d      	ldr	r3, [pc, #116]	; (800ac14 <USBD_LL_Init+0xac>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aba4:	481b      	ldr	r0, [pc, #108]	; (800ac14 <USBD_LL_Init+0xac>)
 800aba6:	f7f8 fd71 	bl	800368c <HAL_PCD_Init>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d001      	beq.n	800abb4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800abb0:	f7f6 fe8a 	bl	80018c8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abba:	2318      	movs	r3, #24
 800abbc:	2200      	movs	r2, #0
 800abbe:	2100      	movs	r1, #0
 800abc0:	f7fa fa90 	bl	80050e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abca:	2358      	movs	r3, #88	; 0x58
 800abcc:	2200      	movs	r2, #0
 800abce:	2180      	movs	r1, #128	; 0x80
 800abd0:	f7fa fa88 	bl	80050e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abda:	23c0      	movs	r3, #192	; 0xc0
 800abdc:	2200      	movs	r2, #0
 800abde:	2181      	movs	r1, #129	; 0x81
 800abe0:	f7fa fa80 	bl	80050e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abea:	f44f 7388 	mov.w	r3, #272	; 0x110
 800abee:	2200      	movs	r2, #0
 800abf0:	2101      	movs	r1, #1
 800abf2:	f7fa fa77 	bl	80050e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac00:	2200      	movs	r2, #0
 800ac02:	2182      	movs	r1, #130	; 0x82
 800ac04:	f7fa fa6e 	bl	80050e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20001108 	.word	0x20001108
 800ac18:	40005c00 	.word	0x40005c00

0800ac1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7f8 fe29 	bl	800388a <HAL_PCD_Start>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 f94e 	bl	800aee0 <USBD_Get_USB_Status>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	4608      	mov	r0, r1
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	461a      	mov	r2, r3
 800ac60:	4603      	mov	r3, r0
 800ac62:	70fb      	strb	r3, [r7, #3]
 800ac64:	460b      	mov	r3, r1
 800ac66:	70bb      	strb	r3, [r7, #2]
 800ac68:	4613      	mov	r3, r2
 800ac6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac7a:	78bb      	ldrb	r3, [r7, #2]
 800ac7c:	883a      	ldrh	r2, [r7, #0]
 800ac7e:	78f9      	ldrb	r1, [r7, #3]
 800ac80:	f7f8 ff7e 	bl	8003b80 <HAL_PCD_EP_Open>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f000 f928 	bl	800aee0 <USBD_Get_USB_Status>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b084      	sub	sp, #16
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	460b      	mov	r3, r1
 800aca8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acae:	2300      	movs	r3, #0
 800acb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acb8:	78fa      	ldrb	r2, [r7, #3]
 800acba:	4611      	mov	r1, r2
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7f8 ffbc 	bl	8003c3a <HAL_PCD_EP_Close>
 800acc2:	4603      	mov	r3, r0
 800acc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
 800acc8:	4618      	mov	r0, r3
 800acca:	f000 f909 	bl	800aee0 <USBD_Get_USB_Status>
 800acce:	4603      	mov	r3, r0
 800acd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	460b      	mov	r3, r1
 800ace6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acec:	2300      	movs	r3, #0
 800acee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acf6:	78fa      	ldrb	r2, [r7, #3]
 800acf8:	4611      	mov	r1, r2
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7f9 f864 	bl	8003dc8 <HAL_PCD_EP_SetStall>
 800ad00:	4603      	mov	r3, r0
 800ad02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad04:	7bfb      	ldrb	r3, [r7, #15]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 f8ea 	bl	800aee0 <USBD_Get_USB_Status>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b084      	sub	sp, #16
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	460b      	mov	r3, r1
 800ad24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad34:	78fa      	ldrb	r2, [r7, #3]
 800ad36:	4611      	mov	r1, r2
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7f9 f8a5 	bl	8003e88 <HAL_PCD_EP_ClrStall>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f000 f8cb 	bl	800aee0 <USBD_Get_USB_Status>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	460b      	mov	r3, r1
 800ad62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	da0c      	bge.n	800ad8e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad74:	78fb      	ldrb	r3, [r7, #3]
 800ad76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad7a:	68f9      	ldr	r1, [r7, #12]
 800ad7c:	1c5a      	adds	r2, r3, #1
 800ad7e:	4613      	mov	r3, r2
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	00db      	lsls	r3, r3, #3
 800ad86:	440b      	add	r3, r1
 800ad88:	3302      	adds	r3, #2
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	e00b      	b.n	800ada6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad8e:	78fb      	ldrb	r3, [r7, #3]
 800ad90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad94:	68f9      	ldr	r1, [r7, #12]
 800ad96:	4613      	mov	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	00db      	lsls	r3, r3, #3
 800ad9e:	440b      	add	r3, r1
 800ada0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ada4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	bc80      	pop	{r7}
 800adae:	4770      	bx	lr

0800adb0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adca:	78fa      	ldrb	r2, [r7, #3]
 800adcc:	4611      	mov	r1, r2
 800adce:	4618      	mov	r0, r3
 800add0:	f7f8 feb1 	bl	8003b36 <HAL_PCD_SetAddress>
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add8:	7bfb      	ldrb	r3, [r7, #15]
 800adda:	4618      	mov	r0, r3
 800addc:	f000 f880 	bl	800aee0 <USBD_Get_USB_Status>
 800ade0:	4603      	mov	r3, r0
 800ade2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ade4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b086      	sub	sp, #24
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	607a      	str	r2, [r7, #4]
 800adf8:	461a      	mov	r2, r3
 800adfa:	460b      	mov	r3, r1
 800adfc:	72fb      	strb	r3, [r7, #11]
 800adfe:	4613      	mov	r3, r2
 800ae00:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae10:	893b      	ldrh	r3, [r7, #8]
 800ae12:	7af9      	ldrb	r1, [r7, #11]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	f7f8 ffa0 	bl	8003d5a <HAL_PCD_EP_Transmit>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae1e:	7dfb      	ldrb	r3, [r7, #23]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 f85d 	bl	800aee0 <USBD_Get_USB_Status>
 800ae26:	4603      	mov	r3, r0
 800ae28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae2a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	607a      	str	r2, [r7, #4]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	460b      	mov	r3, r1
 800ae42:	72fb      	strb	r3, [r7, #11]
 800ae44:	4613      	mov	r3, r2
 800ae46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae56:	893b      	ldrh	r3, [r7, #8]
 800ae58:	7af9      	ldrb	r1, [r7, #11]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	f7f8 ff35 	bl	8003cca <HAL_PCD_EP_Receive>
 800ae60:	4603      	mov	r3, r0
 800ae62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 f83a 	bl	800aee0 <USBD_Get_USB_Status>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae70:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3718      	adds	r7, #24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	460b      	mov	r3, r1
 800ae84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae8c:	78fa      	ldrb	r2, [r7, #3]
 800ae8e:	4611      	mov	r1, r2
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f8 ff4b 	bl	8003d2c <HAL_PCD_EP_GetRxCount>
 800ae96:	4603      	mov	r3, r0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aea8:	4b02      	ldr	r3, [pc, #8]	; (800aeb4 <USBD_static_malloc+0x14>)
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bc80      	pop	{r7}
 800aeb2:	4770      	bx	lr
 800aeb4:	200013f8 	.word	0x200013f8

0800aeb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]

}
 800aec0:	bf00      	nop
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bc80      	pop	{r7}
 800aec8:	4770      	bx	lr

0800aeca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeca:	b480      	push	{r7}
 800aecc:	b083      	sub	sp, #12
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	460b      	mov	r3, r1
 800aed4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aed6:	bf00      	nop
 800aed8:	370c      	adds	r7, #12
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bc80      	pop	{r7}
 800aede:	4770      	bx	lr

0800aee0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4603      	mov	r3, r0
 800aee8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aeee:	79fb      	ldrb	r3, [r7, #7]
 800aef0:	2b03      	cmp	r3, #3
 800aef2:	d817      	bhi.n	800af24 <USBD_Get_USB_Status+0x44>
 800aef4:	a201      	add	r2, pc, #4	; (adr r2, 800aefc <USBD_Get_USB_Status+0x1c>)
 800aef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefa:	bf00      	nop
 800aefc:	0800af0d 	.word	0x0800af0d
 800af00:	0800af13 	.word	0x0800af13
 800af04:	0800af19 	.word	0x0800af19
 800af08:	0800af1f 	.word	0x0800af1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	73fb      	strb	r3, [r7, #15]
    break;
 800af10:	e00b      	b.n	800af2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af12:	2302      	movs	r3, #2
 800af14:	73fb      	strb	r3, [r7, #15]
    break;
 800af16:	e008      	b.n	800af2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af18:	2301      	movs	r3, #1
 800af1a:	73fb      	strb	r3, [r7, #15]
    break;
 800af1c:	e005      	b.n	800af2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af1e:	2302      	movs	r3, #2
 800af20:	73fb      	strb	r3, [r7, #15]
    break;
 800af22:	e002      	b.n	800af2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af24:	2302      	movs	r3, #2
 800af26:	73fb      	strb	r3, [r7, #15]
    break;
 800af28:	bf00      	nop
  }
  return usb_status;
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	bc80      	pop	{r7}
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop

0800af38 <atoi>:
 800af38:	220a      	movs	r2, #10
 800af3a:	2100      	movs	r1, #0
 800af3c:	f000 b87e 	b.w	800b03c <strtol>

0800af40 <_strtol_l.constprop.0>:
 800af40:	2b01      	cmp	r3, #1
 800af42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af46:	4686      	mov	lr, r0
 800af48:	4690      	mov	r8, r2
 800af4a:	d001      	beq.n	800af50 <_strtol_l.constprop.0+0x10>
 800af4c:	2b24      	cmp	r3, #36	; 0x24
 800af4e:	d906      	bls.n	800af5e <_strtol_l.constprop.0+0x1e>
 800af50:	f000 f8da 	bl	800b108 <__errno>
 800af54:	2316      	movs	r3, #22
 800af56:	6003      	str	r3, [r0, #0]
 800af58:	2000      	movs	r0, #0
 800af5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af5e:	460d      	mov	r5, r1
 800af60:	4835      	ldr	r0, [pc, #212]	; (800b038 <_strtol_l.constprop.0+0xf8>)
 800af62:	462a      	mov	r2, r5
 800af64:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af68:	5d06      	ldrb	r6, [r0, r4]
 800af6a:	f016 0608 	ands.w	r6, r6, #8
 800af6e:	d1f8      	bne.n	800af62 <_strtol_l.constprop.0+0x22>
 800af70:	2c2d      	cmp	r4, #45	; 0x2d
 800af72:	d12e      	bne.n	800afd2 <_strtol_l.constprop.0+0x92>
 800af74:	2601      	movs	r6, #1
 800af76:	782c      	ldrb	r4, [r5, #0]
 800af78:	1c95      	adds	r5, r2, #2
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d057      	beq.n	800b02e <_strtol_l.constprop.0+0xee>
 800af7e:	2b10      	cmp	r3, #16
 800af80:	d109      	bne.n	800af96 <_strtol_l.constprop.0+0x56>
 800af82:	2c30      	cmp	r4, #48	; 0x30
 800af84:	d107      	bne.n	800af96 <_strtol_l.constprop.0+0x56>
 800af86:	782a      	ldrb	r2, [r5, #0]
 800af88:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800af8c:	2a58      	cmp	r2, #88	; 0x58
 800af8e:	d149      	bne.n	800b024 <_strtol_l.constprop.0+0xe4>
 800af90:	2310      	movs	r3, #16
 800af92:	786c      	ldrb	r4, [r5, #1]
 800af94:	3502      	adds	r5, #2
 800af96:	2200      	movs	r2, #0
 800af98:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800af9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800afa0:	fbbc f9f3 	udiv	r9, ip, r3
 800afa4:	4610      	mov	r0, r2
 800afa6:	fb03 ca19 	mls	sl, r3, r9, ip
 800afaa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800afae:	2f09      	cmp	r7, #9
 800afb0:	d814      	bhi.n	800afdc <_strtol_l.constprop.0+0x9c>
 800afb2:	463c      	mov	r4, r7
 800afb4:	42a3      	cmp	r3, r4
 800afb6:	dd20      	ble.n	800affa <_strtol_l.constprop.0+0xba>
 800afb8:	1c57      	adds	r7, r2, #1
 800afba:	d007      	beq.n	800afcc <_strtol_l.constprop.0+0x8c>
 800afbc:	4581      	cmp	r9, r0
 800afbe:	d319      	bcc.n	800aff4 <_strtol_l.constprop.0+0xb4>
 800afc0:	d101      	bne.n	800afc6 <_strtol_l.constprop.0+0x86>
 800afc2:	45a2      	cmp	sl, r4
 800afc4:	db16      	blt.n	800aff4 <_strtol_l.constprop.0+0xb4>
 800afc6:	2201      	movs	r2, #1
 800afc8:	fb00 4003 	mla	r0, r0, r3, r4
 800afcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afd0:	e7eb      	b.n	800afaa <_strtol_l.constprop.0+0x6a>
 800afd2:	2c2b      	cmp	r4, #43	; 0x2b
 800afd4:	bf04      	itt	eq
 800afd6:	782c      	ldrbeq	r4, [r5, #0]
 800afd8:	1c95      	addeq	r5, r2, #2
 800afda:	e7ce      	b.n	800af7a <_strtol_l.constprop.0+0x3a>
 800afdc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800afe0:	2f19      	cmp	r7, #25
 800afe2:	d801      	bhi.n	800afe8 <_strtol_l.constprop.0+0xa8>
 800afe4:	3c37      	subs	r4, #55	; 0x37
 800afe6:	e7e5      	b.n	800afb4 <_strtol_l.constprop.0+0x74>
 800afe8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800afec:	2f19      	cmp	r7, #25
 800afee:	d804      	bhi.n	800affa <_strtol_l.constprop.0+0xba>
 800aff0:	3c57      	subs	r4, #87	; 0x57
 800aff2:	e7df      	b.n	800afb4 <_strtol_l.constprop.0+0x74>
 800aff4:	f04f 32ff 	mov.w	r2, #4294967295
 800aff8:	e7e8      	b.n	800afcc <_strtol_l.constprop.0+0x8c>
 800affa:	1c53      	adds	r3, r2, #1
 800affc:	d108      	bne.n	800b010 <_strtol_l.constprop.0+0xd0>
 800affe:	2322      	movs	r3, #34	; 0x22
 800b000:	4660      	mov	r0, ip
 800b002:	f8ce 3000 	str.w	r3, [lr]
 800b006:	f1b8 0f00 	cmp.w	r8, #0
 800b00a:	d0a6      	beq.n	800af5a <_strtol_l.constprop.0+0x1a>
 800b00c:	1e69      	subs	r1, r5, #1
 800b00e:	e006      	b.n	800b01e <_strtol_l.constprop.0+0xde>
 800b010:	b106      	cbz	r6, 800b014 <_strtol_l.constprop.0+0xd4>
 800b012:	4240      	negs	r0, r0
 800b014:	f1b8 0f00 	cmp.w	r8, #0
 800b018:	d09f      	beq.n	800af5a <_strtol_l.constprop.0+0x1a>
 800b01a:	2a00      	cmp	r2, #0
 800b01c:	d1f6      	bne.n	800b00c <_strtol_l.constprop.0+0xcc>
 800b01e:	f8c8 1000 	str.w	r1, [r8]
 800b022:	e79a      	b.n	800af5a <_strtol_l.constprop.0+0x1a>
 800b024:	2430      	movs	r4, #48	; 0x30
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1b5      	bne.n	800af96 <_strtol_l.constprop.0+0x56>
 800b02a:	2308      	movs	r3, #8
 800b02c:	e7b3      	b.n	800af96 <_strtol_l.constprop.0+0x56>
 800b02e:	2c30      	cmp	r4, #48	; 0x30
 800b030:	d0a9      	beq.n	800af86 <_strtol_l.constprop.0+0x46>
 800b032:	230a      	movs	r3, #10
 800b034:	e7af      	b.n	800af96 <_strtol_l.constprop.0+0x56>
 800b036:	bf00      	nop
 800b038:	0800bc6b 	.word	0x0800bc6b

0800b03c <strtol>:
 800b03c:	4613      	mov	r3, r2
 800b03e:	460a      	mov	r2, r1
 800b040:	4601      	mov	r1, r0
 800b042:	4802      	ldr	r0, [pc, #8]	; (800b04c <strtol+0x10>)
 800b044:	6800      	ldr	r0, [r0, #0]
 800b046:	f7ff bf7b 	b.w	800af40 <_strtol_l.constprop.0>
 800b04a:	bf00      	nop
 800b04c:	200001e8 	.word	0x200001e8

0800b050 <sniprintf>:
 800b050:	b40c      	push	{r2, r3}
 800b052:	b530      	push	{r4, r5, lr}
 800b054:	4b17      	ldr	r3, [pc, #92]	; (800b0b4 <sniprintf+0x64>)
 800b056:	1e0c      	subs	r4, r1, #0
 800b058:	681d      	ldr	r5, [r3, #0]
 800b05a:	b09d      	sub	sp, #116	; 0x74
 800b05c:	da08      	bge.n	800b070 <sniprintf+0x20>
 800b05e:	238b      	movs	r3, #139	; 0x8b
 800b060:	f04f 30ff 	mov.w	r0, #4294967295
 800b064:	602b      	str	r3, [r5, #0]
 800b066:	b01d      	add	sp, #116	; 0x74
 800b068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b06c:	b002      	add	sp, #8
 800b06e:	4770      	bx	lr
 800b070:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b074:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b078:	bf0c      	ite	eq
 800b07a:	4623      	moveq	r3, r4
 800b07c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b080:	9304      	str	r3, [sp, #16]
 800b082:	9307      	str	r3, [sp, #28]
 800b084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b088:	9002      	str	r0, [sp, #8]
 800b08a:	9006      	str	r0, [sp, #24]
 800b08c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b090:	4628      	mov	r0, r5
 800b092:	ab21      	add	r3, sp, #132	; 0x84
 800b094:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b096:	a902      	add	r1, sp, #8
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	f000 f9bd 	bl	800b418 <_svfiprintf_r>
 800b09e:	1c43      	adds	r3, r0, #1
 800b0a0:	bfbc      	itt	lt
 800b0a2:	238b      	movlt	r3, #139	; 0x8b
 800b0a4:	602b      	strlt	r3, [r5, #0]
 800b0a6:	2c00      	cmp	r4, #0
 800b0a8:	d0dd      	beq.n	800b066 <sniprintf+0x16>
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	9b02      	ldr	r3, [sp, #8]
 800b0ae:	701a      	strb	r2, [r3, #0]
 800b0b0:	e7d9      	b.n	800b066 <sniprintf+0x16>
 800b0b2:	bf00      	nop
 800b0b4:	200001e8 	.word	0x200001e8

0800b0b8 <siprintf>:
 800b0b8:	b40e      	push	{r1, r2, r3}
 800b0ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0be:	b500      	push	{lr}
 800b0c0:	b09c      	sub	sp, #112	; 0x70
 800b0c2:	ab1d      	add	r3, sp, #116	; 0x74
 800b0c4:	9002      	str	r0, [sp, #8]
 800b0c6:	9006      	str	r0, [sp, #24]
 800b0c8:	9107      	str	r1, [sp, #28]
 800b0ca:	9104      	str	r1, [sp, #16]
 800b0cc:	4808      	ldr	r0, [pc, #32]	; (800b0f0 <siprintf+0x38>)
 800b0ce:	4909      	ldr	r1, [pc, #36]	; (800b0f4 <siprintf+0x3c>)
 800b0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d4:	9105      	str	r1, [sp, #20]
 800b0d6:	6800      	ldr	r0, [r0, #0]
 800b0d8:	a902      	add	r1, sp, #8
 800b0da:	9301      	str	r3, [sp, #4]
 800b0dc:	f000 f99c 	bl	800b418 <_svfiprintf_r>
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	9b02      	ldr	r3, [sp, #8]
 800b0e4:	701a      	strb	r2, [r3, #0]
 800b0e6:	b01c      	add	sp, #112	; 0x70
 800b0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0ec:	b003      	add	sp, #12
 800b0ee:	4770      	bx	lr
 800b0f0:	200001e8 	.word	0x200001e8
 800b0f4:	ffff0208 	.word	0xffff0208

0800b0f8 <memset>:
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	4402      	add	r2, r0
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d100      	bne.n	800b102 <memset+0xa>
 800b100:	4770      	bx	lr
 800b102:	f803 1b01 	strb.w	r1, [r3], #1
 800b106:	e7f9      	b.n	800b0fc <memset+0x4>

0800b108 <__errno>:
 800b108:	4b01      	ldr	r3, [pc, #4]	; (800b110 <__errno+0x8>)
 800b10a:	6818      	ldr	r0, [r3, #0]
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	200001e8 	.word	0x200001e8

0800b114 <__libc_init_array>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	2600      	movs	r6, #0
 800b118:	4d0c      	ldr	r5, [pc, #48]	; (800b14c <__libc_init_array+0x38>)
 800b11a:	4c0d      	ldr	r4, [pc, #52]	; (800b150 <__libc_init_array+0x3c>)
 800b11c:	1b64      	subs	r4, r4, r5
 800b11e:	10a4      	asrs	r4, r4, #2
 800b120:	42a6      	cmp	r6, r4
 800b122:	d109      	bne.n	800b138 <__libc_init_array+0x24>
 800b124:	f000 fc7a 	bl	800ba1c <_init>
 800b128:	2600      	movs	r6, #0
 800b12a:	4d0a      	ldr	r5, [pc, #40]	; (800b154 <__libc_init_array+0x40>)
 800b12c:	4c0a      	ldr	r4, [pc, #40]	; (800b158 <__libc_init_array+0x44>)
 800b12e:	1b64      	subs	r4, r4, r5
 800b130:	10a4      	asrs	r4, r4, #2
 800b132:	42a6      	cmp	r6, r4
 800b134:	d105      	bne.n	800b142 <__libc_init_array+0x2e>
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	f855 3b04 	ldr.w	r3, [r5], #4
 800b13c:	4798      	blx	r3
 800b13e:	3601      	adds	r6, #1
 800b140:	e7ee      	b.n	800b120 <__libc_init_array+0xc>
 800b142:	f855 3b04 	ldr.w	r3, [r5], #4
 800b146:	4798      	blx	r3
 800b148:	3601      	adds	r6, #1
 800b14a:	e7f2      	b.n	800b132 <__libc_init_array+0x1e>
 800b14c:	0800bda0 	.word	0x0800bda0
 800b150:	0800bda0 	.word	0x0800bda0
 800b154:	0800bda0 	.word	0x0800bda0
 800b158:	0800bda4 	.word	0x0800bda4

0800b15c <__retarget_lock_acquire_recursive>:
 800b15c:	4770      	bx	lr

0800b15e <__retarget_lock_release_recursive>:
 800b15e:	4770      	bx	lr

0800b160 <memcpy>:
 800b160:	440a      	add	r2, r1
 800b162:	4291      	cmp	r1, r2
 800b164:	f100 33ff 	add.w	r3, r0, #4294967295
 800b168:	d100      	bne.n	800b16c <memcpy+0xc>
 800b16a:	4770      	bx	lr
 800b16c:	b510      	push	{r4, lr}
 800b16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b172:	4291      	cmp	r1, r2
 800b174:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b178:	d1f9      	bne.n	800b16e <memcpy+0xe>
 800b17a:	bd10      	pop	{r4, pc}

0800b17c <_free_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4605      	mov	r5, r0
 800b180:	2900      	cmp	r1, #0
 800b182:	d040      	beq.n	800b206 <_free_r+0x8a>
 800b184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b188:	1f0c      	subs	r4, r1, #4
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	bfb8      	it	lt
 800b18e:	18e4      	addlt	r4, r4, r3
 800b190:	f000 f8dc 	bl	800b34c <__malloc_lock>
 800b194:	4a1c      	ldr	r2, [pc, #112]	; (800b208 <_free_r+0x8c>)
 800b196:	6813      	ldr	r3, [r2, #0]
 800b198:	b933      	cbnz	r3, 800b1a8 <_free_r+0x2c>
 800b19a:	6063      	str	r3, [r4, #4]
 800b19c:	6014      	str	r4, [r2, #0]
 800b19e:	4628      	mov	r0, r5
 800b1a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1a4:	f000 b8d8 	b.w	800b358 <__malloc_unlock>
 800b1a8:	42a3      	cmp	r3, r4
 800b1aa:	d908      	bls.n	800b1be <_free_r+0x42>
 800b1ac:	6820      	ldr	r0, [r4, #0]
 800b1ae:	1821      	adds	r1, r4, r0
 800b1b0:	428b      	cmp	r3, r1
 800b1b2:	bf01      	itttt	eq
 800b1b4:	6819      	ldreq	r1, [r3, #0]
 800b1b6:	685b      	ldreq	r3, [r3, #4]
 800b1b8:	1809      	addeq	r1, r1, r0
 800b1ba:	6021      	streq	r1, [r4, #0]
 800b1bc:	e7ed      	b.n	800b19a <_free_r+0x1e>
 800b1be:	461a      	mov	r2, r3
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	b10b      	cbz	r3, 800b1c8 <_free_r+0x4c>
 800b1c4:	42a3      	cmp	r3, r4
 800b1c6:	d9fa      	bls.n	800b1be <_free_r+0x42>
 800b1c8:	6811      	ldr	r1, [r2, #0]
 800b1ca:	1850      	adds	r0, r2, r1
 800b1cc:	42a0      	cmp	r0, r4
 800b1ce:	d10b      	bne.n	800b1e8 <_free_r+0x6c>
 800b1d0:	6820      	ldr	r0, [r4, #0]
 800b1d2:	4401      	add	r1, r0
 800b1d4:	1850      	adds	r0, r2, r1
 800b1d6:	4283      	cmp	r3, r0
 800b1d8:	6011      	str	r1, [r2, #0]
 800b1da:	d1e0      	bne.n	800b19e <_free_r+0x22>
 800b1dc:	6818      	ldr	r0, [r3, #0]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	4408      	add	r0, r1
 800b1e2:	6010      	str	r0, [r2, #0]
 800b1e4:	6053      	str	r3, [r2, #4]
 800b1e6:	e7da      	b.n	800b19e <_free_r+0x22>
 800b1e8:	d902      	bls.n	800b1f0 <_free_r+0x74>
 800b1ea:	230c      	movs	r3, #12
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	e7d6      	b.n	800b19e <_free_r+0x22>
 800b1f0:	6820      	ldr	r0, [r4, #0]
 800b1f2:	1821      	adds	r1, r4, r0
 800b1f4:	428b      	cmp	r3, r1
 800b1f6:	bf01      	itttt	eq
 800b1f8:	6819      	ldreq	r1, [r3, #0]
 800b1fa:	685b      	ldreq	r3, [r3, #4]
 800b1fc:	1809      	addeq	r1, r1, r0
 800b1fe:	6021      	streq	r1, [r4, #0]
 800b200:	6063      	str	r3, [r4, #4]
 800b202:	6054      	str	r4, [r2, #4]
 800b204:	e7cb      	b.n	800b19e <_free_r+0x22>
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	20001758 	.word	0x20001758

0800b20c <sbrk_aligned>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	4e0e      	ldr	r6, [pc, #56]	; (800b248 <sbrk_aligned+0x3c>)
 800b210:	460c      	mov	r4, r1
 800b212:	6831      	ldr	r1, [r6, #0]
 800b214:	4605      	mov	r5, r0
 800b216:	b911      	cbnz	r1, 800b21e <sbrk_aligned+0x12>
 800b218:	f000 fbaa 	bl	800b970 <_sbrk_r>
 800b21c:	6030      	str	r0, [r6, #0]
 800b21e:	4621      	mov	r1, r4
 800b220:	4628      	mov	r0, r5
 800b222:	f000 fba5 	bl	800b970 <_sbrk_r>
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	d00a      	beq.n	800b240 <sbrk_aligned+0x34>
 800b22a:	1cc4      	adds	r4, r0, #3
 800b22c:	f024 0403 	bic.w	r4, r4, #3
 800b230:	42a0      	cmp	r0, r4
 800b232:	d007      	beq.n	800b244 <sbrk_aligned+0x38>
 800b234:	1a21      	subs	r1, r4, r0
 800b236:	4628      	mov	r0, r5
 800b238:	f000 fb9a 	bl	800b970 <_sbrk_r>
 800b23c:	3001      	adds	r0, #1
 800b23e:	d101      	bne.n	800b244 <sbrk_aligned+0x38>
 800b240:	f04f 34ff 	mov.w	r4, #4294967295
 800b244:	4620      	mov	r0, r4
 800b246:	bd70      	pop	{r4, r5, r6, pc}
 800b248:	2000175c 	.word	0x2000175c

0800b24c <_malloc_r>:
 800b24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b250:	1ccd      	adds	r5, r1, #3
 800b252:	f025 0503 	bic.w	r5, r5, #3
 800b256:	3508      	adds	r5, #8
 800b258:	2d0c      	cmp	r5, #12
 800b25a:	bf38      	it	cc
 800b25c:	250c      	movcc	r5, #12
 800b25e:	2d00      	cmp	r5, #0
 800b260:	4607      	mov	r7, r0
 800b262:	db01      	blt.n	800b268 <_malloc_r+0x1c>
 800b264:	42a9      	cmp	r1, r5
 800b266:	d905      	bls.n	800b274 <_malloc_r+0x28>
 800b268:	230c      	movs	r3, #12
 800b26a:	2600      	movs	r6, #0
 800b26c:	603b      	str	r3, [r7, #0]
 800b26e:	4630      	mov	r0, r6
 800b270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b274:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b348 <_malloc_r+0xfc>
 800b278:	f000 f868 	bl	800b34c <__malloc_lock>
 800b27c:	f8d8 3000 	ldr.w	r3, [r8]
 800b280:	461c      	mov	r4, r3
 800b282:	bb5c      	cbnz	r4, 800b2dc <_malloc_r+0x90>
 800b284:	4629      	mov	r1, r5
 800b286:	4638      	mov	r0, r7
 800b288:	f7ff ffc0 	bl	800b20c <sbrk_aligned>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	4604      	mov	r4, r0
 800b290:	d155      	bne.n	800b33e <_malloc_r+0xf2>
 800b292:	f8d8 4000 	ldr.w	r4, [r8]
 800b296:	4626      	mov	r6, r4
 800b298:	2e00      	cmp	r6, #0
 800b29a:	d145      	bne.n	800b328 <_malloc_r+0xdc>
 800b29c:	2c00      	cmp	r4, #0
 800b29e:	d048      	beq.n	800b332 <_malloc_r+0xe6>
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	eb04 0903 	add.w	r9, r4, r3
 800b2aa:	f000 fb61 	bl	800b970 <_sbrk_r>
 800b2ae:	4581      	cmp	r9, r0
 800b2b0:	d13f      	bne.n	800b332 <_malloc_r+0xe6>
 800b2b2:	6821      	ldr	r1, [r4, #0]
 800b2b4:	4638      	mov	r0, r7
 800b2b6:	1a6d      	subs	r5, r5, r1
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	f7ff ffa7 	bl	800b20c <sbrk_aligned>
 800b2be:	3001      	adds	r0, #1
 800b2c0:	d037      	beq.n	800b332 <_malloc_r+0xe6>
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	442b      	add	r3, r5
 800b2c6:	6023      	str	r3, [r4, #0]
 800b2c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d038      	beq.n	800b342 <_malloc_r+0xf6>
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	42a2      	cmp	r2, r4
 800b2d4:	d12b      	bne.n	800b32e <_malloc_r+0xe2>
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	e00f      	b.n	800b2fc <_malloc_r+0xb0>
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	1b52      	subs	r2, r2, r5
 800b2e0:	d41f      	bmi.n	800b322 <_malloc_r+0xd6>
 800b2e2:	2a0b      	cmp	r2, #11
 800b2e4:	d917      	bls.n	800b316 <_malloc_r+0xca>
 800b2e6:	1961      	adds	r1, r4, r5
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	6025      	str	r5, [r4, #0]
 800b2ec:	bf18      	it	ne
 800b2ee:	6059      	strne	r1, [r3, #4]
 800b2f0:	6863      	ldr	r3, [r4, #4]
 800b2f2:	bf08      	it	eq
 800b2f4:	f8c8 1000 	streq.w	r1, [r8]
 800b2f8:	5162      	str	r2, [r4, r5]
 800b2fa:	604b      	str	r3, [r1, #4]
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	f104 060b 	add.w	r6, r4, #11
 800b302:	f000 f829 	bl	800b358 <__malloc_unlock>
 800b306:	f026 0607 	bic.w	r6, r6, #7
 800b30a:	1d23      	adds	r3, r4, #4
 800b30c:	1af2      	subs	r2, r6, r3
 800b30e:	d0ae      	beq.n	800b26e <_malloc_r+0x22>
 800b310:	1b9b      	subs	r3, r3, r6
 800b312:	50a3      	str	r3, [r4, r2]
 800b314:	e7ab      	b.n	800b26e <_malloc_r+0x22>
 800b316:	42a3      	cmp	r3, r4
 800b318:	6862      	ldr	r2, [r4, #4]
 800b31a:	d1dd      	bne.n	800b2d8 <_malloc_r+0x8c>
 800b31c:	f8c8 2000 	str.w	r2, [r8]
 800b320:	e7ec      	b.n	800b2fc <_malloc_r+0xb0>
 800b322:	4623      	mov	r3, r4
 800b324:	6864      	ldr	r4, [r4, #4]
 800b326:	e7ac      	b.n	800b282 <_malloc_r+0x36>
 800b328:	4634      	mov	r4, r6
 800b32a:	6876      	ldr	r6, [r6, #4]
 800b32c:	e7b4      	b.n	800b298 <_malloc_r+0x4c>
 800b32e:	4613      	mov	r3, r2
 800b330:	e7cc      	b.n	800b2cc <_malloc_r+0x80>
 800b332:	230c      	movs	r3, #12
 800b334:	4638      	mov	r0, r7
 800b336:	603b      	str	r3, [r7, #0]
 800b338:	f000 f80e 	bl	800b358 <__malloc_unlock>
 800b33c:	e797      	b.n	800b26e <_malloc_r+0x22>
 800b33e:	6025      	str	r5, [r4, #0]
 800b340:	e7dc      	b.n	800b2fc <_malloc_r+0xb0>
 800b342:	605b      	str	r3, [r3, #4]
 800b344:	deff      	udf	#255	; 0xff
 800b346:	bf00      	nop
 800b348:	20001758 	.word	0x20001758

0800b34c <__malloc_lock>:
 800b34c:	4801      	ldr	r0, [pc, #4]	; (800b354 <__malloc_lock+0x8>)
 800b34e:	f7ff bf05 	b.w	800b15c <__retarget_lock_acquire_recursive>
 800b352:	bf00      	nop
 800b354:	20001754 	.word	0x20001754

0800b358 <__malloc_unlock>:
 800b358:	4801      	ldr	r0, [pc, #4]	; (800b360 <__malloc_unlock+0x8>)
 800b35a:	f7ff bf00 	b.w	800b15e <__retarget_lock_release_recursive>
 800b35e:	bf00      	nop
 800b360:	20001754 	.word	0x20001754

0800b364 <__ssputs_r>:
 800b364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b368:	461f      	mov	r7, r3
 800b36a:	688e      	ldr	r6, [r1, #8]
 800b36c:	4682      	mov	sl, r0
 800b36e:	42be      	cmp	r6, r7
 800b370:	460c      	mov	r4, r1
 800b372:	4690      	mov	r8, r2
 800b374:	680b      	ldr	r3, [r1, #0]
 800b376:	d82c      	bhi.n	800b3d2 <__ssputs_r+0x6e>
 800b378:	898a      	ldrh	r2, [r1, #12]
 800b37a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b37e:	d026      	beq.n	800b3ce <__ssputs_r+0x6a>
 800b380:	6965      	ldr	r5, [r4, #20]
 800b382:	6909      	ldr	r1, [r1, #16]
 800b384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b388:	eba3 0901 	sub.w	r9, r3, r1
 800b38c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b390:	1c7b      	adds	r3, r7, #1
 800b392:	444b      	add	r3, r9
 800b394:	106d      	asrs	r5, r5, #1
 800b396:	429d      	cmp	r5, r3
 800b398:	bf38      	it	cc
 800b39a:	461d      	movcc	r5, r3
 800b39c:	0553      	lsls	r3, r2, #21
 800b39e:	d527      	bpl.n	800b3f0 <__ssputs_r+0x8c>
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	f7ff ff53 	bl	800b24c <_malloc_r>
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	b360      	cbz	r0, 800b404 <__ssputs_r+0xa0>
 800b3aa:	464a      	mov	r2, r9
 800b3ac:	6921      	ldr	r1, [r4, #16]
 800b3ae:	f7ff fed7 	bl	800b160 <memcpy>
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3bc:	81a3      	strh	r3, [r4, #12]
 800b3be:	6126      	str	r6, [r4, #16]
 800b3c0:	444e      	add	r6, r9
 800b3c2:	6026      	str	r6, [r4, #0]
 800b3c4:	463e      	mov	r6, r7
 800b3c6:	6165      	str	r5, [r4, #20]
 800b3c8:	eba5 0509 	sub.w	r5, r5, r9
 800b3cc:	60a5      	str	r5, [r4, #8]
 800b3ce:	42be      	cmp	r6, r7
 800b3d0:	d900      	bls.n	800b3d4 <__ssputs_r+0x70>
 800b3d2:	463e      	mov	r6, r7
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	4641      	mov	r1, r8
 800b3d8:	6820      	ldr	r0, [r4, #0]
 800b3da:	f000 faaf 	bl	800b93c <memmove>
 800b3de:	2000      	movs	r0, #0
 800b3e0:	68a3      	ldr	r3, [r4, #8]
 800b3e2:	1b9b      	subs	r3, r3, r6
 800b3e4:	60a3      	str	r3, [r4, #8]
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	4433      	add	r3, r6
 800b3ea:	6023      	str	r3, [r4, #0]
 800b3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f0:	462a      	mov	r2, r5
 800b3f2:	f000 fadb 	bl	800b9ac <_realloc_r>
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d1e0      	bne.n	800b3be <__ssputs_r+0x5a>
 800b3fc:	4650      	mov	r0, sl
 800b3fe:	6921      	ldr	r1, [r4, #16]
 800b400:	f7ff febc 	bl	800b17c <_free_r>
 800b404:	230c      	movs	r3, #12
 800b406:	f8ca 3000 	str.w	r3, [sl]
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	f04f 30ff 	mov.w	r0, #4294967295
 800b410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b414:	81a3      	strh	r3, [r4, #12]
 800b416:	e7e9      	b.n	800b3ec <__ssputs_r+0x88>

0800b418 <_svfiprintf_r>:
 800b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41c:	4698      	mov	r8, r3
 800b41e:	898b      	ldrh	r3, [r1, #12]
 800b420:	4607      	mov	r7, r0
 800b422:	061b      	lsls	r3, r3, #24
 800b424:	460d      	mov	r5, r1
 800b426:	4614      	mov	r4, r2
 800b428:	b09d      	sub	sp, #116	; 0x74
 800b42a:	d50e      	bpl.n	800b44a <_svfiprintf_r+0x32>
 800b42c:	690b      	ldr	r3, [r1, #16]
 800b42e:	b963      	cbnz	r3, 800b44a <_svfiprintf_r+0x32>
 800b430:	2140      	movs	r1, #64	; 0x40
 800b432:	f7ff ff0b 	bl	800b24c <_malloc_r>
 800b436:	6028      	str	r0, [r5, #0]
 800b438:	6128      	str	r0, [r5, #16]
 800b43a:	b920      	cbnz	r0, 800b446 <_svfiprintf_r+0x2e>
 800b43c:	230c      	movs	r3, #12
 800b43e:	603b      	str	r3, [r7, #0]
 800b440:	f04f 30ff 	mov.w	r0, #4294967295
 800b444:	e0d0      	b.n	800b5e8 <_svfiprintf_r+0x1d0>
 800b446:	2340      	movs	r3, #64	; 0x40
 800b448:	616b      	str	r3, [r5, #20]
 800b44a:	2300      	movs	r3, #0
 800b44c:	9309      	str	r3, [sp, #36]	; 0x24
 800b44e:	2320      	movs	r3, #32
 800b450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b454:	2330      	movs	r3, #48	; 0x30
 800b456:	f04f 0901 	mov.w	r9, #1
 800b45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b45e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b600 <_svfiprintf_r+0x1e8>
 800b462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b466:	4623      	mov	r3, r4
 800b468:	469a      	mov	sl, r3
 800b46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b46e:	b10a      	cbz	r2, 800b474 <_svfiprintf_r+0x5c>
 800b470:	2a25      	cmp	r2, #37	; 0x25
 800b472:	d1f9      	bne.n	800b468 <_svfiprintf_r+0x50>
 800b474:	ebba 0b04 	subs.w	fp, sl, r4
 800b478:	d00b      	beq.n	800b492 <_svfiprintf_r+0x7a>
 800b47a:	465b      	mov	r3, fp
 800b47c:	4622      	mov	r2, r4
 800b47e:	4629      	mov	r1, r5
 800b480:	4638      	mov	r0, r7
 800b482:	f7ff ff6f 	bl	800b364 <__ssputs_r>
 800b486:	3001      	adds	r0, #1
 800b488:	f000 80a9 	beq.w	800b5de <_svfiprintf_r+0x1c6>
 800b48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b48e:	445a      	add	r2, fp
 800b490:	9209      	str	r2, [sp, #36]	; 0x24
 800b492:	f89a 3000 	ldrb.w	r3, [sl]
 800b496:	2b00      	cmp	r3, #0
 800b498:	f000 80a1 	beq.w	800b5de <_svfiprintf_r+0x1c6>
 800b49c:	2300      	movs	r3, #0
 800b49e:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a6:	f10a 0a01 	add.w	sl, sl, #1
 800b4aa:	9304      	str	r3, [sp, #16]
 800b4ac:	9307      	str	r3, [sp, #28]
 800b4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4b4:	4654      	mov	r4, sl
 800b4b6:	2205      	movs	r2, #5
 800b4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4bc:	4850      	ldr	r0, [pc, #320]	; (800b600 <_svfiprintf_r+0x1e8>)
 800b4be:	f000 fa67 	bl	800b990 <memchr>
 800b4c2:	9a04      	ldr	r2, [sp, #16]
 800b4c4:	b9d8      	cbnz	r0, 800b4fe <_svfiprintf_r+0xe6>
 800b4c6:	06d0      	lsls	r0, r2, #27
 800b4c8:	bf44      	itt	mi
 800b4ca:	2320      	movmi	r3, #32
 800b4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4d0:	0711      	lsls	r1, r2, #28
 800b4d2:	bf44      	itt	mi
 800b4d4:	232b      	movmi	r3, #43	; 0x2b
 800b4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4da:	f89a 3000 	ldrb.w	r3, [sl]
 800b4de:	2b2a      	cmp	r3, #42	; 0x2a
 800b4e0:	d015      	beq.n	800b50e <_svfiprintf_r+0xf6>
 800b4e2:	4654      	mov	r4, sl
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f04f 0c0a 	mov.w	ip, #10
 800b4ea:	9a07      	ldr	r2, [sp, #28]
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f2:	3b30      	subs	r3, #48	; 0x30
 800b4f4:	2b09      	cmp	r3, #9
 800b4f6:	d94d      	bls.n	800b594 <_svfiprintf_r+0x17c>
 800b4f8:	b1b0      	cbz	r0, 800b528 <_svfiprintf_r+0x110>
 800b4fa:	9207      	str	r2, [sp, #28]
 800b4fc:	e014      	b.n	800b528 <_svfiprintf_r+0x110>
 800b4fe:	eba0 0308 	sub.w	r3, r0, r8
 800b502:	fa09 f303 	lsl.w	r3, r9, r3
 800b506:	4313      	orrs	r3, r2
 800b508:	46a2      	mov	sl, r4
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	e7d2      	b.n	800b4b4 <_svfiprintf_r+0x9c>
 800b50e:	9b03      	ldr	r3, [sp, #12]
 800b510:	1d19      	adds	r1, r3, #4
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	9103      	str	r1, [sp, #12]
 800b516:	2b00      	cmp	r3, #0
 800b518:	bfbb      	ittet	lt
 800b51a:	425b      	neglt	r3, r3
 800b51c:	f042 0202 	orrlt.w	r2, r2, #2
 800b520:	9307      	strge	r3, [sp, #28]
 800b522:	9307      	strlt	r3, [sp, #28]
 800b524:	bfb8      	it	lt
 800b526:	9204      	strlt	r2, [sp, #16]
 800b528:	7823      	ldrb	r3, [r4, #0]
 800b52a:	2b2e      	cmp	r3, #46	; 0x2e
 800b52c:	d10c      	bne.n	800b548 <_svfiprintf_r+0x130>
 800b52e:	7863      	ldrb	r3, [r4, #1]
 800b530:	2b2a      	cmp	r3, #42	; 0x2a
 800b532:	d134      	bne.n	800b59e <_svfiprintf_r+0x186>
 800b534:	9b03      	ldr	r3, [sp, #12]
 800b536:	3402      	adds	r4, #2
 800b538:	1d1a      	adds	r2, r3, #4
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	9203      	str	r2, [sp, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	bfb8      	it	lt
 800b542:	f04f 33ff 	movlt.w	r3, #4294967295
 800b546:	9305      	str	r3, [sp, #20]
 800b548:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b604 <_svfiprintf_r+0x1ec>
 800b54c:	2203      	movs	r2, #3
 800b54e:	4650      	mov	r0, sl
 800b550:	7821      	ldrb	r1, [r4, #0]
 800b552:	f000 fa1d 	bl	800b990 <memchr>
 800b556:	b138      	cbz	r0, 800b568 <_svfiprintf_r+0x150>
 800b558:	2240      	movs	r2, #64	; 0x40
 800b55a:	9b04      	ldr	r3, [sp, #16]
 800b55c:	eba0 000a 	sub.w	r0, r0, sl
 800b560:	4082      	lsls	r2, r0
 800b562:	4313      	orrs	r3, r2
 800b564:	3401      	adds	r4, #1
 800b566:	9304      	str	r3, [sp, #16]
 800b568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56c:	2206      	movs	r2, #6
 800b56e:	4826      	ldr	r0, [pc, #152]	; (800b608 <_svfiprintf_r+0x1f0>)
 800b570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b574:	f000 fa0c 	bl	800b990 <memchr>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d038      	beq.n	800b5ee <_svfiprintf_r+0x1d6>
 800b57c:	4b23      	ldr	r3, [pc, #140]	; (800b60c <_svfiprintf_r+0x1f4>)
 800b57e:	bb1b      	cbnz	r3, 800b5c8 <_svfiprintf_r+0x1b0>
 800b580:	9b03      	ldr	r3, [sp, #12]
 800b582:	3307      	adds	r3, #7
 800b584:	f023 0307 	bic.w	r3, r3, #7
 800b588:	3308      	adds	r3, #8
 800b58a:	9303      	str	r3, [sp, #12]
 800b58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58e:	4433      	add	r3, r6
 800b590:	9309      	str	r3, [sp, #36]	; 0x24
 800b592:	e768      	b.n	800b466 <_svfiprintf_r+0x4e>
 800b594:	460c      	mov	r4, r1
 800b596:	2001      	movs	r0, #1
 800b598:	fb0c 3202 	mla	r2, ip, r2, r3
 800b59c:	e7a6      	b.n	800b4ec <_svfiprintf_r+0xd4>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f04f 0c0a 	mov.w	ip, #10
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	3401      	adds	r4, #1
 800b5a8:	9305      	str	r3, [sp, #20]
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b0:	3a30      	subs	r2, #48	; 0x30
 800b5b2:	2a09      	cmp	r2, #9
 800b5b4:	d903      	bls.n	800b5be <_svfiprintf_r+0x1a6>
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d0c6      	beq.n	800b548 <_svfiprintf_r+0x130>
 800b5ba:	9105      	str	r1, [sp, #20]
 800b5bc:	e7c4      	b.n	800b548 <_svfiprintf_r+0x130>
 800b5be:	4604      	mov	r4, r0
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c6:	e7f0      	b.n	800b5aa <_svfiprintf_r+0x192>
 800b5c8:	ab03      	add	r3, sp, #12
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	462a      	mov	r2, r5
 800b5ce:	4638      	mov	r0, r7
 800b5d0:	4b0f      	ldr	r3, [pc, #60]	; (800b610 <_svfiprintf_r+0x1f8>)
 800b5d2:	a904      	add	r1, sp, #16
 800b5d4:	f3af 8000 	nop.w
 800b5d8:	1c42      	adds	r2, r0, #1
 800b5da:	4606      	mov	r6, r0
 800b5dc:	d1d6      	bne.n	800b58c <_svfiprintf_r+0x174>
 800b5de:	89ab      	ldrh	r3, [r5, #12]
 800b5e0:	065b      	lsls	r3, r3, #25
 800b5e2:	f53f af2d 	bmi.w	800b440 <_svfiprintf_r+0x28>
 800b5e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5e8:	b01d      	add	sp, #116	; 0x74
 800b5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ee:	ab03      	add	r3, sp, #12
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	462a      	mov	r2, r5
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	4b06      	ldr	r3, [pc, #24]	; (800b610 <_svfiprintf_r+0x1f8>)
 800b5f8:	a904      	add	r1, sp, #16
 800b5fa:	f000 f87d 	bl	800b6f8 <_printf_i>
 800b5fe:	e7eb      	b.n	800b5d8 <_svfiprintf_r+0x1c0>
 800b600:	0800bd6b 	.word	0x0800bd6b
 800b604:	0800bd71 	.word	0x0800bd71
 800b608:	0800bd75 	.word	0x0800bd75
 800b60c:	00000000 	.word	0x00000000
 800b610:	0800b365 	.word	0x0800b365

0800b614 <_printf_common>:
 800b614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b618:	4616      	mov	r6, r2
 800b61a:	4699      	mov	r9, r3
 800b61c:	688a      	ldr	r2, [r1, #8]
 800b61e:	690b      	ldr	r3, [r1, #16]
 800b620:	4607      	mov	r7, r0
 800b622:	4293      	cmp	r3, r2
 800b624:	bfb8      	it	lt
 800b626:	4613      	movlt	r3, r2
 800b628:	6033      	str	r3, [r6, #0]
 800b62a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b62e:	460c      	mov	r4, r1
 800b630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b634:	b10a      	cbz	r2, 800b63a <_printf_common+0x26>
 800b636:	3301      	adds	r3, #1
 800b638:	6033      	str	r3, [r6, #0]
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	0699      	lsls	r1, r3, #26
 800b63e:	bf42      	ittt	mi
 800b640:	6833      	ldrmi	r3, [r6, #0]
 800b642:	3302      	addmi	r3, #2
 800b644:	6033      	strmi	r3, [r6, #0]
 800b646:	6825      	ldr	r5, [r4, #0]
 800b648:	f015 0506 	ands.w	r5, r5, #6
 800b64c:	d106      	bne.n	800b65c <_printf_common+0x48>
 800b64e:	f104 0a19 	add.w	sl, r4, #25
 800b652:	68e3      	ldr	r3, [r4, #12]
 800b654:	6832      	ldr	r2, [r6, #0]
 800b656:	1a9b      	subs	r3, r3, r2
 800b658:	42ab      	cmp	r3, r5
 800b65a:	dc2b      	bgt.n	800b6b4 <_printf_common+0xa0>
 800b65c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b660:	1e13      	subs	r3, r2, #0
 800b662:	6822      	ldr	r2, [r4, #0]
 800b664:	bf18      	it	ne
 800b666:	2301      	movne	r3, #1
 800b668:	0692      	lsls	r2, r2, #26
 800b66a:	d430      	bmi.n	800b6ce <_printf_common+0xba>
 800b66c:	4649      	mov	r1, r9
 800b66e:	4638      	mov	r0, r7
 800b670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b674:	47c0      	blx	r8
 800b676:	3001      	adds	r0, #1
 800b678:	d023      	beq.n	800b6c2 <_printf_common+0xae>
 800b67a:	6823      	ldr	r3, [r4, #0]
 800b67c:	6922      	ldr	r2, [r4, #16]
 800b67e:	f003 0306 	and.w	r3, r3, #6
 800b682:	2b04      	cmp	r3, #4
 800b684:	bf14      	ite	ne
 800b686:	2500      	movne	r5, #0
 800b688:	6833      	ldreq	r3, [r6, #0]
 800b68a:	f04f 0600 	mov.w	r6, #0
 800b68e:	bf08      	it	eq
 800b690:	68e5      	ldreq	r5, [r4, #12]
 800b692:	f104 041a 	add.w	r4, r4, #26
 800b696:	bf08      	it	eq
 800b698:	1aed      	subeq	r5, r5, r3
 800b69a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b69e:	bf08      	it	eq
 800b6a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	bfc4      	itt	gt
 800b6a8:	1a9b      	subgt	r3, r3, r2
 800b6aa:	18ed      	addgt	r5, r5, r3
 800b6ac:	42b5      	cmp	r5, r6
 800b6ae:	d11a      	bne.n	800b6e6 <_printf_common+0xd2>
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	e008      	b.n	800b6c6 <_printf_common+0xb2>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	4652      	mov	r2, sl
 800b6b8:	4649      	mov	r1, r9
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	47c0      	blx	r8
 800b6be:	3001      	adds	r0, #1
 800b6c0:	d103      	bne.n	800b6ca <_printf_common+0xb6>
 800b6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ca:	3501      	adds	r5, #1
 800b6cc:	e7c1      	b.n	800b652 <_printf_common+0x3e>
 800b6ce:	2030      	movs	r0, #48	; 0x30
 800b6d0:	18e1      	adds	r1, r4, r3
 800b6d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6d6:	1c5a      	adds	r2, r3, #1
 800b6d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6dc:	4422      	add	r2, r4
 800b6de:	3302      	adds	r3, #2
 800b6e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6e4:	e7c2      	b.n	800b66c <_printf_common+0x58>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	47c0      	blx	r8
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	d0e6      	beq.n	800b6c2 <_printf_common+0xae>
 800b6f4:	3601      	adds	r6, #1
 800b6f6:	e7d9      	b.n	800b6ac <_printf_common+0x98>

0800b6f8 <_printf_i>:
 800b6f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6fc:	7e0f      	ldrb	r7, [r1, #24]
 800b6fe:	4691      	mov	r9, r2
 800b700:	2f78      	cmp	r7, #120	; 0x78
 800b702:	4680      	mov	r8, r0
 800b704:	460c      	mov	r4, r1
 800b706:	469a      	mov	sl, r3
 800b708:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b70a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b70e:	d807      	bhi.n	800b720 <_printf_i+0x28>
 800b710:	2f62      	cmp	r7, #98	; 0x62
 800b712:	d80a      	bhi.n	800b72a <_printf_i+0x32>
 800b714:	2f00      	cmp	r7, #0
 800b716:	f000 80d5 	beq.w	800b8c4 <_printf_i+0x1cc>
 800b71a:	2f58      	cmp	r7, #88	; 0x58
 800b71c:	f000 80c1 	beq.w	800b8a2 <_printf_i+0x1aa>
 800b720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b728:	e03a      	b.n	800b7a0 <_printf_i+0xa8>
 800b72a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b72e:	2b15      	cmp	r3, #21
 800b730:	d8f6      	bhi.n	800b720 <_printf_i+0x28>
 800b732:	a101      	add	r1, pc, #4	; (adr r1, 800b738 <_printf_i+0x40>)
 800b734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b738:	0800b791 	.word	0x0800b791
 800b73c:	0800b7a5 	.word	0x0800b7a5
 800b740:	0800b721 	.word	0x0800b721
 800b744:	0800b721 	.word	0x0800b721
 800b748:	0800b721 	.word	0x0800b721
 800b74c:	0800b721 	.word	0x0800b721
 800b750:	0800b7a5 	.word	0x0800b7a5
 800b754:	0800b721 	.word	0x0800b721
 800b758:	0800b721 	.word	0x0800b721
 800b75c:	0800b721 	.word	0x0800b721
 800b760:	0800b721 	.word	0x0800b721
 800b764:	0800b8ab 	.word	0x0800b8ab
 800b768:	0800b7d1 	.word	0x0800b7d1
 800b76c:	0800b865 	.word	0x0800b865
 800b770:	0800b721 	.word	0x0800b721
 800b774:	0800b721 	.word	0x0800b721
 800b778:	0800b8cd 	.word	0x0800b8cd
 800b77c:	0800b721 	.word	0x0800b721
 800b780:	0800b7d1 	.word	0x0800b7d1
 800b784:	0800b721 	.word	0x0800b721
 800b788:	0800b721 	.word	0x0800b721
 800b78c:	0800b86d 	.word	0x0800b86d
 800b790:	682b      	ldr	r3, [r5, #0]
 800b792:	1d1a      	adds	r2, r3, #4
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	602a      	str	r2, [r5, #0]
 800b798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b79c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e0a0      	b.n	800b8e6 <_printf_i+0x1ee>
 800b7a4:	6820      	ldr	r0, [r4, #0]
 800b7a6:	682b      	ldr	r3, [r5, #0]
 800b7a8:	0607      	lsls	r7, r0, #24
 800b7aa:	f103 0104 	add.w	r1, r3, #4
 800b7ae:	6029      	str	r1, [r5, #0]
 800b7b0:	d501      	bpl.n	800b7b6 <_printf_i+0xbe>
 800b7b2:	681e      	ldr	r6, [r3, #0]
 800b7b4:	e003      	b.n	800b7be <_printf_i+0xc6>
 800b7b6:	0646      	lsls	r6, r0, #25
 800b7b8:	d5fb      	bpl.n	800b7b2 <_printf_i+0xba>
 800b7ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b7be:	2e00      	cmp	r6, #0
 800b7c0:	da03      	bge.n	800b7ca <_printf_i+0xd2>
 800b7c2:	232d      	movs	r3, #45	; 0x2d
 800b7c4:	4276      	negs	r6, r6
 800b7c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7ca:	230a      	movs	r3, #10
 800b7cc:	4859      	ldr	r0, [pc, #356]	; (800b934 <_printf_i+0x23c>)
 800b7ce:	e012      	b.n	800b7f6 <_printf_i+0xfe>
 800b7d0:	682b      	ldr	r3, [r5, #0]
 800b7d2:	6820      	ldr	r0, [r4, #0]
 800b7d4:	1d19      	adds	r1, r3, #4
 800b7d6:	6029      	str	r1, [r5, #0]
 800b7d8:	0605      	lsls	r5, r0, #24
 800b7da:	d501      	bpl.n	800b7e0 <_printf_i+0xe8>
 800b7dc:	681e      	ldr	r6, [r3, #0]
 800b7de:	e002      	b.n	800b7e6 <_printf_i+0xee>
 800b7e0:	0641      	lsls	r1, r0, #25
 800b7e2:	d5fb      	bpl.n	800b7dc <_printf_i+0xe4>
 800b7e4:	881e      	ldrh	r6, [r3, #0]
 800b7e6:	2f6f      	cmp	r7, #111	; 0x6f
 800b7e8:	bf0c      	ite	eq
 800b7ea:	2308      	moveq	r3, #8
 800b7ec:	230a      	movne	r3, #10
 800b7ee:	4851      	ldr	r0, [pc, #324]	; (800b934 <_printf_i+0x23c>)
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7f6:	6865      	ldr	r5, [r4, #4]
 800b7f8:	2d00      	cmp	r5, #0
 800b7fa:	bfa8      	it	ge
 800b7fc:	6821      	ldrge	r1, [r4, #0]
 800b7fe:	60a5      	str	r5, [r4, #8]
 800b800:	bfa4      	itt	ge
 800b802:	f021 0104 	bicge.w	r1, r1, #4
 800b806:	6021      	strge	r1, [r4, #0]
 800b808:	b90e      	cbnz	r6, 800b80e <_printf_i+0x116>
 800b80a:	2d00      	cmp	r5, #0
 800b80c:	d04b      	beq.n	800b8a6 <_printf_i+0x1ae>
 800b80e:	4615      	mov	r5, r2
 800b810:	fbb6 f1f3 	udiv	r1, r6, r3
 800b814:	fb03 6711 	mls	r7, r3, r1, r6
 800b818:	5dc7      	ldrb	r7, [r0, r7]
 800b81a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b81e:	4637      	mov	r7, r6
 800b820:	42bb      	cmp	r3, r7
 800b822:	460e      	mov	r6, r1
 800b824:	d9f4      	bls.n	800b810 <_printf_i+0x118>
 800b826:	2b08      	cmp	r3, #8
 800b828:	d10b      	bne.n	800b842 <_printf_i+0x14a>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	07de      	lsls	r6, r3, #31
 800b82e:	d508      	bpl.n	800b842 <_printf_i+0x14a>
 800b830:	6923      	ldr	r3, [r4, #16]
 800b832:	6861      	ldr	r1, [r4, #4]
 800b834:	4299      	cmp	r1, r3
 800b836:	bfde      	ittt	le
 800b838:	2330      	movle	r3, #48	; 0x30
 800b83a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b83e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b842:	1b52      	subs	r2, r2, r5
 800b844:	6122      	str	r2, [r4, #16]
 800b846:	464b      	mov	r3, r9
 800b848:	4621      	mov	r1, r4
 800b84a:	4640      	mov	r0, r8
 800b84c:	f8cd a000 	str.w	sl, [sp]
 800b850:	aa03      	add	r2, sp, #12
 800b852:	f7ff fedf 	bl	800b614 <_printf_common>
 800b856:	3001      	adds	r0, #1
 800b858:	d14a      	bne.n	800b8f0 <_printf_i+0x1f8>
 800b85a:	f04f 30ff 	mov.w	r0, #4294967295
 800b85e:	b004      	add	sp, #16
 800b860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	f043 0320 	orr.w	r3, r3, #32
 800b86a:	6023      	str	r3, [r4, #0]
 800b86c:	2778      	movs	r7, #120	; 0x78
 800b86e:	4832      	ldr	r0, [pc, #200]	; (800b938 <_printf_i+0x240>)
 800b870:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b874:	6823      	ldr	r3, [r4, #0]
 800b876:	6829      	ldr	r1, [r5, #0]
 800b878:	061f      	lsls	r7, r3, #24
 800b87a:	f851 6b04 	ldr.w	r6, [r1], #4
 800b87e:	d402      	bmi.n	800b886 <_printf_i+0x18e>
 800b880:	065f      	lsls	r7, r3, #25
 800b882:	bf48      	it	mi
 800b884:	b2b6      	uxthmi	r6, r6
 800b886:	07df      	lsls	r7, r3, #31
 800b888:	bf48      	it	mi
 800b88a:	f043 0320 	orrmi.w	r3, r3, #32
 800b88e:	6029      	str	r1, [r5, #0]
 800b890:	bf48      	it	mi
 800b892:	6023      	strmi	r3, [r4, #0]
 800b894:	b91e      	cbnz	r6, 800b89e <_printf_i+0x1a6>
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	f023 0320 	bic.w	r3, r3, #32
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	2310      	movs	r3, #16
 800b8a0:	e7a6      	b.n	800b7f0 <_printf_i+0xf8>
 800b8a2:	4824      	ldr	r0, [pc, #144]	; (800b934 <_printf_i+0x23c>)
 800b8a4:	e7e4      	b.n	800b870 <_printf_i+0x178>
 800b8a6:	4615      	mov	r5, r2
 800b8a8:	e7bd      	b.n	800b826 <_printf_i+0x12e>
 800b8aa:	682b      	ldr	r3, [r5, #0]
 800b8ac:	6826      	ldr	r6, [r4, #0]
 800b8ae:	1d18      	adds	r0, r3, #4
 800b8b0:	6961      	ldr	r1, [r4, #20]
 800b8b2:	6028      	str	r0, [r5, #0]
 800b8b4:	0635      	lsls	r5, r6, #24
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	d501      	bpl.n	800b8be <_printf_i+0x1c6>
 800b8ba:	6019      	str	r1, [r3, #0]
 800b8bc:	e002      	b.n	800b8c4 <_printf_i+0x1cc>
 800b8be:	0670      	lsls	r0, r6, #25
 800b8c0:	d5fb      	bpl.n	800b8ba <_printf_i+0x1c2>
 800b8c2:	8019      	strh	r1, [r3, #0]
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	4615      	mov	r5, r2
 800b8c8:	6123      	str	r3, [r4, #16]
 800b8ca:	e7bc      	b.n	800b846 <_printf_i+0x14e>
 800b8cc:	682b      	ldr	r3, [r5, #0]
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	1d1a      	adds	r2, r3, #4
 800b8d2:	602a      	str	r2, [r5, #0]
 800b8d4:	681d      	ldr	r5, [r3, #0]
 800b8d6:	6862      	ldr	r2, [r4, #4]
 800b8d8:	4628      	mov	r0, r5
 800b8da:	f000 f859 	bl	800b990 <memchr>
 800b8de:	b108      	cbz	r0, 800b8e4 <_printf_i+0x1ec>
 800b8e0:	1b40      	subs	r0, r0, r5
 800b8e2:	6060      	str	r0, [r4, #4]
 800b8e4:	6863      	ldr	r3, [r4, #4]
 800b8e6:	6123      	str	r3, [r4, #16]
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8ee:	e7aa      	b.n	800b846 <_printf_i+0x14e>
 800b8f0:	462a      	mov	r2, r5
 800b8f2:	4649      	mov	r1, r9
 800b8f4:	4640      	mov	r0, r8
 800b8f6:	6923      	ldr	r3, [r4, #16]
 800b8f8:	47d0      	blx	sl
 800b8fa:	3001      	adds	r0, #1
 800b8fc:	d0ad      	beq.n	800b85a <_printf_i+0x162>
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	079b      	lsls	r3, r3, #30
 800b902:	d413      	bmi.n	800b92c <_printf_i+0x234>
 800b904:	68e0      	ldr	r0, [r4, #12]
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	4298      	cmp	r0, r3
 800b90a:	bfb8      	it	lt
 800b90c:	4618      	movlt	r0, r3
 800b90e:	e7a6      	b.n	800b85e <_printf_i+0x166>
 800b910:	2301      	movs	r3, #1
 800b912:	4632      	mov	r2, r6
 800b914:	4649      	mov	r1, r9
 800b916:	4640      	mov	r0, r8
 800b918:	47d0      	blx	sl
 800b91a:	3001      	adds	r0, #1
 800b91c:	d09d      	beq.n	800b85a <_printf_i+0x162>
 800b91e:	3501      	adds	r5, #1
 800b920:	68e3      	ldr	r3, [r4, #12]
 800b922:	9903      	ldr	r1, [sp, #12]
 800b924:	1a5b      	subs	r3, r3, r1
 800b926:	42ab      	cmp	r3, r5
 800b928:	dcf2      	bgt.n	800b910 <_printf_i+0x218>
 800b92a:	e7eb      	b.n	800b904 <_printf_i+0x20c>
 800b92c:	2500      	movs	r5, #0
 800b92e:	f104 0619 	add.w	r6, r4, #25
 800b932:	e7f5      	b.n	800b920 <_printf_i+0x228>
 800b934:	0800bd7c 	.word	0x0800bd7c
 800b938:	0800bd8d 	.word	0x0800bd8d

0800b93c <memmove>:
 800b93c:	4288      	cmp	r0, r1
 800b93e:	b510      	push	{r4, lr}
 800b940:	eb01 0402 	add.w	r4, r1, r2
 800b944:	d902      	bls.n	800b94c <memmove+0x10>
 800b946:	4284      	cmp	r4, r0
 800b948:	4623      	mov	r3, r4
 800b94a:	d807      	bhi.n	800b95c <memmove+0x20>
 800b94c:	1e43      	subs	r3, r0, #1
 800b94e:	42a1      	cmp	r1, r4
 800b950:	d008      	beq.n	800b964 <memmove+0x28>
 800b952:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b95a:	e7f8      	b.n	800b94e <memmove+0x12>
 800b95c:	4601      	mov	r1, r0
 800b95e:	4402      	add	r2, r0
 800b960:	428a      	cmp	r2, r1
 800b962:	d100      	bne.n	800b966 <memmove+0x2a>
 800b964:	bd10      	pop	{r4, pc}
 800b966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b96a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b96e:	e7f7      	b.n	800b960 <memmove+0x24>

0800b970 <_sbrk_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	2300      	movs	r3, #0
 800b974:	4d05      	ldr	r5, [pc, #20]	; (800b98c <_sbrk_r+0x1c>)
 800b976:	4604      	mov	r4, r0
 800b978:	4608      	mov	r0, r1
 800b97a:	602b      	str	r3, [r5, #0]
 800b97c:	f7f6 f94e 	bl	8001c1c <_sbrk>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	d102      	bne.n	800b98a <_sbrk_r+0x1a>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	b103      	cbz	r3, 800b98a <_sbrk_r+0x1a>
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	20001750 	.word	0x20001750

0800b990 <memchr>:
 800b990:	4603      	mov	r3, r0
 800b992:	b510      	push	{r4, lr}
 800b994:	b2c9      	uxtb	r1, r1
 800b996:	4402      	add	r2, r0
 800b998:	4293      	cmp	r3, r2
 800b99a:	4618      	mov	r0, r3
 800b99c:	d101      	bne.n	800b9a2 <memchr+0x12>
 800b99e:	2000      	movs	r0, #0
 800b9a0:	e003      	b.n	800b9aa <memchr+0x1a>
 800b9a2:	7804      	ldrb	r4, [r0, #0]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	428c      	cmp	r4, r1
 800b9a8:	d1f6      	bne.n	800b998 <memchr+0x8>
 800b9aa:	bd10      	pop	{r4, pc}

0800b9ac <_realloc_r>:
 800b9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	4614      	mov	r4, r2
 800b9b4:	460e      	mov	r6, r1
 800b9b6:	b921      	cbnz	r1, 800b9c2 <_realloc_r+0x16>
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9be:	f7ff bc45 	b.w	800b24c <_malloc_r>
 800b9c2:	b92a      	cbnz	r2, 800b9d0 <_realloc_r+0x24>
 800b9c4:	f7ff fbda 	bl	800b17c <_free_r>
 800b9c8:	4625      	mov	r5, r4
 800b9ca:	4628      	mov	r0, r5
 800b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d0:	f000 f81b 	bl	800ba0a <_malloc_usable_size_r>
 800b9d4:	4284      	cmp	r4, r0
 800b9d6:	4607      	mov	r7, r0
 800b9d8:	d802      	bhi.n	800b9e0 <_realloc_r+0x34>
 800b9da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9de:	d812      	bhi.n	800ba06 <_realloc_r+0x5a>
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	f7ff fc32 	bl	800b24c <_malloc_r>
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	d0ed      	beq.n	800b9ca <_realloc_r+0x1e>
 800b9ee:	42bc      	cmp	r4, r7
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	bf28      	it	cs
 800b9f6:	463a      	movcs	r2, r7
 800b9f8:	f7ff fbb2 	bl	800b160 <memcpy>
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	4640      	mov	r0, r8
 800ba00:	f7ff fbbc 	bl	800b17c <_free_r>
 800ba04:	e7e1      	b.n	800b9ca <_realloc_r+0x1e>
 800ba06:	4635      	mov	r5, r6
 800ba08:	e7df      	b.n	800b9ca <_realloc_r+0x1e>

0800ba0a <_malloc_usable_size_r>:
 800ba0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba0e:	1f18      	subs	r0, r3, #4
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	bfbc      	itt	lt
 800ba14:	580b      	ldrlt	r3, [r1, r0]
 800ba16:	18c0      	addlt	r0, r0, r3
 800ba18:	4770      	bx	lr
	...

0800ba1c <_init>:
 800ba1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1e:	bf00      	nop
 800ba20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba22:	bc08      	pop	{r3}
 800ba24:	469e      	mov	lr, r3
 800ba26:	4770      	bx	lr

0800ba28 <_fini>:
 800ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2a:	bf00      	nop
 800ba2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba2e:	bc08      	pop	{r3}
 800ba30:	469e      	mov	lr, r3
 800ba32:	4770      	bx	lr
