
Carga_DC_desarrollo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004330  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800443c  0800443c  0001443c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a8  080045a8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080045a8  080045a8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045a8  080045a8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045ac  080045ac  000145ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080045b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  2000007c  0800462c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  0800462c  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000104d6  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000261d  00000000  00000000  000305be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00032be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c97  00000000  00000000  00033c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019046  00000000  00000000  000348a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013406  00000000  00000000  0004d8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092b2d  00000000  00000000  00060cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049c4  00000000  00000000  000f3820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000f81e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004424 	.word	0x08004424

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08004424 	.word	0x08004424

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_I2C_cmd>:
#define SLAVE_ADDRESS_LCD  0x4e	//0x4E // change this according to ur setup 0x7e

/* Envia comando por LCD ---------------------------------------*/

void LCD_I2C_cmd(char cmd)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f023 030f 	bic.w	r3, r3, #15
 800016c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	011b      	lsls	r3, r3, #4
 8000172:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	f043 030c 	orr.w	r3, r3, #12
 800017a:	b2db      	uxtb	r3, r3
 800017c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800017e:	7bfb      	ldrb	r3, [r7, #15]
 8000180:	f043 0308 	orr.w	r3, r3, #8
 8000184:	b2db      	uxtb	r3, r3
 8000186:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000188:	7bbb      	ldrb	r3, [r7, #14]
 800018a:	f043 030c 	orr.w	r3, r3, #12
 800018e:	b2db      	uxtb	r3, r3
 8000190:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000192:	7bbb      	ldrb	r3, [r7, #14]
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	b2db      	uxtb	r3, r3
 800019a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800019c:	f107 0208 	add.w	r2, r7, #8
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	9300      	str	r3, [sp, #0]
 80001a4:	2304      	movs	r3, #4
 80001a6:	214e      	movs	r1, #78	; 0x4e
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <LCD_I2C_cmd+0x60>)
 80001aa:	f001 ff0d 	bl	8001fc8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80001ae:	2001      	movs	r0, #1
 80001b0:	f001 f89e 	bl	80012f0 <HAL_Delay>
}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	200000c8 	.word	0x200000c8

080001c0 <LCD_I2C_char>:

/* Envia dato por LCD ------------------------------------------*/

void LCD_I2C_char(char data)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	f023 030f 	bic.w	r3, r3, #15
 80001d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	011b      	lsls	r3, r3, #4
 80001d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80001ec:	7bbb      	ldrb	r3, [r7, #14]
 80001ee:	f043 030d 	orr.w	r3, r3, #13
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80001f6:	7bbb      	ldrb	r3, [r7, #14]
 80001f8:	f043 0309 	orr.w	r3, r3, #9
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000200:	f107 0208 	add.w	r2, r7, #8
 8000204:	2364      	movs	r3, #100	; 0x64
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2304      	movs	r3, #4
 800020a:	214e      	movs	r1, #78	; 0x4e
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <LCD_I2C_char+0x60>)
 800020e:	f001 fedb 	bl	8001fc8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000212:	2001      	movs	r0, #1
 8000214:	f001 f86c 	bl	80012f0 <HAL_Delay>
}
 8000218:	bf00      	nop
 800021a:	3710      	adds	r7, #16
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	200000c8 	.word	0x200000c8

08000224 <LCD_I2C_init>:

/* Inicializa LCD -----------------------------------------------*/

void LCD_I2C_init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	LCD_I2C_cmd(0x02);
 8000228:	2002      	movs	r0, #2
 800022a:	f7ff ff97 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x28);
 800022e:	2028      	movs	r0, #40	; 0x28
 8000230:	f7ff ff94 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x0c);
 8000234:	200c      	movs	r0, #12
 8000236:	f7ff ff91 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x80);
 800023a:	2080      	movs	r0, #128	; 0x80
 800023c:	f7ff ff8e 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_CLEAR);
 8000240:	2001      	movs	r0, #1
 8000242:	f7ff ff8b 	bl	800015c <LCD_I2C_cmd>
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}

0800024a <LCD_I2C_write_text>:

/* Envia cadena de caracteres al LCD -----------------------------*/

void LCD_I2C_write_text(char *str)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
	while (*str) LCD_I2C_char(*str++);
 8000252:	e006      	b.n	8000262 <LCD_I2C_write_text+0x18>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	1c5a      	adds	r2, r3, #1
 8000258:	607a      	str	r2, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ffaf 	bl	80001c0 <LCD_I2C_char>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d1f4      	bne.n	8000254 <LCD_I2C_write_text+0xa>
}
 800026a:	bf00      	nop
 800026c:	bf00      	nop
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <keypad_init>:
GPIO_TypeDef* COL_3_Port = GPIOB;
GPIO_TypeDef* COL_4_Port = GPIOB;


void keypad_init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
  // Configure GPIO pins for keypad matrix
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027a:	463b      	mov	r3, r7
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = ROW_1_Pin | ROW_2_Pin | ROW_3_Pin | ROW_4_Pin;
 8000286:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800028a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800028c:	2300      	movs	r3, #0
 800028e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000290:	2301      	movs	r3, #1
 8000292:	60bb      	str	r3, [r7, #8]
  	  HAL_GPIO_Init(ROW_1_Port, &GPIO_InitStruct);
 8000294:	4b21      	ldr	r3, [pc, #132]	; (800031c <keypad_init+0xa8>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	463a      	mov	r2, r7
 800029a:	4611      	mov	r1, r2
 800029c:	4618      	mov	r0, r3
 800029e:	f001 fb6b 	bl	8001978 <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_2_Port, &GPIO_InitStruct);
 80002a2:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <keypad_init+0xac>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	463a      	mov	r2, r7
 80002a8:	4611      	mov	r1, r2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fb64 	bl	8001978 <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_3_Port, &GPIO_InitStruct);
 80002b0:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <keypad_init+0xb0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	463a      	mov	r2, r7
 80002b6:	4611      	mov	r1, r2
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 fb5d 	bl	8001978 <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_4_Port, &GPIO_InitStruct);
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <keypad_init+0xb4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	463a      	mov	r2, r7
 80002c4:	4611      	mov	r1, r2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fb56 	bl	8001978 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = COL_1_Pin | COL_2_Pin | COL_3_Pin | COL_4_Pin;
 80002cc:	f640 4303 	movw	r3, #3075	; 0xc03
 80002d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d6:	2302      	movs	r3, #2
 80002d8:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(COL_1_Port, &GPIO_InitStruct);
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <keypad_init+0xb8>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	463a      	mov	r2, r7
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fb48 	bl	8001978 <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_2_Port, &GPIO_InitStruct);
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <keypad_init+0xbc>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	463a      	mov	r2, r7
 80002ee:	4611      	mov	r1, r2
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 fb41 	bl	8001978 <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_3_Port, &GPIO_InitStruct);
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <keypad_init+0xc0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	463a      	mov	r2, r7
 80002fc:	4611      	mov	r1, r2
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fb3a 	bl	8001978 <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_4_Port, &GPIO_InitStruct);
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <keypad_init+0xc4>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	463a      	mov	r2, r7
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f001 fb33 	bl	8001978 <HAL_GPIO_Init>
}
 8000312:	bf00      	nop
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000000 	.word	0x20000000
 8000320:	20000004 	.word	0x20000004
 8000324:	20000008 	.word	0x20000008
 8000328:	2000000c 	.word	0x2000000c
 800032c:	20000010 	.word	0x20000010
 8000330:	20000014 	.word	0x20000014
 8000334:	20000018 	.word	0x20000018
 8000338:	2000001c 	.word	0x2000001c

0800033c <keypad_scan>:
char keypad_scan(void)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b087      	sub	sp, #28
 8000340:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'C'},
 8000342:	4b6f      	ldr	r3, [pc, #444]	; (8000500 <keypad_scan+0x1c4>)
 8000344:	1d3c      	adds	r4, r7, #4
 8000346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'V'},
                     {'7', '8', '9', 'R'},
                     {'D', '0', 'K', 'P'}};

  for(int i = 0; i < 4; i++)
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e0cc      	b.n	80004ec <keypad_scan+0x1b0>
  {
    // Set current column as output and low
    switch(i)
 8000352:	697b      	ldr	r3, [r7, #20]
 8000354:	2b03      	cmp	r3, #3
 8000356:	f200 8087 	bhi.w	8000468 <keypad_scan+0x12c>
 800035a:	a201      	add	r2, pc, #4	; (adr r2, 8000360 <keypad_scan+0x24>)
 800035c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000360:	08000371 	.word	0x08000371
 8000364:	080003af 	.word	0x080003af
 8000368:	080003ed 	.word	0x080003ed
 800036c:	0800042b 	.word	0x0800042b
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 8000370:	4b64      	ldr	r3, [pc, #400]	; (8000504 <keypad_scan+0x1c8>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2200      	movs	r2, #0
 8000376:	2101      	movs	r1, #1
 8000378:	4618      	mov	r0, r3
 800037a:	f001 fc98 	bl	8001cae <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 800037e:	4b62      	ldr	r3, [pc, #392]	; (8000508 <keypad_scan+0x1cc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2201      	movs	r2, #1
 8000384:	2102      	movs	r1, #2
 8000386:	4618      	mov	r0, r3
 8000388:	f001 fc91 	bl	8001cae <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 800038c:	4b5f      	ldr	r3, [pc, #380]	; (800050c <keypad_scan+0x1d0>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000396:	4618      	mov	r0, r3
 8000398:	f001 fc89 	bl	8001cae <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 800039c:	4b5c      	ldr	r3, [pc, #368]	; (8000510 <keypad_scan+0x1d4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2201      	movs	r2, #1
 80003a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fc81 	bl	8001cae <HAL_GPIO_WritePin>
        break;
 80003ac:	e05c      	b.n	8000468 <keypad_scan+0x12c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003ae:	4b55      	ldr	r3, [pc, #340]	; (8000504 <keypad_scan+0x1c8>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2201      	movs	r2, #1
 80003b4:	2101      	movs	r1, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 fc79 	bl	8001cae <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 80003bc:	4b52      	ldr	r3, [pc, #328]	; (8000508 <keypad_scan+0x1cc>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2200      	movs	r2, #0
 80003c2:	2102      	movs	r1, #2
 80003c4:	4618      	mov	r0, r3
 80003c6:	f001 fc72 	bl	8001cae <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80003ca:	4b50      	ldr	r3, [pc, #320]	; (800050c <keypad_scan+0x1d0>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d4:	4618      	mov	r0, r3
 80003d6:	f001 fc6a 	bl	8001cae <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80003da:	4b4d      	ldr	r3, [pc, #308]	; (8000510 <keypad_scan+0x1d4>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2201      	movs	r2, #1
 80003e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 fc62 	bl	8001cae <HAL_GPIO_WritePin>
        break;
 80003ea:	e03d      	b.n	8000468 <keypad_scan+0x12c>

      case 2:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003ec:	4b45      	ldr	r3, [pc, #276]	; (8000504 <keypad_scan+0x1c8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2201      	movs	r2, #1
 80003f2:	2101      	movs	r1, #1
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 fc5a 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 80003fa:	4b43      	ldr	r3, [pc, #268]	; (8000508 <keypad_scan+0x1cc>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2201      	movs	r2, #1
 8000400:	2102      	movs	r1, #2
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fc53 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 8000408:	4b40      	ldr	r3, [pc, #256]	; (800050c <keypad_scan+0x1d0>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000412:	4618      	mov	r0, r3
 8000414:	f001 fc4b 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8000418:	4b3d      	ldr	r3, [pc, #244]	; (8000510 <keypad_scan+0x1d4>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000422:	4618      	mov	r0, r3
 8000424:	f001 fc43 	bl	8001cae <HAL_GPIO_WritePin>
		break;
 8000428:	e01e      	b.n	8000468 <keypad_scan+0x12c>

	  case 3:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 800042a:	4b36      	ldr	r3, [pc, #216]	; (8000504 <keypad_scan+0x1c8>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	2201      	movs	r2, #1
 8000430:	2101      	movs	r1, #1
 8000432:	4618      	mov	r0, r3
 8000434:	f001 fc3b 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8000438:	4b33      	ldr	r3, [pc, #204]	; (8000508 <keypad_scan+0x1cc>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2201      	movs	r2, #1
 800043e:	2102      	movs	r1, #2
 8000440:	4618      	mov	r0, r3
 8000442:	f001 fc34 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8000446:	4b31      	ldr	r3, [pc, #196]	; (800050c <keypad_scan+0x1d0>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2201      	movs	r2, #1
 800044c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000450:	4618      	mov	r0, r3
 8000452:	f001 fc2c 	bl	8001cae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 8000456:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <keypad_scan+0x1d4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000460:	4618      	mov	r0, r3
 8000462:	f001 fc24 	bl	8001cae <HAL_GPIO_WritePin>
		break;
 8000466:	bf00      	nop
    }
// Read current rows
	if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 8000468:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <keypad_scan+0x1d8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000470:	4618      	mov	r0, r3
 8000472:	f001 fc05 	bl	8001c80 <HAL_GPIO_ReadPin>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d104      	bne.n	8000486 <keypad_scan+0x14a>
	  return keys[0][i];
 800047c:	1d3a      	adds	r2, r7, #4
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	4413      	add	r3, r2
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	e037      	b.n	80004f6 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 8000486:	4b24      	ldr	r3, [pc, #144]	; (8000518 <keypad_scan+0x1dc>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048e:	4618      	mov	r0, r3
 8000490:	f001 fbf6 	bl	8001c80 <HAL_GPIO_ReadPin>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d105      	bne.n	80004a6 <keypad_scan+0x16a>
	  return keys[1][i];
 800049a:	f107 0208 	add.w	r2, r7, #8
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	4413      	add	r3, r2
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	e027      	b.n	80004f6 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 80004a6:	4b1d      	ldr	r3, [pc, #116]	; (800051c <keypad_scan+0x1e0>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fbe6 	bl	8001c80 <HAL_GPIO_ReadPin>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d105      	bne.n	80004c6 <keypad_scan+0x18a>
	  return keys[2][i];
 80004ba:	f107 020c 	add.w	r2, r7, #12
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	4413      	add	r3, r2
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	e017      	b.n	80004f6 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 80004c6:	4b16      	ldr	r3, [pc, #88]	; (8000520 <keypad_scan+0x1e4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 fbd6 	bl	8001c80 <HAL_GPIO_ReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d105      	bne.n	80004e6 <keypad_scan+0x1aa>
	  return keys[3][i];
 80004da:	f107 0210 	add.w	r2, r7, #16
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	4413      	add	r3, r2
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	e007      	b.n	80004f6 <keypad_scan+0x1ba>
  for(int i = 0; i < 4; i++)
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	3301      	adds	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	2b03      	cmp	r3, #3
 80004f0:	f77f af2f 	ble.w	8000352 <keypad_scan+0x16>
  }
return 0; // No key pressed
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	371c      	adds	r7, #28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd90      	pop	{r4, r7, pc}
 80004fe:	bf00      	nop
 8000500:	0800443c 	.word	0x0800443c
 8000504:	20000010 	.word	0x20000010
 8000508:	20000014 	.word	0x20000014
 800050c:	20000018 	.word	0x20000018
 8000510:	2000001c 	.word	0x2000001c
 8000514:	20000000 	.word	0x20000000
 8000518:	20000004 	.word	0x20000004
 800051c:	20000008 	.word	0x20000008
 8000520:	2000000c 	.word	0x2000000c

08000524 <tipo_dato>:


uint8_t tipo_dato(char input){
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
	if(input=='C'||input=='V'||input=='R'||input=='P')
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	2b43      	cmp	r3, #67	; 0x43
 8000532:	d008      	beq.n	8000546 <tipo_dato+0x22>
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b56      	cmp	r3, #86	; 0x56
 8000538:	d005      	beq.n	8000546 <tipo_dato+0x22>
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b52      	cmp	r3, #82	; 0x52
 800053e:	d002      	beq.n	8000546 <tipo_dato+0x22>
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b50      	cmp	r3, #80	; 0x50
 8000544:	d101      	bne.n	800054a <tipo_dato+0x26>
		return 2;
 8000546:	2302      	movs	r3, #2
 8000548:	e012      	b.n	8000570 <tipo_dato+0x4c>
	if(input=='K')
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b4b      	cmp	r3, #75	; 0x4b
 800054e:	d101      	bne.n	8000554 <tipo_dato+0x30>
		return 3;
 8000550:	2303      	movs	r3, #3
 8000552:	e00d      	b.n	8000570 <tipo_dato+0x4c>
	if(input=='D')
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b44      	cmp	r3, #68	; 0x44
 8000558:	d101      	bne.n	800055e <tipo_dato+0x3a>
		return 4;
 800055a:	2304      	movs	r3, #4
 800055c:	e008      	b.n	8000570 <tipo_dato+0x4c>
	if(input>='0'&&input<='9')
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b2f      	cmp	r3, #47	; 0x2f
 8000562:	d904      	bls.n	800056e <tipo_dato+0x4a>
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b39      	cmp	r3, #57	; 0x39
 8000568:	d801      	bhi.n	800056e <tipo_dato+0x4a>
		return 1;
 800056a:	2301      	movs	r3, #1
 800056c:	e000      	b.n	8000570 <tipo_dato+0x4c>
	else
		return 0;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
	...

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fe53 	bl	800122c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f8d1 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 fa09 	bl	80009a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800058e:	f000 f92b 	bl	80007e8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000592:	f000 f967 	bl	8000864 <MX_I2C1_Init>
  MX_USB_PCD_Init();
 8000596:	f000 f9e1 	bl	800095c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800059a:	f000 f991 	bl	80008c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  keypad_init();
 800059e:	f7ff fe69 	bl	8000274 <keypad_init>
  LCD_I2C_init();
 80005a2:	f7ff fe3f 	bl	8000224 <LCD_I2C_init>

	//esto podria estar encapsulado
  	  LCD_I2C_cmd(LCD_LINEA1);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f7ff fdd8 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   UTN FRP   ");
 80005ac:	4857      	ldr	r0, [pc, #348]	; (800070c <main+0x190>)
 80005ae:	f7ff fe4c 	bl	800024a <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA2);
 80005b2:	20c0      	movs	r0, #192	; 0xc0
 80005b4:	f7ff fdd2 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   Carga DC   ");
 80005b8:	4855      	ldr	r0, [pc, #340]	; (8000710 <main+0x194>)
 80005ba:	f7ff fe46 	bl	800024a <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA4);
 80005be:	20d4      	movs	r0, #212	; 0xd4
 80005c0:	f7ff fdcc 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   A.Gotte/A.Jose   ");
 80005c4:	4853      	ldr	r0, [pc, #332]	; (8000714 <main+0x198>)
 80005c6:	f7ff fe40 	bl	800024a <LCD_I2C_write_text>
	  HAL_Delay(3000);
 80005ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005ce:	f000 fe8f 	bl	80012f0 <HAL_Delay>

LCD_I2C_cmd(LCD_CLEAR);
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff fdc2 	bl	800015c <LCD_I2C_cmd>
  HAL_TIM_Base_Start_IT(&htim2);
 80005d8:	484f      	ldr	r0, [pc, #316]	; (8000718 <main+0x19c>)
 80005da:	f002 fe4f 	bl	800327c <HAL_TIM_Base_Start_IT>
	//se deberia hacer un POST

  char modo_carga = 'C';
 80005de:	2343      	movs	r3, #67	; 0x43
 80005e0:	71fb      	strb	r3, [r7, #7]
  char input_valor[5]="";
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	713b      	strb	r3, [r7, #4]
  //char buffer_val[20]="val:  NNNN [utm]";

  uint8_t cont_digitos_input_val = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	71bb      	strb	r3, [r7, #6]
  uint8_t flag_update_display = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	717b      	strb	r3, [r7, #5]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_update_control){
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <main+0x1a0>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d008      	beq.n	800060c <main+0x90>
		  display_update_stat(modo_carga,input_valor);
 80005fa:	463a      	mov	r2, r7
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4611      	mov	r1, r2
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fb87 	bl	8000d14 <display_update_stat>
		  flag_update_control=0;
 8000606:	4b45      	ldr	r3, [pc, #276]	; (800071c <main+0x1a0>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	  }
	  if(tipo_dato(input_keypad)==2){//tipo_dato()=2 si input es C,V,P,R
 800060c:	4b44      	ldr	r3, [pc, #272]	; (8000720 <main+0x1a4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff87 	bl	8000524 <tipo_dato>
 8000616:	4603      	mov	r3, r0
 8000618:	2b02      	cmp	r3, #2
 800061a:	d15f      	bne.n	80006dc <main+0x160>
		  //ingresa a la configuracion de modo
		  //modo_carga=input_keypad;//guardar el modo que se selecciono
		  flag_config=1;
 800061c:	4b41      	ldr	r3, [pc, #260]	; (8000724 <main+0x1a8>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]

		  while(flag_config){
 8000622:	e057      	b.n	80006d4 <main+0x158>
			  if(tipo_dato(input_keypad)==1 && cont_digitos_input_val<4){//tipo_dato()=1 si input es >=0 y <=9
 8000624:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <main+0x1a4>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff7b 	bl	8000524 <tipo_dato>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d112      	bne.n	800065a <main+0xde>
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d80f      	bhi.n	800065a <main+0xde>
				  //input_valor[cont_digitos_input_val]=input_keypad;
				  agregar_digito(input_valor, input_keypad);
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <main+0x1a4>)
 800063c:	781a      	ldrb	r2, [r3, #0]
 800063e:	463b      	mov	r3, r7
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fa94 	bl	8000b70 <agregar_digito>
				  input_keypad=0;
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <main+0x1a4>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
				  cont_digitos_input_val++;
 800064e:	79bb      	ldrb	r3, [r7, #6]
 8000650:	3301      	adds	r3, #1
 8000652:	71bb      	strb	r3, [r7, #6]
				  flag_update_display=1;
 8000654:	2301      	movs	r3, #1
 8000656:	717b      	strb	r3, [r7, #5]
 8000658:	e031      	b.n	80006be <main+0x142>
			  }
			  else if(input_keypad=='D'&&cont_digitos_input_val>0){
 800065a:	4b31      	ldr	r3, [pc, #196]	; (8000720 <main+0x1a4>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b44      	cmp	r3, #68	; 0x44
 8000660:	d10f      	bne.n	8000682 <main+0x106>
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00c      	beq.n	8000682 <main+0x106>
				  borrar_ultimo_digito(input_valor);
 8000668:	463b      	mov	r3, r7
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fa9c 	bl	8000ba8 <borrar_ultimo_digito>
				  input_keypad=0;
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <main+0x1a4>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
				  cont_digitos_input_val--;
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	3b01      	subs	r3, #1
 800067a:	71bb      	strb	r3, [r7, #6]
				  flag_update_display=1;
 800067c:	2301      	movs	r3, #1
 800067e:	717b      	strb	r3, [r7, #5]
 8000680:	e01d      	b.n	80006be <main+0x142>
			  }
			  else if(input_keypad=='K'){
 8000682:	4b27      	ldr	r3, [pc, #156]	; (8000720 <main+0x1a4>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b4b      	cmp	r3, #75	; 0x4b
 8000688:	d109      	bne.n	800069e <main+0x122>
				  input_keypad=0;
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <main+0x1a4>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
				  flag_config=0;//sale del while y vuelve al super loop
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <main+0x1a8>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
				  flag_update_control=1;
 8000696:	4b21      	ldr	r3, [pc, #132]	; (800071c <main+0x1a0>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
 800069c:	e00f      	b.n	80006be <main+0x142>
				  //validar parametro ingresado
			  }
			  else if(tipo_dato(input_keypad)==2){
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <main+0x1a4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff3e 	bl	8000524 <tipo_dato>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d107      	bne.n	80006be <main+0x142>
				  modo_carga=input_keypad;//guardar el modo que se selecciono
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <main+0x1a4>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
				  input_keypad=0;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <main+0x1a4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
				  //borrar buffer
				  flag_update_display=1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	717b      	strb	r3, [r7, #5]
			  }
		  if(flag_update_display){
 80006be:	797b      	ldrb	r3, [r7, #5]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d007      	beq.n	80006d4 <main+0x158>
			  display_update_conf(modo_carga,input_valor);
 80006c4:	463a      	mov	r2, r7
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	4611      	mov	r1, r2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fa82 	bl	8000bd4 <display_update_conf>
			  flag_update_display=0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	717b      	strb	r3, [r7, #5]
		  while(flag_config){
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <main+0x1a8>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1a3      	bne.n	8000624 <main+0xa8>
		  }
		}//fin while config
	  }//fin if config
	  if(flag_on_off){
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <main+0x1ac>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d086      	beq.n	80005f2 <main+0x76>
		  //switch con los cuatro case y los modos de control
		  while(flag_on_off){
 80006e4:	e00c      	b.n	8000700 <main+0x184>
				  buffer[10]='\0';
				  input_keypad=0;
			  }*/
			  //LCD_I2C_cmd(LCD_LINEA4);
			  //LCD_I2C_write_text("   flag_on_off   ");
			  if(flag_update_control){
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <main+0x1a0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d008      	beq.n	8000700 <main+0x184>
			  display_update_stat(modo_carga,input_valor);
 80006ee:	463a      	mov	r2, r7
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fb0d 	bl	8000d14 <display_update_stat>
			  flag_update_control=0;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <main+0x1a0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
		  while(flag_on_off){
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <main+0x1ac>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1ee      	bne.n	80006e6 <main+0x16a>
	  if(flag_update_control){
 8000708:	e773      	b.n	80005f2 <main+0x76>
 800070a:	bf00      	nop
 800070c:	0800444c 	.word	0x0800444c
 8000710:	0800445c 	.word	0x0800445c
 8000714:	0800446c 	.word	0x0800446c
 8000718:	2000011c 	.word	0x2000011c
 800071c:	20000456 	.word	0x20000456
 8000720:	20000458 	.word	0x20000458
 8000724:	20000455 	.word	0x20000455
 8000728:	20000454 	.word	0x20000454

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000736:	2228      	movs	r2, #40	; 0x28
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f003 f9e0 	bl	8003b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076a:	2301      	movs	r3, #1
 800076c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000778:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800077c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000782:	4618      	mov	r0, r3
 8000784:	f002 f878 	bl	8002878 <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800078e:	f000 fbbd 	bl	8000f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000792:	230f      	movs	r3, #15
 8000794:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	2302      	movs	r3, #2
 8000798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2102      	movs	r1, #2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fae4 	bl	8002d7c <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80007ba:	f000 fba7 	bl	8000f0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80007be:	2312      	movs	r3, #18
 80007c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80007c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80007c8:	2300      	movs	r3, #0
 80007ca:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fc4e 	bl	8003070 <HAL_RCCEx_PeriphCLKConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007da:	f000 fb97 	bl	8000f0c <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_ADC1_Init+0x74>)
 80007fa:	4a19      	ldr	r2, [pc, #100]	; (8000860 <MX_ADC1_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_ADC1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_ADC1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_ADC1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_ADC1_Init+0x74>)
 8000812:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000816:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_ADC1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_ADC1_Init+0x74>)
 8000820:	2201      	movs	r2, #1
 8000822:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_ADC1_Init+0x74>)
 8000826:	f000 fd87 	bl	8001338 <HAL_ADC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000830:	f000 fb6c 	bl	8000f0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000834:	2301      	movs	r3, #1
 8000836:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000838:	2301      	movs	r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_ADC1_Init+0x74>)
 8000846:	f000 fe4f 	bl	80014e8 <HAL_ADC_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000850:	f000 fb5c 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000098 	.word	0x20000098
 8000860:	40012400 	.word	0x40012400

08000864 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2C1_Init+0x50>)
 800086a:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <MX_I2C1_Init+0x54>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000870:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_I2C1_Init+0x58>)
 8000872:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000886:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_I2C1_Init+0x50>)
 80008a2:	f001 fa4d 	bl	8001d40 <HAL_I2C_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008ac:	f000 fb2e 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000c8 	.word	0x200000c8
 80008b8:	40005400 	.word	0x40005400
 80008bc:	000186a0 	.word	0x000186a0

080008c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d4:	463b      	mov	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_TIM2_Init+0x98>)
 80008de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_TIM2_Init+0x98>)
 80008e6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80008ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_TIM2_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_TIM2_Init+0x98>)
 80008f4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80008f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_TIM2_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_TIM2_Init+0x98>)
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000906:	4814      	ldr	r0, [pc, #80]	; (8000958 <MX_TIM2_Init+0x98>)
 8000908:	f002 fc68 	bl	80031dc <HAL_TIM_Base_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000912:	f000 fafb 	bl	8000f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4619      	mov	r1, r3
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_TIM2_Init+0x98>)
 8000924:	f002 fe04 	bl	8003530 <HAL_TIM_ConfigClockSource>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800092e:	f000 faed 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <MX_TIM2_Init+0x98>)
 8000940:	f002 ffda 	bl	80038f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800094a:	f000 fadf 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000011c 	.word	0x2000011c

0800095c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <MX_USB_PCD_Init+0x3c>)
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <MX_USB_PCD_Init+0x40>)
 8000964:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USB_PCD_Init+0x3c>)
 8000968:	2208      	movs	r2, #8
 800096a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_USB_PCD_Init+0x3c>)
 800096e:	2202      	movs	r2, #2
 8000970:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USB_PCD_Init+0x3c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_USB_PCD_Init+0x3c>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USB_PCD_Init+0x3c>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_USB_PCD_Init+0x3c>)
 8000986:	f001 fe77 	bl	8002678 <HAL_PCD_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000990:	f000 fabc 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000164 	.word	0x20000164
 800099c:	40005c00 	.word	0x40005c00

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b4:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a3e      	ldr	r2, [pc, #248]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009ba:	f043 0310 	orr.w	r3, r3, #16
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b3c      	ldr	r3, [pc, #240]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009cc:	4b39      	ldr	r3, [pc, #228]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a38      	ldr	r2, [pc, #224]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009d2:	f043 0320 	orr.w	r3, r3, #32
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0320 	and.w	r3, r3, #32
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a32      	ldr	r2, [pc, #200]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <MX_GPIO_Init+0x114>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a2c      	ldr	r2, [pc, #176]	; (8000ab4 <MX_GPIO_Init+0x114>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <MX_GPIO_Init+0x114>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1a:	4827      	ldr	r0, [pc, #156]	; (8000ab8 <MX_GPIO_Init+0x118>)
 8000a1c:	f001 f947 	bl	8001cae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f640 4103 	movw	r1, #3075	; 0xc03
 8000a26:	4825      	ldr	r0, [pc, #148]	; (8000abc <MX_GPIO_Init+0x11c>)
 8000a28:	f001 f941 	bl	8001cae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4619      	mov	r1, r3
 8000a44:	481c      	ldr	r0, [pc, #112]	; (8000ab8 <MX_GPIO_Init+0x118>)
 8000a46:	f000 ff97 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8000a4a:	f640 4303 	movw	r3, #3075	; 0xc03
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4619      	mov	r1, r3
 8000a62:	4816      	ldr	r0, [pc, #88]	; (8000abc <MX_GPIO_Init+0x11c>)
 8000a64:	f000 ff88 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a68:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480f      	ldr	r0, [pc, #60]	; (8000abc <MX_GPIO_Init+0x11c>)
 8000a7e:	f000 ff7b 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MX_GPIO_Init+0x120>)
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <MX_GPIO_Init+0x124>)
 8000a98:	f000 ff6e 	bl	8001978 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2017      	movs	r0, #23
 8000aa2:	f000 ff32 	bl	800190a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000aa6:	2017      	movs	r0, #23
 8000aa8:	f000 ff4b 	bl	8001942 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40011000 	.word	0x40011000
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	10110000 	.word	0x10110000
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//definiciones de los callback y funciones
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // INT Source is pin A9
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ad8:	d10e      	bne.n	8000af8 <HAL_GPIO_EXTI_Callback+0x30>
    {
    //if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET&&!flag_config){
    if(!flag_on_off && !flag_config){
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d107      	bne.n	8000af2 <HAL_GPIO_EXTI_Callback+0x2a>
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_GPIO_EXTI_Callback+0x40>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d103      	bne.n	8000af2 <HAL_GPIO_EXTI_Callback+0x2a>
    		flag_on_off=1;// conecta la carga
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
    }
    else flag_on_off=0;// desconecta la carga
    }
}
 8000af0:	e002      	b.n	8000af8 <HAL_GPIO_EXTI_Callback+0x30>
    else flag_on_off=0;// desconecta la carga
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000454 	.word	0x20000454
 8000b08:	20000455 	.word	0x20000455

08000b0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM2){
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b1c:	d11b      	bne.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x4a>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b22:	480f      	ldr	r0, [pc, #60]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b24:	f001 f8db 	bl	8001cde <HAL_GPIO_TogglePin>
	 input_keypad=keypad_scan();//condicionar la lectura a que no este en modo activo la carga
 8000b28:	f7ff fc08 	bl	800033c <keypad_scan>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b32:	701a      	strb	r2, [r3, #0]
	 if(cont_timer_update>=5){
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	d906      	bls.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x3e>
		 flag_update_control=1;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
		 cont_timer_update=0;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
	 }
	 else cont_timer_update++;
 }
}
 8000b48:	e005      	b.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x4a>
	 else cont_timer_update++;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b54:	701a      	strb	r2, [r3, #0]
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40011000 	.word	0x40011000
 8000b64:	20000458 	.word	0x20000458
 8000b68:	20000457 	.word	0x20000457
 8000b6c:	20000456 	.word	0x20000456

08000b70 <agregar_digito>:

void agregar_digito(char *buffer, char digito) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]
    size_t longitud = strlen(buffer);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fae5 	bl	800014c <strlen>
 8000b82:	60f8      	str	r0, [r7, #12]

    if (longitud < BUFFER_SIZE_input) {
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d80a      	bhi.n	8000ba0 <agregar_digito+0x30>
        buffer[longitud] = digito;
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	78fa      	ldrb	r2, [r7, #3]
 8000b92:	701a      	strb	r2, [r3, #0]
        buffer[longitud + 1] = '\0';
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3301      	adds	r3, #1
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
    }
}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <borrar_ultimo_digito>:

void borrar_ultimo_digito(char *buffer) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    size_t longitud = strlen(buffer);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff facb 	bl	800014c <strlen>
 8000bb6:	60f8      	str	r0, [r7, #12]

    if (longitud > 0) {
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <borrar_ultimo_digito+0x22>
        buffer[longitud - 1] = '\0';
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
    }
}
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <display_update_conf>:

void display_update_conf(char modo_op, char *dato){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]

	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000be6:	2300      	movs	r3, #0
 8000be8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
	snprintf(buffer_fun, sizeof(buffer_fun), "Modo C%s:", char_as_str);
 8000c10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c14:	f107 0020 	add.w	r0, r7, #32
 8000c18:	4a38      	ldr	r2, [pc, #224]	; (8000cfc <display_update_conf+0x128>)
 8000c1a:	2114      	movs	r1, #20
 8000c1c:	f002 ff3c 	bl	8003a98 <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fa9b 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fa98 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 8000c2c:	f107 0320 	add.w	r3, r7, #32
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fb0a 	bl	800024a <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA3);
 8000c36:	2094      	movs	r0, #148	; 0x94
 8000c38:	f7ff fa90 	bl	800015c <LCD_I2C_cmd>
	switch(modo_op){//print del modo
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	3b43      	subs	r3, #67	; 0x43
 8000c40:	2b13      	cmp	r3, #19
 8000c42:	d84b      	bhi.n	8000cdc <display_update_conf+0x108>
 8000c44:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <display_update_conf+0x78>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000c9d 	.word	0x08000c9d
 8000c50:	08000cdd 	.word	0x08000cdd
 8000c54:	08000cdd 	.word	0x08000cdd
 8000c58:	08000cdd 	.word	0x08000cdd
 8000c5c:	08000cdd 	.word	0x08000cdd
 8000c60:	08000cdd 	.word	0x08000cdd
 8000c64:	08000cdd 	.word	0x08000cdd
 8000c68:	08000cdd 	.word	0x08000cdd
 8000c6c:	08000cdd 	.word	0x08000cdd
 8000c70:	08000cdd 	.word	0x08000cdd
 8000c74:	08000cdd 	.word	0x08000cdd
 8000c78:	08000cdd 	.word	0x08000cdd
 8000c7c:	08000cdd 	.word	0x08000cdd
 8000c80:	08000ccd 	.word	0x08000ccd
 8000c84:	08000cdd 	.word	0x08000cdd
 8000c88:	08000cbd 	.word	0x08000cbd
 8000c8c:	08000cdd 	.word	0x08000cdd
 8000c90:	08000cdd 	.word	0x08000cdd
 8000c94:	08000cdd 	.word	0x08000cdd
 8000c98:	08000cad 	.word	0x08000cad

	case 'C':
		snprintf(buffer_dato, sizeof(buffer_dato), "Current: %s [mA]", dato);
 8000c9c:	f107 000c 	add.w	r0, r7, #12
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <display_update_conf+0x12c>)
 8000ca4:	2114      	movs	r1, #20
 8000ca6:	f002 fef7 	bl	8003a98 <sniprintf>
		break;
 8000caa:	e01e      	b.n	8000cea <display_update_conf+0x116>
	case 'V':
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %s [mV]", dato);
 8000cac:	f107 000c 	add.w	r0, r7, #12
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <display_update_conf+0x130>)
 8000cb4:	2114      	movs	r1, #20
 8000cb6:	f002 feef 	bl	8003a98 <sniprintf>
		break;
 8000cba:	e016      	b.n	8000cea <display_update_conf+0x116>
	case 'R':
		snprintf(buffer_dato, sizeof(buffer_dato), "Resist.: %s [mR]", dato);
 8000cbc:	f107 000c 	add.w	r0, r7, #12
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <display_update_conf+0x134>)
 8000cc4:	2114      	movs	r1, #20
 8000cc6:	f002 fee7 	bl	8003a98 <sniprintf>
		break;
 8000cca:	e00e      	b.n	8000cea <display_update_conf+0x116>
	case 'P':
		snprintf(buffer_dato, sizeof(buffer_dato), "Power.: %s [W]", dato);
 8000ccc:	f107 000c 	add.w	r0, r7, #12
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <display_update_conf+0x138>)
 8000cd4:	2114      	movs	r1, #20
 8000cd6:	f002 fedf 	bl	8003a98 <sniprintf>
		break;
 8000cda:	e006      	b.n	8000cea <display_update_conf+0x116>
	default:
		snprintf(buffer_dato, sizeof(buffer_dato), "Error: case def");
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <display_update_conf+0x13c>)
 8000ce2:	2114      	movs	r1, #20
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fed7 	bl	8003a98 <sniprintf>
	}
	LCD_I2C_write_text(buffer_dato);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff faab 	bl	800024a <LCD_I2C_write_text>

}
 8000cf4:	bf00      	nop
 8000cf6:	3738      	adds	r7, #56	; 0x38
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	08004484 	.word	0x08004484
 8000d00:	08004490 	.word	0x08004490
 8000d04:	080044a4 	.word	0x080044a4
 8000d08:	080044b8 	.word	0x080044b8
 8000d0c:	080044cc 	.word	0x080044cc
 8000d10:	080044dc 	.word	0x080044dc

08000d14 <display_update_stat>:
void display_update_stat(char modo_op, char *dato){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	; 0x38
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
	snprintf(buffer_fun, sizeof(buffer_fun), "Modo C%s:", char_as_str);
 8000d50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d54:	f107 0020 	add.w	r0, r7, #32
 8000d58:	4a63      	ldr	r2, [pc, #396]	; (8000ee8 <display_update_stat+0x1d4>)
 8000d5a:	2114      	movs	r1, #20
 8000d5c:	f002 fe9c 	bl	8003a98 <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff f9fb 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff f9f8 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fa6a 	bl	800024a <LCD_I2C_write_text>

	switch(modo_op){//print del modo
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	3b43      	subs	r3, #67	; 0x43
 8000d7a:	2b13      	cmp	r3, #19
 8000d7c:	f200 80a5 	bhi.w	8000eca <display_update_stat+0x1b6>
 8000d80:	a201      	add	r2, pc, #4	; (adr r2, 8000d88 <display_update_stat+0x74>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000dd9 	.word	0x08000dd9
 8000d8c:	08000ecb 	.word	0x08000ecb
 8000d90:	08000ecb 	.word	0x08000ecb
 8000d94:	08000ecb 	.word	0x08000ecb
 8000d98:	08000ecb 	.word	0x08000ecb
 8000d9c:	08000ecb 	.word	0x08000ecb
 8000da0:	08000ecb 	.word	0x08000ecb
 8000da4:	08000ecb 	.word	0x08000ecb
 8000da8:	08000ecb 	.word	0x08000ecb
 8000dac:	08000ecb 	.word	0x08000ecb
 8000db0:	08000ecb 	.word	0x08000ecb
 8000db4:	08000ecb 	.word	0x08000ecb
 8000db8:	08000ecb 	.word	0x08000ecb
 8000dbc:	08000e93 	.word	0x08000e93
 8000dc0:	08000ecb 	.word	0x08000ecb
 8000dc4:	08000e49 	.word	0x08000e49
 8000dc8:	08000ecb 	.word	0x08000ecb
 8000dcc:	08000ecb 	.word	0x08000ecb
 8000dd0:	08000ecb 	.word	0x08000ecb
 8000dd4:	08000e11 	.word	0x08000e11

	case 'C':
		LCD_I2C_cmd(LCD_LINEA2);
 8000dd8:	20c0      	movs	r0, #192	; 0xc0
 8000dda:	f7ff f9bf 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Voltage: NNN");
 8000dde:	4843      	ldr	r0, [pc, #268]	; (8000eec <display_update_stat+0x1d8>)
 8000de0:	f7ff fa33 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8000de4:	2094      	movs	r0, #148	; 0x94
 8000de6:	f7ff f9b9 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Current: %s [mA]", dato);
 8000dea:	f107 000c 	add.w	r0, r7, #12
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	4a3f      	ldr	r2, [pc, #252]	; (8000ef0 <display_update_stat+0x1dc>)
 8000df2:	2114      	movs	r1, #20
 8000df4:	f002 fe50 	bl	8003a98 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fa24 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8000e02:	20d4      	movs	r0, #212	; 0xd4
 8000e04:	f7ff f9aa 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: NNN");
 8000e08:	483a      	ldr	r0, [pc, #232]	; (8000ef4 <display_update_stat+0x1e0>)
 8000e0a:	f7ff fa1e 	bl	800024a <LCD_I2C_write_text>

		break;
 8000e0e:	e067      	b.n	8000ee0 <display_update_stat+0x1cc>
	case 'V':
		LCD_I2C_cmd(LCD_LINEA2);
 8000e10:	20c0      	movs	r0, #192	; 0xc0
 8000e12:	f7ff f9a3 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %s [mV]", dato);
 8000e16:	f107 000c 	add.w	r0, r7, #12
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	4a36      	ldr	r2, [pc, #216]	; (8000ef8 <display_update_stat+0x1e4>)
 8000e1e:	2114      	movs	r1, #20
 8000e20:	f002 fe3a 	bl	8003a98 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fa0e 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8000e2e:	2094      	movs	r0, #148	; 0x94
 8000e30:	f7ff f994 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: NNN");
 8000e34:	4831      	ldr	r0, [pc, #196]	; (8000efc <display_update_stat+0x1e8>)
 8000e36:	f7ff fa08 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8000e3a:	20d4      	movs	r0, #212	; 0xd4
 8000e3c:	f7ff f98e 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: NNN");
 8000e40:	482c      	ldr	r0, [pc, #176]	; (8000ef4 <display_update_stat+0x1e0>)
 8000e42:	f7ff fa02 	bl	800024a <LCD_I2C_write_text>
		break;
 8000e46:	e04b      	b.n	8000ee0 <display_update_stat+0x1cc>
	case 'R':
		LCD_I2C_cmd(LCD_CLEAR);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff f987 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_cmd(LCD_LINEA1);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff f984 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Res: %s[mohm]", dato);
 8000e54:	f107 000c 	add.w	r0, r7, #12
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	4a29      	ldr	r2, [pc, #164]	; (8000f00 <display_update_stat+0x1ec>)
 8000e5c:	2114      	movs	r1, #20
 8000e5e:	f002 fe1b 	bl	8003a98 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff f9ef 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA2);
 8000e6c:	20c0      	movs	r0, #192	; 0xc0
 8000e6e:	f7ff f975 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: NNN");
 8000e72:	4820      	ldr	r0, [pc, #128]	; (8000ef4 <display_update_stat+0x1e0>)
 8000e74:	f7ff f9e9 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8000e78:	2094      	movs	r0, #148	; 0x94
 8000e7a:	f7ff f96f 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: NNN");
 8000e7e:	481f      	ldr	r0, [pc, #124]	; (8000efc <display_update_stat+0x1e8>)
 8000e80:	f7ff f9e3 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8000e84:	20d4      	movs	r0, #212	; 0xd4
 8000e86:	f7ff f969 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: NNN");
 8000e8a:	481a      	ldr	r0, [pc, #104]	; (8000ef4 <display_update_stat+0x1e0>)
 8000e8c:	f7ff f9dd 	bl	800024a <LCD_I2C_write_text>
		break;
 8000e90:	e026      	b.n	8000ee0 <display_update_stat+0x1cc>
	case 'P':
		LCD_I2C_cmd(LCD_LINEA2);
 8000e92:	20c0      	movs	r0, #192	; 0xc0
 8000e94:	f7ff f962 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Voltage: NNN");
 8000e98:	4814      	ldr	r0, [pc, #80]	; (8000eec <display_update_stat+0x1d8>)
 8000e9a:	f7ff f9d6 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8000e9e:	2094      	movs	r0, #148	; 0x94
 8000ea0:	f7ff f95c 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: NNN");
 8000ea4:	4815      	ldr	r0, [pc, #84]	; (8000efc <display_update_stat+0x1e8>)
 8000ea6:	f7ff f9d0 	bl	800024a <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8000eaa:	20d4      	movs	r0, #212	; 0xd4
 8000eac:	f7ff f956 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Power: %s [mW]", dato);
 8000eb0:	f107 000c 	add.w	r0, r7, #12
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <display_update_stat+0x1f0>)
 8000eb8:	2114      	movs	r1, #20
 8000eba:	f002 fded 	bl	8003a98 <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff f9c1 	bl	800024a <LCD_I2C_write_text>

		break;
 8000ec8:	e00a      	b.n	8000ee0 <display_update_stat+0x1cc>
	default:
		LCD_I2C_cmd(LCD_LINEA1);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff f946 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Error: monit");
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <display_update_stat+0x1f4>)
 8000ed6:	2114      	movs	r1, #20
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fddd 	bl	8003a98 <sniprintf>
	}

}
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	3738      	adds	r7, #56	; 0x38
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	08004484 	.word	0x08004484
 8000eec:	080044ec 	.word	0x080044ec
 8000ef0:	08004490 	.word	0x08004490
 8000ef4:	080044fc 	.word	0x080044fc
 8000ef8:	080044a4 	.word	0x080044a4
 8000efc:	08004508 	.word	0x08004508
 8000f00:	08004518 	.word	0x08004518
 8000f04:	08004528 	.word	0x08004528
 8000f08:	08004538 	.word	0x08004538

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <Error_Handler+0x8>
	...

08000f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6193      	str	r3, [r2, #24]
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x5c>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <HAL_MspInit+0x60>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_MspInit+0x60>)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000

08000f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <HAL_ADC_MspInit+0x6c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d121      	bne.n	8000fe0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <HAL_ADC_MspInit+0x70>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a12      	ldr	r2, [pc, #72]	; (8000fec <HAL_ADC_MspInit+0x70>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_ADC_MspInit+0x70>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_ADC_MspInit+0x70>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <HAL_ADC_MspInit+0x70>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_ADC_MspInit+0x70>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000fcc:	2306      	movs	r3, #6
 8000fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_ADC_MspInit+0x74>)
 8000fdc:	f000 fccc 	bl	8001978 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40012400 	.word	0x40012400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010800 	.word	0x40010800

08000ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a15      	ldr	r2, [pc, #84]	; (8001064 <HAL_I2C_MspInit+0x70>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d123      	bne.n	800105c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_I2C_MspInit+0x74>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a13      	ldr	r2, [pc, #76]	; (8001068 <HAL_I2C_MspInit+0x74>)
 800101a:	f043 0308 	orr.w	r3, r3, #8
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_I2C_MspInit+0x74>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800102c:	23c0      	movs	r3, #192	; 0xc0
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001030:	2312      	movs	r3, #18
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4619      	mov	r1, r3
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <HAL_I2C_MspInit+0x78>)
 8001040:	f000 fc9a 	bl	8001978 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_I2C_MspInit+0x74>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_I2C_MspInit+0x74>)
 800104a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104e:	61d3      	str	r3, [r2, #28]
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_I2C_MspInit+0x74>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40005400 	.word	0x40005400
 8001068:	40021000 	.word	0x40021000
 800106c:	40010c00 	.word	0x40010c00

08001070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001080:	d113      	bne.n	80010aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_TIM_Base_MspInit+0x44>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <HAL_TIM_Base_MspInit+0x44>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	61d3      	str	r3, [r2, #28]
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_TIM_Base_MspInit+0x44>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	201c      	movs	r0, #28
 80010a0:	f000 fc33 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010a4:	201c      	movs	r0, #28
 80010a6:	f000 fc4c 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a09      	ldr	r2, [pc, #36]	; (80010ec <HAL_PCD_MspInit+0x34>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d10b      	bne.n	80010e2 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_PCD_MspInit+0x38>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <HAL_PCD_MspInit+0x38>)
 80010d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010d4:	61d3      	str	r3, [r2, #28]
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_PCD_MspInit+0x38>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	40005c00 	.word	0x40005c00
 80010f0:	40021000 	.word	0x40021000

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <NMI_Handler+0x4>

080010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <MemManage_Handler+0x4>

08001106 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <UsageFault_Handler+0x4>

08001112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113a:	f000 f8bd 	bl	80012b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}

08001142 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001146:	f44f 7000 	mov.w	r0, #512	; 0x200
 800114a:	f000 fde1 	bl	8001d10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <TIM2_IRQHandler+0x10>)
 800115a:	f002 f8e1 	bl	8003320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000011c 	.word	0x2000011c

08001168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <_sbrk+0x5c>)
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <_sbrk+0x60>)
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <_sbrk+0x64>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <_sbrk+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	d207      	bcs.n	80011a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001198:	f002 fcba 	bl	8003b10 <__errno>
 800119c:	4603      	mov	r3, r0
 800119e:	220c      	movs	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e009      	b.n	80011bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <_sbrk+0x64>)
 80011b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20005000 	.word	0x20005000
 80011c8:	00000400 	.word	0x00000400
 80011cc:	2000045c 	.word	0x2000045c
 80011d0:	200005b0 	.word	0x200005b0

080011d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e0:	f7ff fff8 	bl	80011d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e4:	480b      	ldr	r0, [pc, #44]	; (8001214 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011e6:	490c      	ldr	r1, [pc, #48]	; (8001218 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011e8:	4a0c      	ldr	r2, [pc, #48]	; (800121c <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a09      	ldr	r2, [pc, #36]	; (8001220 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011fc:	4c09      	ldr	r4, [pc, #36]	; (8001224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120a:	f002 fc87 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800120e:	f7ff f9b5 	bl	800057c <main>
  bx lr
 8001212:	4770      	bx	lr
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800121c:	080045b0 	.word	0x080045b0
  ldr r2, =_sbss
 8001220:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001224:	200005ac 	.word	0x200005ac

08001228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC1_2_IRQHandler>
	...

0800122c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_Init+0x28>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_Init+0x28>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123c:	2003      	movs	r0, #3
 800123e:	f000 fb59 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001242:	200f      	movs	r0, #15
 8001244:	f000 f808 	bl	8001258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001248:	f7ff fe66 	bl	8000f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40022000 	.word	0x40022000

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_InitTick+0x54>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_InitTick+0x58>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fb71 	bl	800195e <HAL_SYSTICK_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00e      	b.n	80012a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d80a      	bhi.n	80012a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f000 fb39 	bl	800190a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <HAL_InitTick+0x5c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000020 	.word	0x20000020
 80012b0:	20000028 	.word	0x20000028
 80012b4:	20000024 	.word	0x20000024

080012b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_IncTick+0x1c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <HAL_IncTick+0x20>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a03      	ldr	r2, [pc, #12]	; (80012d8 <HAL_IncTick+0x20>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	20000028 	.word	0x20000028
 80012d8:	20000460 	.word	0x20000460

080012dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b02      	ldr	r3, [pc, #8]	; (80012ec <HAL_GetTick+0x10>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000460 	.word	0x20000460

080012f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f8:	f7ff fff0 	bl	80012dc <HAL_GetTick>
 80012fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001308:	d005      	beq.n	8001316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_Delay+0x44>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4413      	add	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001316:	bf00      	nop
 8001318:	f7ff ffe0 	bl	80012dc <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	429a      	cmp	r2, r3
 8001326:	d8f7      	bhi.n	8001318 <HAL_Delay+0x28>
  {
  }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000028 	.word	0x20000028

08001338 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0be      	b.n	80014d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	2b00      	cmp	r3, #0
 8001366:	d109      	bne.n	800137c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fe00 	bl	8000f7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f9ab 	bl	80016d8 <ADC_ConversionStop_Disable>
 8001382:	4603      	mov	r3, r0
 8001384:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 8099 	bne.w	80014c6 <HAL_ADC_Init+0x18e>
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f040 8095 	bne.w	80014c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013a4:	f023 0302 	bic.w	r3, r3, #2
 80013a8:	f043 0202 	orr.w	r2, r3, #2
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7b1b      	ldrb	r3, [r3, #12]
 80013be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013d0:	d003      	beq.n	80013da <HAL_ADC_Init+0xa2>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d102      	bne.n	80013e0 <HAL_ADC_Init+0xa8>
 80013da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013de:	e000      	b.n	80013e2 <HAL_ADC_Init+0xaa>
 80013e0:	2300      	movs	r3, #0
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7d1b      	ldrb	r3, [r3, #20]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d119      	bne.n	8001424 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7b1b      	ldrb	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	035a      	lsls	r2, r3, #13
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	e00b      	b.n	8001424 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	f043 0220 	orr.w	r2, r3, #32
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	430a      	orrs	r2, r1
 8001436:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <HAL_ADC_Init+0x1a8>)
 8001440:	4013      	ands	r3, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	430b      	orrs	r3, r1
 800144a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001454:	d003      	beq.n	800145e <HAL_ADC_Init+0x126>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d104      	bne.n	8001468 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	3b01      	subs	r3, #1
 8001464:	051b      	lsls	r3, r3, #20
 8001466:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	430a      	orrs	r2, r1
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_ADC_Init+0x1ac>)
 8001484:	4013      	ands	r3, r2
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	429a      	cmp	r2, r3
 800148a:	d10b      	bne.n	80014a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	f023 0303 	bic.w	r3, r3, #3
 800149a:	f043 0201 	orr.w	r2, r3, #1
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014a2:	e018      	b.n	80014d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	f023 0312 	bic.w	r3, r3, #18
 80014ac:	f043 0210 	orr.w	r2, r3, #16
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	f043 0201 	orr.w	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014c4:	e007      	b.n	80014d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	f043 0210 	orr.w	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	ffe1f7fd 	.word	0xffe1f7fd
 80014e4:	ff1f0efe 	.word	0xff1f0efe

080014e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_ADC_ConfigChannel+0x20>
 8001504:	2302      	movs	r3, #2
 8001506:	e0dc      	b.n	80016c2 <HAL_ADC_ConfigChannel+0x1da>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b06      	cmp	r3, #6
 8001516:	d81c      	bhi.n	8001552 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	3b05      	subs	r3, #5
 800152a:	221f      	movs	r2, #31
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	4019      	ands	r1, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	3b05      	subs	r3, #5
 8001544:	fa00 f203 	lsl.w	r2, r0, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	635a      	str	r2, [r3, #52]	; 0x34
 8001550:	e03c      	b.n	80015cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d81c      	bhi.n	8001594 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b23      	subs	r3, #35	; 0x23
 800156c:	221f      	movs	r2, #31
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	4019      	ands	r1, r3
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	3b23      	subs	r3, #35	; 0x23
 8001586:	fa00 f203 	lsl.w	r2, r0, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	631a      	str	r2, [r3, #48]	; 0x30
 8001592:	e01b      	b.n	80015cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	3b41      	subs	r3, #65	; 0x41
 80015a6:	221f      	movs	r2, #31
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	4019      	ands	r1, r3
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	3b41      	subs	r3, #65	; 0x41
 80015c0:	fa00 f203 	lsl.w	r2, r0, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	d91c      	bls.n	800160e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68d9      	ldr	r1, [r3, #12]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	3b1e      	subs	r3, #30
 80015e6:	2207      	movs	r2, #7
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4019      	ands	r1, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	6898      	ldr	r0, [r3, #8]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	3b1e      	subs	r3, #30
 8001600:	fa00 f203 	lsl.w	r2, r0, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	e019      	b.n	8001642 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6919      	ldr	r1, [r3, #16]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	2207      	movs	r2, #7
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	4019      	ands	r1, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	6898      	ldr	r0, [r3, #8]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	fa00 f203 	lsl.w	r2, r0, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b10      	cmp	r3, #16
 8001648:	d003      	beq.n	8001652 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800164e:	2b11      	cmp	r3, #17
 8001650:	d132      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <HAL_ADC_ConfigChannel+0x1e4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d125      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d126      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001678:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b10      	cmp	r3, #16
 8001680:	d11a      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	0c9a      	lsrs	r2, r3, #18
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001698:	e002      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	3b01      	subs	r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f9      	bne.n	800169a <HAL_ADC_ConfigChannel+0x1b2>
 80016a6:	e007      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	f043 0220 	orr.w	r2, r3, #32
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	40012400 	.word	0x40012400
 80016d0:	20000020 	.word	0x20000020
 80016d4:	431bde83 	.word	0x431bde83

080016d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d12e      	bne.n	8001750 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0201 	bic.w	r2, r2, #1
 8001700:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001702:	f7ff fdeb 	bl	80012dc <HAL_GetTick>
 8001706:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001708:	e01b      	b.n	8001742 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800170a:	f7ff fde7 	bl	80012dc <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d914      	bls.n	8001742 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d10d      	bne.n	8001742 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	f043 0210 	orr.w	r2, r3, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	f043 0201 	orr.w	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e007      	b.n	8001752 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b01      	cmp	r3, #1
 800174e:	d0dc      	beq.n	800170a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4906      	ldr	r1, [pc, #24]	; (80017f4 <__NVIC_EnableIRQ+0x34>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff90 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff2d 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff42 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff90 	bl	800184c <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5f 	bl	80017f8 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff35 	bl	80017c0 <__NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffa2 	bl	80018b0 <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001978:	b480      	push	{r7}
 800197a:	b08b      	sub	sp, #44	; 0x2c
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	e169      	b.n	8001c60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800198c:	2201      	movs	r2, #1
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f040 8158 	bne.w	8001c5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4a9a      	ldr	r2, [pc, #616]	; (8001c18 <HAL_GPIO_Init+0x2a0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d05e      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019b4:	4a98      	ldr	r2, [pc, #608]	; (8001c18 <HAL_GPIO_Init+0x2a0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d875      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019ba:	4a98      	ldr	r2, [pc, #608]	; (8001c1c <HAL_GPIO_Init+0x2a4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d058      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019c0:	4a96      	ldr	r2, [pc, #600]	; (8001c1c <HAL_GPIO_Init+0x2a4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d86f      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019c6:	4a96      	ldr	r2, [pc, #600]	; (8001c20 <HAL_GPIO_Init+0x2a8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d052      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019cc:	4a94      	ldr	r2, [pc, #592]	; (8001c20 <HAL_GPIO_Init+0x2a8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d869      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019d2:	4a94      	ldr	r2, [pc, #592]	; (8001c24 <HAL_GPIO_Init+0x2ac>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d04c      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019d8:	4a92      	ldr	r2, [pc, #584]	; (8001c24 <HAL_GPIO_Init+0x2ac>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d863      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019de:	4a92      	ldr	r2, [pc, #584]	; (8001c28 <HAL_GPIO_Init+0x2b0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d046      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019e4:	4a90      	ldr	r2, [pc, #576]	; (8001c28 <HAL_GPIO_Init+0x2b0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d85d      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	d82a      	bhi.n	8001a44 <HAL_GPIO_Init+0xcc>
 80019ee:	2b12      	cmp	r3, #18
 80019f0:	d859      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019f2:	a201      	add	r2, pc, #4	; (adr r2, 80019f8 <HAL_GPIO_Init+0x80>)
 80019f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f8:	08001a73 	.word	0x08001a73
 80019fc:	08001a4d 	.word	0x08001a4d
 8001a00:	08001a5f 	.word	0x08001a5f
 8001a04:	08001aa1 	.word	0x08001aa1
 8001a08:	08001aa7 	.word	0x08001aa7
 8001a0c:	08001aa7 	.word	0x08001aa7
 8001a10:	08001aa7 	.word	0x08001aa7
 8001a14:	08001aa7 	.word	0x08001aa7
 8001a18:	08001aa7 	.word	0x08001aa7
 8001a1c:	08001aa7 	.word	0x08001aa7
 8001a20:	08001aa7 	.word	0x08001aa7
 8001a24:	08001aa7 	.word	0x08001aa7
 8001a28:	08001aa7 	.word	0x08001aa7
 8001a2c:	08001aa7 	.word	0x08001aa7
 8001a30:	08001aa7 	.word	0x08001aa7
 8001a34:	08001aa7 	.word	0x08001aa7
 8001a38:	08001aa7 	.word	0x08001aa7
 8001a3c:	08001a55 	.word	0x08001a55
 8001a40:	08001a69 	.word	0x08001a69
 8001a44:	4a79      	ldr	r2, [pc, #484]	; (8001c2c <HAL_GPIO_Init+0x2b4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a4a:	e02c      	b.n	8001aa6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e029      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e024      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	3308      	adds	r3, #8
 8001a64:	623b      	str	r3, [r7, #32]
          break;
 8001a66:	e01f      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	330c      	adds	r3, #12
 8001a6e:	623b      	str	r3, [r7, #32]
          break;
 8001a70:	e01a      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	623b      	str	r3, [r7, #32]
          break;
 8001a7e:	e013      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a88:	2308      	movs	r3, #8
 8001a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	611a      	str	r2, [r3, #16]
          break;
 8001a92:	e009      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a94:	2308      	movs	r3, #8
 8001a96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	615a      	str	r2, [r3, #20]
          break;
 8001a9e:	e003      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e000      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          break;
 8001aa6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2bff      	cmp	r3, #255	; 0xff
 8001aac:	d801      	bhi.n	8001ab2 <HAL_GPIO_Init+0x13a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	e001      	b.n	8001ab6 <HAL_GPIO_Init+0x13e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2bff      	cmp	r3, #255	; 0xff
 8001abc:	d802      	bhi.n	8001ac4 <HAL_GPIO_Init+0x14c>
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	e002      	b.n	8001aca <HAL_GPIO_Init+0x152>
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	3b08      	subs	r3, #8
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	210f      	movs	r1, #15
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	401a      	ands	r2, r3
 8001adc:	6a39      	ldr	r1, [r7, #32]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80b1 	beq.w	8001c5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af8:	4b4d      	ldr	r3, [pc, #308]	; (8001c30 <HAL_GPIO_Init+0x2b8>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a4c      	ldr	r2, [pc, #304]	; (8001c30 <HAL_GPIO_Init+0x2b8>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <HAL_GPIO_Init+0x2b8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b10:	4a48      	ldr	r2, [pc, #288]	; (8001c34 <HAL_GPIO_Init+0x2bc>)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a40      	ldr	r2, [pc, #256]	; (8001c38 <HAL_GPIO_Init+0x2c0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d013      	beq.n	8001b64 <HAL_GPIO_Init+0x1ec>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a3f      	ldr	r2, [pc, #252]	; (8001c3c <HAL_GPIO_Init+0x2c4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00d      	beq.n	8001b60 <HAL_GPIO_Init+0x1e8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a3e      	ldr	r2, [pc, #248]	; (8001c40 <HAL_GPIO_Init+0x2c8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d007      	beq.n	8001b5c <HAL_GPIO_Init+0x1e4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a3d      	ldr	r2, [pc, #244]	; (8001c44 <HAL_GPIO_Init+0x2cc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d101      	bne.n	8001b58 <HAL_GPIO_Init+0x1e0>
 8001b54:	2303      	movs	r3, #3
 8001b56:	e006      	b.n	8001b66 <HAL_GPIO_Init+0x1ee>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e004      	b.n	8001b66 <HAL_GPIO_Init+0x1ee>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e002      	b.n	8001b66 <HAL_GPIO_Init+0x1ee>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_GPIO_Init+0x1ee>
 8001b64:	2300      	movs	r3, #0
 8001b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b68:	f002 0203 	and.w	r2, r2, #3
 8001b6c:	0092      	lsls	r2, r2, #2
 8001b6e:	4093      	lsls	r3, r2
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b76:	492f      	ldr	r1, [pc, #188]	; (8001c34 <HAL_GPIO_Init+0x2bc>)
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b90:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	492c      	ldr	r1, [pc, #176]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4928      	ldr	r1, [pc, #160]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bb8:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	4922      	ldr	r1, [pc, #136]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60cb      	str	r3, [r1, #12]
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	491e      	ldr	r1, [pc, #120]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	4918      	ldr	r1, [pc, #96]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	4914      	ldr	r1, [pc, #80]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d021      	beq.n	8001c4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	490e      	ldr	r1, [pc, #56]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]
 8001c14:	e021      	b.n	8001c5a <HAL_GPIO_Init+0x2e2>
 8001c16:	bf00      	nop
 8001c18:	10320000 	.word	0x10320000
 8001c1c:	10310000 	.word	0x10310000
 8001c20:	10220000 	.word	0x10220000
 8001c24:	10210000 	.word	0x10210000
 8001c28:	10120000 	.word	0x10120000
 8001c2c:	10110000 	.word	0x10110000
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010000 	.word	0x40010000
 8001c38:	40010800 	.word	0x40010800
 8001c3c:	40010c00 	.word	0x40010c00
 8001c40:	40011000 	.word	0x40011000
 8001c44:	40011400 	.word	0x40011400
 8001c48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_GPIO_Init+0x304>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	4909      	ldr	r1, [pc, #36]	; (8001c7c <HAL_GPIO_Init+0x304>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f47f ae8e 	bne.w	800198c <HAL_GPIO_Init+0x14>
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	372c      	adds	r7, #44	; 0x2c
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	40010400 	.word	0x40010400

08001c80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	887b      	ldrh	r3, [r7, #2]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e001      	b.n	8001ca2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	807b      	strh	r3, [r7, #2]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cbe:	787b      	ldrb	r3, [r7, #1]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc4:	887a      	ldrh	r2, [r7, #2]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cca:	e003      	b.n	8001cd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ccc:	887b      	ldrh	r3, [r7, #2]
 8001cce:	041a      	lsls	r2, r3, #16
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	611a      	str	r2, [r3, #16]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cf0:	887a      	ldrh	r2, [r7, #2]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	041a      	lsls	r2, r3, #16
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	400b      	ands	r3, r1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	611a      	str	r2, [r3, #16]
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe feca 	bl	8000ac8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e12b      	b.n	8001faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff f944 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2224      	movs	r2, #36	; 0x24
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001da4:	f001 f932 	bl	800300c <HAL_RCC_GetPCLK1Freq>
 8001da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a81      	ldr	r2, [pc, #516]	; (8001fb4 <HAL_I2C_Init+0x274>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d807      	bhi.n	8001dc4 <HAL_I2C_Init+0x84>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4a80      	ldr	r2, [pc, #512]	; (8001fb8 <HAL_I2C_Init+0x278>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	bf94      	ite	ls
 8001dbc:	2301      	movls	r3, #1
 8001dbe:	2300      	movhi	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e006      	b.n	8001dd2 <HAL_I2C_Init+0x92>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a7d      	ldr	r2, [pc, #500]	; (8001fbc <HAL_I2C_Init+0x27c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	bf94      	ite	ls
 8001dcc:	2301      	movls	r3, #1
 8001dce:	2300      	movhi	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0e7      	b.n	8001faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4a78      	ldr	r2, [pc, #480]	; (8001fc0 <HAL_I2C_Init+0x280>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9b      	lsrs	r3, r3, #18
 8001de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <HAL_I2C_Init+0x274>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d802      	bhi.n	8001e14 <HAL_I2C_Init+0xd4>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	3301      	adds	r3, #1
 8001e12:	e009      	b.n	8001e28 <HAL_I2C_Init+0xe8>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	4a69      	ldr	r2, [pc, #420]	; (8001fc4 <HAL_I2C_Init+0x284>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	3301      	adds	r3, #1
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	495c      	ldr	r1, [pc, #368]	; (8001fb4 <HAL_I2C_Init+0x274>)
 8001e44:	428b      	cmp	r3, r1
 8001e46:	d819      	bhi.n	8001e7c <HAL_I2C_Init+0x13c>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e59      	subs	r1, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e56:	1c59      	adds	r1, r3, #1
 8001e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e5c:	400b      	ands	r3, r1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_I2C_Init+0x138>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1e59      	subs	r1, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e76:	e051      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001e78:	2304      	movs	r3, #4
 8001e7a:	e04f      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d111      	bne.n	8001ea8 <HAL_I2C_Init+0x168>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1e58      	subs	r0, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	440b      	add	r3, r1
 8001e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	e012      	b.n	8001ece <HAL_I2C_Init+0x18e>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	0099      	lsls	r1, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Init+0x196>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e022      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10e      	bne.n	8001efc <HAL_I2C_Init+0x1bc>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1e58      	subs	r0, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	440b      	add	r3, r1
 8001eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001efa:	e00f      	b.n	8001f1c <HAL_I2C_Init+0x1dc>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1e58      	subs	r0, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	0099      	lsls	r1, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	6809      	ldr	r1, [r1, #0]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6911      	ldr	r1, [r2, #16]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68d2      	ldr	r2, [r2, #12]
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	000186a0 	.word	0x000186a0
 8001fb8:	001e847f 	.word	0x001e847f
 8001fbc:	003d08ff 	.word	0x003d08ff
 8001fc0:	431bde83 	.word	0x431bde83
 8001fc4:	10624dd3 	.word	0x10624dd3

08001fc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	817b      	strh	r3, [r7, #10]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff f97e 	bl	80012dc <HAL_GetTick>
 8001fe0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	f040 80e0 	bne.w	80021b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2319      	movs	r3, #25
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4970      	ldr	r1, [pc, #448]	; (80021bc <HAL_I2C_Master_Transmit+0x1f4>)
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f964 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002006:	2302      	movs	r3, #2
 8002008:	e0d3      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_I2C_Master_Transmit+0x50>
 8002014:	2302      	movs	r3, #2
 8002016:	e0cc      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d007      	beq.n	800203e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2221      	movs	r2, #33	; 0x21
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2210      	movs	r2, #16
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	893a      	ldrh	r2, [r7, #8]
 800206e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a50      	ldr	r2, [pc, #320]	; (80021c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002080:	8979      	ldrh	r1, [r7, #10]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	6a3a      	ldr	r2, [r7, #32]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f89c 	bl	80021c4 <I2C_MasterRequestWrite>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e08d      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020ac:	e066      	b.n	800217c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	6a39      	ldr	r1, [r7, #32]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fa22 	bl	80024fc <I2C_WaitOnTXEFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00d      	beq.n	80020da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d107      	bne.n	80020d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e06b      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b04      	cmp	r3, #4
 8002116:	d11b      	bne.n	8002150 <HAL_I2C_Master_Transmit+0x188>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d017      	beq.n	8002150 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	781a      	ldrb	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	6a39      	ldr	r1, [r7, #32]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fa19 	bl	800258c <I2C_WaitOnBTFFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00d      	beq.n	800217c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	2b04      	cmp	r3, #4
 8002166:	d107      	bne.n	8002178 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002176:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e01a      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d194      	bne.n	80020ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e000      	b.n	80021b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	00100002 	.word	0x00100002
 80021c0:	ffff0000 	.word	0xffff0000

080021c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	460b      	mov	r3, r1
 80021d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d006      	beq.n	80021ee <I2C_MasterRequestWrite+0x2a>
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d003      	beq.n	80021ee <I2C_MasterRequestWrite+0x2a>
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021ec:	d108      	bne.n	8002200 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e00b      	b.n	8002218 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	2b12      	cmp	r3, #18
 8002206:	d107      	bne.n	8002218 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002216:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f84f 	bl	80022c8 <I2C_WaitOnFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00d      	beq.n	800224c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800223e:	d103      	bne.n	8002248 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e035      	b.n	80022b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002254:	d108      	bne.n	8002268 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002256:	897b      	ldrh	r3, [r7, #10]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002264:	611a      	str	r2, [r3, #16]
 8002266:	e01b      	b.n	80022a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002268:	897b      	ldrh	r3, [r7, #10]
 800226a:	11db      	asrs	r3, r3, #7
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f003 0306 	and.w	r3, r3, #6
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f063 030f 	orn	r3, r3, #15
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	490e      	ldr	r1, [pc, #56]	; (80022c0 <I2C_MasterRequestWrite+0xfc>)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f898 	bl	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e010      	b.n	80022b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002296:	897b      	ldrh	r3, [r7, #10]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4907      	ldr	r1, [pc, #28]	; (80022c4 <I2C_MasterRequestWrite+0x100>)
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f888 	bl	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	00010008 	.word	0x00010008
 80022c4:	00010002 	.word	0x00010002

080022c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d8:	e048      	b.n	800236c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d044      	beq.n	800236c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7fe fffb 	bl	80012dc <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d139      	bne.n	800236c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	0c1b      	lsrs	r3, r3, #16
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d10d      	bne.n	800231e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	43da      	mvns	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4013      	ands	r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	e00c      	b.n	8002338 <I2C_WaitOnFlagUntilTimeout+0x70>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	43da      	mvns	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	4013      	ands	r3, r2
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	429a      	cmp	r2, r3
 800233c:	d116      	bne.n	800236c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e023      	b.n	80023b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	0c1b      	lsrs	r3, r3, #16
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d10d      	bne.n	8002392 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	43da      	mvns	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4013      	ands	r3, r2
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	e00c      	b.n	80023ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	43da      	mvns	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4013      	ands	r3, r2
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d093      	beq.n	80022da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023ca:	e071      	b.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023da:	d123      	bne.n	8002424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f043 0204 	orr.w	r2, r3, #4
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e067      	b.n	80024f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242a:	d041      	beq.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7fe ff56 	bl	80012dc <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	d302      	bcc.n	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d136      	bne.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	d10c      	bne.n	8002466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4013      	ands	r3, r2
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf14      	ite	ne
 800245e:	2301      	movne	r3, #1
 8002460:	2300      	moveq	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	e00b      	b.n	800247e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	43da      	mvns	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4013      	ands	r3, r2
 8002472:	b29b      	uxth	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf14      	ite	ne
 8002478:	2301      	movne	r3, #1
 800247a:	2300      	moveq	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d016      	beq.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f043 0220 	orr.w	r2, r3, #32
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e021      	b.n	80024f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	0c1b      	lsrs	r3, r3, #16
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d10c      	bne.n	80024d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	43da      	mvns	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e00b      	b.n	80024ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4013      	ands	r3, r2
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf14      	ite	ne
 80024e6:	2301      	movne	r3, #1
 80024e8:	2300      	moveq	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f47f af6d 	bne.w	80023cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002508:	e034      	b.n	8002574 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f886 	bl	800261c <I2C_IsAcknowledgeFailed>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e034      	b.n	8002584 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d028      	beq.n	8002574 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002522:	f7fe fedb 	bl	80012dc <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	d302      	bcc.n	8002538 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d11d      	bne.n	8002574 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002542:	2b80      	cmp	r3, #128	; 0x80
 8002544:	d016      	beq.n	8002574 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f043 0220 	orr.w	r2, r3, #32
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e007      	b.n	8002584 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	2b80      	cmp	r3, #128	; 0x80
 8002580:	d1c3      	bne.n	800250a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002598:	e034      	b.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f83e 	bl	800261c <I2C_IsAcknowledgeFailed>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e034      	b.n	8002614 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d028      	beq.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b2:	f7fe fe93 	bl	80012dc <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d302      	bcc.n	80025c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d11d      	bne.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d016      	beq.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f043 0220 	orr.w	r2, r3, #32
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e007      	b.n	8002614 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d1c3      	bne.n	800259a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002632:	d11b      	bne.n	800266c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800263c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267a:	b08b      	sub	sp, #44	; 0x2c
 800267c:	af06      	add	r7, sp, #24
 800267e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0f1      	b.n	800286e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fd0a 	bl	80010b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2203      	movs	r2, #3
 80026a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f001 f9a1 	bl	80039f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	687e      	ldr	r6, [r7, #4]
 80026be:	466d      	mov	r5, sp
 80026c0:	f106 0410 	add.w	r4, r6, #16
 80026c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	602b      	str	r3, [r5, #0]
 80026cc:	1d33      	adds	r3, r6, #4
 80026ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d0:	6838      	ldr	r0, [r7, #0]
 80026d2:	f001 f981 	bl	80039d8 <USB_CoreInit>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0c2      	b.n	800286e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 f99c 	bl	8003a2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e040      	b.n	800277c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	3301      	adds	r3, #1
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	3303      	adds	r3, #3
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	3338      	adds	r3, #56	; 0x38
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	333c      	adds	r3, #60	; 0x3c
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	440b      	add	r3, r1
 8002770:	3340      	adds	r3, #64	; 0x40
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	3301      	adds	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	d3b9      	bcc.n	80026fa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002786:	2300      	movs	r3, #0
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	e044      	b.n	8002816 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	440b      	add	r3, r1
 800279a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	3301      	adds	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	429a      	cmp	r2, r3
 800281e:	d3b5      	bcc.n	800278c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	687e      	ldr	r6, [r7, #4]
 8002828:	466d      	mov	r5, sp
 800282a:	f106 0410 	add.w	r4, r6, #16
 800282e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	602b      	str	r3, [r5, #0]
 8002836:	1d33      	adds	r3, r6, #4
 8002838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	f001 f902 	bl	8003a44 <USB_DevInit>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00d      	b.n	800286e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f001 f90c 	bl	8003a84 <USB_DevDisconnect>

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e272      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8087 	beq.w	80029a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002898:	4b92      	ldr	r3, [pc, #584]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d00c      	beq.n	80028be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028a4:	4b8f      	ldr	r3, [pc, #572]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d112      	bne.n	80028d6 <HAL_RCC_OscConfig+0x5e>
 80028b0:	4b8c      	ldr	r3, [pc, #560]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028bc:	d10b      	bne.n	80028d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028be:	4b89      	ldr	r3, [pc, #548]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d06c      	beq.n	80029a4 <HAL_RCC_OscConfig+0x12c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d168      	bne.n	80029a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e24c      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x76>
 80028e0:	4b80      	ldr	r3, [pc, #512]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a7f      	ldr	r2, [pc, #508]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	e02e      	b.n	800294c <HAL_RCC_OscConfig+0xd4>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x98>
 80028f6:	4b7b      	ldr	r3, [pc, #492]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a7a      	ldr	r2, [pc, #488]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b78      	ldr	r3, [pc, #480]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a77      	ldr	r2, [pc, #476]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002908:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e01d      	b.n	800294c <HAL_RCC_OscConfig+0xd4>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002918:	d10c      	bne.n	8002934 <HAL_RCC_OscConfig+0xbc>
 800291a:	4b72      	ldr	r3, [pc, #456]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a71      	ldr	r2, [pc, #452]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b6f      	ldr	r3, [pc, #444]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a6e      	ldr	r2, [pc, #440]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 800292c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e00b      	b.n	800294c <HAL_RCC_OscConfig+0xd4>
 8002934:	4b6b      	ldr	r3, [pc, #428]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a6a      	ldr	r2, [pc, #424]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 800293a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b68      	ldr	r3, [pc, #416]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a67      	ldr	r2, [pc, #412]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fcc2 	bl	80012dc <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe fcbe 	bl	80012dc <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b64      	cmp	r3, #100	; 0x64
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e200      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	4b5d      	ldr	r3, [pc, #372]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0xe4>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297c:	f7fe fcae 	bl	80012dc <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7fe fcaa 	bl	80012dc <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e1ec      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002996:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x10c>
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d063      	beq.n	8002a7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029b2:	4b4c      	ldr	r3, [pc, #304]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029be:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d11c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x18c>
 80029ca:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d116      	bne.n	8002a04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d6:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_RCC_OscConfig+0x176>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e1c0      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ee:	4b3d      	ldr	r3, [pc, #244]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4939      	ldr	r1, [pc, #228]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	e03a      	b.n	8002a7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a0c:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fc63 	bl	80012dc <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7fe fc5f 	bl	80012dc <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e1a1      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a38:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4927      	ldr	r1, [pc, #156]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	600b      	str	r3, [r1, #0]
 8002a4c:	e015      	b.n	8002a7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <HAL_RCC_OscConfig+0x270>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe fc42 	bl	80012dc <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5c:	f7fe fc3e 	bl	80012dc <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e180      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d03a      	beq.n	8002afc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d019      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8e:	4b17      	ldr	r3, [pc, #92]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a94:	f7fe fc22 	bl	80012dc <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9c:	f7fe fc1e 	bl	80012dc <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e160      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f000 faba 	bl	8003034 <RCC_Delay>
 8002ac0:	e01c      	b.n	8002afc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fc08 	bl	80012dc <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ace:	e00f      	b.n	8002af0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad0:	f7fe fc04 	bl	80012dc <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d908      	bls.n	8002af0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e146      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	42420000 	.word	0x42420000
 8002aec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af0:	4b92      	ldr	r3, [pc, #584]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e9      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80a6 	beq.w	8002c56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0e:	4b8b      	ldr	r3, [pc, #556]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10d      	bne.n	8002b36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	4b88      	ldr	r3, [pc, #544]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4a87      	ldr	r2, [pc, #540]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	61d3      	str	r3, [r2, #28]
 8002b26:	4b85      	ldr	r3, [pc, #532]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b36:	4b82      	ldr	r3, [pc, #520]	; (8002d40 <HAL_RCC_OscConfig+0x4c8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d118      	bne.n	8002b74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b42:	4b7f      	ldr	r3, [pc, #508]	; (8002d40 <HAL_RCC_OscConfig+0x4c8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a7e      	ldr	r2, [pc, #504]	; (8002d40 <HAL_RCC_OscConfig+0x4c8>)
 8002b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fbc5 	bl	80012dc <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b56:	f7fe fbc1 	bl	80012dc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b64      	cmp	r3, #100	; 0x64
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e103      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b68:	4b75      	ldr	r3, [pc, #468]	; (8002d40 <HAL_RCC_OscConfig+0x4c8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x312>
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4a6e      	ldr	r2, [pc, #440]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6213      	str	r3, [r2, #32]
 8002b88:	e02d      	b.n	8002be6 <HAL_RCC_OscConfig+0x36e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x334>
 8002b92:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a69      	ldr	r2, [pc, #420]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6213      	str	r3, [r2, #32]
 8002b9e:	4b67      	ldr	r3, [pc, #412]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a66      	ldr	r2, [pc, #408]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	6213      	str	r3, [r2, #32]
 8002baa:	e01c      	b.n	8002be6 <HAL_RCC_OscConfig+0x36e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d10c      	bne.n	8002bce <HAL_RCC_OscConfig+0x356>
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4a60      	ldr	r2, [pc, #384]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	f043 0304 	orr.w	r3, r3, #4
 8002bbe:	6213      	str	r3, [r2, #32]
 8002bc0:	4b5e      	ldr	r3, [pc, #376]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4a5d      	ldr	r2, [pc, #372]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6213      	str	r3, [r2, #32]
 8002bcc:	e00b      	b.n	8002be6 <HAL_RCC_OscConfig+0x36e>
 8002bce:	4b5b      	ldr	r3, [pc, #364]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	4a5a      	ldr	r2, [pc, #360]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	6213      	str	r3, [r2, #32]
 8002bda:	4b58      	ldr	r3, [pc, #352]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a57      	ldr	r2, [pc, #348]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	f023 0304 	bic.w	r3, r3, #4
 8002be4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d015      	beq.n	8002c1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bee:	f7fe fb75 	bl	80012dc <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe fb71 	bl	80012dc <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e0b1      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ee      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x37e>
 8002c18:	e014      	b.n	8002c44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1a:	f7fe fb5f 	bl	80012dc <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fe fb5b 	bl	80012dc <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e09b      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c38:	4b40      	ldr	r3, [pc, #256]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ee      	bne.n	8002c22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d105      	bne.n	8002c56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4a:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	4a3b      	ldr	r2, [pc, #236]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8087 	beq.w	8002d6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c60:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d061      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d146      	bne.n	8002d02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c74:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fb2f 	bl	80012dc <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c82:	f7fe fb2b 	bl	80012dc <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e06d      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c94:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca8:	d108      	bne.n	8002cbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	4921      	ldr	r1, [pc, #132]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a19      	ldr	r1, [r3, #32]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	491b      	ldr	r1, [pc, #108]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7fe faff 	bl	80012dc <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7fe fafb 	bl	80012dc <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e03d      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x46a>
 8002d00:	e035      	b.n	8002d6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d08:	f7fe fae8 	bl	80012dc <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fe fae4 	bl	80012dc <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e026      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x498>
 8002d2e:	e01e      	b.n	8002d6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e019      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40007000 	.word	0x40007000
 8002d44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_OscConfig+0x500>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000

08002d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0d0      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	4b6a      	ldr	r3, [pc, #424]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d910      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b67      	ldr	r3, [pc, #412]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 0207 	bic.w	r2, r3, #7
 8002da6:	4965      	ldr	r1, [pc, #404]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0b8      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd8:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002de2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df0:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a52      	ldr	r2, [pc, #328]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfc:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	494d      	ldr	r1, [pc, #308]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d040      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b47      	ldr	r3, [pc, #284]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d115      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e07f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3a:	4b41      	ldr	r3, [pc, #260]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e073      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e06b      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5a:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f023 0203 	bic.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4936      	ldr	r1, [pc, #216]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fa36 	bl	80012dc <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7fe fa32 	bl	80012dc <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e053      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	4b2d      	ldr	r3, [pc, #180]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 020c 	and.w	r2, r3, #12
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1eb      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d210      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 0207 	bic.w	r2, r3, #7
 8002eb2:	4922      	ldr	r1, [pc, #136]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e032      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4916      	ldr	r1, [pc, #88]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	490e      	ldr	r1, [pc, #56]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f0a:	f000 f821 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	490a      	ldr	r1, [pc, #40]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1c:	5ccb      	ldrb	r3, [r1, r3]
 8002f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f22:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x1cc>)
 8002f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1d0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe f994 	bl	8001258 <HAL_InitTick>

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40022000 	.word	0x40022000
 8002f40:	40021000 	.word	0x40021000
 8002f44:	08004548 	.word	0x08004548
 8002f48:	20000020 	.word	0x20000020
 8002f4c:	20000024 	.word	0x20000024

08002f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d002      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x30>
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCC_GetSysClockFreq+0x36>
 8002f7e:	e027      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f82:	613b      	str	r3, [r7, #16]
      break;
 8002f84:	e027      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	0c9b      	lsrs	r3, r3, #18
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	4a17      	ldr	r2, [pc, #92]	; (8002fec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f90:	5cd3      	ldrb	r3, [r2, r3]
 8002f92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d010      	beq.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	0c5b      	lsrs	r3, r3, #17
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	4a11      	ldr	r2, [pc, #68]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fb2:	fb03 f202 	mul.w	r2, r3, r2
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	e004      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a0c      	ldr	r2, [pc, #48]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fc4:	fb02 f303 	mul.w	r3, r2, r3
 8002fc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	613b      	str	r3, [r7, #16]
      break;
 8002fce:	e002      	b.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fd2:	613b      	str	r3, [r7, #16]
      break;
 8002fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd6:	693b      	ldr	r3, [r7, #16]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	007a1200 	.word	0x007a1200
 8002fec:	08004560 	.word	0x08004560
 8002ff0:	08004570 	.word	0x08004570
 8002ff4:	003d0900 	.word	0x003d0900

08002ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ffc:	4b02      	ldr	r3, [pc, #8]	; (8003008 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	20000020 	.word	0x20000020

0800300c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003010:	f7ff fff2 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4903      	ldr	r1, [pc, #12]	; (8003030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	08004558 	.word	0x08004558

08003034 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <RCC_Delay+0x34>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0a      	ldr	r2, [pc, #40]	; (800306c <RCC_Delay+0x38>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0a5b      	lsrs	r3, r3, #9
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003050:	bf00      	nop
  }
  while (Delay --);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	60fa      	str	r2, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f9      	bne.n	8003050 <RCC_Delay+0x1c>
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	20000020 	.word	0x20000020
 800306c:	10624dd3 	.word	0x10624dd3

08003070 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d07d      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800308c:	2300      	movs	r3, #0
 800308e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003090:	4b4f      	ldr	r3, [pc, #316]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10d      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309c:	4b4c      	ldr	r3, [pc, #304]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a6:	61d3      	str	r3, [r2, #28]
 80030a8:	4b49      	ldr	r3, [pc, #292]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b4:	2301      	movs	r3, #1
 80030b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	4b46      	ldr	r3, [pc, #280]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d118      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c4:	4b43      	ldr	r3, [pc, #268]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a42      	ldr	r2, [pc, #264]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d0:	f7fe f904 	bl	80012dc <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d6:	e008      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d8:	f7fe f900 	bl	80012dc <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e06d      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030f6:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d02e      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	429a      	cmp	r2, r3
 8003112:	d027      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003114:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800311e:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003120:	2201      	movs	r2, #1
 8003122:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003124:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800312a:	4a29      	ldr	r2, [pc, #164]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d014      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe f8cf 	bl	80012dc <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe f8cb 	bl	80012dc <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e036      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ee      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003164:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4917      	ldr	r1, [pc, #92]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003172:	4313      	orrs	r3, r2
 8003174:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	490b      	ldr	r1, [pc, #44]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	4904      	ldr	r1, [pc, #16]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40007000 	.word	0x40007000
 80031d8:	42420440 	.word	0x42420440

080031dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e041      	b.n	8003272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd ff34 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f000 fa74 	bl	8003708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d001      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e03a      	b.n	800330a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_TIM_Base_Start_IT+0x98>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00e      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x58>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032be:	d009      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x58>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <HAL_TIM_Base_Start_IT+0x9c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x58>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a13      	ldr	r2, [pc, #76]	; (800331c <HAL_TIM_Base_Start_IT+0xa0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d111      	bne.n	80032f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d010      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0201 	orr.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f6:	e007      	b.n	8003308 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800

08003320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d122      	bne.n	800337c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	d11b      	bne.n	800337c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0202 	mvn.w	r2, #2
 800334c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f9b4 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 8003368:	e005      	b.n	8003376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f9a7 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f9b6 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d122      	bne.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d11b      	bne.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0204 	mvn.w	r2, #4
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f98a 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f97d 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f98c 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d122      	bne.n	8003424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d11b      	bne.n	8003424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0208 	mvn.w	r2, #8
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f960 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f953 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f962 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d122      	bne.n	8003478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b10      	cmp	r3, #16
 800343e:	d11b      	bne.n	8003478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0210 	mvn.w	r2, #16
 8003448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2208      	movs	r2, #8
 800344e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f936 	bl	80036d0 <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f929 	bl	80036be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f938 	bl	80036e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10e      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0201 	mvn.w	r2, #1
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fb34 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b80      	cmp	r3, #128	; 0x80
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b80      	cmp	r3, #128	; 0x80
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fa7b 	bl	80039c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8fc 	bl	80036f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b20      	cmp	r3, #32
 8003508:	d10e      	bne.n	8003528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b20      	cmp	r3, #32
 8003516:	d107      	bne.n	8003528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0220 	mvn.w	r2, #32
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fa46 	bl	80039b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_TIM_ConfigClockSource+0x1c>
 8003548:	2302      	movs	r3, #2
 800354a:	e0b4      	b.n	80036b6 <HAL_TIM_ConfigClockSource+0x186>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800356a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003584:	d03e      	beq.n	8003604 <HAL_TIM_ConfigClockSource+0xd4>
 8003586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358a:	f200 8087 	bhi.w	800369c <HAL_TIM_ConfigClockSource+0x16c>
 800358e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003592:	f000 8086 	beq.w	80036a2 <HAL_TIM_ConfigClockSource+0x172>
 8003596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359a:	d87f      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b70      	cmp	r3, #112	; 0x70
 800359e:	d01a      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0xa6>
 80035a0:	2b70      	cmp	r3, #112	; 0x70
 80035a2:	d87b      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b60      	cmp	r3, #96	; 0x60
 80035a6:	d050      	beq.n	800364a <HAL_TIM_ConfigClockSource+0x11a>
 80035a8:	2b60      	cmp	r3, #96	; 0x60
 80035aa:	d877      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b50      	cmp	r3, #80	; 0x50
 80035ae:	d03c      	beq.n	800362a <HAL_TIM_ConfigClockSource+0xfa>
 80035b0:	2b50      	cmp	r3, #80	; 0x50
 80035b2:	d873      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d058      	beq.n	800366a <HAL_TIM_ConfigClockSource+0x13a>
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d86f      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035bc:	2b30      	cmp	r3, #48	; 0x30
 80035be:	d064      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035c0:	2b30      	cmp	r3, #48	; 0x30
 80035c2:	d86b      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d060      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d867      	bhi.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05c      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d05a      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x15a>
 80035d4:	e062      	b.n	800369c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035e6:	f000 f968 	bl	80038ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	609a      	str	r2, [r3, #8]
      break;
 8003602:	e04f      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003614:	f000 f951 	bl	80038ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003626:	609a      	str	r2, [r3, #8]
      break;
 8003628:	e03c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003636:	461a      	mov	r2, r3
 8003638:	f000 f8c8 	bl	80037cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2150      	movs	r1, #80	; 0x50
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f91f 	bl	8003886 <TIM_ITRx_SetConfig>
      break;
 8003648:	e02c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003656:	461a      	mov	r2, r3
 8003658:	f000 f8e6 	bl	8003828 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2160      	movs	r1, #96	; 0x60
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f90f 	bl	8003886 <TIM_ITRx_SetConfig>
      break;
 8003668:	e01c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003676:	461a      	mov	r2, r3
 8003678:	f000 f8a8 	bl	80037cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2140      	movs	r1, #64	; 0x40
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f8ff 	bl	8003886 <TIM_ITRx_SetConfig>
      break;
 8003688:	e00c      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f000 f8f6 	bl	8003886 <TIM_ITRx_SetConfig>
      break;
 800369a:	e003      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
      break;
 80036a0:	e000      	b.n	80036a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
	...

08003708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <TIM_Base_SetConfig+0xb8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00b      	beq.n	8003738 <TIM_Base_SetConfig+0x30>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d007      	beq.n	8003738 <TIM_Base_SetConfig+0x30>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <TIM_Base_SetConfig+0xbc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_Base_SetConfig+0x30>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <TIM_Base_SetConfig+0xc0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <TIM_Base_SetConfig+0xb8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d00b      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d007      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a19      	ldr	r2, [pc, #100]	; (80037c4 <TIM_Base_SetConfig+0xbc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d003      	beq.n	800376a <TIM_Base_SetConfig+0x62>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <TIM_Base_SetConfig+0xc0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <TIM_Base_SetConfig+0xb8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d103      	bne.n	80037b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	615a      	str	r2, [r3, #20]
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800

080037cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	f023 0201 	bic.w	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f023 030a 	bic.w	r3, r3, #10
 8003808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0210 	bic.w	r2, r3, #16
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	031b      	lsls	r3, r3, #12
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003864:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	621a      	str	r2, [r3, #32]
}
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f043 0307 	orr.w	r3, r3, #7
 80038a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	609a      	str	r2, [r3, #8]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr

080038ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b087      	sub	sp, #28
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	021a      	lsls	r2, r3, #8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	431a      	orrs	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	609a      	str	r2, [r3, #8]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800390c:	2302      	movs	r3, #2
 800390e:	e046      	b.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00e      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395c:	d009      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a12      	ldr	r2, [pc, #72]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d004      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a10      	ldr	r2, [pc, #64]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10c      	bne.n	800398c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	4313      	orrs	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800

080039b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr

080039c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039d8:	b084      	sub	sp, #16
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	f107 0014 	add.w	r0, r7, #20
 80039e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	b004      	add	sp, #16
 80039f6:	4770      	bx	lr

080039f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	4013      	ands	r3, r2
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a44:	b084      	sub	sp, #16
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	f107 0014 	add.w	r0, r7, #20
 8003a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	b004      	add	sp, #16
 8003a82:	4770      	bx	lr

08003a84 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <sniprintf>:
 8003a98:	b40c      	push	{r2, r3}
 8003a9a:	b530      	push	{r4, r5, lr}
 8003a9c:	4b17      	ldr	r3, [pc, #92]	; (8003afc <sniprintf+0x64>)
 8003a9e:	1e0c      	subs	r4, r1, #0
 8003aa0:	681d      	ldr	r5, [r3, #0]
 8003aa2:	b09d      	sub	sp, #116	; 0x74
 8003aa4:	da08      	bge.n	8003ab8 <sniprintf+0x20>
 8003aa6:	238b      	movs	r3, #139	; 0x8b
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aac:	602b      	str	r3, [r5, #0]
 8003aae:	b01d      	add	sp, #116	; 0x74
 8003ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ab4:	b002      	add	sp, #8
 8003ab6:	4770      	bx	lr
 8003ab8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003abc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ac0:	bf0c      	ite	eq
 8003ac2:	4623      	moveq	r3, r4
 8003ac4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003ac8:	9304      	str	r3, [sp, #16]
 8003aca:	9307      	str	r3, [sp, #28]
 8003acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ad0:	9002      	str	r0, [sp, #8]
 8003ad2:	9006      	str	r0, [sp, #24]
 8003ad4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ad8:	4628      	mov	r0, r5
 8003ada:	ab21      	add	r3, sp, #132	; 0x84
 8003adc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003ade:	a902      	add	r1, sp, #8
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	f000 f98f 	bl	8003e04 <_svfiprintf_r>
 8003ae6:	1c43      	adds	r3, r0, #1
 8003ae8:	bfbc      	itt	lt
 8003aea:	238b      	movlt	r3, #139	; 0x8b
 8003aec:	602b      	strlt	r3, [r5, #0]
 8003aee:	2c00      	cmp	r4, #0
 8003af0:	d0dd      	beq.n	8003aae <sniprintf+0x16>
 8003af2:	2200      	movs	r2, #0
 8003af4:	9b02      	ldr	r3, [sp, #8]
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e7d9      	b.n	8003aae <sniprintf+0x16>
 8003afa:	bf00      	nop
 8003afc:	20000078 	.word	0x20000078

08003b00 <memset>:
 8003b00:	4603      	mov	r3, r0
 8003b02:	4402      	add	r2, r0
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d100      	bne.n	8003b0a <memset+0xa>
 8003b08:	4770      	bx	lr
 8003b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b0e:	e7f9      	b.n	8003b04 <memset+0x4>

08003b10 <__errno>:
 8003b10:	4b01      	ldr	r3, [pc, #4]	; (8003b18 <__errno+0x8>)
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000078 	.word	0x20000078

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	2600      	movs	r6, #0
 8003b20:	4d0c      	ldr	r5, [pc, #48]	; (8003b54 <__libc_init_array+0x38>)
 8003b22:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <__libc_init_array+0x3c>)
 8003b24:	1b64      	subs	r4, r4, r5
 8003b26:	10a4      	asrs	r4, r4, #2
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	f000 fc7a 	bl	8004424 <_init>
 8003b30:	2600      	movs	r6, #0
 8003b32:	4d0a      	ldr	r5, [pc, #40]	; (8003b5c <__libc_init_array+0x40>)
 8003b34:	4c0a      	ldr	r4, [pc, #40]	; (8003b60 <__libc_init_array+0x44>)
 8003b36:	1b64      	subs	r4, r4, r5
 8003b38:	10a4      	asrs	r4, r4, #2
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	080045a8 	.word	0x080045a8
 8003b58:	080045a8 	.word	0x080045a8
 8003b5c:	080045a8 	.word	0x080045a8
 8003b60:	080045ac 	.word	0x080045ac

08003b64 <__retarget_lock_acquire_recursive>:
 8003b64:	4770      	bx	lr

08003b66 <__retarget_lock_release_recursive>:
 8003b66:	4770      	bx	lr

08003b68 <_free_r>:
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4605      	mov	r5, r0
 8003b6c:	2900      	cmp	r1, #0
 8003b6e:	d040      	beq.n	8003bf2 <_free_r+0x8a>
 8003b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b74:	1f0c      	subs	r4, r1, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bfb8      	it	lt
 8003b7a:	18e4      	addlt	r4, r4, r3
 8003b7c:	f000 f8dc 	bl	8003d38 <__malloc_lock>
 8003b80:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <_free_r+0x8c>)
 8003b82:	6813      	ldr	r3, [r2, #0]
 8003b84:	b933      	cbnz	r3, 8003b94 <_free_r+0x2c>
 8003b86:	6063      	str	r3, [r4, #4]
 8003b88:	6014      	str	r4, [r2, #0]
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b90:	f000 b8d8 	b.w	8003d44 <__malloc_unlock>
 8003b94:	42a3      	cmp	r3, r4
 8003b96:	d908      	bls.n	8003baa <_free_r+0x42>
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	1821      	adds	r1, r4, r0
 8003b9c:	428b      	cmp	r3, r1
 8003b9e:	bf01      	itttt	eq
 8003ba0:	6819      	ldreq	r1, [r3, #0]
 8003ba2:	685b      	ldreq	r3, [r3, #4]
 8003ba4:	1809      	addeq	r1, r1, r0
 8003ba6:	6021      	streq	r1, [r4, #0]
 8003ba8:	e7ed      	b.n	8003b86 <_free_r+0x1e>
 8003baa:	461a      	mov	r2, r3
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	b10b      	cbz	r3, 8003bb4 <_free_r+0x4c>
 8003bb0:	42a3      	cmp	r3, r4
 8003bb2:	d9fa      	bls.n	8003baa <_free_r+0x42>
 8003bb4:	6811      	ldr	r1, [r2, #0]
 8003bb6:	1850      	adds	r0, r2, r1
 8003bb8:	42a0      	cmp	r0, r4
 8003bba:	d10b      	bne.n	8003bd4 <_free_r+0x6c>
 8003bbc:	6820      	ldr	r0, [r4, #0]
 8003bbe:	4401      	add	r1, r0
 8003bc0:	1850      	adds	r0, r2, r1
 8003bc2:	4283      	cmp	r3, r0
 8003bc4:	6011      	str	r1, [r2, #0]
 8003bc6:	d1e0      	bne.n	8003b8a <_free_r+0x22>
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4408      	add	r0, r1
 8003bce:	6010      	str	r0, [r2, #0]
 8003bd0:	6053      	str	r3, [r2, #4]
 8003bd2:	e7da      	b.n	8003b8a <_free_r+0x22>
 8003bd4:	d902      	bls.n	8003bdc <_free_r+0x74>
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	602b      	str	r3, [r5, #0]
 8003bda:	e7d6      	b.n	8003b8a <_free_r+0x22>
 8003bdc:	6820      	ldr	r0, [r4, #0]
 8003bde:	1821      	adds	r1, r4, r0
 8003be0:	428b      	cmp	r3, r1
 8003be2:	bf01      	itttt	eq
 8003be4:	6819      	ldreq	r1, [r3, #0]
 8003be6:	685b      	ldreq	r3, [r3, #4]
 8003be8:	1809      	addeq	r1, r1, r0
 8003bea:	6021      	streq	r1, [r4, #0]
 8003bec:	6063      	str	r3, [r4, #4]
 8003bee:	6054      	str	r4, [r2, #4]
 8003bf0:	e7cb      	b.n	8003b8a <_free_r+0x22>
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	200005a4 	.word	0x200005a4

08003bf8 <sbrk_aligned>:
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	4e0e      	ldr	r6, [pc, #56]	; (8003c34 <sbrk_aligned+0x3c>)
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	6831      	ldr	r1, [r6, #0]
 8003c00:	4605      	mov	r5, r0
 8003c02:	b911      	cbnz	r1, 8003c0a <sbrk_aligned+0x12>
 8003c04:	f000 fbaa 	bl	800435c <_sbrk_r>
 8003c08:	6030      	str	r0, [r6, #0]
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	f000 fba5 	bl	800435c <_sbrk_r>
 8003c12:	1c43      	adds	r3, r0, #1
 8003c14:	d00a      	beq.n	8003c2c <sbrk_aligned+0x34>
 8003c16:	1cc4      	adds	r4, r0, #3
 8003c18:	f024 0403 	bic.w	r4, r4, #3
 8003c1c:	42a0      	cmp	r0, r4
 8003c1e:	d007      	beq.n	8003c30 <sbrk_aligned+0x38>
 8003c20:	1a21      	subs	r1, r4, r0
 8003c22:	4628      	mov	r0, r5
 8003c24:	f000 fb9a 	bl	800435c <_sbrk_r>
 8003c28:	3001      	adds	r0, #1
 8003c2a:	d101      	bne.n	8003c30 <sbrk_aligned+0x38>
 8003c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c30:	4620      	mov	r0, r4
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	200005a8 	.word	0x200005a8

08003c38 <_malloc_r>:
 8003c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c3c:	1ccd      	adds	r5, r1, #3
 8003c3e:	f025 0503 	bic.w	r5, r5, #3
 8003c42:	3508      	adds	r5, #8
 8003c44:	2d0c      	cmp	r5, #12
 8003c46:	bf38      	it	cc
 8003c48:	250c      	movcc	r5, #12
 8003c4a:	2d00      	cmp	r5, #0
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	db01      	blt.n	8003c54 <_malloc_r+0x1c>
 8003c50:	42a9      	cmp	r1, r5
 8003c52:	d905      	bls.n	8003c60 <_malloc_r+0x28>
 8003c54:	230c      	movs	r3, #12
 8003c56:	2600      	movs	r6, #0
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d34 <_malloc_r+0xfc>
 8003c64:	f000 f868 	bl	8003d38 <__malloc_lock>
 8003c68:	f8d8 3000 	ldr.w	r3, [r8]
 8003c6c:	461c      	mov	r4, r3
 8003c6e:	bb5c      	cbnz	r4, 8003cc8 <_malloc_r+0x90>
 8003c70:	4629      	mov	r1, r5
 8003c72:	4638      	mov	r0, r7
 8003c74:	f7ff ffc0 	bl	8003bf8 <sbrk_aligned>
 8003c78:	1c43      	adds	r3, r0, #1
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	d155      	bne.n	8003d2a <_malloc_r+0xf2>
 8003c7e:	f8d8 4000 	ldr.w	r4, [r8]
 8003c82:	4626      	mov	r6, r4
 8003c84:	2e00      	cmp	r6, #0
 8003c86:	d145      	bne.n	8003d14 <_malloc_r+0xdc>
 8003c88:	2c00      	cmp	r4, #0
 8003c8a:	d048      	beq.n	8003d1e <_malloc_r+0xe6>
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	4631      	mov	r1, r6
 8003c90:	4638      	mov	r0, r7
 8003c92:	eb04 0903 	add.w	r9, r4, r3
 8003c96:	f000 fb61 	bl	800435c <_sbrk_r>
 8003c9a:	4581      	cmp	r9, r0
 8003c9c:	d13f      	bne.n	8003d1e <_malloc_r+0xe6>
 8003c9e:	6821      	ldr	r1, [r4, #0]
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	1a6d      	subs	r5, r5, r1
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	f7ff ffa7 	bl	8003bf8 <sbrk_aligned>
 8003caa:	3001      	adds	r0, #1
 8003cac:	d037      	beq.n	8003d1e <_malloc_r+0xe6>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	442b      	add	r3, r5
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d038      	beq.n	8003d2e <_malloc_r+0xf6>
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	42a2      	cmp	r2, r4
 8003cc0:	d12b      	bne.n	8003d1a <_malloc_r+0xe2>
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	e00f      	b.n	8003ce8 <_malloc_r+0xb0>
 8003cc8:	6822      	ldr	r2, [r4, #0]
 8003cca:	1b52      	subs	r2, r2, r5
 8003ccc:	d41f      	bmi.n	8003d0e <_malloc_r+0xd6>
 8003cce:	2a0b      	cmp	r2, #11
 8003cd0:	d917      	bls.n	8003d02 <_malloc_r+0xca>
 8003cd2:	1961      	adds	r1, r4, r5
 8003cd4:	42a3      	cmp	r3, r4
 8003cd6:	6025      	str	r5, [r4, #0]
 8003cd8:	bf18      	it	ne
 8003cda:	6059      	strne	r1, [r3, #4]
 8003cdc:	6863      	ldr	r3, [r4, #4]
 8003cde:	bf08      	it	eq
 8003ce0:	f8c8 1000 	streq.w	r1, [r8]
 8003ce4:	5162      	str	r2, [r4, r5]
 8003ce6:	604b      	str	r3, [r1, #4]
 8003ce8:	4638      	mov	r0, r7
 8003cea:	f104 060b 	add.w	r6, r4, #11
 8003cee:	f000 f829 	bl	8003d44 <__malloc_unlock>
 8003cf2:	f026 0607 	bic.w	r6, r6, #7
 8003cf6:	1d23      	adds	r3, r4, #4
 8003cf8:	1af2      	subs	r2, r6, r3
 8003cfa:	d0ae      	beq.n	8003c5a <_malloc_r+0x22>
 8003cfc:	1b9b      	subs	r3, r3, r6
 8003cfe:	50a3      	str	r3, [r4, r2]
 8003d00:	e7ab      	b.n	8003c5a <_malloc_r+0x22>
 8003d02:	42a3      	cmp	r3, r4
 8003d04:	6862      	ldr	r2, [r4, #4]
 8003d06:	d1dd      	bne.n	8003cc4 <_malloc_r+0x8c>
 8003d08:	f8c8 2000 	str.w	r2, [r8]
 8003d0c:	e7ec      	b.n	8003ce8 <_malloc_r+0xb0>
 8003d0e:	4623      	mov	r3, r4
 8003d10:	6864      	ldr	r4, [r4, #4]
 8003d12:	e7ac      	b.n	8003c6e <_malloc_r+0x36>
 8003d14:	4634      	mov	r4, r6
 8003d16:	6876      	ldr	r6, [r6, #4]
 8003d18:	e7b4      	b.n	8003c84 <_malloc_r+0x4c>
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	e7cc      	b.n	8003cb8 <_malloc_r+0x80>
 8003d1e:	230c      	movs	r3, #12
 8003d20:	4638      	mov	r0, r7
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	f000 f80e 	bl	8003d44 <__malloc_unlock>
 8003d28:	e797      	b.n	8003c5a <_malloc_r+0x22>
 8003d2a:	6025      	str	r5, [r4, #0]
 8003d2c:	e7dc      	b.n	8003ce8 <_malloc_r+0xb0>
 8003d2e:	605b      	str	r3, [r3, #4]
 8003d30:	deff      	udf	#255	; 0xff
 8003d32:	bf00      	nop
 8003d34:	200005a4 	.word	0x200005a4

08003d38 <__malloc_lock>:
 8003d38:	4801      	ldr	r0, [pc, #4]	; (8003d40 <__malloc_lock+0x8>)
 8003d3a:	f7ff bf13 	b.w	8003b64 <__retarget_lock_acquire_recursive>
 8003d3e:	bf00      	nop
 8003d40:	200005a0 	.word	0x200005a0

08003d44 <__malloc_unlock>:
 8003d44:	4801      	ldr	r0, [pc, #4]	; (8003d4c <__malloc_unlock+0x8>)
 8003d46:	f7ff bf0e 	b.w	8003b66 <__retarget_lock_release_recursive>
 8003d4a:	bf00      	nop
 8003d4c:	200005a0 	.word	0x200005a0

08003d50 <__ssputs_r>:
 8003d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d54:	461f      	mov	r7, r3
 8003d56:	688e      	ldr	r6, [r1, #8]
 8003d58:	4682      	mov	sl, r0
 8003d5a:	42be      	cmp	r6, r7
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	4690      	mov	r8, r2
 8003d60:	680b      	ldr	r3, [r1, #0]
 8003d62:	d82c      	bhi.n	8003dbe <__ssputs_r+0x6e>
 8003d64:	898a      	ldrh	r2, [r1, #12]
 8003d66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d6a:	d026      	beq.n	8003dba <__ssputs_r+0x6a>
 8003d6c:	6965      	ldr	r5, [r4, #20]
 8003d6e:	6909      	ldr	r1, [r1, #16]
 8003d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d74:	eba3 0901 	sub.w	r9, r3, r1
 8003d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d7c:	1c7b      	adds	r3, r7, #1
 8003d7e:	444b      	add	r3, r9
 8003d80:	106d      	asrs	r5, r5, #1
 8003d82:	429d      	cmp	r5, r3
 8003d84:	bf38      	it	cc
 8003d86:	461d      	movcc	r5, r3
 8003d88:	0553      	lsls	r3, r2, #21
 8003d8a:	d527      	bpl.n	8003ddc <__ssputs_r+0x8c>
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	f7ff ff53 	bl	8003c38 <_malloc_r>
 8003d92:	4606      	mov	r6, r0
 8003d94:	b360      	cbz	r0, 8003df0 <__ssputs_r+0xa0>
 8003d96:	464a      	mov	r2, r9
 8003d98:	6921      	ldr	r1, [r4, #16]
 8003d9a:	f000 fafd 	bl	8004398 <memcpy>
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da8:	81a3      	strh	r3, [r4, #12]
 8003daa:	6126      	str	r6, [r4, #16]
 8003dac:	444e      	add	r6, r9
 8003dae:	6026      	str	r6, [r4, #0]
 8003db0:	463e      	mov	r6, r7
 8003db2:	6165      	str	r5, [r4, #20]
 8003db4:	eba5 0509 	sub.w	r5, r5, r9
 8003db8:	60a5      	str	r5, [r4, #8]
 8003dba:	42be      	cmp	r6, r7
 8003dbc:	d900      	bls.n	8003dc0 <__ssputs_r+0x70>
 8003dbe:	463e      	mov	r6, r7
 8003dc0:	4632      	mov	r2, r6
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	6820      	ldr	r0, [r4, #0]
 8003dc6:	f000 faaf 	bl	8004328 <memmove>
 8003dca:	2000      	movs	r0, #0
 8003dcc:	68a3      	ldr	r3, [r4, #8]
 8003dce:	1b9b      	subs	r3, r3, r6
 8003dd0:	60a3      	str	r3, [r4, #8]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	4433      	add	r3, r6
 8003dd6:	6023      	str	r3, [r4, #0]
 8003dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ddc:	462a      	mov	r2, r5
 8003dde:	f000 fae9 	bl	80043b4 <_realloc_r>
 8003de2:	4606      	mov	r6, r0
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d1e0      	bne.n	8003daa <__ssputs_r+0x5a>
 8003de8:	4650      	mov	r0, sl
 8003dea:	6921      	ldr	r1, [r4, #16]
 8003dec:	f7ff febc 	bl	8003b68 <_free_r>
 8003df0:	230c      	movs	r3, #12
 8003df2:	f8ca 3000 	str.w	r3, [sl]
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e00:	81a3      	strh	r3, [r4, #12]
 8003e02:	e7e9      	b.n	8003dd8 <__ssputs_r+0x88>

08003e04 <_svfiprintf_r>:
 8003e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e08:	4698      	mov	r8, r3
 8003e0a:	898b      	ldrh	r3, [r1, #12]
 8003e0c:	4607      	mov	r7, r0
 8003e0e:	061b      	lsls	r3, r3, #24
 8003e10:	460d      	mov	r5, r1
 8003e12:	4614      	mov	r4, r2
 8003e14:	b09d      	sub	sp, #116	; 0x74
 8003e16:	d50e      	bpl.n	8003e36 <_svfiprintf_r+0x32>
 8003e18:	690b      	ldr	r3, [r1, #16]
 8003e1a:	b963      	cbnz	r3, 8003e36 <_svfiprintf_r+0x32>
 8003e1c:	2140      	movs	r1, #64	; 0x40
 8003e1e:	f7ff ff0b 	bl	8003c38 <_malloc_r>
 8003e22:	6028      	str	r0, [r5, #0]
 8003e24:	6128      	str	r0, [r5, #16]
 8003e26:	b920      	cbnz	r0, 8003e32 <_svfiprintf_r+0x2e>
 8003e28:	230c      	movs	r3, #12
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e30:	e0d0      	b.n	8003fd4 <_svfiprintf_r+0x1d0>
 8003e32:	2340      	movs	r3, #64	; 0x40
 8003e34:	616b      	str	r3, [r5, #20]
 8003e36:	2300      	movs	r3, #0
 8003e38:	9309      	str	r3, [sp, #36]	; 0x24
 8003e3a:	2320      	movs	r3, #32
 8003e3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e40:	2330      	movs	r3, #48	; 0x30
 8003e42:	f04f 0901 	mov.w	r9, #1
 8003e46:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e4a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003fec <_svfiprintf_r+0x1e8>
 8003e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e52:	4623      	mov	r3, r4
 8003e54:	469a      	mov	sl, r3
 8003e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e5a:	b10a      	cbz	r2, 8003e60 <_svfiprintf_r+0x5c>
 8003e5c:	2a25      	cmp	r2, #37	; 0x25
 8003e5e:	d1f9      	bne.n	8003e54 <_svfiprintf_r+0x50>
 8003e60:	ebba 0b04 	subs.w	fp, sl, r4
 8003e64:	d00b      	beq.n	8003e7e <_svfiprintf_r+0x7a>
 8003e66:	465b      	mov	r3, fp
 8003e68:	4622      	mov	r2, r4
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	f7ff ff6f 	bl	8003d50 <__ssputs_r>
 8003e72:	3001      	adds	r0, #1
 8003e74:	f000 80a9 	beq.w	8003fca <_svfiprintf_r+0x1c6>
 8003e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e7a:	445a      	add	r2, fp
 8003e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80a1 	beq.w	8003fca <_svfiprintf_r+0x1c6>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e92:	f10a 0a01 	add.w	sl, sl, #1
 8003e96:	9304      	str	r3, [sp, #16]
 8003e98:	9307      	str	r3, [sp, #28]
 8003e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003ea0:	4654      	mov	r4, sl
 8003ea2:	2205      	movs	r2, #5
 8003ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea8:	4850      	ldr	r0, [pc, #320]	; (8003fec <_svfiprintf_r+0x1e8>)
 8003eaa:	f000 fa67 	bl	800437c <memchr>
 8003eae:	9a04      	ldr	r2, [sp, #16]
 8003eb0:	b9d8      	cbnz	r0, 8003eea <_svfiprintf_r+0xe6>
 8003eb2:	06d0      	lsls	r0, r2, #27
 8003eb4:	bf44      	itt	mi
 8003eb6:	2320      	movmi	r3, #32
 8003eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ebc:	0711      	lsls	r1, r2, #28
 8003ebe:	bf44      	itt	mi
 8003ec0:	232b      	movmi	r3, #43	; 0x2b
 8003ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eca:	2b2a      	cmp	r3, #42	; 0x2a
 8003ecc:	d015      	beq.n	8003efa <_svfiprintf_r+0xf6>
 8003ece:	4654      	mov	r4, sl
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f04f 0c0a 	mov.w	ip, #10
 8003ed6:	9a07      	ldr	r2, [sp, #28]
 8003ed8:	4621      	mov	r1, r4
 8003eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ede:	3b30      	subs	r3, #48	; 0x30
 8003ee0:	2b09      	cmp	r3, #9
 8003ee2:	d94d      	bls.n	8003f80 <_svfiprintf_r+0x17c>
 8003ee4:	b1b0      	cbz	r0, 8003f14 <_svfiprintf_r+0x110>
 8003ee6:	9207      	str	r2, [sp, #28]
 8003ee8:	e014      	b.n	8003f14 <_svfiprintf_r+0x110>
 8003eea:	eba0 0308 	sub.w	r3, r0, r8
 8003eee:	fa09 f303 	lsl.w	r3, r9, r3
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	46a2      	mov	sl, r4
 8003ef6:	9304      	str	r3, [sp, #16]
 8003ef8:	e7d2      	b.n	8003ea0 <_svfiprintf_r+0x9c>
 8003efa:	9b03      	ldr	r3, [sp, #12]
 8003efc:	1d19      	adds	r1, r3, #4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	9103      	str	r1, [sp, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bfbb      	ittet	lt
 8003f06:	425b      	neglt	r3, r3
 8003f08:	f042 0202 	orrlt.w	r2, r2, #2
 8003f0c:	9307      	strge	r3, [sp, #28]
 8003f0e:	9307      	strlt	r3, [sp, #28]
 8003f10:	bfb8      	it	lt
 8003f12:	9204      	strlt	r2, [sp, #16]
 8003f14:	7823      	ldrb	r3, [r4, #0]
 8003f16:	2b2e      	cmp	r3, #46	; 0x2e
 8003f18:	d10c      	bne.n	8003f34 <_svfiprintf_r+0x130>
 8003f1a:	7863      	ldrb	r3, [r4, #1]
 8003f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f1e:	d134      	bne.n	8003f8a <_svfiprintf_r+0x186>
 8003f20:	9b03      	ldr	r3, [sp, #12]
 8003f22:	3402      	adds	r4, #2
 8003f24:	1d1a      	adds	r2, r3, #4
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	9203      	str	r2, [sp, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	bfb8      	it	lt
 8003f2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f32:	9305      	str	r3, [sp, #20]
 8003f34:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003ff0 <_svfiprintf_r+0x1ec>
 8003f38:	2203      	movs	r2, #3
 8003f3a:	4650      	mov	r0, sl
 8003f3c:	7821      	ldrb	r1, [r4, #0]
 8003f3e:	f000 fa1d 	bl	800437c <memchr>
 8003f42:	b138      	cbz	r0, 8003f54 <_svfiprintf_r+0x150>
 8003f44:	2240      	movs	r2, #64	; 0x40
 8003f46:	9b04      	ldr	r3, [sp, #16]
 8003f48:	eba0 000a 	sub.w	r0, r0, sl
 8003f4c:	4082      	lsls	r2, r0
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	3401      	adds	r4, #1
 8003f52:	9304      	str	r3, [sp, #16]
 8003f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f58:	2206      	movs	r2, #6
 8003f5a:	4826      	ldr	r0, [pc, #152]	; (8003ff4 <_svfiprintf_r+0x1f0>)
 8003f5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f60:	f000 fa0c 	bl	800437c <memchr>
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d038      	beq.n	8003fda <_svfiprintf_r+0x1d6>
 8003f68:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <_svfiprintf_r+0x1f4>)
 8003f6a:	bb1b      	cbnz	r3, 8003fb4 <_svfiprintf_r+0x1b0>
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	3307      	adds	r3, #7
 8003f70:	f023 0307 	bic.w	r3, r3, #7
 8003f74:	3308      	adds	r3, #8
 8003f76:	9303      	str	r3, [sp, #12]
 8003f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f7a:	4433      	add	r3, r6
 8003f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7e:	e768      	b.n	8003e52 <_svfiprintf_r+0x4e>
 8003f80:	460c      	mov	r4, r1
 8003f82:	2001      	movs	r0, #1
 8003f84:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f88:	e7a6      	b.n	8003ed8 <_svfiprintf_r+0xd4>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f04f 0c0a 	mov.w	ip, #10
 8003f90:	4619      	mov	r1, r3
 8003f92:	3401      	adds	r4, #1
 8003f94:	9305      	str	r3, [sp, #20]
 8003f96:	4620      	mov	r0, r4
 8003f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f9c:	3a30      	subs	r2, #48	; 0x30
 8003f9e:	2a09      	cmp	r2, #9
 8003fa0:	d903      	bls.n	8003faa <_svfiprintf_r+0x1a6>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0c6      	beq.n	8003f34 <_svfiprintf_r+0x130>
 8003fa6:	9105      	str	r1, [sp, #20]
 8003fa8:	e7c4      	b.n	8003f34 <_svfiprintf_r+0x130>
 8003faa:	4604      	mov	r4, r0
 8003fac:	2301      	movs	r3, #1
 8003fae:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fb2:	e7f0      	b.n	8003f96 <_svfiprintf_r+0x192>
 8003fb4:	ab03      	add	r3, sp, #12
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	462a      	mov	r2, r5
 8003fba:	4638      	mov	r0, r7
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <_svfiprintf_r+0x1f8>)
 8003fbe:	a904      	add	r1, sp, #16
 8003fc0:	f3af 8000 	nop.w
 8003fc4:	1c42      	adds	r2, r0, #1
 8003fc6:	4606      	mov	r6, r0
 8003fc8:	d1d6      	bne.n	8003f78 <_svfiprintf_r+0x174>
 8003fca:	89ab      	ldrh	r3, [r5, #12]
 8003fcc:	065b      	lsls	r3, r3, #25
 8003fce:	f53f af2d 	bmi.w	8003e2c <_svfiprintf_r+0x28>
 8003fd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fd4:	b01d      	add	sp, #116	; 0x74
 8003fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fda:	ab03      	add	r3, sp, #12
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	462a      	mov	r2, r5
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <_svfiprintf_r+0x1f8>)
 8003fe4:	a904      	add	r1, sp, #16
 8003fe6:	f000 f87d 	bl	80040e4 <_printf_i>
 8003fea:	e7eb      	b.n	8003fc4 <_svfiprintf_r+0x1c0>
 8003fec:	08004572 	.word	0x08004572
 8003ff0:	08004578 	.word	0x08004578
 8003ff4:	0800457c 	.word	0x0800457c
 8003ff8:	00000000 	.word	0x00000000
 8003ffc:	08003d51 	.word	0x08003d51

08004000 <_printf_common>:
 8004000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004004:	4616      	mov	r6, r2
 8004006:	4699      	mov	r9, r3
 8004008:	688a      	ldr	r2, [r1, #8]
 800400a:	690b      	ldr	r3, [r1, #16]
 800400c:	4607      	mov	r7, r0
 800400e:	4293      	cmp	r3, r2
 8004010:	bfb8      	it	lt
 8004012:	4613      	movlt	r3, r2
 8004014:	6033      	str	r3, [r6, #0]
 8004016:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800401a:	460c      	mov	r4, r1
 800401c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004020:	b10a      	cbz	r2, 8004026 <_printf_common+0x26>
 8004022:	3301      	adds	r3, #1
 8004024:	6033      	str	r3, [r6, #0]
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	0699      	lsls	r1, r3, #26
 800402a:	bf42      	ittt	mi
 800402c:	6833      	ldrmi	r3, [r6, #0]
 800402e:	3302      	addmi	r3, #2
 8004030:	6033      	strmi	r3, [r6, #0]
 8004032:	6825      	ldr	r5, [r4, #0]
 8004034:	f015 0506 	ands.w	r5, r5, #6
 8004038:	d106      	bne.n	8004048 <_printf_common+0x48>
 800403a:	f104 0a19 	add.w	sl, r4, #25
 800403e:	68e3      	ldr	r3, [r4, #12]
 8004040:	6832      	ldr	r2, [r6, #0]
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	42ab      	cmp	r3, r5
 8004046:	dc2b      	bgt.n	80040a0 <_printf_common+0xa0>
 8004048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800404c:	1e13      	subs	r3, r2, #0
 800404e:	6822      	ldr	r2, [r4, #0]
 8004050:	bf18      	it	ne
 8004052:	2301      	movne	r3, #1
 8004054:	0692      	lsls	r2, r2, #26
 8004056:	d430      	bmi.n	80040ba <_printf_common+0xba>
 8004058:	4649      	mov	r1, r9
 800405a:	4638      	mov	r0, r7
 800405c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004060:	47c0      	blx	r8
 8004062:	3001      	adds	r0, #1
 8004064:	d023      	beq.n	80040ae <_printf_common+0xae>
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	6922      	ldr	r2, [r4, #16]
 800406a:	f003 0306 	and.w	r3, r3, #6
 800406e:	2b04      	cmp	r3, #4
 8004070:	bf14      	ite	ne
 8004072:	2500      	movne	r5, #0
 8004074:	6833      	ldreq	r3, [r6, #0]
 8004076:	f04f 0600 	mov.w	r6, #0
 800407a:	bf08      	it	eq
 800407c:	68e5      	ldreq	r5, [r4, #12]
 800407e:	f104 041a 	add.w	r4, r4, #26
 8004082:	bf08      	it	eq
 8004084:	1aed      	subeq	r5, r5, r3
 8004086:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800408a:	bf08      	it	eq
 800408c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004090:	4293      	cmp	r3, r2
 8004092:	bfc4      	itt	gt
 8004094:	1a9b      	subgt	r3, r3, r2
 8004096:	18ed      	addgt	r5, r5, r3
 8004098:	42b5      	cmp	r5, r6
 800409a:	d11a      	bne.n	80040d2 <_printf_common+0xd2>
 800409c:	2000      	movs	r0, #0
 800409e:	e008      	b.n	80040b2 <_printf_common+0xb2>
 80040a0:	2301      	movs	r3, #1
 80040a2:	4652      	mov	r2, sl
 80040a4:	4649      	mov	r1, r9
 80040a6:	4638      	mov	r0, r7
 80040a8:	47c0      	blx	r8
 80040aa:	3001      	adds	r0, #1
 80040ac:	d103      	bne.n	80040b6 <_printf_common+0xb6>
 80040ae:	f04f 30ff 	mov.w	r0, #4294967295
 80040b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b6:	3501      	adds	r5, #1
 80040b8:	e7c1      	b.n	800403e <_printf_common+0x3e>
 80040ba:	2030      	movs	r0, #48	; 0x30
 80040bc:	18e1      	adds	r1, r4, r3
 80040be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040c8:	4422      	add	r2, r4
 80040ca:	3302      	adds	r3, #2
 80040cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040d0:	e7c2      	b.n	8004058 <_printf_common+0x58>
 80040d2:	2301      	movs	r3, #1
 80040d4:	4622      	mov	r2, r4
 80040d6:	4649      	mov	r1, r9
 80040d8:	4638      	mov	r0, r7
 80040da:	47c0      	blx	r8
 80040dc:	3001      	adds	r0, #1
 80040de:	d0e6      	beq.n	80040ae <_printf_common+0xae>
 80040e0:	3601      	adds	r6, #1
 80040e2:	e7d9      	b.n	8004098 <_printf_common+0x98>

080040e4 <_printf_i>:
 80040e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040e8:	7e0f      	ldrb	r7, [r1, #24]
 80040ea:	4691      	mov	r9, r2
 80040ec:	2f78      	cmp	r7, #120	; 0x78
 80040ee:	4680      	mov	r8, r0
 80040f0:	460c      	mov	r4, r1
 80040f2:	469a      	mov	sl, r3
 80040f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040fa:	d807      	bhi.n	800410c <_printf_i+0x28>
 80040fc:	2f62      	cmp	r7, #98	; 0x62
 80040fe:	d80a      	bhi.n	8004116 <_printf_i+0x32>
 8004100:	2f00      	cmp	r7, #0
 8004102:	f000 80d5 	beq.w	80042b0 <_printf_i+0x1cc>
 8004106:	2f58      	cmp	r7, #88	; 0x58
 8004108:	f000 80c1 	beq.w	800428e <_printf_i+0x1aa>
 800410c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004114:	e03a      	b.n	800418c <_printf_i+0xa8>
 8004116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800411a:	2b15      	cmp	r3, #21
 800411c:	d8f6      	bhi.n	800410c <_printf_i+0x28>
 800411e:	a101      	add	r1, pc, #4	; (adr r1, 8004124 <_printf_i+0x40>)
 8004120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004124:	0800417d 	.word	0x0800417d
 8004128:	08004191 	.word	0x08004191
 800412c:	0800410d 	.word	0x0800410d
 8004130:	0800410d 	.word	0x0800410d
 8004134:	0800410d 	.word	0x0800410d
 8004138:	0800410d 	.word	0x0800410d
 800413c:	08004191 	.word	0x08004191
 8004140:	0800410d 	.word	0x0800410d
 8004144:	0800410d 	.word	0x0800410d
 8004148:	0800410d 	.word	0x0800410d
 800414c:	0800410d 	.word	0x0800410d
 8004150:	08004297 	.word	0x08004297
 8004154:	080041bd 	.word	0x080041bd
 8004158:	08004251 	.word	0x08004251
 800415c:	0800410d 	.word	0x0800410d
 8004160:	0800410d 	.word	0x0800410d
 8004164:	080042b9 	.word	0x080042b9
 8004168:	0800410d 	.word	0x0800410d
 800416c:	080041bd 	.word	0x080041bd
 8004170:	0800410d 	.word	0x0800410d
 8004174:	0800410d 	.word	0x0800410d
 8004178:	08004259 	.word	0x08004259
 800417c:	682b      	ldr	r3, [r5, #0]
 800417e:	1d1a      	adds	r2, r3, #4
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	602a      	str	r2, [r5, #0]
 8004184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800418c:	2301      	movs	r3, #1
 800418e:	e0a0      	b.n	80042d2 <_printf_i+0x1ee>
 8004190:	6820      	ldr	r0, [r4, #0]
 8004192:	682b      	ldr	r3, [r5, #0]
 8004194:	0607      	lsls	r7, r0, #24
 8004196:	f103 0104 	add.w	r1, r3, #4
 800419a:	6029      	str	r1, [r5, #0]
 800419c:	d501      	bpl.n	80041a2 <_printf_i+0xbe>
 800419e:	681e      	ldr	r6, [r3, #0]
 80041a0:	e003      	b.n	80041aa <_printf_i+0xc6>
 80041a2:	0646      	lsls	r6, r0, #25
 80041a4:	d5fb      	bpl.n	800419e <_printf_i+0xba>
 80041a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041aa:	2e00      	cmp	r6, #0
 80041ac:	da03      	bge.n	80041b6 <_printf_i+0xd2>
 80041ae:	232d      	movs	r3, #45	; 0x2d
 80041b0:	4276      	negs	r6, r6
 80041b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b6:	230a      	movs	r3, #10
 80041b8:	4859      	ldr	r0, [pc, #356]	; (8004320 <_printf_i+0x23c>)
 80041ba:	e012      	b.n	80041e2 <_printf_i+0xfe>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	6820      	ldr	r0, [r4, #0]
 80041c0:	1d19      	adds	r1, r3, #4
 80041c2:	6029      	str	r1, [r5, #0]
 80041c4:	0605      	lsls	r5, r0, #24
 80041c6:	d501      	bpl.n	80041cc <_printf_i+0xe8>
 80041c8:	681e      	ldr	r6, [r3, #0]
 80041ca:	e002      	b.n	80041d2 <_printf_i+0xee>
 80041cc:	0641      	lsls	r1, r0, #25
 80041ce:	d5fb      	bpl.n	80041c8 <_printf_i+0xe4>
 80041d0:	881e      	ldrh	r6, [r3, #0]
 80041d2:	2f6f      	cmp	r7, #111	; 0x6f
 80041d4:	bf0c      	ite	eq
 80041d6:	2308      	moveq	r3, #8
 80041d8:	230a      	movne	r3, #10
 80041da:	4851      	ldr	r0, [pc, #324]	; (8004320 <_printf_i+0x23c>)
 80041dc:	2100      	movs	r1, #0
 80041de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041e2:	6865      	ldr	r5, [r4, #4]
 80041e4:	2d00      	cmp	r5, #0
 80041e6:	bfa8      	it	ge
 80041e8:	6821      	ldrge	r1, [r4, #0]
 80041ea:	60a5      	str	r5, [r4, #8]
 80041ec:	bfa4      	itt	ge
 80041ee:	f021 0104 	bicge.w	r1, r1, #4
 80041f2:	6021      	strge	r1, [r4, #0]
 80041f4:	b90e      	cbnz	r6, 80041fa <_printf_i+0x116>
 80041f6:	2d00      	cmp	r5, #0
 80041f8:	d04b      	beq.n	8004292 <_printf_i+0x1ae>
 80041fa:	4615      	mov	r5, r2
 80041fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8004200:	fb03 6711 	mls	r7, r3, r1, r6
 8004204:	5dc7      	ldrb	r7, [r0, r7]
 8004206:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800420a:	4637      	mov	r7, r6
 800420c:	42bb      	cmp	r3, r7
 800420e:	460e      	mov	r6, r1
 8004210:	d9f4      	bls.n	80041fc <_printf_i+0x118>
 8004212:	2b08      	cmp	r3, #8
 8004214:	d10b      	bne.n	800422e <_printf_i+0x14a>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	07de      	lsls	r6, r3, #31
 800421a:	d508      	bpl.n	800422e <_printf_i+0x14a>
 800421c:	6923      	ldr	r3, [r4, #16]
 800421e:	6861      	ldr	r1, [r4, #4]
 8004220:	4299      	cmp	r1, r3
 8004222:	bfde      	ittt	le
 8004224:	2330      	movle	r3, #48	; 0x30
 8004226:	f805 3c01 	strble.w	r3, [r5, #-1]
 800422a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800422e:	1b52      	subs	r2, r2, r5
 8004230:	6122      	str	r2, [r4, #16]
 8004232:	464b      	mov	r3, r9
 8004234:	4621      	mov	r1, r4
 8004236:	4640      	mov	r0, r8
 8004238:	f8cd a000 	str.w	sl, [sp]
 800423c:	aa03      	add	r2, sp, #12
 800423e:	f7ff fedf 	bl	8004000 <_printf_common>
 8004242:	3001      	adds	r0, #1
 8004244:	d14a      	bne.n	80042dc <_printf_i+0x1f8>
 8004246:	f04f 30ff 	mov.w	r0, #4294967295
 800424a:	b004      	add	sp, #16
 800424c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	f043 0320 	orr.w	r3, r3, #32
 8004256:	6023      	str	r3, [r4, #0]
 8004258:	2778      	movs	r7, #120	; 0x78
 800425a:	4832      	ldr	r0, [pc, #200]	; (8004324 <_printf_i+0x240>)
 800425c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	6829      	ldr	r1, [r5, #0]
 8004264:	061f      	lsls	r7, r3, #24
 8004266:	f851 6b04 	ldr.w	r6, [r1], #4
 800426a:	d402      	bmi.n	8004272 <_printf_i+0x18e>
 800426c:	065f      	lsls	r7, r3, #25
 800426e:	bf48      	it	mi
 8004270:	b2b6      	uxthmi	r6, r6
 8004272:	07df      	lsls	r7, r3, #31
 8004274:	bf48      	it	mi
 8004276:	f043 0320 	orrmi.w	r3, r3, #32
 800427a:	6029      	str	r1, [r5, #0]
 800427c:	bf48      	it	mi
 800427e:	6023      	strmi	r3, [r4, #0]
 8004280:	b91e      	cbnz	r6, 800428a <_printf_i+0x1a6>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	f023 0320 	bic.w	r3, r3, #32
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	2310      	movs	r3, #16
 800428c:	e7a6      	b.n	80041dc <_printf_i+0xf8>
 800428e:	4824      	ldr	r0, [pc, #144]	; (8004320 <_printf_i+0x23c>)
 8004290:	e7e4      	b.n	800425c <_printf_i+0x178>
 8004292:	4615      	mov	r5, r2
 8004294:	e7bd      	b.n	8004212 <_printf_i+0x12e>
 8004296:	682b      	ldr	r3, [r5, #0]
 8004298:	6826      	ldr	r6, [r4, #0]
 800429a:	1d18      	adds	r0, r3, #4
 800429c:	6961      	ldr	r1, [r4, #20]
 800429e:	6028      	str	r0, [r5, #0]
 80042a0:	0635      	lsls	r5, r6, #24
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	d501      	bpl.n	80042aa <_printf_i+0x1c6>
 80042a6:	6019      	str	r1, [r3, #0]
 80042a8:	e002      	b.n	80042b0 <_printf_i+0x1cc>
 80042aa:	0670      	lsls	r0, r6, #25
 80042ac:	d5fb      	bpl.n	80042a6 <_printf_i+0x1c2>
 80042ae:	8019      	strh	r1, [r3, #0]
 80042b0:	2300      	movs	r3, #0
 80042b2:	4615      	mov	r5, r2
 80042b4:	6123      	str	r3, [r4, #16]
 80042b6:	e7bc      	b.n	8004232 <_printf_i+0x14e>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	2100      	movs	r1, #0
 80042bc:	1d1a      	adds	r2, r3, #4
 80042be:	602a      	str	r2, [r5, #0]
 80042c0:	681d      	ldr	r5, [r3, #0]
 80042c2:	6862      	ldr	r2, [r4, #4]
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 f859 	bl	800437c <memchr>
 80042ca:	b108      	cbz	r0, 80042d0 <_printf_i+0x1ec>
 80042cc:	1b40      	subs	r0, r0, r5
 80042ce:	6060      	str	r0, [r4, #4]
 80042d0:	6863      	ldr	r3, [r4, #4]
 80042d2:	6123      	str	r3, [r4, #16]
 80042d4:	2300      	movs	r3, #0
 80042d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042da:	e7aa      	b.n	8004232 <_printf_i+0x14e>
 80042dc:	462a      	mov	r2, r5
 80042de:	4649      	mov	r1, r9
 80042e0:	4640      	mov	r0, r8
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	47d0      	blx	sl
 80042e6:	3001      	adds	r0, #1
 80042e8:	d0ad      	beq.n	8004246 <_printf_i+0x162>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	079b      	lsls	r3, r3, #30
 80042ee:	d413      	bmi.n	8004318 <_printf_i+0x234>
 80042f0:	68e0      	ldr	r0, [r4, #12]
 80042f2:	9b03      	ldr	r3, [sp, #12]
 80042f4:	4298      	cmp	r0, r3
 80042f6:	bfb8      	it	lt
 80042f8:	4618      	movlt	r0, r3
 80042fa:	e7a6      	b.n	800424a <_printf_i+0x166>
 80042fc:	2301      	movs	r3, #1
 80042fe:	4632      	mov	r2, r6
 8004300:	4649      	mov	r1, r9
 8004302:	4640      	mov	r0, r8
 8004304:	47d0      	blx	sl
 8004306:	3001      	adds	r0, #1
 8004308:	d09d      	beq.n	8004246 <_printf_i+0x162>
 800430a:	3501      	adds	r5, #1
 800430c:	68e3      	ldr	r3, [r4, #12]
 800430e:	9903      	ldr	r1, [sp, #12]
 8004310:	1a5b      	subs	r3, r3, r1
 8004312:	42ab      	cmp	r3, r5
 8004314:	dcf2      	bgt.n	80042fc <_printf_i+0x218>
 8004316:	e7eb      	b.n	80042f0 <_printf_i+0x20c>
 8004318:	2500      	movs	r5, #0
 800431a:	f104 0619 	add.w	r6, r4, #25
 800431e:	e7f5      	b.n	800430c <_printf_i+0x228>
 8004320:	08004583 	.word	0x08004583
 8004324:	08004594 	.word	0x08004594

08004328 <memmove>:
 8004328:	4288      	cmp	r0, r1
 800432a:	b510      	push	{r4, lr}
 800432c:	eb01 0402 	add.w	r4, r1, r2
 8004330:	d902      	bls.n	8004338 <memmove+0x10>
 8004332:	4284      	cmp	r4, r0
 8004334:	4623      	mov	r3, r4
 8004336:	d807      	bhi.n	8004348 <memmove+0x20>
 8004338:	1e43      	subs	r3, r0, #1
 800433a:	42a1      	cmp	r1, r4
 800433c:	d008      	beq.n	8004350 <memmove+0x28>
 800433e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004342:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004346:	e7f8      	b.n	800433a <memmove+0x12>
 8004348:	4601      	mov	r1, r0
 800434a:	4402      	add	r2, r0
 800434c:	428a      	cmp	r2, r1
 800434e:	d100      	bne.n	8004352 <memmove+0x2a>
 8004350:	bd10      	pop	{r4, pc}
 8004352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800435a:	e7f7      	b.n	800434c <memmove+0x24>

0800435c <_sbrk_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	2300      	movs	r3, #0
 8004360:	4d05      	ldr	r5, [pc, #20]	; (8004378 <_sbrk_r+0x1c>)
 8004362:	4604      	mov	r4, r0
 8004364:	4608      	mov	r0, r1
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	f7fc fefe 	bl	8001168 <_sbrk>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_sbrk_r+0x1a>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	b103      	cbz	r3, 8004376 <_sbrk_r+0x1a>
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	2000059c 	.word	0x2000059c

0800437c <memchr>:
 800437c:	4603      	mov	r3, r0
 800437e:	b510      	push	{r4, lr}
 8004380:	b2c9      	uxtb	r1, r1
 8004382:	4402      	add	r2, r0
 8004384:	4293      	cmp	r3, r2
 8004386:	4618      	mov	r0, r3
 8004388:	d101      	bne.n	800438e <memchr+0x12>
 800438a:	2000      	movs	r0, #0
 800438c:	e003      	b.n	8004396 <memchr+0x1a>
 800438e:	7804      	ldrb	r4, [r0, #0]
 8004390:	3301      	adds	r3, #1
 8004392:	428c      	cmp	r4, r1
 8004394:	d1f6      	bne.n	8004384 <memchr+0x8>
 8004396:	bd10      	pop	{r4, pc}

08004398 <memcpy>:
 8004398:	440a      	add	r2, r1
 800439a:	4291      	cmp	r1, r2
 800439c:	f100 33ff 	add.w	r3, r0, #4294967295
 80043a0:	d100      	bne.n	80043a4 <memcpy+0xc>
 80043a2:	4770      	bx	lr
 80043a4:	b510      	push	{r4, lr}
 80043a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043aa:	4291      	cmp	r1, r2
 80043ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043b0:	d1f9      	bne.n	80043a6 <memcpy+0xe>
 80043b2:	bd10      	pop	{r4, pc}

080043b4 <_realloc_r>:
 80043b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b8:	4680      	mov	r8, r0
 80043ba:	4614      	mov	r4, r2
 80043bc:	460e      	mov	r6, r1
 80043be:	b921      	cbnz	r1, 80043ca <_realloc_r+0x16>
 80043c0:	4611      	mov	r1, r2
 80043c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043c6:	f7ff bc37 	b.w	8003c38 <_malloc_r>
 80043ca:	b92a      	cbnz	r2, 80043d8 <_realloc_r+0x24>
 80043cc:	f7ff fbcc 	bl	8003b68 <_free_r>
 80043d0:	4625      	mov	r5, r4
 80043d2:	4628      	mov	r0, r5
 80043d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d8:	f000 f81b 	bl	8004412 <_malloc_usable_size_r>
 80043dc:	4284      	cmp	r4, r0
 80043de:	4607      	mov	r7, r0
 80043e0:	d802      	bhi.n	80043e8 <_realloc_r+0x34>
 80043e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043e6:	d812      	bhi.n	800440e <_realloc_r+0x5a>
 80043e8:	4621      	mov	r1, r4
 80043ea:	4640      	mov	r0, r8
 80043ec:	f7ff fc24 	bl	8003c38 <_malloc_r>
 80043f0:	4605      	mov	r5, r0
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d0ed      	beq.n	80043d2 <_realloc_r+0x1e>
 80043f6:	42bc      	cmp	r4, r7
 80043f8:	4622      	mov	r2, r4
 80043fa:	4631      	mov	r1, r6
 80043fc:	bf28      	it	cs
 80043fe:	463a      	movcs	r2, r7
 8004400:	f7ff ffca 	bl	8004398 <memcpy>
 8004404:	4631      	mov	r1, r6
 8004406:	4640      	mov	r0, r8
 8004408:	f7ff fbae 	bl	8003b68 <_free_r>
 800440c:	e7e1      	b.n	80043d2 <_realloc_r+0x1e>
 800440e:	4635      	mov	r5, r6
 8004410:	e7df      	b.n	80043d2 <_realloc_r+0x1e>

08004412 <_malloc_usable_size_r>:
 8004412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004416:	1f18      	subs	r0, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	bfbc      	itt	lt
 800441c:	580b      	ldrlt	r3, [r1, r0]
 800441e:	18c0      	addlt	r0, r0, r3
 8004420:	4770      	bx	lr
	...

08004424 <_init>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	bf00      	nop
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr

08004430 <_fini>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	bf00      	nop
 8004434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004436:	bc08      	pop	{r3}
 8004438:	469e      	mov	lr, r3
 800443a:	4770      	bx	lr
