
Carga_DC_desarrollo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b924  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  0800ba30  0800ba30  0001ba30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd9c  0800bd9c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd9c  0800bd9c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd9c  0800bd9c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd9c  0800bd9c  0001bd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800bda4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001574  200001ec  0800bf90  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001760  0800bf90  00021760  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001836c  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f10  00000000  00000000  000385c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  0003c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011b6  00000000  00000000  0003dbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bce7  00000000  00000000  0003ed8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d3d1  00000000  00000000  0005aa75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009680b  00000000  00000000  00077e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006654  00000000  00000000  0010e654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00114ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001ec 	.word	0x200001ec
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ba18 	.word	0x0800ba18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f0 	.word	0x200001f0
 8000148:	0800ba18 	.word	0x0800ba18

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <LCD_I2C_cmd>:
#define SLAVE_ADDRESS_LCD  0x4e	//0x4E // change this according to ur setup 0x7e

/* Envia comando por LCD ---------------------------------------*/

void LCD_I2C_cmd(char cmd)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af02      	add	r7, sp, #8
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f023 030f 	bic.w	r3, r3, #15
 800016c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	011b      	lsls	r3, r3, #4
 8000172:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	f043 030c 	orr.w	r3, r3, #12
 800017a:	b2db      	uxtb	r3, r3
 800017c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800017e:	7bfb      	ldrb	r3, [r7, #15]
 8000180:	f043 0308 	orr.w	r3, r3, #8
 8000184:	b2db      	uxtb	r3, r3
 8000186:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000188:	7bbb      	ldrb	r3, [r7, #14]
 800018a:	f043 030c 	orr.w	r3, r3, #12
 800018e:	b2db      	uxtb	r3, r3
 8000190:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000192:	7bbb      	ldrb	r3, [r7, #14]
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	b2db      	uxtb	r3, r3
 800019a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800019c:	f107 0208 	add.w	r2, r7, #8
 80001a0:	2364      	movs	r3, #100	; 0x64
 80001a2:	9300      	str	r3, [sp, #0]
 80001a4:	2304      	movs	r3, #4
 80001a6:	214e      	movs	r1, #78	; 0x4e
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <LCD_I2C_cmd+0x60>)
 80001aa:	f002 ff07 	bl	8002fbc <HAL_I2C_Master_Transmit>
	//while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
	HAL_Delay(1);
 80001ae:	2001      	movs	r0, #1
 80001b0:	f001 fdf6 	bl	8001da0 <HAL_Delay>
}
 80001b4:	bf00      	nop
 80001b6:	3710      	adds	r7, #16
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	2000027c 	.word	0x2000027c

080001c0 <LCD_I2C_char>:

/* Envia dato por LCD ------------------------------------------*/

void LCD_I2C_char(char data)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	f023 030f 	bic.w	r3, r3, #15
 80001d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	011b      	lsls	r3, r3, #4
 80001d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80001ec:	7bbb      	ldrb	r3, [r7, #14]
 80001ee:	f043 030d 	orr.w	r3, r3, #13
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80001f6:	7bbb      	ldrb	r3, [r7, #14]
 80001f8:	f043 0309 	orr.w	r3, r3, #9
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000200:	f107 0208 	add.w	r2, r7, #8
 8000204:	2364      	movs	r3, #100	; 0x64
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2304      	movs	r3, #4
 800020a:	214e      	movs	r1, #78	; 0x4e
 800020c:	4807      	ldr	r0, [pc, #28]	; (800022c <LCD_I2C_char+0x6c>)
 800020e:	f002 fed5 	bl	8002fbc <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000212:	bf00      	nop
 8000214:	4805      	ldr	r0, [pc, #20]	; (800022c <LCD_I2C_char+0x6c>)
 8000216:	f002 ffcf 	bl	80031b8 <HAL_I2C_GetState>
 800021a:	4603      	mov	r3, r0
 800021c:	2b20      	cmp	r3, #32
 800021e:	d1f9      	bne.n	8000214 <LCD_I2C_char+0x54>
		//HAL_Delay(1);
}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3710      	adds	r7, #16
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	2000027c 	.word	0x2000027c

08000230 <LCD_I2C_init>:

/* Inicializa LCD -----------------------------------------------*/

void LCD_I2C_init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	LCD_I2C_cmd(0x02);
 8000234:	2002      	movs	r0, #2
 8000236:	f7ff ff91 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x28);
 800023a:	2028      	movs	r0, #40	; 0x28
 800023c:	f7ff ff8e 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x0c);
 8000240:	200c      	movs	r0, #12
 8000242:	f7ff ff8b 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x80);
 8000246:	2080      	movs	r0, #128	; 0x80
 8000248:	f7ff ff88 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_CLEAR);
 800024c:	2001      	movs	r0, #1
 800024e:	f7ff ff85 	bl	800015c <LCD_I2C_cmd>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}

08000256 <LCD_I2C_write_text>:

/* Envia cadena de caracteres al LCD -----------------------------*/

void LCD_I2C_write_text(char *str)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	b082      	sub	sp, #8
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
	while (*str) LCD_I2C_char(*str++);
 800025e:	e006      	b.n	800026e <LCD_I2C_write_text+0x18>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	1c5a      	adds	r2, r3, #1
 8000264:	607a      	str	r2, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ffa9 	bl	80001c0 <LCD_I2C_char>
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d1f4      	bne.n	8000260 <LCD_I2C_write_text+0xa>
}
 8000276:	bf00      	nop
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <keypad_init>:
GPIO_TypeDef* COL_3_Port = GPIOB;
GPIO_TypeDef* COL_4_Port = GPIOB;


void keypad_init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
  // Configure GPIO pins for keypad matrix
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	463b      	mov	r3, r7
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = ROW_1_Pin | ROW_2_Pin | ROW_3_Pin | ROW_4_Pin;
 8000292:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000296:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000298:	2300      	movs	r3, #0
 800029a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800029c:	2301      	movs	r3, #1
 800029e:	60bb      	str	r3, [r7, #8]
  	  HAL_GPIO_Init(ROW_1_Port, &GPIO_InitStruct);
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <keypad_init+0xa8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	463a      	mov	r2, r7
 80002a6:	4611      	mov	r1, r2
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 fb5f 	bl	800296c <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_2_Port, &GPIO_InitStruct);
 80002ae:	4b1f      	ldr	r3, [pc, #124]	; (800032c <keypad_init+0xac>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	463a      	mov	r2, r7
 80002b4:	4611      	mov	r1, r2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fb58 	bl	800296c <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_3_Port, &GPIO_InitStruct);
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <keypad_init+0xb0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	463a      	mov	r2, r7
 80002c2:	4611      	mov	r1, r2
 80002c4:	4618      	mov	r0, r3
 80002c6:	f002 fb51 	bl	800296c <HAL_GPIO_Init>
	  HAL_GPIO_Init(ROW_4_Port, &GPIO_InitStruct);
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <keypad_init+0xb4>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	463a      	mov	r2, r7
 80002d0:	4611      	mov	r1, r2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fb4a 	bl	800296c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = COL_1_Pin | COL_2_Pin | COL_3_Pin | COL_4_Pin;
 80002d8:	f640 4303 	movw	r3, #3075	; 0xc03
 80002dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	2301      	movs	r3, #1
 80002e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e2:	2302      	movs	r3, #2
 80002e4:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(COL_1_Port, &GPIO_InitStruct);
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <keypad_init+0xb8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	463a      	mov	r2, r7
 80002ec:	4611      	mov	r1, r2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 fb3c 	bl	800296c <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_2_Port, &GPIO_InitStruct);
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <keypad_init+0xbc>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	463a      	mov	r2, r7
 80002fa:	4611      	mov	r1, r2
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fb35 	bl	800296c <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_3_Port, &GPIO_InitStruct);
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <keypad_init+0xc0>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	463a      	mov	r2, r7
 8000308:	4611      	mov	r1, r2
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fb2e 	bl	800296c <HAL_GPIO_Init>
	  HAL_GPIO_Init(COL_4_Port, &GPIO_InitStruct);
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <keypad_init+0xc4>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	463a      	mov	r2, r7
 8000316:	4611      	mov	r1, r2
 8000318:	4618      	mov	r0, r3
 800031a:	f002 fb27 	bl	800296c <HAL_GPIO_Init>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000000 	.word	0x20000000
 800032c:	20000004 	.word	0x20000004
 8000330:	20000008 	.word	0x20000008
 8000334:	2000000c 	.word	0x2000000c
 8000338:	20000010 	.word	0x20000010
 800033c:	20000014 	.word	0x20000014
 8000340:	20000018 	.word	0x20000018
 8000344:	2000001c 	.word	0x2000001c

08000348 <keypad_scan>:
char keypad_scan(void)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b087      	sub	sp, #28
 800034c:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'C'},
 800034e:	4b6f      	ldr	r3, [pc, #444]	; (800050c <keypad_scan+0x1c4>)
 8000350:	1d3c      	adds	r4, r7, #4
 8000352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'V'},
                     {'7', '8', '9', 'R'},
                     {'D', '0', 'K', 'P'}};

  for(int i = 0; i < 4; i++)
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	e0cc      	b.n	80004f8 <keypad_scan+0x1b0>
  {
    // Set current column as output and low
    switch(i)
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	2b03      	cmp	r3, #3
 8000362:	f200 8087 	bhi.w	8000474 <keypad_scan+0x12c>
 8000366:	a201      	add	r2, pc, #4	; (adr r2, 800036c <keypad_scan+0x24>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	0800037d 	.word	0x0800037d
 8000370:	080003bb 	.word	0x080003bb
 8000374:	080003f9 	.word	0x080003f9
 8000378:	08000437 	.word	0x08000437
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 800037c:	4b64      	ldr	r3, [pc, #400]	; (8000510 <keypad_scan+0x1c8>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	4618      	mov	r0, r3
 8000386:	f002 fc8c 	bl	8002ca2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 800038a:	4b62      	ldr	r3, [pc, #392]	; (8000514 <keypad_scan+0x1cc>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2201      	movs	r2, #1
 8000390:	2102      	movs	r1, #2
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fc85 	bl	8002ca2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8000398:	4b5f      	ldr	r3, [pc, #380]	; (8000518 <keypad_scan+0x1d0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fc7d 	bl	8002ca2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80003a8:	4b5c      	ldr	r3, [pc, #368]	; (800051c <keypad_scan+0x1d4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fc75 	bl	8002ca2 <HAL_GPIO_WritePin>
        break;
 80003b8:	e05c      	b.n	8000474 <keypad_scan+0x12c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003ba:	4b55      	ldr	r3, [pc, #340]	; (8000510 <keypad_scan+0x1c8>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2201      	movs	r2, #1
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fc6d 	bl	8002ca2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 80003c8:	4b52      	ldr	r3, [pc, #328]	; (8000514 <keypad_scan+0x1cc>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2200      	movs	r2, #0
 80003ce:	2102      	movs	r1, #2
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 fc66 	bl	8002ca2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80003d6:	4b50      	ldr	r3, [pc, #320]	; (8000518 <keypad_scan+0x1d0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e0:	4618      	mov	r0, r3
 80003e2:	f002 fc5e 	bl	8002ca2 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80003e6:	4b4d      	ldr	r3, [pc, #308]	; (800051c <keypad_scan+0x1d4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f0:	4618      	mov	r0, r3
 80003f2:	f002 fc56 	bl	8002ca2 <HAL_GPIO_WritePin>
        break;
 80003f6:	e03d      	b.n	8000474 <keypad_scan+0x12c>

      case 2:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80003f8:	4b45      	ldr	r3, [pc, #276]	; (8000510 <keypad_scan+0x1c8>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2201      	movs	r2, #1
 80003fe:	2101      	movs	r1, #1
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fc4e 	bl	8002ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8000406:	4b43      	ldr	r3, [pc, #268]	; (8000514 <keypad_scan+0x1cc>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2201      	movs	r2, #1
 800040c:	2102      	movs	r1, #2
 800040e:	4618      	mov	r0, r3
 8000410:	f002 fc47 	bl	8002ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 8000414:	4b40      	ldr	r3, [pc, #256]	; (8000518 <keypad_scan+0x1d0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041e:	4618      	mov	r0, r3
 8000420:	f002 fc3f 	bl	8002ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8000424:	4b3d      	ldr	r3, [pc, #244]	; (800051c <keypad_scan+0x1d4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2201      	movs	r2, #1
 800042a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800042e:	4618      	mov	r0, r3
 8000430:	f002 fc37 	bl	8002ca2 <HAL_GPIO_WritePin>
		break;
 8000434:	e01e      	b.n	8000474 <keypad_scan+0x12c>

	  case 3:
		HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8000436:	4b36      	ldr	r3, [pc, #216]	; (8000510 <keypad_scan+0x1c8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2201      	movs	r2, #1
 800043c:	2101      	movs	r1, #1
 800043e:	4618      	mov	r0, r3
 8000440:	f002 fc2f 	bl	8002ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8000444:	4b33      	ldr	r3, [pc, #204]	; (8000514 <keypad_scan+0x1cc>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2201      	movs	r2, #1
 800044a:	2102      	movs	r1, #2
 800044c:	4618      	mov	r0, r3
 800044e:	f002 fc28 	bl	8002ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8000452:	4b31      	ldr	r3, [pc, #196]	; (8000518 <keypad_scan+0x1d0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2201      	movs	r2, #1
 8000458:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045c:	4618      	mov	r0, r3
 800045e:	f002 fc20 	bl	8002ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 8000462:	4b2e      	ldr	r3, [pc, #184]	; (800051c <keypad_scan+0x1d4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800046c:	4618      	mov	r0, r3
 800046e:	f002 fc18 	bl	8002ca2 <HAL_GPIO_WritePin>
		break;
 8000472:	bf00      	nop
    }
// Read current rows
	if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 8000474:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <keypad_scan+0x1d8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800047c:	4618      	mov	r0, r3
 800047e:	f002 fbf9 	bl	8002c74 <HAL_GPIO_ReadPin>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d104      	bne.n	8000492 <keypad_scan+0x14a>
	  return keys[0][i];
 8000488:	1d3a      	adds	r2, r7, #4
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	4413      	add	r3, r2
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	e037      	b.n	8000502 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 8000492:	4b24      	ldr	r3, [pc, #144]	; (8000524 <keypad_scan+0x1dc>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049a:	4618      	mov	r0, r3
 800049c:	f002 fbea 	bl	8002c74 <HAL_GPIO_ReadPin>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d105      	bne.n	80004b2 <keypad_scan+0x16a>
	  return keys[1][i];
 80004a6:	f107 0208 	add.w	r2, r7, #8
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	4413      	add	r3, r2
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	e027      	b.n	8000502 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <keypad_scan+0x1e0>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 fbda 	bl	8002c74 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d105      	bne.n	80004d2 <keypad_scan+0x18a>
	  return keys[2][i];
 80004c6:	f107 020c 	add.w	r2, r7, #12
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	4413      	add	r3, r2
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	e017      	b.n	8000502 <keypad_scan+0x1ba>
	if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <keypad_scan+0x1e4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fbca 	bl	8002c74 <HAL_GPIO_ReadPin>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d105      	bne.n	80004f2 <keypad_scan+0x1aa>
	  return keys[3][i];
 80004e6:	f107 0210 	add.w	r2, r7, #16
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	4413      	add	r3, r2
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	e007      	b.n	8000502 <keypad_scan+0x1ba>
  for(int i = 0; i < 4; i++)
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	3301      	adds	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	f77f af2f 	ble.w	800035e <keypad_scan+0x16>
  }
return 0; // No key pressed
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	371c      	adds	r7, #28
 8000506:	46bd      	mov	sp, r7
 8000508:	bd90      	pop	{r4, r7, pc}
 800050a:	bf00      	nop
 800050c:	0800ba30 	.word	0x0800ba30
 8000510:	20000010 	.word	0x20000010
 8000514:	20000014 	.word	0x20000014
 8000518:	20000018 	.word	0x20000018
 800051c:	2000001c 	.word	0x2000001c
 8000520:	20000000 	.word	0x20000000
 8000524:	20000004 	.word	0x20000004
 8000528:	20000008 	.word	0x20000008
 800052c:	2000000c 	.word	0x2000000c

08000530 <tipo_dato>:


uint8_t tipo_dato(char input){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if(input=='C'||input=='R'||input=='P')
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b43      	cmp	r3, #67	; 0x43
 800053e:	d005      	beq.n	800054c <tipo_dato+0x1c>
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b52      	cmp	r3, #82	; 0x52
 8000544:	d002      	beq.n	800054c <tipo_dato+0x1c>
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b50      	cmp	r3, #80	; 0x50
 800054a:	d101      	bne.n	8000550 <tipo_dato+0x20>
		return 2;
 800054c:	2302      	movs	r3, #2
 800054e:	e012      	b.n	8000576 <tipo_dato+0x46>
	if(input=='V')
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	2b56      	cmp	r3, #86	; 0x56
 8000554:	d101      	bne.n	800055a <tipo_dato+0x2a>
		return 3;
 8000556:	2303      	movs	r3, #3
 8000558:	e00d      	b.n	8000576 <tipo_dato+0x46>
	if(input=='D')
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b44      	cmp	r3, #68	; 0x44
 800055e:	d101      	bne.n	8000564 <tipo_dato+0x34>
		return 4;
 8000560:	2304      	movs	r3, #4
 8000562:	e008      	b.n	8000576 <tipo_dato+0x46>
	if(input>='0'&&input<='9')
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b2f      	cmp	r3, #47	; 0x2f
 8000568:	d904      	bls.n	8000574 <tipo_dato+0x44>
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b39      	cmp	r3, #57	; 0x39
 800056e:	d801      	bhi.n	8000574 <tipo_dato+0x44>
		return 1;
 8000570:	2301      	movs	r3, #1
 8000572:	e000      	b.n	8000576 <tipo_dato+0x46>
	else
		return 0;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f001 fba9 	bl	8001cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f959 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fb37 	bl	8000c00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000592:	f000 fb1f 	bl	8000bd4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000596:	f000 f9b1 	bl	80008fc <MX_ADC1_Init>
  MX_I2C1_Init();
 800059a:	f000 fa19 	bl	80009d0 <MX_I2C1_Init>
  MX_TIM2_Init();
 800059e:	f000 fa7d 	bl	8000a9c <MX_TIM2_Init>
  MX_SPI1_Init();
 80005a2:	f000 fa43 	bl	8000a2c <MX_SPI1_Init>
  MX_TIM3_Init();
 80005a6:	f000 fac7 	bl	8000b38 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80005aa:	f00a f811 	bl	800a5d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  enviar_spi_dac(0);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fc7c 	bl	8000eac <enviar_spi_dac>
  keypad_init();
 80005b4:	f7ff fe64 	bl	8000280 <keypad_init>
  HAL_Delay(10);
 80005b8:	200a      	movs	r0, #10
 80005ba:	f001 fbf1 	bl	8001da0 <HAL_Delay>
  LCD_I2C_init();
 80005be:	f7ff fe37 	bl	8000230 <LCD_I2C_init>

	//esto podria estar encapsulado
  	  LCD_I2C_cmd(LCD_LINEA1);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f7ff fdca 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   UTN FRP   ");
 80005c8:	488d      	ldr	r0, [pc, #564]	; (8000800 <main+0x280>)
 80005ca:	f7ff fe44 	bl	8000256 <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA2);
 80005ce:	20c0      	movs	r0, #192	; 0xc0
 80005d0:	f7ff fdc4 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   Carga DC   ");
 80005d4:	488b      	ldr	r0, [pc, #556]	; (8000804 <main+0x284>)
 80005d6:	f7ff fe3e 	bl	8000256 <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA4);
 80005da:	20d4      	movs	r0, #212	; 0xd4
 80005dc:	f7ff fdbe 	bl	800015c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   A.Gotte/A.Jose   ");
 80005e0:	4889      	ldr	r0, [pc, #548]	; (8000808 <main+0x288>)
 80005e2:	f7ff fe38 	bl	8000256 <LCD_I2C_write_text>
	  HAL_Delay(4000);
 80005e6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80005ea:	f001 fbd9 	bl	8001da0 <HAL_Delay>
	  LCD_I2C_cmd(LCD_CLEAR);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff fdb4 	bl	800015c <LCD_I2C_cmd>

  HAL_TIM_Base_Start_IT(&htim2);
 80005f4:	4885      	ldr	r0, [pc, #532]	; (800080c <main+0x28c>)
 80005f6:	f005 fd31 	bl	800605c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80005fa:	4885      	ldr	r0, [pc, #532]	; (8000810 <main+0x290>)
 80005fc:	f005 fd2e 	bl	800605c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, input_adc, 4);//cuelga el programa
 8000600:	2204      	movs	r2, #4
 8000602:	4984      	ldr	r1, [pc, #528]	; (8000814 <main+0x294>)
 8000604:	4884      	ldr	r0, [pc, #528]	; (8000818 <main+0x298>)
 8000606:	f001 fcc7 	bl	8001f98 <HAL_ADC_Start_DMA>



	//se deberia hacer un POST

  char modo_carga = 'C';
 800060a:	2343      	movs	r3, #67	; 0x43
 800060c:	73fb      	strb	r3, [r7, #15]
  char input_valor[5]="";
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	713b      	strb	r3, [r7, #4]
  //char buffer_val[20]="val:  NNNN [utm]";

  uint8_t cont_digitos_input_val = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	73bb      	strb	r3, [r7, #14]
  uint8_t flag_update_display = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	737b      	strb	r3, [r7, #13]
  uint16_t control_spi = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	813b      	strh	r3, [r7, #8]
  uint16_t set_point = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	817b      	strh	r3, [r7, #10]
  //uint16_t temperatura_sensor = 0;
  enviar_spi_dac(control_spi);
 8000626:	893b      	ldrh	r3, [r7, #8]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fc3f 	bl	8000eac <enviar_spi_dac>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(flag_update_display_1_seg){//update display modo stand by
 800062e:	4b7b      	ldr	r3, [pc, #492]	; (800081c <main+0x29c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <main+0xca>

		  //HAL_ADC_Start(&hadc1);
		  //HAL_ADC_PollForConversion(&hadc1, 5);
		  //adc2use[0]=HAL_ADC_GetValue(&hadc1);
		  //display_update_stat(modo_carga,input_valor,input_adc[0]);
		  display_update_stat(modo_carga,input_valor,adc2use[0]);
 8000636:	4b7a      	ldr	r3, [pc, #488]	; (8000820 <main+0x2a0>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	4639      	mov	r1, r7
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fd60 	bl	8001104 <display_update_stat>
		  flag_update_display_1_seg=0;
 8000644:	4b75      	ldr	r3, [pc, #468]	; (800081c <main+0x29c>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
	  }

	  if(tipo_dato(input_keypad)==2){//tipo_dato()=2 si input es C,P,R,usb
 800064a:	4b76      	ldr	r3, [pc, #472]	; (8000824 <main+0x2a4>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff6e 	bl	8000530 <tipo_dato>
 8000654:	4603      	mov	r3, r0
 8000656:	2b02      	cmp	r3, #2
 8000658:	f040 8098 	bne.w	800078c <main+0x20c>
		  //ingresa a la configuracion de modo
		  flag_config=1;
 800065c:	4b72      	ldr	r3, [pc, #456]	; (8000828 <main+0x2a8>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]

		  while(flag_config){
 8000662:	e08e      	b.n	8000782 <main+0x202>
			  if(tipo_dato(input_keypad)==1 && cont_digitos_input_val<4){//tipo_dato()=1 si input es >=0 y <=9
 8000664:	4b6f      	ldr	r3, [pc, #444]	; (8000824 <main+0x2a4>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff61 	bl	8000530 <tipo_dato>
 800066e:	4603      	mov	r3, r0
 8000670:	2b01      	cmp	r3, #1
 8000672:	d112      	bne.n	800069a <main+0x11a>
 8000674:	7bbb      	ldrb	r3, [r7, #14]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d80f      	bhi.n	800069a <main+0x11a>
				  //input_valor[cont_digitos_input_val]=input_keypad;
				  agregar_digito(input_valor, input_keypad);
 800067a:	4b6a      	ldr	r3, [pc, #424]	; (8000824 <main+0x2a4>)
 800067c:	781a      	ldrb	r2, [r3, #0]
 800067e:	463b      	mov	r3, r7
 8000680:	4611      	mov	r1, r2
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fbe0 	bl	8000e48 <agregar_digito>
				  input_keypad=0;
 8000688:	4b66      	ldr	r3, [pc, #408]	; (8000824 <main+0x2a4>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
				  cont_digitos_input_val++;
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	3301      	adds	r3, #1
 8000692:	73bb      	strb	r3, [r7, #14]
				  flag_update_display=1;
 8000694:	2301      	movs	r3, #1
 8000696:	737b      	strb	r3, [r7, #13]
 8000698:	e068      	b.n	800076c <main+0x1ec>
			  }
			  else if(input_keypad=='D'&&cont_digitos_input_val>0){
 800069a:	4b62      	ldr	r3, [pc, #392]	; (8000824 <main+0x2a4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b44      	cmp	r3, #68	; 0x44
 80006a0:	d10f      	bne.n	80006c2 <main+0x142>
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d00c      	beq.n	80006c2 <main+0x142>
				  borrar_ultimo_digito(input_valor);
 80006a8:	463b      	mov	r3, r7
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fbe8 	bl	8000e80 <borrar_ultimo_digito>
				  input_keypad=0;
 80006b0:	4b5c      	ldr	r3, [pc, #368]	; (8000824 <main+0x2a4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
				  cont_digitos_input_val--;
 80006b6:	7bbb      	ldrb	r3, [r7, #14]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	73bb      	strb	r3, [r7, #14]
				  flag_update_display=1;
 80006bc:	2301      	movs	r3, #1
 80006be:	737b      	strb	r3, [r7, #13]
 80006c0:	e054      	b.n	800076c <main+0x1ec>
			  }
			  else if(input_keypad=='K'){
 80006c2:	4b58      	ldr	r3, [pc, #352]	; (8000824 <main+0x2a4>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b4b      	cmp	r3, #75	; 0x4b
 80006c8:	d10f      	bne.n	80006ea <main+0x16a>
				  input_keypad=0;
 80006ca:	4b56      	ldr	r3, [pc, #344]	; (8000824 <main+0x2a4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
				  //validar parametro ingresado
				  set_point=atoi(input_valor);
 80006d0:	463b      	mov	r3, r7
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00a fc2e 	bl	800af34 <atoi>
 80006d8:	4603      	mov	r3, r0
 80006da:	817b      	strh	r3, [r7, #10]
				  flag_config=0;//sale del while y vuelve al super loop
 80006dc:	4b52      	ldr	r3, [pc, #328]	; (8000828 <main+0x2a8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
				  flag_update_display_1_seg=1;
 80006e2:	4b4e      	ldr	r3, [pc, #312]	; (800081c <main+0x29c>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	e040      	b.n	800076c <main+0x1ec>
				  //validar parametro ingresado
			  }
			  else if(tipo_dato(input_keypad)==2){
 80006ea:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <main+0x2a4>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff1e 	bl	8000530 <tipo_dato>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d108      	bne.n	800070c <main+0x18c>
				  modo_carga=input_keypad;//guardar el modo que se selecciono
 80006fa:	4b4a      	ldr	r3, [pc, #296]	; (8000824 <main+0x2a4>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	73fb      	strb	r3, [r7, #15]
				  input_keypad=0;
 8000700:	4b48      	ldr	r3, [pc, #288]	; (8000824 <main+0x2a4>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
				  //borrar buffer
				  flag_update_display=1;
 8000706:	2301      	movs	r3, #1
 8000708:	737b      	strb	r3, [r7, #13]
 800070a:	e02f      	b.n	800076c <main+0x1ec>
			  }
			  else if(tipo_dato(input_keypad)==3){
 800070c:	4b45      	ldr	r3, [pc, #276]	; (8000824 <main+0x2a4>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff0d 	bl	8000530 <tipo_dato>
 8000716:	4603      	mov	r3, r0
 8000718:	2b03      	cmp	r3, #3
 800071a:	d127      	bne.n	800076c <main+0x1ec>
				  sprintf(str, "$USB#\n");//manda la solicitud de conexion
 800071c:	4943      	ldr	r1, [pc, #268]	; (800082c <main+0x2ac>)
 800071e:	4844      	ldr	r0, [pc, #272]	; (8000830 <main+0x2b0>)
 8000720:	f00a fcc8 	bl	800b0b4 <siprintf>
				  memset(buffer_usb, '\0',64);
 8000724:	2240      	movs	r2, #64	; 0x40
 8000726:	2100      	movs	r1, #0
 8000728:	4842      	ldr	r0, [pc, #264]	; (8000834 <main+0x2b4>)
 800072a:	f00a fce3 	bl	800b0f4 <memset>
				  CDC_Transmit_FS((uint8_t*) str, strlen(str));
 800072e:	4840      	ldr	r0, [pc, #256]	; (8000830 <main+0x2b0>)
 8000730:	f7ff fd0c 	bl	800014c <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	b29b      	uxth	r3, r3
 8000738:	4619      	mov	r1, r3
 800073a:	483d      	ldr	r0, [pc, #244]	; (8000830 <main+0x2b0>)
 800073c:	f00a f81c 	bl	800a778 <CDC_Transmit_FS>
				  //un contador o delay
				  HAL_Delay(1000);
 8000740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000744:	f001 fb2c 	bl	8001da0 <HAL_Delay>
				  if(buffer_usb[0]=='$' && buffer_usb[1]=='O' && buffer_usb[2]=='K' && buffer_usb[3]=='#'){//si responde la pc, entra al bucle
 8000748:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <main+0x2b4>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b24      	cmp	r3, #36	; 0x24
 800074e:	d10d      	bne.n	800076c <main+0x1ec>
 8000750:	4b38      	ldr	r3, [pc, #224]	; (8000834 <main+0x2b4>)
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	2b4f      	cmp	r3, #79	; 0x4f
 8000756:	d109      	bne.n	800076c <main+0x1ec>
 8000758:	4b36      	ldr	r3, [pc, #216]	; (8000834 <main+0x2b4>)
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	2b4b      	cmp	r3, #75	; 0x4b
 800075e:	d105      	bne.n	800076c <main+0x1ec>
 8000760:	4b34      	ldr	r3, [pc, #208]	; (8000834 <main+0x2b4>)
 8000762:	78db      	ldrb	r3, [r3, #3]
 8000764:	2b23      	cmp	r3, #35	; 0x23
 8000766:	d101      	bne.n	800076c <main+0x1ec>
					  modo_usb();
 8000768:	f000 fe2e 	bl	80013c8 <modo_usb>
				  }
			  }
		  if(flag_update_display){
 800076c:	7b7b      	ldrb	r3, [r7, #13]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d007      	beq.n	8000782 <main+0x202>
			  display_update_conf(modo_carga,input_valor);
 8000772:	463a      	mov	r2, r7
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fc23 	bl	8000fc4 <display_update_conf>
			  flag_update_display=0;
 800077e:	2300      	movs	r3, #0
 8000780:	737b      	strb	r3, [r7, #13]
		  while(flag_config){
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <main+0x2a8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	f47f af6c 	bne.w	8000664 <main+0xe4>
		  }
		}//fin while config
	  }//fin if config
	  if(flag_on_off){
 800078c:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <main+0x2b8>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	f43f af4c 	beq.w	800062e <main+0xae>
		  //setting del modo de trabajo
		  while(flag_on_off){
 8000796:	e025      	b.n	80007e4 <main+0x264>
			  if(flag_update_loop_control){
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <main+0x2bc>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d012      	beq.n	80007c6 <main+0x246>

					 control_spi=control_carga(modo_carga,adc2use[0],adc2use[1],set_point);
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <main+0x2a0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	b299      	uxth	r1, r3
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <main+0x2a0>)
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	897b      	ldrh	r3, [r7, #10]
 80007ae:	7bf8      	ldrb	r0, [r7, #15]
 80007b0:	f000 fff2 	bl	8001798 <control_carga>
 80007b4:	4603      	mov	r3, r0
 80007b6:	813b      	strh	r3, [r7, #8]
					 enviar_spi_dac(control_spi);
 80007b8:	893b      	ldrh	r3, [r7, #8]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fb76 	bl	8000eac <enviar_spi_dac>
					 flag_update_loop_control=0;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <main+0x2bc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]

			  }
			  if(flag_update_display_1_seg){
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <main+0x29c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00a      	beq.n	80007e4 <main+0x264>
				  display_update_running(modo_carga,adc2use[0],adc2use[1]);
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <main+0x2a0>)
 80007d0:	6819      	ldr	r1, [r3, #0]
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <main+0x2a0>)
 80007d4:	685a      	ldr	r2, [r3, #4]
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fef5 	bl	80015c8 <display_update_running>
				  flag_update_display_1_seg=0;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <main+0x29c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
		  while(flag_on_off){
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <main+0x2b8>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1d5      	bne.n	8000798 <main+0x218>
				  }
		  }//fin while flag_on_off
		  //configuracion post carga activa
		  input_keypad=0;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <main+0x2a4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
		  control_spi=0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	813b      	strh	r3, [r7, #8]
		  enviar_spi_dac(control_spi);
 80007f6:	893b      	ldrh	r3, [r7, #8]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fb57 	bl	8000eac <enviar_spi_dac>
	  if(flag_update_display_1_seg){//update display modo stand by
 80007fe:	e716      	b.n	800062e <main+0xae>
 8000800:	0800ba40 	.word	0x0800ba40
 8000804:	0800ba50 	.word	0x0800ba50
 8000808:	0800ba60 	.word	0x0800ba60
 800080c:	20000328 	.word	0x20000328
 8000810:	20000370 	.word	0x20000370
 8000814:	200003c0 	.word	0x200003c0
 8000818:	20000208 	.word	0x20000208
 800081c:	200003ba 	.word	0x200003ba
 8000820:	200003d0 	.word	0x200003d0
 8000824:	20000436 	.word	0x20000436
 8000828:	200003b9 	.word	0x200003b9
 800082c:	0800ba78 	.word	0x0800ba78
 8000830:	20000418 	.word	0x20000418
 8000834:	200003d8 	.word	0x200003d8
 8000838:	200003b8 	.word	0x200003b8
 800083c:	200003bb 	.word	0x200003bb

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	; 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084a:	2228      	movs	r2, #40	; 0x28
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f00a fc50 	bl	800b0f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087e:	2301      	movs	r3, #1
 8000880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800088c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000890:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000896:	4618      	mov	r0, r3
 8000898:	f004 fc64 	bl	8005164 <HAL_RCC_OscConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008a2:	f001 f80f 	bl	80018c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	230f      	movs	r3, #15
 80008a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2102      	movs	r1, #2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f004 fed0 	bl	8005668 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008ce:	f000 fff9 	bl	80018c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80008d2:	2312      	movs	r3, #18
 80008d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80008d6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80008da:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f005 f83a 	bl	800595c <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008ee:	f000 ffe9 	bl	80018c4 <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3750      	adds	r7, #80	; 0x50
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800090c:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <MX_ADC1_Init+0xcc>)
 800090e:	4a2f      	ldr	r2, [pc, #188]	; (80009cc <MX_ADC1_Init+0xd0>)
 8000910:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000918:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <MX_ADC1_Init+0xcc>)
 800091c:	2201      	movs	r2, #1
 800091e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000920:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000922:	2200      	movs	r2, #0
 8000924:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000926:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000928:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800092c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000936:	2204      	movs	r2, #4
 8000938:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800093a:	4823      	ldr	r0, [pc, #140]	; (80009c8 <MX_ADC1_Init+0xcc>)
 800093c:	f001 fa54 	bl	8001de8 <HAL_ADC_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000946:	f000 ffbd 	bl	80018c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800094a:	2301      	movs	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094e:	2301      	movs	r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	481b      	ldr	r0, [pc, #108]	; (80009c8 <MX_ADC1_Init+0xcc>)
 800095c:	f001 fc16 	bl	800218c <HAL_ADC_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 ffad 	bl	80018c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800096a:	2302      	movs	r3, #2
 800096c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800096e:	2302      	movs	r3, #2
 8000970:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	4619      	mov	r1, r3
 8000976:	4814      	ldr	r0, [pc, #80]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000978:	f001 fc08 	bl	800218c <HAL_ADC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000982:	f000 ff9f 	bl	80018c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000986:	2303      	movs	r3, #3
 8000988:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800098a:	2303      	movs	r3, #3
 800098c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_ADC1_Init+0xcc>)
 8000994:	f001 fbfa 	bl	800218c <HAL_ADC_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800099e:	f000 ff91 	bl	80018c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009a2:	2304      	movs	r3, #4
 80009a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009a6:	2304      	movs	r3, #4
 80009a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_ADC1_Init+0xcc>)
 80009b0:	f001 fbec 	bl	800218c <HAL_ADC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80009ba:	f000 ff83 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000208 	.word	0x20000208
 80009cc:	40012400 	.word	0x40012400

080009d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <MX_I2C1_Init+0x54>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 80000;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009dc:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <MX_I2C1_Init+0x58>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_I2C1_Init+0x50>)
 8000a0e:	f002 f991 	bl	8002d34 <HAL_I2C_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a18:	f000 ff54 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000027c 	.word	0x2000027c
 8000a24:	40005400 	.word	0x40005400
 8000a28:	00013880 	.word	0x00013880

08000a2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a32:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <MX_SPI1_Init+0x6c>)
 8000a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a62:	2228      	movs	r2, #40	; 0x28
 8000a64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a7a:	220a      	movs	r2, #10
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_SPI1_Init+0x68>)
 8000a80:	f005 f822 	bl	8005ac8 <HAL_SPI_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000a8a:	f000 ff1b 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200002d0 	.word	0x200002d0
 8000a98:	40013000 	.word	0x40013000

08000a9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000abe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ac2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000ac6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ad0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ad4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae2:	4814      	ldr	r0, [pc, #80]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000ae4:	f005 fa6a 	bl	8005fbc <HAL_TIM_Base_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000aee:	f000 fee9 	bl	80018c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4619      	mov	r1, r3
 8000afe:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000b00:	f005 fc06 	bl	8006310 <HAL_TIM_ConfigClockSource>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b0a:	f000 fedb 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b16:	463b      	mov	r3, r7
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <MX_TIM2_Init+0x98>)
 8000b1c:	f005 fddc 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b26:	f000 fecd 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000328 	.word	0x20000328

08000b38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b56:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <MX_TIM3_Init+0x98>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b5c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000b60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1499;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b6a:	f240 52db 	movw	r2, #1499	; 0x5db
 8000b6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b7c:	4813      	ldr	r0, [pc, #76]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b7e:	f005 fa1d 	bl	8005fbc <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b88:	f000 fe9c 	bl	80018c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000b9a:	f005 fbb9 	bl	8006310 <HAL_TIM_ConfigClockSource>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ba4:	f000 fe8e 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_TIM3_Init+0x94>)
 8000bb6:	f005 fd8f 	bl	80066d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bc0:	f000 fe80 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000370 	.word	0x20000370
 8000bd0:	40000400 	.word	0x40000400

08000bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_DMA_Init+0x28>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <MX_DMA_Init+0x28>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6153      	str	r3, [r2, #20]
 8000be6:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <MX_DMA_Init+0x28>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	40021000 	.word	0x40021000

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c14:	4b49      	ldr	r3, [pc, #292]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a48      	ldr	r2, [pc, #288]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b46      	ldr	r3, [pc, #280]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2c:	4b43      	ldr	r3, [pc, #268]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a42      	ldr	r2, [pc, #264]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c32:	f043 0320 	orr.w	r3, r3, #32
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b40      	ldr	r3, [pc, #256]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0320 	and.w	r3, r3, #32
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b3d      	ldr	r3, [pc, #244]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a3c      	ldr	r2, [pc, #240]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a36      	ldr	r2, [pc, #216]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c62:	f043 0308 	orr.w	r3, r3, #8
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <MX_GPIO_Init+0x13c>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c7a:	4831      	ldr	r0, [pc, #196]	; (8000d40 <MX_GPIO_Init+0x140>)
 8000c7c:	f002 f811 	bl	8002ca2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2140      	movs	r1, #64	; 0x40
 8000c84:	482f      	ldr	r0, [pc, #188]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000c86:	f002 f80c 	bl	8002ca2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f640 6103 	movw	r1, #3587	; 0xe03
 8000c90:	482d      	ldr	r0, [pc, #180]	; (8000d48 <MX_GPIO_Init+0x148>)
 8000c92:	f002 f806 	bl	8002ca2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000c96:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4824      	ldr	r0, [pc, #144]	; (8000d40 <MX_GPIO_Init+0x140>)
 8000cb0:	f001 fe5c 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481e      	ldr	r0, [pc, #120]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000ccc:	f001 fe4e 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000cd0:	f640 6303 	movw	r3, #3587	; 0xe03
 8000cd4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 0310 	add.w	r3, r7, #16
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4817      	ldr	r0, [pc, #92]	; (8000d48 <MX_GPIO_Init+0x148>)
 8000cea:	f001 fe3f 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000cee:	f44f 4371 	mov.w	r3, #61696	; 0xf100
 8000cf2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	4811      	ldr	r0, [pc, #68]	; (8000d48 <MX_GPIO_Init+0x148>)
 8000d04:	f001 fe32 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_GPIO_Init+0x14c>)
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <MX_GPIO_Init+0x144>)
 8000d1e:	f001 fe25 	bl	800296c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2017      	movs	r0, #23
 8000d28:	f001 fd01 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d2c:	2017      	movs	r0, #23
 8000d2e:	f001 fd1a 	bl	8002766 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d32:	bf00      	nop
 8000d34:	3720      	adds	r7, #32
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40011000 	.word	0x40011000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	40010c00 	.word	0x40010c00
 8000d4c:	10110000 	.word	0x10110000

08000d50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//definiciones de los callback y funciones
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // INT Source is pin A9
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d60:	d126      	bne.n	8000db0 <HAL_GPIO_EXTI_Callback+0x60>
    {
    //if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET&&!flag_config){
    if(!flag_on_off && !flag_config){
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d113      	bne.n	8000d92 <HAL_GPIO_EXTI_Callback+0x42>
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10f      	bne.n	8000d92 <HAL_GPIO_EXTI_Callback+0x42>
    		flag_on_off=1;// conecta la carga
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
    		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7e:	4810      	ldr	r0, [pc, #64]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d80:	f001 ff8f 	bl	8002ca2 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000d8c:	f001 ff89 	bl	8002ca2 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
    }

    }
}
 8000d90:	e00e      	b.n	8000db0 <HAL_GPIO_EXTI_Callback+0x60>
    	flag_on_off=0;// desconecta la carga
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d9e:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000da0:	f001 ff7f 	bl	8002ca2 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000dac:	f001 ff79 	bl	8002ca2 <HAL_GPIO_WritePin>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200003b8 	.word	0x200003b8
 8000dbc:	200003b9 	.word	0x200003b9
 8000dc0:	40011000 	.word	0x40011000
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM2){
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd8:	d11b      	bne.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x4a>
	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dde:	4814      	ldr	r0, [pc, #80]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000de0:	f001 ff77 	bl	8002cd2 <HAL_GPIO_TogglePin>
	 input_keypad=keypad_scan();//condicionar la lectura a que no este en modo activo la carga
 8000de4:	f7ff fab0 	bl	8000348 <keypad_scan>
 8000de8:	4603      	mov	r3, r0
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000dee:	701a      	strb	r2, [r3, #0]
	 //flag_update_loop_control=1; //movemos al timer3

	 if(cont_timer_update>=5){//cada segundo y medio actualiza el display
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d906      	bls.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x3e>

		 flag_update_display_1_seg=1;//update nombre
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
		 cont_timer_update=0;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e005      	b.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x4a>
		 //temperatura_sensor=leer_temperatura();
	 }
	 else cont_timer_update++;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000e10:	701a      	strb	r2, [r3, #0]
 }
 if(htim->Instance == TIM3){
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d104      	bne.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0x5e>
 	 //disparar control de la carga
	 validar_ADC();
 8000e1c:	f000 f876 	bl	8000f0c <validar_ADC>
	 flag_update_loop_control=1; //flag ciclo de control
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
  }
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40011000 	.word	0x40011000
 8000e34:	20000436 	.word	0x20000436
 8000e38:	200003bc 	.word	0x200003bc
 8000e3c:	200003ba 	.word	0x200003ba
 8000e40:	40000400 	.word	0x40000400
 8000e44:	200003bb 	.word	0x200003bb

08000e48 <agregar_digito>:

void agregar_digito(char *buffer, char digito) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	70fb      	strb	r3, [r7, #3]
    size_t longitud = strlen(buffer);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff f979 	bl	800014c <strlen>
 8000e5a:	60f8      	str	r0, [r7, #12]

    if (longitud < BUFFER_SIZE_input) {
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d80a      	bhi.n	8000e78 <agregar_digito+0x30>
        buffer[longitud] = digito;
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4413      	add	r3, r2
 8000e68:	78fa      	ldrb	r2, [r7, #3]
 8000e6a:	701a      	strb	r2, [r3, #0]
        buffer[longitud + 1] = '\0';
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
    }
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <borrar_ultimo_digito>:

void borrar_ultimo_digito(char *buffer) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
    size_t longitud = strlen(buffer);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff f95f 	bl	800014c <strlen>
 8000e8e:	60f8      	str	r0, [r7, #12]

    if (longitud > 0) {
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d005      	beq.n	8000ea2 <borrar_ultimo_digito+0x22>
        buffer[longitud - 1] = '\0';
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
    }
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <enviar_spi_dac>:
		temperature_milicelsius=0;
	}
	 return temperature_milicelsius;
}

void enviar_spi_dac(uint16_t dato){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
	if(dato<=0x0FFF){
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ebc:	d21f      	bcs.n	8000efe <enviar_spi_dac+0x52>
		uint16_t send = 0x3000;
 8000ebe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ec2:	81fb      	strh	r3, [r7, #14]
		send = send|dato;
 8000ec4:	89fa      	ldrh	r2, [r7, #14]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	81fb      	strh	r3, [r7, #14]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2140      	movs	r1, #64	; 0x40
 8000ed2:	480c      	ldr	r0, [pc, #48]	; (8000f04 <enviar_spi_dac+0x58>)
 8000ed4:	f001 fee5 	bl	8002ca2 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &send, 2, 10);
 8000ed8:	f107 010e 	add.w	r1, r7, #14
 8000edc:	230a      	movs	r3, #10
 8000ede:	2202      	movs	r2, #2
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <enviar_spi_dac+0x5c>)
 8000ee2:	f004 fe75 	bl	8005bd0 <HAL_SPI_Transmit>
		while(HAL_SPI_GetState(&hspi1)!=HAL_SPI_STATE_READY);
 8000ee6:	bf00      	nop
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <enviar_spi_dac+0x5c>)
 8000eea:	f004 ffb4 	bl	8005e56 <HAL_SPI_GetState>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d1f9      	bne.n	8000ee8 <enviar_spi_dac+0x3c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <enviar_spi_dac+0x58>)
 8000efa:	f001 fed2 	bl	8002ca2 <HAL_GPIO_WritePin>

		return;
	}
}
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40010800 	.word	0x40010800
 8000f08:	200002d0 	.word	0x200002d0

08000f0c <validar_ADC>:
void validar_ADC(){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	//valida que adc de corriente usar o si el sense esta activo
	//corriente
	if(input_adc[2]>LIM_HAL_SENSOR_5A){
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <validar_ADC+0xa4>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d910      	bls.n	8000f3e <validar_ADC+0x32>
		adc2use[1]=input_adc[3]*FACTOR_ADC_30A_CURRENT_mult;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <validar_ADC+0xa4>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f641 429e 	movw	r2, #7326	; 0x1c9e
 8000f24:	fb02 f303 	mul.w	r3, r2, r3
 8000f28:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <validar_ADC+0xa8>)
 8000f2a:	6053      	str	r3, [r2, #4]
		adc2use[1]=adc2use[1]/FACTOR_ADC_30A_CURRENT_div;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <validar_ADC+0xa8>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <validar_ADC+0xac>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	0b5b      	lsrs	r3, r3, #13
 8000f38:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <validar_ADC+0xa8>)
 8000f3a:	6053      	str	r3, [r2, #4]
 8000f3c:	e00f      	b.n	8000f5e <validar_ADC+0x52>
	}else{
		adc2use[1]=input_adc[2]*FACTOR_ADC_5A_CURRENT_mult;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <validar_ADC+0xa4>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000f46:	fb02 f303 	mul.w	r3, r2, r3
 8000f4a:	4a1a      	ldr	r2, [pc, #104]	; (8000fb4 <validar_ADC+0xa8>)
 8000f4c:	6053      	str	r3, [r2, #4]
		adc2use[1]=adc2use[1]/FACTOR_ADC_5A_CURRENT_div;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <validar_ADC+0xa8>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	4a19      	ldr	r2, [pc, #100]	; (8000fb8 <validar_ADC+0xac>)
 8000f54:	fba2 2303 	umull	r2, r3, r2, r3
 8000f58:	0b5b      	lsrs	r3, r3, #13
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <validar_ADC+0xa8>)
 8000f5c:	6053      	str	r3, [r2, #4]
	}
	//tension
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==GPIO_PIN_SET){
 8000f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f62:	4816      	ldr	r0, [pc, #88]	; (8000fbc <validar_ADC+0xb0>)
 8000f64:	f001 fe86 	bl	8002c74 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d10f      	bne.n	8000f8e <validar_ADC+0x82>
		adc2use[0]=input_adc[0]*FACTOR_ADC_VOLTAGE_mult;//inputadc[0]marron linea baja impedancia
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <validar_ADC+0xa4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	227a      	movs	r2, #122	; 0x7a
 8000f74:	fb02 f303 	mul.w	r3, r2, r3
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <validar_ADC+0xa8>)
 8000f7a:	6013      	str	r3, [r2, #0]
		adc2use[0]=adc2use[0]/FACTOR_ADC_VOLTAGE_div;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <validar_ADC+0xa8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <validar_ADC+0xb4>)
 8000f82:	fba2 2303 	umull	r2, r3, r2, r3
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <validar_ADC+0xa8>)
 8000f8a:	6013      	str	r3, [r2, #0]
	}else{
		adc2use[0]=input_adc[0]*FACTOR_ADC_VOLTAGE_mult;//quitar linea para usar sense
		//adc2use[0]=input_adc[1]*FACTOR_ADC_VOLTAGE_mult;
		adc2use[0]=adc2use[0]/FACTOR_ADC_VOLTAGE_div;
	}
}
 8000f8c:	e00e      	b.n	8000fac <validar_ADC+0xa0>
		adc2use[0]=input_adc[0]*FACTOR_ADC_VOLTAGE_mult;//quitar linea para usar sense
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <validar_ADC+0xa4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	227a      	movs	r2, #122	; 0x7a
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <validar_ADC+0xa8>)
 8000f9a:	6013      	str	r3, [r2, #0]
		adc2use[0]=adc2use[0]/FACTOR_ADC_VOLTAGE_div;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <validar_ADC+0xa8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <validar_ADC+0xb4>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	4a02      	ldr	r2, [pc, #8]	; (8000fb4 <validar_ADC+0xa8>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200003c0 	.word	0x200003c0
 8000fb4:	200003d0 	.word	0x200003d0
 8000fb8:	d1b71759 	.word	0xd1b71759
 8000fbc:	40010c00 	.word	0x40010c00
 8000fc0:	51eb851f 	.word	0x51eb851f

08000fc4 <display_update_conf>:

void display_update_conf(char modo_op, char *dato){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]

	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
	snprintf(buffer_fun, sizeof(buffer_fun), "Config Modo C%s:", char_as_str);
 8001000:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001004:	f107 0020 	add.w	r0, r7, #32
 8001008:	4a38      	ldr	r2, [pc, #224]	; (80010ec <display_update_conf+0x128>)
 800100a:	2114      	movs	r1, #20
 800100c:	f00a f81e 	bl	800b04c <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff f8a3 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff f8a0 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 800101c:	f107 0320 	add.w	r3, r7, #32
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff f918 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA3);
 8001026:	2094      	movs	r0, #148	; 0x94
 8001028:	f7ff f898 	bl	800015c <LCD_I2C_cmd>
	switch(modo_op){//print del modo
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	3b43      	subs	r3, #67	; 0x43
 8001030:	2b13      	cmp	r3, #19
 8001032:	d84b      	bhi.n	80010cc <display_update_conf+0x108>
 8001034:	a201      	add	r2, pc, #4	; (adr r2, 800103c <display_update_conf+0x78>)
 8001036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103a:	bf00      	nop
 800103c:	0800108d 	.word	0x0800108d
 8001040:	080010cd 	.word	0x080010cd
 8001044:	080010cd 	.word	0x080010cd
 8001048:	080010cd 	.word	0x080010cd
 800104c:	080010cd 	.word	0x080010cd
 8001050:	080010cd 	.word	0x080010cd
 8001054:	080010cd 	.word	0x080010cd
 8001058:	080010cd 	.word	0x080010cd
 800105c:	080010cd 	.word	0x080010cd
 8001060:	080010cd 	.word	0x080010cd
 8001064:	080010cd 	.word	0x080010cd
 8001068:	080010cd 	.word	0x080010cd
 800106c:	080010cd 	.word	0x080010cd
 8001070:	080010bd 	.word	0x080010bd
 8001074:	080010cd 	.word	0x080010cd
 8001078:	080010ad 	.word	0x080010ad
 800107c:	080010cd 	.word	0x080010cd
 8001080:	080010cd 	.word	0x080010cd
 8001084:	080010cd 	.word	0x080010cd
 8001088:	0800109d 	.word	0x0800109d

	case 'C':
		snprintf(buffer_dato, sizeof(buffer_dato), "Current: %s0 [mA]", dato);
 800108c:	f107 000c 	add.w	r0, r7, #12
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <display_update_conf+0x12c>)
 8001094:	2114      	movs	r1, #20
 8001096:	f009 ffd9 	bl	800b04c <sniprintf>
		break;
 800109a:	e01e      	b.n	80010da <display_update_conf+0x116>
	case 'V':
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %s0 [mV]", dato);
 800109c:	f107 000c 	add.w	r0, r7, #12
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <display_update_conf+0x130>)
 80010a4:	2114      	movs	r1, #20
 80010a6:	f009 ffd1 	bl	800b04c <sniprintf>
		break;
 80010aa:	e016      	b.n	80010da <display_update_conf+0x116>
	case 'R':
		snprintf(buffer_dato, sizeof(buffer_dato), "Resist.: %s [mR]", dato);
 80010ac:	f107 000c 	add.w	r0, r7, #12
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <display_update_conf+0x134>)
 80010b4:	2114      	movs	r1, #20
 80010b6:	f009 ffc9 	bl	800b04c <sniprintf>
		break;
 80010ba:	e00e      	b.n	80010da <display_update_conf+0x116>
	case 'P':
		snprintf(buffer_dato, sizeof(buffer_dato), "Power.: %s00 [W]", dato);
 80010bc:	f107 000c 	add.w	r0, r7, #12
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <display_update_conf+0x138>)
 80010c4:	2114      	movs	r1, #20
 80010c6:	f009 ffc1 	bl	800b04c <sniprintf>
		break;
 80010ca:	e006      	b.n	80010da <display_update_conf+0x116>
	default:
		snprintf(buffer_dato, sizeof(buffer_dato), "Error: case def");
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <display_update_conf+0x13c>)
 80010d2:	2114      	movs	r1, #20
 80010d4:	4618      	mov	r0, r3
 80010d6:	f009 ffb9 	bl	800b04c <sniprintf>
	}
	LCD_I2C_write_text(buffer_dato);
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f8b9 	bl	8000256 <LCD_I2C_write_text>

}
 80010e4:	bf00      	nop
 80010e6:	3738      	adds	r7, #56	; 0x38
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	0800ba80 	.word	0x0800ba80
 80010f0:	0800ba94 	.word	0x0800ba94
 80010f4:	0800baa8 	.word	0x0800baa8
 80010f8:	0800babc 	.word	0x0800babc
 80010fc:	0800bad0 	.word	0x0800bad0
 8001100:	0800bae4 	.word	0x0800bae4

08001104 <display_update_stat>:

void display_update_stat(char modo_op, char *dato,uint32_t volt){
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b093      	sub	sp, #76	; 0x4c
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	73fb      	strb	r3, [r7, #15]
	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001118:	2300      	movs	r3, #0
 800111a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
 8001122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
	uint32_t volt_convertido = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	63fb      	str	r3, [r7, #60]	; 0x3c
	volt_convertido=volt*FACTOR_ADC_VOLTAGE_mult;//122;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	227a      	movs	r2, #122	; 0x7a
 800114a:	fb02 f303 	mul.w	r3, r2, r3
 800114e:	63fb      	str	r3, [r7, #60]	; 0x3c
	volt_convertido=volt_convertido/FACTOR_ADC_VOLTAGE_div;//100;
 8001150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001152:	4a92      	ldr	r2, [pc, #584]	; (800139c <display_update_stat+0x298>)
 8001154:	fba2 2303 	umull	r2, r3, r2, r3
 8001158:	095b      	lsrs	r3, r3, #5
 800115a:	63fb      	str	r3, [r7, #60]	; 0x3c

	snprintf(buffer_fun, sizeof(buffer_fun), "Modo C%s:", char_as_str);
 800115c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001160:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001164:	4a8e      	ldr	r2, [pc, #568]	; (80013a0 <display_update_stat+0x29c>)
 8001166:	2114      	movs	r1, #20
 8001168:	f009 ff70 	bl	800b04c <sniprintf>

	LCD_I2C_cmd(LCD_CLEAR);
 800116c:	2001      	movs	r0, #1
 800116e:	f7fe fff5 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_LINEA1);
 8001172:	2000      	movs	r0, #0
 8001174:	f7fe fff2 	bl	800015c <LCD_I2C_cmd>
	LCD_I2C_write_text(buffer_fun);
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f86a 	bl	8000256 <LCD_I2C_write_text>

	switch(modo_op){//print del modo
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	3b43      	subs	r3, #67	; 0x43
 8001186:	2b13      	cmp	r3, #19
 8001188:	f200 80f9 	bhi.w	800137e <display_update_stat+0x27a>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <display_update_stat+0x90>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011e5 	.word	0x080011e5
 8001198:	0800137f 	.word	0x0800137f
 800119c:	0800137f 	.word	0x0800137f
 80011a0:	0800137f 	.word	0x0800137f
 80011a4:	0800137f 	.word	0x0800137f
 80011a8:	0800137f 	.word	0x0800137f
 80011ac:	0800137f 	.word	0x0800137f
 80011b0:	0800137f 	.word	0x0800137f
 80011b4:	0800137f 	.word	0x0800137f
 80011b8:	0800137f 	.word	0x0800137f
 80011bc:	0800137f 	.word	0x0800137f
 80011c0:	0800137f 	.word	0x0800137f
 80011c4:	0800137f 	.word	0x0800137f
 80011c8:	0800130f 	.word	0x0800130f
 80011cc:	0800137f 	.word	0x0800137f
 80011d0:	0800128d 	.word	0x0800128d
 80011d4:	0800137f 	.word	0x0800137f
 80011d8:	0800137f 	.word	0x0800137f
 80011dc:	0800137f 	.word	0x0800137f
 80011e0:	08001255 	.word	0x08001255

	case 'C':
		LCD_I2C_cmd(LCD_LINEA2);
 80011e4:	20c0      	movs	r0, #192	; 0xc0
 80011e6:	f7fe ffb9 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]", (int)volt_convertido/100,(int)volt_convertido%100);//
 80011ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ec:	4a6b      	ldr	r2, [pc, #428]	; (800139c <display_update_stat+0x298>)
 80011ee:	fb82 1203 	smull	r1, r2, r2, r3
 80011f2:	1152      	asrs	r2, r2, #5
 80011f4:	17db      	asrs	r3, r3, #31
 80011f6:	1ad4      	subs	r4, r2, r3
 80011f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011fa:	4b68      	ldr	r3, [pc, #416]	; (800139c <display_update_stat+0x298>)
 80011fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001200:	1159      	asrs	r1, r3, #5
 8001202:	17d3      	asrs	r3, r2, #31
 8001204:	1acb      	subs	r3, r1, r3
 8001206:	2164      	movs	r1, #100	; 0x64
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f107 0010 	add.w	r0, r7, #16
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4623      	mov	r3, r4
 8001216:	4a63      	ldr	r2, [pc, #396]	; (80013a4 <display_update_stat+0x2a0>)
 8001218:	2114      	movs	r1, #20
 800121a:	f009 ff17 	bl	800b04c <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f817 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8001228:	2094      	movs	r0, #148	; 0x94
 800122a:	f7fe ff97 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Current: %s0 [mA]", dato);
 800122e:	f107 0010 	add.w	r0, r7, #16
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	4a5c      	ldr	r2, [pc, #368]	; (80013a8 <display_update_stat+0x2a4>)
 8001236:	2114      	movs	r1, #20
 8001238:	f009 ff08 	bl	800b04c <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f808 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8001246:	20d4      	movs	r0, #212	; 0xd4
 8001248:	f7fe ff88 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[W]");
 800124c:	4857      	ldr	r0, [pc, #348]	; (80013ac <display_update_stat+0x2a8>)
 800124e:	f7ff f802 	bl	8000256 <LCD_I2C_write_text>

		break;
 8001252:	e09f      	b.n	8001394 <display_update_stat+0x290>
	case 'V':
		LCD_I2C_cmd(LCD_LINEA2);
 8001254:	20c0      	movs	r0, #192	; 0xc0
 8001256:	f7fe ff81 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %s0 [mV]", dato);
 800125a:	f107 0010 	add.w	r0, r7, #16
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4a53      	ldr	r2, [pc, #332]	; (80013b0 <display_update_stat+0x2ac>)
 8001262:	2114      	movs	r1, #20
 8001264:	f009 fef2 	bl	800b04c <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4618      	mov	r0, r3
 800126e:	f7fe fff2 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8001272:	2094      	movs	r0, #148	; 0x94
 8001274:	f7fe ff72 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 8001278:	484e      	ldr	r0, [pc, #312]	; (80013b4 <display_update_stat+0x2b0>)
 800127a:	f7fe ffec 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 800127e:	20d4      	movs	r0, #212	; 0xd4
 8001280:	f7fe ff6c 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[mW]");
 8001284:	484c      	ldr	r0, [pc, #304]	; (80013b8 <display_update_stat+0x2b4>)
 8001286:	f7fe ffe6 	bl	8000256 <LCD_I2C_write_text>
		break;
 800128a:	e083      	b.n	8001394 <display_update_stat+0x290>
	case 'R':
		LCD_I2C_cmd(LCD_CLEAR);
 800128c:	2001      	movs	r0, #1
 800128e:	f7fe ff65 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_cmd(LCD_LINEA1);
 8001292:	2000      	movs	r0, #0
 8001294:	f7fe ff62 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Res: %s[mohm]", dato);
 8001298:	f107 0010 	add.w	r0, r7, #16
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4a47      	ldr	r2, [pc, #284]	; (80013bc <display_update_stat+0x2b8>)
 80012a0:	2114      	movs	r1, #20
 80012a2:	f009 fed3 	bl	800b04c <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7fe ffd3 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA2);
 80012b0:	20c0      	movs	r0, #192	; 0xc0
 80012b2:	f7fe ff53 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]",  (int)volt_convertido/100,(int)volt_convertido%100);//
 80012b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012b8:	4a38      	ldr	r2, [pc, #224]	; (800139c <display_update_stat+0x298>)
 80012ba:	fb82 1203 	smull	r1, r2, r2, r3
 80012be:	1152      	asrs	r2, r2, #5
 80012c0:	17db      	asrs	r3, r3, #31
 80012c2:	1ad4      	subs	r4, r2, r3
 80012c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <display_update_stat+0x298>)
 80012c8:	fb83 1302 	smull	r1, r3, r3, r2
 80012cc:	1159      	asrs	r1, r3, #5
 80012ce:	17d3      	asrs	r3, r2, #31
 80012d0:	1acb      	subs	r3, r1, r3
 80012d2:	2164      	movs	r1, #100	; 0x64
 80012d4:	fb01 f303 	mul.w	r3, r1, r3
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f107 0010 	add.w	r0, r7, #16
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4623      	mov	r3, r4
 80012e2:	4a30      	ldr	r2, [pc, #192]	; (80013a4 <display_update_stat+0x2a0>)
 80012e4:	2114      	movs	r1, #20
 80012e6:	f009 feb1 	bl	800b04c <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ffb1 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 80012f4:	2094      	movs	r0, #148	; 0x94
 80012f6:	f7fe ff31 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 80012fa:	482e      	ldr	r0, [pc, #184]	; (80013b4 <display_update_stat+0x2b0>)
 80012fc:	f7fe ffab 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 8001300:	20d4      	movs	r0, #212	; 0xd4
 8001302:	f7fe ff2b 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Power: 0[mW]");
 8001306:	482c      	ldr	r0, [pc, #176]	; (80013b8 <display_update_stat+0x2b4>)
 8001308:	f7fe ffa5 	bl	8000256 <LCD_I2C_write_text>
		break;
 800130c:	e042      	b.n	8001394 <display_update_stat+0x290>
	case 'P':
		LCD_I2C_cmd(LCD_LINEA2);
 800130e:	20c0      	movs	r0, #192	; 0xc0
 8001310:	f7fe ff24 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]",  (int)volt_convertido/100,(int)volt_convertido%100);//
 8001314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001316:	4a21      	ldr	r2, [pc, #132]	; (800139c <display_update_stat+0x298>)
 8001318:	fb82 1203 	smull	r1, r2, r2, r3
 800131c:	1152      	asrs	r2, r2, #5
 800131e:	17db      	asrs	r3, r3, #31
 8001320:	1ad4      	subs	r4, r2, r3
 8001322:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <display_update_stat+0x298>)
 8001326:	fb83 1302 	smull	r1, r3, r3, r2
 800132a:	1159      	asrs	r1, r3, #5
 800132c:	17d3      	asrs	r3, r2, #31
 800132e:	1acb      	subs	r3, r1, r3
 8001330:	2164      	movs	r1, #100	; 0x64
 8001332:	fb01 f303 	mul.w	r3, r1, r3
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f107 0010 	add.w	r0, r7, #16
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	4623      	mov	r3, r4
 8001340:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <display_update_stat+0x2a0>)
 8001342:	2114      	movs	r1, #20
 8001344:	f009 fe82 	bl	800b04c <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4618      	mov	r0, r3
 800134e:	f7fe ff82 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA3);
 8001352:	2094      	movs	r0, #148	; 0x94
 8001354:	f7fe ff02 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text("Current: 0[mA]");
 8001358:	4816      	ldr	r0, [pc, #88]	; (80013b4 <display_update_stat+0x2b0>)
 800135a:	f7fe ff7c 	bl	8000256 <LCD_I2C_write_text>
		LCD_I2C_cmd(LCD_LINEA4);
 800135e:	20d4      	movs	r0, #212	; 0xd4
 8001360:	f7fe fefc 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Power: %s00 [mW]", dato);
 8001364:	f107 0010 	add.w	r0, r7, #16
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <display_update_stat+0x2bc>)
 800136c:	2114      	movs	r1, #20
 800136e:	f009 fe6d 	bl	800b04c <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe ff6d 	bl	8000256 <LCD_I2C_write_text>

		break;
 800137c:	e00a      	b.n	8001394 <display_update_stat+0x290>
	default:
		LCD_I2C_cmd(LCD_LINEA1);
 800137e:	2000      	movs	r0, #0
 8001380:	f7fe feec 	bl	800015c <LCD_I2C_cmd>
		snprintf(buffer_dato, sizeof(buffer_dato), "Error: monit");
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <display_update_stat+0x2c0>)
 800138a:	2114      	movs	r1, #20
 800138c:	4618      	mov	r0, r3
 800138e:	f009 fe5d 	bl	800b04c <sniprintf>
	}

}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3744      	adds	r7, #68	; 0x44
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	51eb851f 	.word	0x51eb851f
 80013a0:	0800baf4 	.word	0x0800baf4
 80013a4:	0800bb00 	.word	0x0800bb00
 80013a8:	0800ba94 	.word	0x0800ba94
 80013ac:	0800bb18 	.word	0x0800bb18
 80013b0:	0800baa8 	.word	0x0800baa8
 80013b4:	0800bb24 	.word	0x0800bb24
 80013b8:	0800bb34 	.word	0x0800bb34
 80013bc:	0800bb44 	.word	0x0800bb44
 80013c0:	0800bb54 	.word	0x0800bb54
 80013c4:	0800bb68 	.word	0x0800bb68

080013c8 <modo_usb>:

void modo_usb(){
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b08d      	sub	sp, #52	; 0x34
 80013cc:	af02      	add	r7, sp, #8
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013d4:	4872      	ldr	r0, [pc, #456]	; (80015a0 <modo_usb+0x1d8>)
 80013d6:	f001 fc64 	bl	8002ca2 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e0:	4870      	ldr	r0, [pc, #448]	; (80015a4 <modo_usb+0x1dc>)
 80013e2:	f001 fc5e 	bl	8002ca2 <HAL_GPIO_WritePin>
uint16_t control_spi = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	843b      	strh	r3, [r7, #32]

int valor = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
char mode = 'C';
 80013ee:	2343      	movs	r3, #67	; 0x43
 80013f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
char str_aux[30]="";
 80013f4:	2300      	movs	r3, #0
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
 8001406:	615a      	str	r2, [r3, #20]
 8001408:	831a      	strh	r2, [r3, #24]
uint8_t flag_USB = 1;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
input_keypad=0;
 8001410:	4b65      	ldr	r3, [pc, #404]	; (80015a8 <modo_usb+0x1e0>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
	while(flag_USB==1){
 8001416:	e0a4      	b.n	8001562 <modo_usb+0x19a>
  //lectura de datos USB
		if (buffer_usb[0]=='$' && buffer_usb[1]=='C' && buffer_usb[9]=='#') {//comando config
 8001418:	4b64      	ldr	r3, [pc, #400]	; (80015ac <modo_usb+0x1e4>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b24      	cmp	r3, #36	; 0x24
 800141e:	d140      	bne.n	80014a2 <modo_usb+0xda>
 8001420:	4b62      	ldr	r3, [pc, #392]	; (80015ac <modo_usb+0x1e4>)
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	2b43      	cmp	r3, #67	; 0x43
 8001426:	d13c      	bne.n	80014a2 <modo_usb+0xda>
 8001428:	4b60      	ldr	r3, [pc, #384]	; (80015ac <modo_usb+0x1e4>)
 800142a:	7a5b      	ldrb	r3, [r3, #9]
 800142c:	2b23      	cmp	r3, #35	; 0x23
 800142e:	d138      	bne.n	80014a2 <modo_usb+0xda>
			sprintf(str, "$D,%c,%04d,%04d,%04d", mode,valor,(int)adc2use[0],(int)adc2use[1]);
 8001430:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001434:	4b5e      	ldr	r3, [pc, #376]	; (80015b0 <modo_usb+0x1e8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <modo_usb+0x1e8>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	9100      	str	r1, [sp, #0]
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	495b      	ldr	r1, [pc, #364]	; (80015b4 <modo_usb+0x1ec>)
 8001446:	485c      	ldr	r0, [pc, #368]	; (80015b8 <modo_usb+0x1f0>)
 8001448:	f009 fe34 	bl	800b0b4 <siprintf>
			mode=buffer_usb[3];
 800144c:	4b57      	ldr	r3, [pc, #348]	; (80015ac <modo_usb+0x1e4>)
 800144e:	78db      	ldrb	r3, [r3, #3]
 8001450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			sprintf(str_aux, "%c%c%c%c",buffer_usb[5],buffer_usb[6],buffer_usb[7],buffer_usb[8]);
 8001454:	4b55      	ldr	r3, [pc, #340]	; (80015ac <modo_usb+0x1e4>)
 8001456:	795b      	ldrb	r3, [r3, #5]
 8001458:	4619      	mov	r1, r3
 800145a:	4b54      	ldr	r3, [pc, #336]	; (80015ac <modo_usb+0x1e4>)
 800145c:	799b      	ldrb	r3, [r3, #6]
 800145e:	461c      	mov	r4, r3
 8001460:	4b52      	ldr	r3, [pc, #328]	; (80015ac <modo_usb+0x1e4>)
 8001462:	79db      	ldrb	r3, [r3, #7]
 8001464:	461a      	mov	r2, r3
 8001466:	4b51      	ldr	r3, [pc, #324]	; (80015ac <modo_usb+0x1e4>)
 8001468:	7a1b      	ldrb	r3, [r3, #8]
 800146a:	4638      	mov	r0, r7
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	9200      	str	r2, [sp, #0]
 8001470:	4623      	mov	r3, r4
 8001472:	460a      	mov	r2, r1
 8001474:	4951      	ldr	r1, [pc, #324]	; (80015bc <modo_usb+0x1f4>)
 8001476:	f009 fe1d 	bl	800b0b4 <siprintf>
			valor=atoi(str_aux);
 800147a:	463b      	mov	r3, r7
 800147c:	4618      	mov	r0, r3
 800147e:	f009 fd59 	bl	800af34 <atoi>
 8001482:	6278      	str	r0, [r7, #36]	; 0x24
			CDC_Transmit_FS((uint8_t*) str, strlen(str));
 8001484:	484c      	ldr	r0, [pc, #304]	; (80015b8 <modo_usb+0x1f0>)
 8001486:	f7fe fe61 	bl	800014c <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29b      	uxth	r3, r3
 800148e:	4619      	mov	r1, r3
 8001490:	4849      	ldr	r0, [pc, #292]	; (80015b8 <modo_usb+0x1f0>)
 8001492:	f009 f971 	bl	800a778 <CDC_Transmit_FS>
			memset(buffer_usb, '\0',64);
 8001496:	2240      	movs	r2, #64	; 0x40
 8001498:	2100      	movs	r1, #0
 800149a:	4844      	ldr	r0, [pc, #272]	; (80015ac <modo_usb+0x1e4>)
 800149c:	f009 fe2a 	bl	800b0f4 <memset>
 80014a0:	e02b      	b.n	80014fa <modo_usb+0x132>

		}else if(buffer_usb[0]=='$' && buffer_usb[1]=='R' && buffer_usb[2]=='e' && buffer_usb[3]=='q'){//comando request
 80014a2:	4b42      	ldr	r3, [pc, #264]	; (80015ac <modo_usb+0x1e4>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b24      	cmp	r3, #36	; 0x24
 80014a8:	d127      	bne.n	80014fa <modo_usb+0x132>
 80014aa:	4b40      	ldr	r3, [pc, #256]	; (80015ac <modo_usb+0x1e4>)
 80014ac:	785b      	ldrb	r3, [r3, #1]
 80014ae:	2b52      	cmp	r3, #82	; 0x52
 80014b0:	d123      	bne.n	80014fa <modo_usb+0x132>
 80014b2:	4b3e      	ldr	r3, [pc, #248]	; (80015ac <modo_usb+0x1e4>)
 80014b4:	789b      	ldrb	r3, [r3, #2]
 80014b6:	2b65      	cmp	r3, #101	; 0x65
 80014b8:	d11f      	bne.n	80014fa <modo_usb+0x132>
 80014ba:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <modo_usb+0x1e4>)
 80014bc:	78db      	ldrb	r3, [r3, #3]
 80014be:	2b71      	cmp	r3, #113	; 0x71
 80014c0:	d11b      	bne.n	80014fa <modo_usb+0x132>
			sprintf(str, "$D,%c,%04d,%04d,%04d", mode,valor,(int)adc2use[0],(int)adc2use[1]);
 80014c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014c6:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <modo_usb+0x1e8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <modo_usb+0x1e8>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	9100      	str	r1, [sp, #0]
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	4937      	ldr	r1, [pc, #220]	; (80015b4 <modo_usb+0x1ec>)
 80014d8:	4837      	ldr	r0, [pc, #220]	; (80015b8 <modo_usb+0x1f0>)
 80014da:	f009 fdeb 	bl	800b0b4 <siprintf>
			CDC_Transmit_FS((uint8_t*) str, strlen(str));
 80014de:	4836      	ldr	r0, [pc, #216]	; (80015b8 <modo_usb+0x1f0>)
 80014e0:	f7fe fe34 	bl	800014c <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4619      	mov	r1, r3
 80014ea:	4833      	ldr	r0, [pc, #204]	; (80015b8 <modo_usb+0x1f0>)
 80014ec:	f009 f944 	bl	800a778 <CDC_Transmit_FS>
			memset(buffer_usb, '\0',64);
 80014f0:	2240      	movs	r2, #64	; 0x40
 80014f2:	2100      	movs	r1, #0
 80014f4:	482d      	ldr	r0, [pc, #180]	; (80015ac <modo_usb+0x1e4>)
 80014f6:	f009 fdfd 	bl	800b0f4 <memset>
		}
  //lectura fin modo usb
		if(tipo_dato(input_keypad)==3){
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <modo_usb+0x1e0>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f816 	bl	8000530 <tipo_dato>
 8001504:	4603      	mov	r3, r0
 8001506:	2b03      	cmp	r3, #3
 8001508:	d102      	bne.n	8001510 <modo_usb+0x148>
			flag_USB=0;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		}
  //call a funciones de control y display
		if(flag_update_loop_control){
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <modo_usb+0x1f8>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d014      	beq.n	8001542 <modo_usb+0x17a>

			 control_spi=control_carga(mode,adc2use[0],adc2use[1],(uint16_t)valor);
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <modo_usb+0x1e8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	b299      	uxth	r1, r3
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <modo_usb+0x1e8>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	b29a      	uxth	r2, r3
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	b29b      	uxth	r3, r3
 8001528:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 800152c:	f000 f934 	bl	8001798 <control_carga>
 8001530:	4603      	mov	r3, r0
 8001532:	843b      	strh	r3, [r7, #32]
			 enviar_spi_dac(control_spi);
 8001534:	8c3b      	ldrh	r3, [r7, #32]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fcb8 	bl	8000eac <enviar_spi_dac>
			 flag_update_loop_control=0;
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <modo_usb+0x1f8>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]

		  }
		  if(flag_update_display_1_seg){
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <modo_usb+0x1fc>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <modo_usb+0x19a>
			  display_update_running(mode,adc2use[0],adc2use[1]);
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <modo_usb+0x1e8>)
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <modo_usb+0x1e8>)
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f836 	bl	80015c8 <display_update_running>
			  flag_update_display_1_seg=0;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <modo_usb+0x1fc>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
	while(flag_USB==1){
 8001562:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001566:	2b01      	cmp	r3, #1
 8001568:	f43f af56 	beq.w	8001418 <modo_usb+0x50>
			  }
	}//fin while
	  input_keypad=0;
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <modo_usb+0x1e0>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
	  control_spi=0;
 8001572:	2300      	movs	r3, #0
 8001574:	843b      	strh	r3, [r7, #32]
	  enviar_spi_dac(control_spi);
 8001576:	8c3b      	ldrh	r3, [r7, #32]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fc97 	bl	8000eac <enviar_spi_dac>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);//led
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001584:	4806      	ldr	r0, [pc, #24]	; (80015a0 <modo_usb+0x1d8>)
 8001586:	f001 fb8c 	bl	8002ca2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);//cooler
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <modo_usb+0x1dc>)
 8001592:	f001 fb86 	bl	8002ca2 <HAL_GPIO_WritePin>
}//fin modo usb
 8001596:	bf00      	nop
 8001598:	372c      	adds	r7, #44	; 0x2c
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}
 800159e:	bf00      	nop
 80015a0:	40011000 	.word	0x40011000
 80015a4:	40010c00 	.word	0x40010c00
 80015a8:	20000436 	.word	0x20000436
 80015ac:	200003d8 	.word	0x200003d8
 80015b0:	200003d0 	.word	0x200003d0
 80015b4:	0800bb78 	.word	0x0800bb78
 80015b8:	20000418 	.word	0x20000418
 80015bc:	0800bb90 	.word	0x0800bb90
 80015c0:	200003bb 	.word	0x200003bb
 80015c4:	200003ba 	.word	0x200003ba

080015c8 <display_update_running>:

void display_update_running(char modo_op,uint32_t volt, uint32_t corriente){
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b095      	sub	sp, #84	; 0x54
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	4603      	mov	r3, r0
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	73fb      	strb	r3, [r7, #15]
	char char_as_str[] = {modo_op, '\0'};//encapsular, funcion de uso recurrente
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	char buffer_fun[20]="";//{"Modo C",char_as_str};
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
	char buffer_dato[20]="";
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
	uint32_t volt_convertido = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t corriente_convertido = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t potencia =0;
 800160e:	2300      	movs	r3, #0
 8001610:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t resistencia =0;
 8001612:	2300      	movs	r3, #0
 8001614:	877b      	strh	r3, [r7, #58]	; 0x3a
	volt_convertido=volt*FACTOR_ADC_VOLTAGE_mult;//122;
	volt_convertido=volt_convertido/FACTOR_ADC_VOLTAGE_div;//100;
	corriente_convertido=corriente*FACTOR_ADC_30A_CURRENT_mult;//8437;
	corriente_convertido=corriente_convertido/FACTOR_ADC_30A_CURRENT_div;//10000;
	*/
	potencia = volt*corriente;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
	potencia=potencia/1000;
 8001620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001622:	4a54      	ldr	r2, [pc, #336]	; (8001774 <display_update_running+0x1ac>)
 8001624:	fba2 2303 	umull	r2, r3, r2, r3
 8001628:	099b      	lsrs	r3, r3, #6
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c
	resistencia=volt/corriente;
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	fbb2 f3f3 	udiv	r3, r2, r3
 8001634:	877b      	strh	r3, [r7, #58]	; 0x3a


	LCD_I2C_cmd(LCD_CLEAR);
 8001636:	2001      	movs	r0, #1
 8001638:	f7fe fd90 	bl	800015c <LCD_I2C_cmd>
	if(modo_op == 'R'){
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	2b52      	cmp	r3, #82	; 0x52
 8001640:	d11c      	bne.n	800167c <display_update_running+0xb4>
		LCD_I2C_cmd(LCD_LINEA1);
 8001642:	2000      	movs	r0, #0
 8001644:	f7fe fd8a 	bl	800015c <LCD_I2C_cmd>
		if(resistencia>4999)snprintf(buffer_dato, sizeof(buffer_dato), "Res: O.Lim");
 8001648:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800164a:	f241 3287 	movw	r2, #4999	; 0x1387
 800164e:	4293      	cmp	r3, r2
 8001650:	d907      	bls.n	8001662 <display_update_running+0x9a>
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	4a48      	ldr	r2, [pc, #288]	; (8001778 <display_update_running+0x1b0>)
 8001658:	2114      	movs	r1, #20
 800165a:	4618      	mov	r0, r3
 800165c:	f009 fcf6 	bl	800b04c <sniprintf>
 8001660:	e006      	b.n	8001670 <display_update_running+0xa8>
		else snprintf(buffer_dato, sizeof(buffer_dato), "Res: %d[ohm]", resistencia);
 8001662:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001664:	f107 0010 	add.w	r0, r7, #16
 8001668:	4a44      	ldr	r2, [pc, #272]	; (800177c <display_update_running+0x1b4>)
 800166a:	2114      	movs	r1, #20
 800166c:	f009 fcee 	bl	800b04c <sniprintf>
		LCD_I2C_write_text(buffer_dato);
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe fdee 	bl	8000256 <LCD_I2C_write_text>
 800167a:	e00f      	b.n	800169c <display_update_running+0xd4>
	}
	else{
		snprintf(buffer_fun, sizeof(buffer_fun), "Running Modo C%s:", char_as_str);
 800167c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001680:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001684:	4a3e      	ldr	r2, [pc, #248]	; (8001780 <display_update_running+0x1b8>)
 8001686:	2114      	movs	r1, #20
 8001688:	f009 fce0 	bl	800b04c <sniprintf>
		LCD_I2C_cmd(LCD_LINEA1);
 800168c:	2000      	movs	r0, #0
 800168e:	f7fe fd65 	bl	800015c <LCD_I2C_cmd>
		LCD_I2C_write_text(buffer_fun);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe fddd 	bl	8000256 <LCD_I2C_write_text>
	}
	LCD_I2C_cmd(LCD_LINEA2);
 800169c:	20c0      	movs	r0, #192	; 0xc0
 800169e:	f7fe fd5d 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Voltage: %d.%02d [V]",  (int)volt/100,(int)volt%100);//
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	4a37      	ldr	r2, [pc, #220]	; (8001784 <display_update_running+0x1bc>)
 80016a6:	fb82 1203 	smull	r1, r2, r2, r3
 80016aa:	1152      	asrs	r2, r2, #5
 80016ac:	17db      	asrs	r3, r3, #31
 80016ae:	1ad4      	subs	r4, r2, r3
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4b34      	ldr	r3, [pc, #208]	; (8001784 <display_update_running+0x1bc>)
 80016b4:	fb83 1302 	smull	r1, r3, r3, r2
 80016b8:	1159      	asrs	r1, r3, #5
 80016ba:	17d3      	asrs	r3, r2, #31
 80016bc:	1acb      	subs	r3, r1, r3
 80016be:	2164      	movs	r1, #100	; 0x64
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f107 0010 	add.w	r0, r7, #16
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	4623      	mov	r3, r4
 80016ce:	4a2e      	ldr	r2, [pc, #184]	; (8001788 <display_update_running+0x1c0>)
 80016d0:	2114      	movs	r1, #20
 80016d2:	f009 fcbb 	bl	800b04c <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fdbb 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA3);
 80016e0:	2094      	movs	r0, #148	; 0x94
 80016e2:	f7fe fd3b 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Current: %d.%02d [A]", (int)corriente/100,(int)corriente%100);//
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a26      	ldr	r2, [pc, #152]	; (8001784 <display_update_running+0x1bc>)
 80016ea:	fb82 1203 	smull	r1, r2, r2, r3
 80016ee:	1152      	asrs	r2, r2, #5
 80016f0:	17db      	asrs	r3, r3, #31
 80016f2:	1ad4      	subs	r4, r2, r3
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4b23      	ldr	r3, [pc, #140]	; (8001784 <display_update_running+0x1bc>)
 80016f8:	fb83 1302 	smull	r1, r3, r3, r2
 80016fc:	1159      	asrs	r1, r3, #5
 80016fe:	17d3      	asrs	r3, r2, #31
 8001700:	1acb      	subs	r3, r1, r3
 8001702:	2164      	movs	r1, #100	; 0x64
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f107 0010 	add.w	r0, r7, #16
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4623      	mov	r3, r4
 8001712:	4a1e      	ldr	r2, [pc, #120]	; (800178c <display_update_running+0x1c4>)
 8001714:	2114      	movs	r1, #20
 8001716:	f009 fc99 	bl	800b04c <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fd99 	bl	8000256 <LCD_I2C_write_text>
	LCD_I2C_cmd(LCD_LINEA4);
 8001724:	20d4      	movs	r0, #212	; 0xd4
 8001726:	f7fe fd19 	bl	800015c <LCD_I2C_cmd>
	snprintf(buffer_dato, sizeof(buffer_dato), "Pot: %d.%d [W]", (int)potencia/10,(int)potencia%10);//
 800172a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172c:	4a18      	ldr	r2, [pc, #96]	; (8001790 <display_update_running+0x1c8>)
 800172e:	fb82 1203 	smull	r1, r2, r2, r3
 8001732:	1092      	asrs	r2, r2, #2
 8001734:	17db      	asrs	r3, r3, #31
 8001736:	1ad4      	subs	r4, r2, r3
 8001738:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <display_update_running+0x1c8>)
 800173c:	fb83 2301 	smull	r2, r3, r3, r1
 8001740:	109a      	asrs	r2, r3, #2
 8001742:	17cb      	asrs	r3, r1, #31
 8001744:	1ad2      	subs	r2, r2, r3
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	1aca      	subs	r2, r1, r3
 8001750:	f107 0010 	add.w	r0, r7, #16
 8001754:	9200      	str	r2, [sp, #0]
 8001756:	4623      	mov	r3, r4
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <display_update_running+0x1cc>)
 800175a:	2114      	movs	r1, #20
 800175c:	f009 fc76 	bl	800b04c <sniprintf>
	LCD_I2C_write_text(buffer_dato);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fd76 	bl	8000256 <LCD_I2C_write_text>
}
 800176a:	bf00      	nop
 800176c:	374c      	adds	r7, #76	; 0x4c
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	10624dd3 	.word	0x10624dd3
 8001778:	0800bb9c 	.word	0x0800bb9c
 800177c:	0800bba8 	.word	0x0800bba8
 8001780:	0800bbb8 	.word	0x0800bbb8
 8001784:	51eb851f 	.word	0x51eb851f
 8001788:	0800bb00 	.word	0x0800bb00
 800178c:	0800bbcc 	.word	0x0800bbcc
 8001790:	66666667 	.word	0x66666667
 8001794:	0800bbe4 	.word	0x0800bbe4

08001798 <control_carga>:

uint16_t control_carga(char modo, uint16_t voltage, uint16_t current, uint16_t set_point){
 8001798:	b490      	push	{r4, r7}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4604      	mov	r4, r0
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4623      	mov	r3, r4
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	4603      	mov	r3, r0
 80017ac:	80bb      	strh	r3, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	807b      	strh	r3, [r7, #2]
 80017b2:	4613      	mov	r3, r2
 80017b4:	803b      	strh	r3, [r7, #0]
	uint32_t calculo = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
	uint16_t DAC_nuevo_valor = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	817b      	strh	r3, [r7, #10]
	volt_convertido=voltage*FACTOR_ADC_VOLTAGE_mult;//122;
	volt_convertido=volt_convertido/FACTOR_ADC_VOLTAGE_div;//100;
	corriente_convertido=current*FACTOR_ADC_30A_CURRENT_mult;//8437;
	corriente_convertido=corriente_convertido/FACTOR_ADC_30A_CURRENT_div;//10000;
	 */
	switch(modo){
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	3b43      	subs	r3, #67	; 0x43
 80017c2:	2b13      	cmp	r3, #19
 80017c4:	d871      	bhi.n	80018aa <control_carga+0x112>
 80017c6:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <control_carga+0x34>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	0800181d 	.word	0x0800181d
 80017d0:	080018ab 	.word	0x080018ab
 80017d4:	080018ab 	.word	0x080018ab
 80017d8:	080018ab 	.word	0x080018ab
 80017dc:	080018ab 	.word	0x080018ab
 80017e0:	080018ab 	.word	0x080018ab
 80017e4:	080018ab 	.word	0x080018ab
 80017e8:	080018ab 	.word	0x080018ab
 80017ec:	080018ab 	.word	0x080018ab
 80017f0:	080018ab 	.word	0x080018ab
 80017f4:	080018ab 	.word	0x080018ab
 80017f8:	080018ab 	.word	0x080018ab
 80017fc:	080018ab 	.word	0x080018ab
 8001800:	08001841 	.word	0x08001841
 8001804:	080018ab 	.word	0x080018ab
 8001808:	08001875 	.word	0x08001875
 800180c:	080018ab 	.word	0x080018ab
 8001810:	080018ab 	.word	0x080018ab
 8001814:	080018ab 	.word	0x080018ab
 8001818:	0800183b 	.word	0x0800183b
	case 'C'://seteo directo
		calculo = set_point * 4095;//dac resol
 800181c:	883a      	ldrh	r2, [r7, #0]
 800181e:	4613      	mov	r3, r2
 8001820:	031b      	lsls	r3, r3, #12
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
		calculo = calculo /N_TRANSISTORES; //div num MOSFET
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	60fb      	str	r3, [r7, #12]
		calculo = calculo /I_MAX_x_TRANSISTOR;//div corriente max por cada mosfet 250->2500 mA
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <control_carga+0x128>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	095b      	lsrs	r3, r3, #5
 8001836:	60fb      	str	r3, [r7, #12]
		break;
 8001838:	e039      	b.n	80018ae <control_carga+0x116>
	case 'V':
		//rev
		calculo = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
		break;
 800183e:	e036      	b.n	80018ae <control_carga+0x116>
	case 'P':
		calculo = set_point * 1000;// agregamos ceros para que se alinee la coma y el resultado sea con las cifras correspondientes
 8001840:	883b      	ldrh	r3, [r7, #0]
 8001842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	60fb      	str	r3, [r7, #12]
		calculo=calculo/voltage;//P/V=I
 800184c:	88bb      	ldrh	r3, [r7, #4]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	60fb      	str	r3, [r7, #12]
		calculo = calculo * 4095;//dac resol
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4613      	mov	r3, r2
 800185a:	031b      	lsls	r3, r3, #12
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
		calculo = calculo /N_TRANSISTORES; //div num MOSFET
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	60fb      	str	r3, [r7, #12]
		calculo = calculo /I_MAX_x_TRANSISTOR;//div corriente max por cada mosfet 250->2500 mA
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <control_carga+0x128>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	60fb      	str	r3, [r7, #12]
		break;
 8001872:	e01c      	b.n	80018ae <control_carga+0x116>
	case 'R':
		calculo=voltage*1000;//ceros para acomodar la coma
 8001874:	88bb      	ldrh	r3, [r7, #4]
 8001876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800187a:	fb02 f303 	mul.w	r3, r2, r3
 800187e:	60fb      	str	r3, [r7, #12]
		calculo=voltage/set_point;//por ley de ohm
 8001880:	88ba      	ldrh	r2, [r7, #4]
 8001882:	883b      	ldrh	r3, [r7, #0]
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	b29b      	uxth	r3, r3
 800188a:	60fb      	str	r3, [r7, #12]
		calculo = calculo * 4095;//dac resol
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4613      	mov	r3, r2
 8001890:	031b      	lsls	r3, r3, #12
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
		calculo = calculo /N_TRANSISTORES; //div num MOSFET
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	60fb      	str	r3, [r7, #12]
		calculo = calculo /I_MAX_x_TRANSISTOR;//div corriente max por cada mosfet 250->2500 mA
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <control_carga+0x128>)
 80018a0:	fba2 2303 	umull	r2, r3, r2, r3
 80018a4:	095b      	lsrs	r3, r3, #5
 80018a6:	60fb      	str	r3, [r7, #12]
		break;
 80018a8:	e001      	b.n	80018ae <control_carga+0x116>
	default:
		calculo=0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]

	}
	DAC_nuevo_valor=(uint16_t)calculo;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	817b      	strh	r3, [r7, #10]
	return DAC_nuevo_valor;
 80018b2:	897b      	ldrh	r3, [r7, #10]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc90      	pop	{r4, r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	10624dd3 	.word	0x10624dd3

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	e7fe      	b.n	80018cc <Error_Handler+0x8>
	...

080018d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_MspInit+0x5c>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	4a14      	ldr	r2, [pc, #80]	; (800192c <HAL_MspInit+0x5c>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6193      	str	r3, [r2, #24]
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_MspInit+0x5c>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_MspInit+0x5c>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <HAL_MspInit+0x5c>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_MspInit+0x5c>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_MspInit+0x60>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_MspInit+0x60>)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000

08001934 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a28      	ldr	r2, [pc, #160]	; (80019f0 <HAL_ADC_MspInit+0xbc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d149      	bne.n	80019e8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_ADC_MspInit+0xc0>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a26      	ldr	r2, [pc, #152]	; (80019f4 <HAL_ADC_MspInit+0xc0>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <HAL_ADC_MspInit+0xc0>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_ADC_MspInit+0xc0>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <HAL_ADC_MspInit+0xc0>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_ADC_MspInit+0xc0>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001984:	231e      	movs	r3, #30
 8001986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001988:	2303      	movs	r3, #3
 800198a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4619      	mov	r1, r3
 8001992:	4819      	ldr	r0, [pc, #100]	; (80019f8 <HAL_ADC_MspInit+0xc4>)
 8001994:	f000 ffea 	bl	800296c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <HAL_ADC_MspInit+0xc8>)
 800199a:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <HAL_ADC_MspInit+0xcc>)
 800199c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_ADC_MspInit+0xc8>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_ADC_MspInit+0xc8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_ADC_MspInit+0xc8>)
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_ADC_MspInit+0xc8>)
 80019b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_ADC_MspInit+0xc8>)
 80019ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_ADC_MspInit+0xc8>)
 80019c2:	2220      	movs	r2, #32
 80019c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_ADC_MspInit+0xc8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019cc:	480b      	ldr	r0, [pc, #44]	; (80019fc <HAL_ADC_MspInit+0xc8>)
 80019ce:	f000 fee5 	bl	800279c <HAL_DMA_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80019d8:	f7ff ff74 	bl	80018c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_ADC_MspInit+0xc8>)
 80019e0:	621a      	str	r2, [r3, #32]
 80019e2:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_ADC_MspInit+0xc8>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40012400 	.word	0x40012400
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40010800 	.word	0x40010800
 80019fc:	20000238 	.word	0x20000238
 8001a00:	40020008 	.word	0x40020008

08001a04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a15      	ldr	r2, [pc, #84]	; (8001a74 <HAL_I2C_MspInit+0x70>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d123      	bne.n	8001a6c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_I2C_MspInit+0x74>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <HAL_I2C_MspInit+0x74>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_I2C_MspInit+0x74>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a3c:	23c0      	movs	r3, #192	; 0xc0
 8001a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a40:	2312      	movs	r3, #18
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480b      	ldr	r0, [pc, #44]	; (8001a7c <HAL_I2C_MspInit+0x78>)
 8001a50:	f000 ff8c 	bl	800296c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_I2C_MspInit+0x74>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_I2C_MspInit+0x74>)
 8001a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a5e:	61d3      	str	r3, [r2, #28]
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_I2C_MspInit+0x74>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40005400 	.word	0x40005400
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010c00 	.word	0x40010c00

08001a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <HAL_SPI_MspInit+0x70>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d123      	bne.n	8001ae8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_SPI_MspInit+0x74>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <HAL_SPI_MspInit+0x74>)
 8001aa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_SPI_MspInit+0x74>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_SPI_MspInit+0x74>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <HAL_SPI_MspInit+0x74>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_SPI_MspInit+0x74>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ad0:	23a0      	movs	r3, #160	; 0xa0
 8001ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <HAL_SPI_MspInit+0x78>)
 8001ae4:	f000 ff42 	bl	800296c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40013000 	.word	0x40013000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010800 	.word	0x40010800

08001afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0c:	d114      	bne.n	8001b38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_TIM_Base_MspInit+0x78>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <HAL_TIM_Base_MspInit+0x78>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_TIM_Base_MspInit+0x78>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	201c      	movs	r0, #28
 8001b2c:	f000 fdff 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b30:	201c      	movs	r0, #28
 8001b32:	f000 fe18 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b36:	e018      	b.n	8001b6a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_TIM_Base_MspInit+0x7c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d113      	bne.n	8001b6a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_TIM_Base_MspInit+0x78>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <HAL_TIM_Base_MspInit+0x78>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_TIM_Base_MspInit+0x78>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	201d      	movs	r0, #29
 8001b60:	f000 fde5 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b64:	201d      	movs	r0, #29
 8001b66:	f000 fdfe 	bl	8002766 <HAL_NVIC_EnableIRQ>
}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40000400 	.word	0x40000400

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <NMI_Handler+0x4>

08001b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <MemManage_Handler+0x4>

08001b8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc2:	f000 f8d1 	bl	8001d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001bd2:	f001 fe7e 	bl	80038d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20001108 	.word	0x20001108

08001be0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001be4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001be8:	f001 f88c 	bl	8002d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <TIM2_IRQHandler+0x10>)
 8001bf6:	f004 fa83 	bl	8006100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000328 	.word	0x20000328

08001c04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <TIM3_IRQHandler+0x10>)
 8001c0a:	f004 fa79 	bl	8006100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000370 	.word	0x20000370

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f009 fa5c 	bl	800b104 <__errno>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20005000 	.word	0x20005000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	20000438 	.word	0x20000438
 8001c80:	20001760 	.word	0x20001760

08001c84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c90:	f7ff fff8 	bl	8001c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c96:	490c      	ldr	r1, [pc, #48]	; (8001cc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c98:	4a0c      	ldr	r2, [pc, #48]	; (8001ccc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c9c:	e002      	b.n	8001ca4 <LoopCopyDataInit>

08001c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca2:	3304      	adds	r3, #4

08001ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca8:	d3f9      	bcc.n	8001c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cac:	4c09      	ldr	r4, [pc, #36]	; (8001cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb0:	e001      	b.n	8001cb6 <LoopFillZerobss>

08001cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb4:	3204      	adds	r2, #4

08001cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb8:	d3fb      	bcc.n	8001cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cba:	f009 fa29 	bl	800b110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cbe:	f7fe fc5f 	bl	8000580 <main>
  bx lr
 8001cc2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ccc:	0800bda4 	.word	0x0800bda4
  ldr r2, =_sbss
 8001cd0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001cd4:	20001760 	.word	0x20001760

08001cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC1_2_IRQHandler>
	...

08001cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_Init+0x28>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_Init+0x28>)
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 fd13 	bl	8002718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	f000 f808 	bl	8001d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fdea 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40022000 	.word	0x40022000

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_InitTick+0x54>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x58>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fd2b 	bl	8002782 <HAL_SYSTICK_Config>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00e      	b.n	8001d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d80a      	bhi.n	8001d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f000 fcf3 	bl	800272e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_InitTick+0x5c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000020 	.word	0x20000020
 8001d60:	20000028 	.word	0x20000028
 8001d64:	20000024 	.word	0x20000024

08001d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_IncTick+0x1c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_IncTick+0x20>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a03      	ldr	r2, [pc, #12]	; (8001d88 <HAL_IncTick+0x20>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000028 	.word	0x20000028
 8001d88:	2000043c 	.word	0x2000043c

08001d8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <HAL_GetTick+0x10>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	2000043c 	.word	0x2000043c

08001da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff fff0 	bl	8001d8c <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d005      	beq.n	8001dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_Delay+0x44>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc6:	bf00      	nop
 8001dc8:	f7ff ffe0 	bl	8001d8c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d8f7      	bhi.n	8001dc8 <HAL_Delay+0x28>
  {
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000028 	.word	0x20000028

08001de8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0be      	b.n	8001f88 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fd84 	bl	8001934 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 faff 	bl	8002430 <ADC_ConversionStop_Disable>
 8001e32:	4603      	mov	r3, r0
 8001e34:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f040 8099 	bne.w	8001f76 <HAL_ADC_Init+0x18e>
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 8095 	bne.w	8001f76 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e54:	f023 0302 	bic.w	r3, r3, #2
 8001e58:	f043 0202 	orr.w	r2, r3, #2
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7b1b      	ldrb	r3, [r3, #12]
 8001e6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e80:	d003      	beq.n	8001e8a <HAL_ADC_Init+0xa2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d102      	bne.n	8001e90 <HAL_ADC_Init+0xa8>
 8001e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8e:	e000      	b.n	8001e92 <HAL_ADC_Init+0xaa>
 8001e90:	2300      	movs	r3, #0
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7d1b      	ldrb	r3, [r3, #20]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d119      	bne.n	8001ed4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7b1b      	ldrb	r3, [r3, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	035a      	lsls	r2, r3, #13
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	e00b      	b.n	8001ed4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	f043 0220 	orr.w	r2, r3, #32
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	f043 0201 	orr.w	r2, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <HAL_ADC_Init+0x1a8>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f04:	d003      	beq.n	8001f0e <HAL_ADC_Init+0x126>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d104      	bne.n	8001f18 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	051b      	lsls	r3, r3, #20
 8001f16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_ADC_Init+0x1ac>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d10b      	bne.n	8001f54 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	f023 0303 	bic.w	r3, r3, #3
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f52:	e018      	b.n	8001f86 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f023 0312 	bic.w	r3, r3, #18
 8001f5c:	f043 0210 	orr.w	r2, r3, #16
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	f043 0201 	orr.w	r2, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f74:	e007      	b.n	8001f86 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	f043 0210 	orr.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	ffe1f7fd 	.word	0xffe1f7fd
 8001f94:	ff1f0efe 	.word	0xff1f0efe

08001f98 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a64      	ldr	r2, [pc, #400]	; (8002140 <HAL_ADC_Start_DMA+0x1a8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d004      	beq.n	8001fbc <HAL_ADC_Start_DMA+0x24>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a63      	ldr	r2, [pc, #396]	; (8002144 <HAL_ADC_Start_DMA+0x1ac>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d106      	bne.n	8001fca <HAL_ADC_Start_DMA+0x32>
 8001fbc:	4b60      	ldr	r3, [pc, #384]	; (8002140 <HAL_ADC_Start_DMA+0x1a8>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f040 80b3 	bne.w	8002130 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADC_Start_DMA+0x40>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e0ae      	b.n	8002136 <HAL_ADC_Start_DMA+0x19e>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f9cb 	bl	800237c <ADC_Enable>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f040 809a 	bne.w	8002126 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a4e      	ldr	r2, [pc, #312]	; (8002144 <HAL_ADC_Start_DMA+0x1ac>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d105      	bne.n	800201c <HAL_ADC_Start_DMA+0x84>
 8002010:	4b4b      	ldr	r3, [pc, #300]	; (8002140 <HAL_ADC_Start_DMA+0x1a8>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d115      	bne.n	8002048 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d026      	beq.n	8002084 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800203e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002046:	e01d      	b.n	8002084 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a39      	ldr	r2, [pc, #228]	; (8002140 <HAL_ADC_Start_DMA+0x1a8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d004      	beq.n	8002068 <HAL_ADC_Start_DMA+0xd0>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a38      	ldr	r2, [pc, #224]	; (8002144 <HAL_ADC_Start_DMA+0x1ac>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d10d      	bne.n	8002084 <HAL_ADC_Start_DMA+0xec>
 8002068:	4b35      	ldr	r3, [pc, #212]	; (8002140 <HAL_ADC_Start_DMA+0x1a8>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800207c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d006      	beq.n	800209e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	f023 0206 	bic.w	r2, r3, #6
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
 800209c:	e002      	b.n	80020a4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a25      	ldr	r2, [pc, #148]	; (8002148 <HAL_ADC_Start_DMA+0x1b0>)
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a24      	ldr	r2, [pc, #144]	; (800214c <HAL_ADC_Start_DMA+0x1b4>)
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a23      	ldr	r2, [pc, #140]	; (8002150 <HAL_ADC_Start_DMA+0x1b8>)
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0202 	mvn.w	r2, #2
 80020cc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020dc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a18      	ldr	r0, [r3, #32]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	334c      	adds	r3, #76	; 0x4c
 80020e8:	4619      	mov	r1, r3
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f000 fbaf 	bl	8002850 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020fc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002100:	d108      	bne.n	8002114 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002110:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002112:	e00f      	b.n	8002134 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002122:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002124:	e006      	b.n	8002134 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800212e:	e001      	b.n	8002134 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002134:	7dfb      	ldrb	r3, [r7, #23]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40012400 	.word	0x40012400
 8002144:	40012800 	.word	0x40012800
 8002148:	080024b3 	.word	0x080024b3
 800214c:	0800252f 	.word	0x0800252f
 8002150:	0800254b 	.word	0x0800254b

08002154 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
	...

0800218c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x20>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e0dc      	b.n	8002366 <HAL_ADC_ConfigChannel+0x1da>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b06      	cmp	r3, #6
 80021ba:	d81c      	bhi.n	80021f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	3b05      	subs	r3, #5
 80021ce:	221f      	movs	r2, #31
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4019      	ands	r1, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	3b05      	subs	r3, #5
 80021e8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34
 80021f4:	e03c      	b.n	8002270 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d81c      	bhi.n	8002238 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	3b23      	subs	r3, #35	; 0x23
 8002210:	221f      	movs	r2, #31
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	4019      	ands	r1, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b23      	subs	r3, #35	; 0x23
 800222a:	fa00 f203 	lsl.w	r2, r0, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
 8002236:	e01b      	b.n	8002270 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	3b41      	subs	r3, #65	; 0x41
 800224a:	221f      	movs	r2, #31
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	4019      	ands	r1, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b41      	subs	r3, #65	; 0x41
 8002264:	fa00 f203 	lsl.w	r2, r0, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b09      	cmp	r3, #9
 8002276:	d91c      	bls.n	80022b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68d9      	ldr	r1, [r3, #12]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	3b1e      	subs	r3, #30
 800228a:	2207      	movs	r2, #7
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	4019      	ands	r1, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6898      	ldr	r0, [r3, #8]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	3b1e      	subs	r3, #30
 80022a4:	fa00 f203 	lsl.w	r2, r0, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	e019      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6919      	ldr	r1, [r3, #16]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	2207      	movs	r2, #7
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	4019      	ands	r1, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6898      	ldr	r0, [r3, #8]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	fa00 f203 	lsl.w	r2, r0, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d003      	beq.n	80022f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022f2:	2b11      	cmp	r3, #17
 80022f4:	d132      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1d      	ldr	r2, [pc, #116]	; (8002370 <HAL_ADC_ConfigChannel+0x1e4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d125      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d126      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800231c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b10      	cmp	r3, #16
 8002324:	d11a      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_ADC_ConfigChannel+0x1e8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a13      	ldr	r2, [pc, #76]	; (8002378 <HAL_ADC_ConfigChannel+0x1ec>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	0c9a      	lsrs	r2, r3, #18
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800233c:	e002      	b.n	8002344 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3b01      	subs	r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f9      	bne.n	800233e <HAL_ADC_ConfigChannel+0x1b2>
 800234a:	e007      	b.n	800235c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	40012400 	.word	0x40012400
 8002374:	20000020 	.word	0x20000020
 8002378:	431bde83 	.word	0x431bde83

0800237c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d040      	beq.n	800241c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0201 	orr.w	r2, r2, #1
 80023a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023aa:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <ADC_Enable+0xac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1f      	ldr	r2, [pc, #124]	; (800242c <ADC_Enable+0xb0>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	0c9b      	lsrs	r3, r3, #18
 80023b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023b8:	e002      	b.n	80023c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	3b01      	subs	r3, #1
 80023be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f9      	bne.n	80023ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023c6:	f7ff fce1 	bl	8001d8c <HAL_GetTick>
 80023ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023cc:	e01f      	b.n	800240e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023ce:	f7ff fcdd 	bl	8001d8c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d918      	bls.n	800240e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d011      	beq.n	800240e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ee:	f043 0210 	orr.w	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	f043 0201 	orr.w	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e007      	b.n	800241e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b01      	cmp	r3, #1
 800241a:	d1d8      	bne.n	80023ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000020 	.word	0x20000020
 800242c:	431bde83 	.word	0x431bde83

08002430 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d12e      	bne.n	80024a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0201 	bic.w	r2, r2, #1
 8002458:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800245a:	f7ff fc97 	bl	8001d8c <HAL_GetTick>
 800245e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002460:	e01b      	b.n	800249a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002462:	f7ff fc93 	bl	8001d8c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d914      	bls.n	800249a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	d10d      	bne.n	800249a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e007      	b.n	80024aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d0dc      	beq.n	8002462 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d127      	bne.n	800251c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024e6:	d115      	bne.n	8002514 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d111      	bne.n	8002514 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f7ff fe1d 	bl	8002154 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800251a:	e004      	b.n	8002526 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	4798      	blx	r3
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fe12 	bl	8002166 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	f043 0204 	orr.w	r2, r3, #4
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f7ff fe01 	bl	8002178 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4906      	ldr	r1, [pc, #24]	; (8002618 <__NVIC_EnableIRQ+0x34>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	; (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	; (800266c <__NVIC_SetPriority+0x50>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	; 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e4:	d301      	bcc.n	80026ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <SysTick_Config+0x40>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f2:	210f      	movs	r1, #15
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f7ff ff90 	bl	800261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SysTick_Config+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <SysTick_Config+0x40>)
 8002704:	2207      	movs	r2, #7
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff2d 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002740:	f7ff ff42 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 8002744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff ff90 	bl	8002670 <NVIC_EncodePriority>
 8002750:	4602      	mov	r2, r0
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff5f 	bl	800261c <__NVIC_SetPriority>
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff35 	bl	80025e4 <__NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff ffa2 	bl	80026d4 <SysTick_Config>
 8002790:	4603      	mov	r3, r0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e043      	b.n	800283a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b22      	ldr	r3, [pc, #136]	; (8002844 <HAL_DMA_Init+0xa8>)
 80027ba:	4413      	add	r3, r2
 80027bc:	4a22      	ldr	r2, [pc, #136]	; (8002848 <HAL_DMA_Init+0xac>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	009a      	lsls	r2, r3, #2
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1f      	ldr	r2, [pc, #124]	; (800284c <HAL_DMA_Init+0xb0>)
 80027ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002800:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	bffdfff8 	.word	0xbffdfff8
 8002848:	cccccccd 	.word	0xcccccccd
 800284c:	40020000 	.word	0x40020000

08002850 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_DMA_Start_IT+0x20>
 800286c:	2302      	movs	r3, #2
 800286e:	e04b      	b.n	8002908 <HAL_DMA_Start_IT+0xb8>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d13a      	bne.n	80028fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f831 	bl	8002910 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 020e 	orr.w	r2, r2, #14
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e00f      	b.n	80028e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0204 	bic.w	r2, r2, #4
 80028d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 020a 	orr.w	r2, r2, #10
 80028e6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e005      	b.n	8002906 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002902:	2302      	movs	r3, #2
 8002904:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002926:	2101      	movs	r1, #1
 8002928:	fa01 f202 	lsl.w	r2, r1, r2
 800292c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b10      	cmp	r3, #16
 800293c:	d108      	bne.n	8002950 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800294e:	e007      	b.n	8002960 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
	...

0800296c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800296c:	b480      	push	{r7}
 800296e:	b08b      	sub	sp, #44	; 0x2c
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297e:	e169      	b.n	8002c54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002980:	2201      	movs	r2, #1
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	429a      	cmp	r2, r3
 800299a:	f040 8158 	bne.w	8002c4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4a9a      	ldr	r2, [pc, #616]	; (8002c0c <HAL_GPIO_Init+0x2a0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d05e      	beq.n	8002a66 <HAL_GPIO_Init+0xfa>
 80029a8:	4a98      	ldr	r2, [pc, #608]	; (8002c0c <HAL_GPIO_Init+0x2a0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d875      	bhi.n	8002a9a <HAL_GPIO_Init+0x12e>
 80029ae:	4a98      	ldr	r2, [pc, #608]	; (8002c10 <HAL_GPIO_Init+0x2a4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d058      	beq.n	8002a66 <HAL_GPIO_Init+0xfa>
 80029b4:	4a96      	ldr	r2, [pc, #600]	; (8002c10 <HAL_GPIO_Init+0x2a4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d86f      	bhi.n	8002a9a <HAL_GPIO_Init+0x12e>
 80029ba:	4a96      	ldr	r2, [pc, #600]	; (8002c14 <HAL_GPIO_Init+0x2a8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d052      	beq.n	8002a66 <HAL_GPIO_Init+0xfa>
 80029c0:	4a94      	ldr	r2, [pc, #592]	; (8002c14 <HAL_GPIO_Init+0x2a8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d869      	bhi.n	8002a9a <HAL_GPIO_Init+0x12e>
 80029c6:	4a94      	ldr	r2, [pc, #592]	; (8002c18 <HAL_GPIO_Init+0x2ac>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d04c      	beq.n	8002a66 <HAL_GPIO_Init+0xfa>
 80029cc:	4a92      	ldr	r2, [pc, #584]	; (8002c18 <HAL_GPIO_Init+0x2ac>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d863      	bhi.n	8002a9a <HAL_GPIO_Init+0x12e>
 80029d2:	4a92      	ldr	r2, [pc, #584]	; (8002c1c <HAL_GPIO_Init+0x2b0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d046      	beq.n	8002a66 <HAL_GPIO_Init+0xfa>
 80029d8:	4a90      	ldr	r2, [pc, #576]	; (8002c1c <HAL_GPIO_Init+0x2b0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d85d      	bhi.n	8002a9a <HAL_GPIO_Init+0x12e>
 80029de:	2b12      	cmp	r3, #18
 80029e0:	d82a      	bhi.n	8002a38 <HAL_GPIO_Init+0xcc>
 80029e2:	2b12      	cmp	r3, #18
 80029e4:	d859      	bhi.n	8002a9a <HAL_GPIO_Init+0x12e>
 80029e6:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <HAL_GPIO_Init+0x80>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	08002a67 	.word	0x08002a67
 80029f0:	08002a41 	.word	0x08002a41
 80029f4:	08002a53 	.word	0x08002a53
 80029f8:	08002a95 	.word	0x08002a95
 80029fc:	08002a9b 	.word	0x08002a9b
 8002a00:	08002a9b 	.word	0x08002a9b
 8002a04:	08002a9b 	.word	0x08002a9b
 8002a08:	08002a9b 	.word	0x08002a9b
 8002a0c:	08002a9b 	.word	0x08002a9b
 8002a10:	08002a9b 	.word	0x08002a9b
 8002a14:	08002a9b 	.word	0x08002a9b
 8002a18:	08002a9b 	.word	0x08002a9b
 8002a1c:	08002a9b 	.word	0x08002a9b
 8002a20:	08002a9b 	.word	0x08002a9b
 8002a24:	08002a9b 	.word	0x08002a9b
 8002a28:	08002a9b 	.word	0x08002a9b
 8002a2c:	08002a9b 	.word	0x08002a9b
 8002a30:	08002a49 	.word	0x08002a49
 8002a34:	08002a5d 	.word	0x08002a5d
 8002a38:	4a79      	ldr	r2, [pc, #484]	; (8002c20 <HAL_GPIO_Init+0x2b4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a3e:	e02c      	b.n	8002a9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	623b      	str	r3, [r7, #32]
          break;
 8002a46:	e029      	b.n	8002a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	623b      	str	r3, [r7, #32]
          break;
 8002a50:	e024      	b.n	8002a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	3308      	adds	r3, #8
 8002a58:	623b      	str	r3, [r7, #32]
          break;
 8002a5a:	e01f      	b.n	8002a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	330c      	adds	r3, #12
 8002a62:	623b      	str	r3, [r7, #32]
          break;
 8002a64:	e01a      	b.n	8002a9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a6e:	2304      	movs	r3, #4
 8002a70:	623b      	str	r3, [r7, #32]
          break;
 8002a72:	e013      	b.n	8002a9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d105      	bne.n	8002a88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a7c:	2308      	movs	r3, #8
 8002a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	611a      	str	r2, [r3, #16]
          break;
 8002a86:	e009      	b.n	8002a9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a88:	2308      	movs	r3, #8
 8002a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	615a      	str	r2, [r3, #20]
          break;
 8002a92:	e003      	b.n	8002a9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a94:	2300      	movs	r3, #0
 8002a96:	623b      	str	r3, [r7, #32]
          break;
 8002a98:	e000      	b.n	8002a9c <HAL_GPIO_Init+0x130>
          break;
 8002a9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2bff      	cmp	r3, #255	; 0xff
 8002aa0:	d801      	bhi.n	8002aa6 <HAL_GPIO_Init+0x13a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	e001      	b.n	8002aaa <HAL_GPIO_Init+0x13e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2bff      	cmp	r3, #255	; 0xff
 8002ab0:	d802      	bhi.n	8002ab8 <HAL_GPIO_Init+0x14c>
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	e002      	b.n	8002abe <HAL_GPIO_Init+0x152>
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	3b08      	subs	r3, #8
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	210f      	movs	r1, #15
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	6a39      	ldr	r1, [r7, #32]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 80b1 	beq.w	8002c4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002aec:	4b4d      	ldr	r3, [pc, #308]	; (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	4a4c      	ldr	r2, [pc, #304]	; (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6193      	str	r3, [r2, #24]
 8002af8:	4b4a      	ldr	r3, [pc, #296]	; (8002c24 <HAL_GPIO_Init+0x2b8>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b04:	4a48      	ldr	r2, [pc, #288]	; (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	089b      	lsrs	r3, r3, #2
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4013      	ands	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a40      	ldr	r2, [pc, #256]	; (8002c2c <HAL_GPIO_Init+0x2c0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <HAL_GPIO_Init+0x1ec>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a3f      	ldr	r2, [pc, #252]	; (8002c30 <HAL_GPIO_Init+0x2c4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00d      	beq.n	8002b54 <HAL_GPIO_Init+0x1e8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a3e      	ldr	r2, [pc, #248]	; (8002c34 <HAL_GPIO_Init+0x2c8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d007      	beq.n	8002b50 <HAL_GPIO_Init+0x1e4>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a3d      	ldr	r2, [pc, #244]	; (8002c38 <HAL_GPIO_Init+0x2cc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d101      	bne.n	8002b4c <HAL_GPIO_Init+0x1e0>
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e006      	b.n	8002b5a <HAL_GPIO_Init+0x1ee>
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	e004      	b.n	8002b5a <HAL_GPIO_Init+0x1ee>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e002      	b.n	8002b5a <HAL_GPIO_Init+0x1ee>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_GPIO_Init+0x1ee>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b5c:	f002 0203 	and.w	r2, r2, #3
 8002b60:	0092      	lsls	r2, r2, #2
 8002b62:	4093      	lsls	r3, r2
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b6a:	492f      	ldr	r1, [pc, #188]	; (8002c28 <HAL_GPIO_Init+0x2bc>)
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	3302      	adds	r3, #2
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b84:	4b2d      	ldr	r3, [pc, #180]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	492c      	ldr	r1, [pc, #176]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	608b      	str	r3, [r1, #8]
 8002b90:	e006      	b.n	8002ba0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b92:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	4928      	ldr	r1, [pc, #160]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d006      	beq.n	8002bba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bac:	4b23      	ldr	r3, [pc, #140]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	4922      	ldr	r1, [pc, #136]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60cb      	str	r3, [r1, #12]
 8002bb8:	e006      	b.n	8002bc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bba:	4b20      	ldr	r3, [pc, #128]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	491e      	ldr	r1, [pc, #120]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bd4:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	4918      	ldr	r1, [pc, #96]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002be2:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	4914      	ldr	r1, [pc, #80]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d021      	beq.n	8002c40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	490e      	ldr	r1, [pc, #56]	; (8002c3c <HAL_GPIO_Init+0x2d0>)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]
 8002c08:	e021      	b.n	8002c4e <HAL_GPIO_Init+0x2e2>
 8002c0a:	bf00      	nop
 8002c0c:	10320000 	.word	0x10320000
 8002c10:	10310000 	.word	0x10310000
 8002c14:	10220000 	.word	0x10220000
 8002c18:	10210000 	.word	0x10210000
 8002c1c:	10120000 	.word	0x10120000
 8002c20:	10110000 	.word	0x10110000
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	40010800 	.word	0x40010800
 8002c30:	40010c00 	.word	0x40010c00
 8002c34:	40011000 	.word	0x40011000
 8002c38:	40011400 	.word	0x40011400
 8002c3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_GPIO_Init+0x304>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	4909      	ldr	r1, [pc, #36]	; (8002c70 <HAL_GPIO_Init+0x304>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	3301      	adds	r3, #1
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f47f ae8e 	bne.w	8002980 <HAL_GPIO_Init+0x14>
  }
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	372c      	adds	r7, #44	; 0x2c
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	40010400 	.word	0x40010400

08002c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	887b      	ldrh	r3, [r7, #2]
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e001      	b.n	8002c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	807b      	strh	r3, [r7, #2]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cb2:	787b      	ldrb	r3, [r7, #1]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cb8:	887a      	ldrh	r2, [r7, #2]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cbe:	e003      	b.n	8002cc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cc0:	887b      	ldrh	r3, [r7, #2]
 8002cc2:	041a      	lsls	r2, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	611a      	str	r2, [r3, #16]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b085      	sub	sp, #20
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ce4:	887a      	ldrh	r2, [r7, #2]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	041a      	lsls	r2, r3, #16
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43d9      	mvns	r1, r3
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	400b      	ands	r3, r1
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	611a      	str	r2, [r3, #16]
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d1a:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe f814 	bl	8000d50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40010400 	.word	0x40010400

08002d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e12b      	b.n	8002f9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe fe52 	bl	8001a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2224      	movs	r2, #36	; 0x24
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d98:	f002 fdae 	bl	80058f8 <HAL_RCC_GetPCLK1Freq>
 8002d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4a81      	ldr	r2, [pc, #516]	; (8002fa8 <HAL_I2C_Init+0x274>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d807      	bhi.n	8002db8 <HAL_I2C_Init+0x84>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a80      	ldr	r2, [pc, #512]	; (8002fac <HAL_I2C_Init+0x278>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e006      	b.n	8002dc6 <HAL_I2C_Init+0x92>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a7d      	ldr	r2, [pc, #500]	; (8002fb0 <HAL_I2C_Init+0x27c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bf94      	ite	ls
 8002dc0:	2301      	movls	r3, #1
 8002dc2:	2300      	movhi	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0e7      	b.n	8002f9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4a78      	ldr	r2, [pc, #480]	; (8002fb4 <HAL_I2C_Init+0x280>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9b      	lsrs	r3, r3, #18
 8002dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a6a      	ldr	r2, [pc, #424]	; (8002fa8 <HAL_I2C_Init+0x274>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d802      	bhi.n	8002e08 <HAL_I2C_Init+0xd4>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	3301      	adds	r3, #1
 8002e06:	e009      	b.n	8002e1c <HAL_I2C_Init+0xe8>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <HAL_I2C_Init+0x284>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	495c      	ldr	r1, [pc, #368]	; (8002fa8 <HAL_I2C_Init+0x274>)
 8002e38:	428b      	cmp	r3, r1
 8002e3a:	d819      	bhi.n	8002e70 <HAL_I2C_Init+0x13c>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e59      	subs	r1, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e4a:	1c59      	adds	r1, r3, #1
 8002e4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e50:	400b      	ands	r3, r1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_I2C_Init+0x138>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1e59      	subs	r1, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e64:	3301      	adds	r3, #1
 8002e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6a:	e051      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	e04f      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d111      	bne.n	8002e9c <HAL_I2C_Init+0x168>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e58      	subs	r0, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	440b      	add	r3, r1
 8002e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e012      	b.n	8002ec2 <HAL_I2C_Init+0x18e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e58      	subs	r0, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	0099      	lsls	r1, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Init+0x196>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e022      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_I2C_Init+0x1bc>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1e58      	subs	r0, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	440b      	add	r3, r1
 8002ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eee:	e00f      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e58      	subs	r0, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	0099      	lsls	r1, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	6809      	ldr	r1, [r1, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6911      	ldr	r1, [r2, #16]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68d2      	ldr	r2, [r2, #12]
 8002f4a:	4311      	orrs	r1, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	000186a0 	.word	0x000186a0
 8002fac:	001e847f 	.word	0x001e847f
 8002fb0:	003d08ff 	.word	0x003d08ff
 8002fb4:	431bde83 	.word	0x431bde83
 8002fb8:	10624dd3 	.word	0x10624dd3

08002fbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	460b      	mov	r3, r1
 8002fca:	817b      	strh	r3, [r7, #10]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7fe fedc 	bl	8001d8c <HAL_GetTick>
 8002fd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	f040 80e0 	bne.w	80031a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2319      	movs	r3, #25
 8002fea:	2201      	movs	r2, #1
 8002fec:	4970      	ldr	r1, [pc, #448]	; (80031b0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f972 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e0d3      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_I2C_Master_Transmit+0x50>
 8003008:	2302      	movs	r3, #2
 800300a:	e0cc      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d007      	beq.n	8003032 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003040:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2221      	movs	r2, #33	; 0x21
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2210      	movs	r2, #16
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	893a      	ldrh	r2, [r7, #8]
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a50      	ldr	r2, [pc, #320]	; (80031b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003074:	8979      	ldrh	r1, [r7, #10]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6a3a      	ldr	r2, [r7, #32]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f8aa 	bl	80031d4 <I2C_MasterRequestWrite>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e08d      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030a0:	e066      	b.n	8003170 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	6a39      	ldr	r1, [r7, #32]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fa30 	bl	800350c <I2C_WaitOnTXEFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00d      	beq.n	80030ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d107      	bne.n	80030ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e06b      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b04      	cmp	r3, #4
 800310a:	d11b      	bne.n	8003144 <HAL_I2C_Master_Transmit+0x188>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	2b00      	cmp	r3, #0
 8003112:	d017      	beq.n	8003144 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	6a39      	ldr	r1, [r7, #32]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fa27 	bl	800359c <I2C_WaitOnBTFFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	2b04      	cmp	r3, #4
 800315a:	d107      	bne.n	800316c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e01a      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d194      	bne.n	80030a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e000      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	00100002 	.word	0x00100002
 80031b4:	ffff0000 	.word	0xffff0000

080031b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	b2db      	uxtb	r3, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr
	...

080031d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	460b      	mov	r3, r1
 80031e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d006      	beq.n	80031fe <I2C_MasterRequestWrite+0x2a>
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d003      	beq.n	80031fe <I2C_MasterRequestWrite+0x2a>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031fc:	d108      	bne.n	8003210 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e00b      	b.n	8003228 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	2b12      	cmp	r3, #18
 8003216:	d107      	bne.n	8003228 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003226:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f84f 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00d      	beq.n	800325c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324e:	d103      	bne.n	8003258 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e035      	b.n	80032c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003264:	d108      	bne.n	8003278 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003266:	897b      	ldrh	r3, [r7, #10]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003274:	611a      	str	r2, [r3, #16]
 8003276:	e01b      	b.n	80032b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003278:	897b      	ldrh	r3, [r7, #10]
 800327a:	11db      	asrs	r3, r3, #7
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f003 0306 	and.w	r3, r3, #6
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f063 030f 	orn	r3, r3, #15
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	490e      	ldr	r1, [pc, #56]	; (80032d0 <I2C_MasterRequestWrite+0xfc>)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f898 	bl	80033cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e010      	b.n	80032c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032a6:	897b      	ldrh	r3, [r7, #10]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4907      	ldr	r1, [pc, #28]	; (80032d4 <I2C_MasterRequestWrite+0x100>)
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f888 	bl	80033cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	00010008 	.word	0x00010008
 80032d4:	00010002 	.word	0x00010002

080032d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e8:	e048      	b.n	800337c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d044      	beq.n	800337c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7fe fd4b 	bl	8001d8c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d139      	bne.n	800337c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	0c1b      	lsrs	r3, r3, #16
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d10d      	bne.n	800332e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	43da      	mvns	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4013      	ands	r3, r2
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	e00c      	b.n	8003348 <I2C_WaitOnFlagUntilTimeout+0x70>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	43da      	mvns	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4013      	ands	r3, r2
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	79fb      	ldrb	r3, [r7, #7]
 800334a:	429a      	cmp	r2, r3
 800334c:	d116      	bne.n	800337c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e023      	b.n	80033c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	0c1b      	lsrs	r3, r3, #16
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d10d      	bne.n	80033a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	43da      	mvns	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4013      	ands	r3, r2
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	e00c      	b.n	80033bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	43da      	mvns	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4013      	ands	r3, r2
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d093      	beq.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033da:	e071      	b.n	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ea:	d123      	bne.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003404:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f043 0204 	orr.w	r2, r3, #4
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e067      	b.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343a:	d041      	beq.n	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343c:	f7fe fca6 	bl	8001d8c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	d302      	bcc.n	8003452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d136      	bne.n	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d10c      	bne.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	43da      	mvns	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4013      	ands	r3, r2
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf14      	ite	ne
 800346e:	2301      	movne	r3, #1
 8003470:	2300      	moveq	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	e00b      	b.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	43da      	mvns	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4013      	ands	r3, r2
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e021      	b.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d10c      	bne.n	80034e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	e00b      	b.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf14      	ite	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	2300      	moveq	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f47f af6d 	bne.w	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003518:	e034      	b.n	8003584 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f886 	bl	800362c <I2C_IsAcknowledgeFailed>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e034      	b.n	8003594 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d028      	beq.n	8003584 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fe fc2b 	bl	8001d8c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d11d      	bne.n	8003584 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003552:	2b80      	cmp	r3, #128	; 0x80
 8003554:	d016      	beq.n	8003584 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f043 0220 	orr.w	r2, r3, #32
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d1c3      	bne.n	800351a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035a8:	e034      	b.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f83e 	bl	800362c <I2C_IsAcknowledgeFailed>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e034      	b.n	8003624 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d028      	beq.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fe fbe3 	bl	8001d8c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d11d      	bne.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d016      	beq.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e007      	b.n	8003624 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b04      	cmp	r3, #4
 8003620:	d1c3      	bne.n	80035aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003642:	d11b      	bne.n	800367c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800364c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f043 0204 	orr.w	r2, r3, #4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800368a:	b08b      	sub	sp, #44	; 0x2c
 800368c:	af06      	add	r7, sp, #24
 800368e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e0f1      	b.n	800387e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f007 f996 	bl	800a9e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2203      	movs	r2, #3
 80036b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f003 f89f 	bl	8006804 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	687e      	ldr	r6, [r7, #4]
 80036ce:	466d      	mov	r5, sp
 80036d0:	f106 0410 	add.w	r4, r6, #16
 80036d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	602b      	str	r3, [r5, #0]
 80036dc:	1d33      	adds	r3, r6, #4
 80036de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036e0:	6838      	ldr	r0, [r7, #0]
 80036e2:	f003 f869 	bl	80067b8 <USB_CoreInit>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0c2      	b.n	800387e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f003 f89a 	bl	8006838 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]
 8003708:	e040      	b.n	800378c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	440b      	add	r3, r1
 800371a:	3301      	adds	r3, #1
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	440b      	add	r3, r1
 8003730:	7bfa      	ldrb	r2, [r7, #15]
 8003732:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	440b      	add	r3, r1
 8003744:	3303      	adds	r3, #3
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	440b      	add	r3, r1
 8003758:	3338      	adds	r3, #56	; 0x38
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	440b      	add	r3, r1
 800376c:	333c      	adds	r3, #60	; 0x3c
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	440b      	add	r3, r1
 8003780:	3340      	adds	r3, #64	; 0x40
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	3301      	adds	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	d3b9      	bcc.n	800370a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	e044      	b.n	8003826 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	440b      	add	r3, r1
 80037aa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037b2:	7bfa      	ldrb	r2, [r7, #15]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	440b      	add	r3, r1
 80037c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037c8:	7bfa      	ldrb	r2, [r7, #15]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	440b      	add	r3, r1
 80037d6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	440b      	add	r3, r1
 80037ec:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	440b      	add	r3, r1
 8003802:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	440b      	add	r3, r1
 8003818:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	3301      	adds	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	d3b5      	bcc.n	800379c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	603b      	str	r3, [r7, #0]
 8003836:	687e      	ldr	r6, [r7, #4]
 8003838:	466d      	mov	r5, sp
 800383a:	f106 0410 	add.w	r4, r6, #16
 800383e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	602b      	str	r3, [r5, #0]
 8003846:	1d33      	adds	r3, r6, #4
 8003848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800384a:	6838      	ldr	r0, [r7, #0]
 800384c:	f003 f800 	bl	8006850 <USB_DevInit>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e00d      	b.n	800387e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f005 fa81 	bl	8008d7e <USB_DevDisconnect>

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003886 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_PCD_Start+0x16>
 8003898:	2302      	movs	r3, #2
 800389a:	e016      	b.n	80038ca <HAL_PCD_Start+0x44>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f002 ff95 	bl	80067d8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80038ae:	2101      	movs	r1, #1
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f007 fb08 	bl	800aec6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f005 fa55 	bl	8008d6a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b088      	sub	sp, #32
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f005 fa57 	bl	8008d92 <USB_ReadInterrupts>
 80038e4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fb1b 	bl	8003f2c <PCD_EP_ISR_Handler>

    return;
 80038f6:	e119      	b.n	8003b2c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d013      	beq.n	800392a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003914:	b292      	uxth	r2, r2
 8003916:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f007 f8db 	bl	800aad6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003920:	2100      	movs	r1, #0
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f905 	bl	8003b32 <HAL_PCD_SetAddress>

    return;
 8003928:	e100      	b.n	8003b2c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00c      	beq.n	800394e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800393c:	b29a      	uxth	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003946:	b292      	uxth	r2, r2
 8003948:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800394c:	e0ee      	b.n	8003b2c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00c      	beq.n	8003972 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003960:	b29a      	uxth	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800396a:	b292      	uxth	r2, r2
 800396c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003970:	e0dc      	b.n	8003b2c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d027      	beq.n	80039cc <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003984:	b29a      	uxth	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0204 	bic.w	r2, r2, #4
 800398e:	b292      	uxth	r2, r2
 8003990:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0208 	bic.w	r2, r2, #8
 80039a6:	b292      	uxth	r2, r2
 80039a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f007 f8cb 	bl	800ab48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039c4:	b292      	uxth	r2, r2
 80039c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80039ca:	e0af      	b.n	8003b2c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 8083 	beq.w	8003ade <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80039d8:	2300      	movs	r3, #0
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e010      	b.n	8003a00 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	7ffb      	ldrb	r3, [r7, #31]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	7ffb      	ldrb	r3, [r7, #31]
 80039ec:	8812      	ldrh	r2, [r2, #0]
 80039ee:	b292      	uxth	r2, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	3320      	adds	r3, #32
 80039f4:	443b      	add	r3, r7
 80039f6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80039fa:	7ffb      	ldrb	r3, [r7, #31]
 80039fc:	3301      	adds	r3, #1
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	7ffb      	ldrb	r3, [r7, #31]
 8003a02:	2b07      	cmp	r3, #7
 8003a04:	d9eb      	bls.n	80039de <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0201 	orr.w	r2, r2, #1
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	b292      	uxth	r2, r2
 8003a32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003a36:	bf00      	nop
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f6      	beq.n	8003a38 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5c:	b292      	uxth	r2, r2
 8003a5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	77fb      	strb	r3, [r7, #31]
 8003a66:	e00f      	b.n	8003a88 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003a68:	7ffb      	ldrb	r3, [r7, #31]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	4611      	mov	r1, r2
 8003a70:	7ffa      	ldrb	r2, [r7, #31]
 8003a72:	0092      	lsls	r2, r2, #2
 8003a74:	440a      	add	r2, r1
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	3320      	adds	r3, #32
 8003a7a:	443b      	add	r3, r7
 8003a7c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003a80:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003a82:	7ffb      	ldrb	r3, [r7, #31]
 8003a84:	3301      	adds	r3, #1
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	7ffb      	ldrb	r3, [r7, #31]
 8003a8a:	2b07      	cmp	r3, #7
 8003a8c:	d9ec      	bls.n	8003a68 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0208 	orr.w	r2, r2, #8
 8003aa0:	b292      	uxth	r2, r2
 8003aa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab8:	b292      	uxth	r2, r2
 8003aba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0204 	orr.w	r2, r2, #4
 8003ad0:	b292      	uxth	r2, r2
 8003ad2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f007 f81c 	bl	800ab14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003adc:	e026      	b.n	8003b2c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00f      	beq.n	8003b08 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003afa:	b292      	uxth	r2, r2
 8003afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f006 ffda 	bl	800aaba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b06:	e011      	b.n	8003b2c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00c      	beq.n	8003b2c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b24:	b292      	uxth	r2, r2
 8003b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b2a:	bf00      	nop
  }
}
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_PCD_SetAddress+0x1a>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e013      	b.n	8003b74 <HAL_PCD_SetAddress+0x42>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	4611      	mov	r1, r2
 8003b64:	4618      	mov	r0, r3
 8003b66:	f005 f8ed 	bl	8008d44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	4608      	mov	r0, r1
 8003b86:	4611      	mov	r1, r2
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	70fb      	strb	r3, [r7, #3]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	803b      	strh	r3, [r7, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	da0e      	bge.n	8003bc0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	705a      	strb	r2, [r3, #1]
 8003bbe:	e00e      	b.n	8003bde <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	f003 0207 	and.w	r2, r3, #7
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bea:	883a      	ldrh	r2, [r7, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	78ba      	ldrb	r2, [r7, #2]
 8003bf4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bf6:	78bb      	ldrb	r3, [r7, #2]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d102      	bne.n	8003c02 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_PCD_EP_Open+0x94>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e00e      	b.n	8003c2e <HAL_PCD_EP_Open+0xb2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68f9      	ldr	r1, [r7, #12]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f002 fe36 	bl	8006890 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003c2c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da0e      	bge.n	8003c68 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c4a:	78fb      	ldrb	r3, [r7, #3]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	705a      	strb	r2, [r3, #1]
 8003c66:	e00e      	b.n	8003c86 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	f003 0207 	and.w	r2, r3, #7
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c86:	78fb      	ldrb	r3, [r7, #3]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_PCD_EP_Close+0x6a>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e00e      	b.n	8003cbe <HAL_PCD_EP_Close+0x88>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68f9      	ldr	r1, [r7, #12]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f003 f9ae 	bl	8007010 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cd6:	7afb      	ldrb	r3, [r7, #11]
 8003cd8:	f003 0207 	and.w	r2, r3, #7
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2200      	movs	r2, #0
 8003d04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d06:	7afb      	ldrb	r3, [r7, #11]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f003 fb65 	bl	80073e8 <USB_EPStartXfer>

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	f003 0207 	and.w	r2, r3, #7
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	440b      	add	r3, r1
 8003d46:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr

08003d56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	460b      	mov	r3, r1
 8003d64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d66:	7afb      	ldrb	r3, [r7, #11]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4413      	add	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da2:	7afb      	ldrb	r3, [r7, #11]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6979      	ldr	r1, [r7, #20]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f003 fb17 	bl	80073e8 <USB_EPStartXfer>

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	f003 0207 	and.w	r2, r3, #7
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d901      	bls.n	8003de2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e04c      	b.n	8003e7c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	da0e      	bge.n	8003e08 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	705a      	strb	r2, [r3, #1]
 8003e06:	e00c      	b.n	8003e22 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_PCD_EP_SetStall+0x7e>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e01c      	b.n	8003e7c <HAL_PCD_EP_SetStall+0xb8>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68f9      	ldr	r1, [r7, #12]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f004 fe7a 	bl	8008b4a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d108      	bne.n	8003e72 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f004 ff9f 	bl	8008db0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	f003 020f 	and.w	r2, r3, #15
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d901      	bls.n	8003ea2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e040      	b.n	8003f24 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	da0e      	bge.n	8003ec8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	705a      	strb	r2, [r3, #1]
 8003ec6:	e00e      	b.n	8003ee6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 0207 	and.w	r2, r3, #7
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	4413      	add	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_PCD_EP_ClrStall+0x82>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e00e      	b.n	8003f24 <HAL_PCD_EP_ClrStall+0xa0>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68f9      	ldr	r1, [r7, #12]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f004 fe68 	bl	8008bea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b096      	sub	sp, #88	; 0x58
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f34:	e3bf      	b.n	80046b6 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003f50:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 8179 	bne.w	800424c <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d152      	bne.n	800400c <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f76:	81fb      	strh	r3, [r7, #14]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	89fb      	ldrh	r3, [r7, #14]
 8003f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3328      	adds	r3, #40	; 0x28
 8003f8e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003fca:	2100      	movs	r1, #0
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f006 fd5a 	bl	800aa86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 836b 	beq.w	80046b6 <PCD_EP_ISR_Handler+0x78a>
 8003fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f040 8366 	bne.w	80046b6 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	b292      	uxth	r2, r2
 8003ffe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800400a:	e354      	b.n	80046b6 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004012:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800401e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004026:	2b00      	cmp	r3, #0
 8004028:	d034      	beq.n	8004094 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004032:	b29b      	uxth	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	3306      	adds	r3, #6
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004054:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004062:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004066:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004068:	b29b      	uxth	r3, r3
 800406a:	f004 fef1 	bl	8008e50 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29a      	uxth	r2, r3
 8004076:	f640 738f 	movw	r3, #3983	; 0xf8f
 800407a:	4013      	ands	r3, r2
 800407c:	823b      	strh	r3, [r7, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	8a3a      	ldrh	r2, [r7, #16]
 8004084:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004088:	b292      	uxth	r2, r2
 800408a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f006 fccd 	bl	800aa2c <HAL_PCD_SetupStageCallback>
 8004092:	e310      	b.n	80046b6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004094:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004098:	2b00      	cmp	r3, #0
 800409a:	f280 830c 	bge.w	80046b6 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80040aa:	4013      	ands	r3, r2
 80040ac:	83fb      	strh	r3, [r7, #30]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	8bfa      	ldrh	r2, [r7, #30]
 80040b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040b8:	b292      	uxth	r2, r2
 80040ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	3306      	adds	r3, #6
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80040e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d019      	beq.n	8004124 <PCD_EP_ISR_Handler+0x1f8>
 80040f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d015      	beq.n	8004124 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fe:	6959      	ldr	r1, [r3, #20]
 8004100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004102:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004106:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004108:	b29b      	uxth	r3, r3
 800410a:	f004 fea1 	bl	8008e50 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800410e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	441a      	add	r2, r3
 8004118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800411c:	2100      	movs	r1, #0
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f006 fc96 	bl	800aa50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800412e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004136:	2b00      	cmp	r3, #0
 8004138:	f040 82bd 	bne.w	80046b6 <PCD_EP_ISR_Handler+0x78a>
 800413c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004140:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004144:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004148:	f000 82b5 	beq.w	80046b6 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415a:	b29b      	uxth	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4413      	add	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004176:	b29a      	uxth	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	801a      	strh	r2, [r3, #0]
 800417c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b3e      	cmp	r3, #62	; 0x3e
 8004182:	d91d      	bls.n	80041c0 <PCD_EP_ISR_Handler+0x294>
 8004184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	647b      	str	r3, [r7, #68]	; 0x44
 800418c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <PCD_EP_ISR_Handler+0x272>
 8004198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419a:	3b01      	subs	r3, #1
 800419c:	647b      	str	r3, [r7, #68]	; 0x44
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	029b      	lsls	r3, r3, #10
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	4313      	orrs	r3, r2
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	801a      	strh	r2, [r3, #0]
 80041be:	e026      	b.n	800420e <PCD_EP_ISR_Handler+0x2e2>
 80041c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <PCD_EP_ISR_Handler+0x2b2>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	801a      	strh	r2, [r3, #0]
 80041dc:	e017      	b.n	800420e <PCD_EP_ISR_Handler+0x2e2>
 80041de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	647b      	str	r3, [r7, #68]	; 0x44
 80041e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <PCD_EP_ISR_Handler+0x2cc>
 80041f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f4:	3301      	adds	r3, #1
 80041f6:	647b      	str	r3, [r7, #68]	; 0x44
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004200:	b29b      	uxth	r3, r3
 8004202:	029b      	lsls	r3, r3, #10
 8004204:	b29b      	uxth	r3, r3
 8004206:	4313      	orrs	r3, r2
 8004208:	b29a      	uxth	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800421a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421e:	827b      	strh	r3, [r7, #18]
 8004220:	8a7b      	ldrh	r3, [r7, #18]
 8004222:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004226:	827b      	strh	r3, [r7, #18]
 8004228:	8a7b      	ldrh	r3, [r7, #18]
 800422a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800422e:	827b      	strh	r3, [r7, #18]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	8a7b      	ldrh	r3, [r7, #18]
 8004236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004246:	b29b      	uxth	r3, r3
 8004248:	8013      	strh	r3, [r2, #0]
 800424a:	e234      	b.n	80046b6 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004260:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004264:	2b00      	cmp	r3, #0
 8004266:	f280 80fc 	bge.w	8004462 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29a      	uxth	r2, r3
 800427c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004280:	4013      	ands	r3, r2
 8004282:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004298:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800429c:	b292      	uxth	r2, r2
 800429e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80042a0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4413      	add	r3, r2
 80042b4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80042b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b8:	7b1b      	ldrb	r3, [r3, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d125      	bne.n	800430a <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4413      	add	r3, r2
 80042d2:	3306      	adds	r3, #6
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042e6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80042ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 8092 	beq.w	8004418 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fa:	6959      	ldr	r1, [r3, #20]
 80042fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042fe:	88da      	ldrh	r2, [r3, #6]
 8004300:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004304:	f004 fda4 	bl	8008e50 <USB_ReadPMA>
 8004308:	e086      	b.n	8004418 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800430a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800430c:	78db      	ldrb	r3, [r3, #3]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d10a      	bne.n	8004328 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004312:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004316:	461a      	mov	r2, r3
 8004318:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f9d9 	bl	80046d2 <HAL_PCD_EP_DB_Receive>
 8004320:	4603      	mov	r3, r0
 8004322:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004326:	e077      	b.n	8004418 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	441a      	add	r2, r3
 8004354:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800435c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004364:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004368:	b29b      	uxth	r3, r3
 800436a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d024      	beq.n	80043d0 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800438e:	b29b      	uxth	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	3302      	adds	r3, #2
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80043b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d02e      	beq.n	8004418 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c0:	6959      	ldr	r1, [r3, #20]
 80043c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c4:	891a      	ldrh	r2, [r3, #8]
 80043c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80043ca:	f004 fd41 	bl	8008e50 <USB_ReadPMA>
 80043ce:	e023      	b.n	8004418 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d8:	b29b      	uxth	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4413      	add	r3, r2
 80043e4:	3306      	adds	r3, #6
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80043fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800440a:	6959      	ldr	r1, [r3, #20]
 800440c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800440e:	895a      	ldrh	r2, [r3, #10]
 8004410:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004414:	f004 fd1c 	bl	8008e50 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004420:	441a      	add	r2, r3
 8004422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004424:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800442e:	441a      	add	r2, r3
 8004430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004432:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <PCD_EP_ISR_Handler+0x51c>
 800443c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	429a      	cmp	r2, r3
 8004446:	d206      	bcs.n	8004456 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f006 fafe 	bl	800aa50 <HAL_PCD_DataOutStageCallback>
 8004454:	e005      	b.n	8004462 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800445c:	4618      	mov	r0, r3
 800445e:	f002 ffc3 	bl	80073e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004462:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8123 	beq.w	80046b6 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8004470:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	441a      	add	r2, r3
 80044b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80044b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044bc:	b29b      	uxth	r3, r3
 80044be:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80044c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c2:	78db      	ldrb	r3, [r3, #3]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	f040 80a2 	bne.w	800460e <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80044ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044cc:	2200      	movs	r2, #0
 80044ce:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80044d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d2:	7b1b      	ldrb	r3, [r3, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8093 	beq.w	8004600 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d046      	beq.n	8004574 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e8:	785b      	ldrb	r3, [r3, #1]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d126      	bne.n	800453c <PCD_EP_ISR_Handler+0x610>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	4413      	add	r3, r2
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
 8004506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	011a      	lsls	r2, r3, #4
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	4413      	add	r3, r2
 8004510:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004514:	623b      	str	r3, [r7, #32]
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004520:	b29a      	uxth	r2, r3
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	801a      	strh	r2, [r3, #0]
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004534:	b29a      	uxth	r2, r3
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	e061      	b.n	8004600 <PCD_EP_ISR_Handler+0x6d4>
 800453c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453e:	785b      	ldrb	r3, [r3, #1]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d15d      	bne.n	8004600 <PCD_EP_ISR_Handler+0x6d4>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004552:	b29b      	uxth	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004558:	4413      	add	r3, r2
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800455c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	011a      	lsls	r2, r3, #4
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	4413      	add	r3, r2
 8004566:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	2200      	movs	r2, #0
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	e045      	b.n	8004600 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d126      	bne.n	80045d0 <PCD_EP_ISR_Handler+0x6a4>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	637b      	str	r3, [r7, #52]	; 0x34
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004590:	b29b      	uxth	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004596:	4413      	add	r3, r2
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
 800459a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	011a      	lsls	r2, r3, #4
 80045a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a2:	4413      	add	r3, r2
 80045a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045a8:	633b      	str	r3, [r7, #48]	; 0x30
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	801a      	strh	r2, [r3, #0]
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	801a      	strh	r2, [r3, #0]
 80045ce:	e017      	b.n	8004600 <PCD_EP_ISR_Handler+0x6d4>
 80045d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d2:	785b      	ldrb	r3, [r3, #1]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d113      	bne.n	8004600 <PCD_EP_ISR_Handler+0x6d4>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e6:	4413      	add	r3, r2
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	011a      	lsls	r2, r3, #4
 80045f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f2:	4413      	add	r3, r2
 80045f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	2200      	movs	r2, #0
 80045fe:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f006 fa3d 	bl	800aa86 <HAL_PCD_DataInStageCallback>
 800460c:	e053      	b.n	80046b6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800460e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004616:	2b00      	cmp	r3, #0
 8004618:	d146      	bne.n	80046a8 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004622:	b29b      	uxth	r3, r3
 8004624:	461a      	mov	r2, r3
 8004626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4413      	add	r3, r2
 800462e:	3302      	adds	r3, #2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004642:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800464e:	429a      	cmp	r2, r3
 8004650:	d907      	bls.n	8004662 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8004652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800465a:	1ad2      	subs	r2, r2, r3
 800465c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465e:	619a      	str	r2, [r3, #24]
 8004660:	e002      	b.n	8004668 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8004662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004664:	2200      	movs	r2, #0
 8004666:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f006 fa05 	bl	800aa86 <HAL_PCD_DataInStageCallback>
 800467c:	e01b      	b.n	80046b6 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800467e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004686:	441a      	add	r2, r3
 8004688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800468c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004694:	441a      	add	r2, r3
 8004696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004698:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046a0:	4618      	mov	r0, r3
 80046a2:	f002 fea1 	bl	80073e8 <USB_EPStartXfer>
 80046a6:	e006      	b.n	80046b6 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80046a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046ac:	461a      	mov	r2, r3
 80046ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f91b 	bl	80048ec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046be:	b29b      	uxth	r3, r3
 80046c0:	b21b      	sxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f6ff ac37 	blt.w	8003f36 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3758      	adds	r7, #88	; 0x58
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b088      	sub	sp, #32
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	4613      	mov	r3, r2
 80046de:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046e0:	88fb      	ldrh	r3, [r7, #6]
 80046e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d07e      	beq.n	80047e8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	3302      	adds	r3, #2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004712:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	699a      	ldr	r2, [r3, #24]
 8004718:	8b7b      	ldrh	r3, [r7, #26]
 800471a:	429a      	cmp	r2, r3
 800471c:	d306      	bcc.n	800472c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	8b7b      	ldrh	r3, [r7, #26]
 8004724:	1ad2      	subs	r2, r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	619a      	str	r2, [r3, #24]
 800472a:	e002      	b.n	8004732 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2200      	movs	r2, #0
 8004730:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d123      	bne.n	8004782 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	833b      	strh	r3, [r7, #24]
 8004756:	8b3b      	ldrh	r3, [r7, #24]
 8004758:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800475c:	833b      	strh	r3, [r7, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	441a      	add	r2, r3
 800476c:	8b3b      	ldrh	r3, [r7, #24]
 800476e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477e:	b29b      	uxth	r3, r3
 8004780:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01f      	beq.n	80047cc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a6:	82fb      	strh	r3, [r7, #22]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	8afb      	ldrh	r3, [r7, #22]
 80047b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80047cc:	8b7b      	ldrh	r3, [r7, #26]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8087 	beq.w	80048e2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6959      	ldr	r1, [r3, #20]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	891a      	ldrh	r2, [r3, #8]
 80047e0:	8b7b      	ldrh	r3, [r7, #26]
 80047e2:	f004 fb35 	bl	8008e50 <USB_ReadPMA>
 80047e6:	e07c      	b.n	80048e2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4413      	add	r3, r2
 80047fc:	3306      	adds	r3, #6
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004810:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	8b7b      	ldrh	r3, [r7, #26]
 8004818:	429a      	cmp	r2, r3
 800481a:	d306      	bcc.n	800482a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	699a      	ldr	r2, [r3, #24]
 8004820:	8b7b      	ldrh	r3, [r7, #26]
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	619a      	str	r2, [r3, #24]
 8004828:	e002      	b.n	8004830 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2200      	movs	r2, #0
 800482e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d123      	bne.n	8004880 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	83fb      	strh	r3, [r7, #30]
 8004854:	8bfb      	ldrh	r3, [r7, #30]
 8004856:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800485a:	83fb      	strh	r3, [r7, #30]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	8bfb      	ldrh	r3, [r7, #30]
 800486c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d11f      	bne.n	80048ca <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	b29b      	uxth	r3, r3
 800489c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a4:	83bb      	strh	r3, [r7, #28]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	441a      	add	r2, r3
 80048b4:	8bbb      	ldrh	r3, [r7, #28]
 80048b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80048ca:	8b7b      	ldrh	r3, [r7, #26]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	6959      	ldr	r1, [r3, #20]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	895a      	ldrh	r2, [r3, #10]
 80048dc:	8b7b      	ldrh	r3, [r7, #26]
 80048de:	f004 fab7 	bl	8008e50 <USB_ReadPMA>
    }
  }

  return count;
 80048e2:	8b7b      	ldrh	r3, [r7, #26]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b0a4      	sub	sp, #144	; 0x90
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 81dd 	beq.w	8004cc0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800490e:	b29b      	uxth	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	3302      	adds	r3, #2
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	6812      	ldr	r2, [r2, #0]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800492e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800493a:	429a      	cmp	r2, r3
 800493c:	d907      	bls.n	800494e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004946:	1ad2      	subs	r2, r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	619a      	str	r2, [r3, #24]
 800494c:	e002      	b.n	8004954 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2200      	movs	r2, #0
 8004952:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f040 80b9 	bne.w	8004ad0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d126      	bne.n	80049b4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	4413      	add	r3, r2
 800497c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	011a      	lsls	r2, r3, #4
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	4413      	add	r3, r2
 8004988:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004998:	b29a      	uxth	r2, r3
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	e01a      	b.n	80049ea <HAL_PCD_EP_DB_Transmit+0xfe>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d116      	bne.n	80049ea <HAL_PCD_EP_DB_Transmit+0xfe>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	461a      	mov	r2, r3
 80049ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d0:	4413      	add	r3, r2
 80049d2:	637b      	str	r3, [r7, #52]	; 0x34
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	011a      	lsls	r2, r3, #4
 80049da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049dc:	4413      	add	r3, r2
 80049de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049e2:	633b      	str	r3, [r7, #48]	; 0x30
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	2200      	movs	r2, #0
 80049e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	785b      	ldrb	r3, [r3, #1]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d126      	bne.n	8004a46 <HAL_PCD_EP_DB_Transmit+0x15a>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	011a      	lsls	r2, r3, #4
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	801a      	strh	r2, [r3, #0]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	801a      	strh	r2, [r3, #0]
 8004a44:	e017      	b.n	8004a76 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	785b      	ldrb	r3, [r3, #1]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d113      	bne.n	8004a76 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	4413      	add	r3, r2
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	011a      	lsls	r2, r3, #4
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	4413      	add	r3, r2
 8004a6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a6e:	623b      	str	r3, [r7, #32]
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	2200      	movs	r2, #0
 8004a74:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f006 f802 	bl	800aa86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 82fc 	beq.w	8005086 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa8:	82fb      	strh	r3, [r7, #22]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	8afb      	ldrh	r3, [r7, #22]
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]
 8004ace:	e2da      	b.n	8005086 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d021      	beq.n	8004b1e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	441a      	add	r2, r3
 8004b06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	f040 82ae 	bne.w	8005086 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	695a      	ldr	r2, [r3, #20]
 8004b2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b32:	441a      	add	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b40:	441a      	add	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	6a1a      	ldr	r2, [r3, #32]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d30b      	bcc.n	8004b6a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6a1a      	ldr	r2, [r3, #32]
 8004b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b62:	1ad2      	subs	r2, r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	621a      	str	r2, [r3, #32]
 8004b68:	e017      	b.n	8004b9a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d108      	bne.n	8004b84 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004b72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b82:	e00a      	b.n	8004b9a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2200      	movs	r2, #0
 8004b98:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	785b      	ldrb	r3, [r3, #1]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d165      	bne.n	8004c6e <HAL_PCD_EP_DB_Transmit+0x382>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb6:	4413      	add	r3, r2
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	011a      	lsls	r2, r3, #4
 8004bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bde:	2b3e      	cmp	r3, #62	; 0x3e
 8004be0:	d91d      	bls.n	8004c1e <HAL_PCD_EP_DB_Transmit+0x332>
 8004be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bee:	f003 031f 	and.w	r3, r3, #31
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d102      	bne.n	8004bfc <HAL_PCD_EP_DB_Transmit+0x310>
 8004bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	029b      	lsls	r3, r3, #10
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	801a      	strh	r2, [r3, #0]
 8004c1c:	e044      	b.n	8004ca8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10a      	bne.n	8004c3c <HAL_PCD_EP_DB_Transmit+0x350>
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	801a      	strh	r2, [r3, #0]
 8004c3a:	e035      	b.n	8004ca8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c52:	3301      	adds	r3, #1
 8004c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	029b      	lsls	r3, r3, #10
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	4313      	orrs	r3, r2
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6a:	801a      	strh	r2, [r3, #0]
 8004c6c:	e01c      	b.n	8004ca8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	785b      	ldrb	r3, [r3, #1]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d118      	bne.n	8004ca8 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8a:	4413      	add	r3, r2
 8004c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	011a      	lsls	r2, r3, #4
 8004c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c96:	4413      	add	r3, r2
 8004c98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	6959      	ldr	r1, [r3, #20]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	891a      	ldrh	r2, [r3, #8]
 8004cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f004 f884 	bl	8008dc6 <USB_WritePMA>
 8004cbe:	e1e2      	b.n	8005086 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3306      	adds	r3, #6
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ce8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d307      	bcc.n	8004d08 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	699a      	ldr	r2, [r3, #24]
 8004cfc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d00:	1ad2      	subs	r2, r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	619a      	str	r2, [r3, #24]
 8004d06:	e002      	b.n	8004d0e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f040 80c0 	bne.w	8004e98 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d126      	bne.n	8004d6e <HAL_PCD_EP_DB_Transmit+0x482>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d34:	4413      	add	r3, r2
 8004d36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	011a      	lsls	r2, r3, #4
 8004d3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d40:	4413      	add	r3, r2
 8004d42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d46:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	e01a      	b.n	8004da4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d116      	bne.n	8004da4 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	667b      	str	r3, [r7, #100]	; 0x64
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d8a:	4413      	add	r3, r2
 8004d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	011a      	lsls	r2, r3, #4
 8004d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d96:	4413      	add	r3, r2
 8004d98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da0:	2200      	movs	r2, #0
 8004da2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	677b      	str	r3, [r7, #116]	; 0x74
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d12b      	bne.n	8004e0a <HAL_PCD_EP_DB_Transmit+0x51e>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc6:	4413      	add	r3, r2
 8004dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	011a      	lsls	r2, r3, #4
 8004dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ddc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	e017      	b.n	8004e3a <HAL_PCD_EP_DB_Transmit+0x54e>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d113      	bne.n	8004e3a <HAL_PCD_EP_DB_Transmit+0x54e>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e20:	4413      	add	r3, r2
 8004e22:	677b      	str	r3, [r7, #116]	; 0x74
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	011a      	lsls	r2, r3, #4
 8004e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e32:	673b      	str	r3, [r7, #112]	; 0x70
 8004e34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e36:	2200      	movs	r2, #0
 8004e38:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f005 fe20 	bl	800aa86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 811a 	bne.w	8005086 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	441a      	add	r2, r3
 8004e7e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]
 8004e96:	e0f6      	b.n	8005086 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d121      	bne.n	8004ee6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ebc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	441a      	add	r2, r3
 8004ece:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	f040 80ca 	bne.w	8005086 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004efa:	441a      	add	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f08:	441a      	add	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	6a1a      	ldr	r2, [r3, #32]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d30b      	bcc.n	8004f32 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6a1a      	ldr	r2, [r3, #32]
 8004f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f2a:	1ad2      	subs	r2, r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	621a      	str	r2, [r3, #32]
 8004f30:	e017      	b.n	8004f62 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d108      	bne.n	8004f4c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004f3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f4a:	e00a      	b.n	8004f62 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2200      	movs	r2, #0
 8004f58:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	657b      	str	r3, [r7, #84]	; 0x54
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d165      	bne.n	800503c <HAL_PCD_EP_DB_Transmit+0x750>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f84:	4413      	add	r3, r2
 8004f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	011a      	lsls	r2, r3, #4
 8004f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f90:	4413      	add	r3, r2
 8004f92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f96:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa6:	801a      	strh	r2, [r3, #0]
 8004fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fac:	2b3e      	cmp	r3, #62	; 0x3e
 8004fae:	d91d      	bls.n	8004fec <HAL_PCD_EP_DB_Transmit+0x700>
 8004fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d102      	bne.n	8004fca <HAL_PCD_EP_DB_Transmit+0x6de>
 8004fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	029b      	lsls	r3, r3, #10
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fe8:	801a      	strh	r2, [r3, #0]
 8004fea:	e041      	b.n	8005070 <HAL_PCD_EP_DB_Transmit+0x784>
 8004fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10a      	bne.n	800500a <HAL_PCD_EP_DB_Transmit+0x71e>
 8004ff4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005002:	b29a      	uxth	r2, r3
 8005004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005006:	801a      	strh	r2, [r3, #0]
 8005008:	e032      	b.n	8005070 <HAL_PCD_EP_DB_Transmit+0x784>
 800500a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800500e:	085b      	lsrs	r3, r3, #1
 8005010:	66bb      	str	r3, [r7, #104]	; 0x68
 8005012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_PCD_EP_DB_Transmit+0x738>
 800501e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005020:	3301      	adds	r3, #1
 8005022:	66bb      	str	r3, [r7, #104]	; 0x68
 8005024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	b29a      	uxth	r2, r3
 800502a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800502c:	b29b      	uxth	r3, r3
 800502e:	029b      	lsls	r3, r3, #10
 8005030:	b29b      	uxth	r3, r3
 8005032:	4313      	orrs	r3, r2
 8005034:	b29a      	uxth	r2, r3
 8005036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	e019      	b.n	8005070 <HAL_PCD_EP_DB_Transmit+0x784>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	785b      	ldrb	r3, [r3, #1]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d115      	bne.n	8005070 <HAL_PCD_EP_DB_Transmit+0x784>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504c:	b29b      	uxth	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005052:	4413      	add	r3, r2
 8005054:	657b      	str	r3, [r7, #84]	; 0x54
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	011a      	lsls	r2, r3, #4
 800505c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800505e:	4413      	add	r3, r2
 8005060:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005064:	653b      	str	r3, [r7, #80]	; 0x50
 8005066:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800506a:	b29a      	uxth	r2, r3
 800506c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800506e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	6959      	ldr	r1, [r3, #20]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	895a      	ldrh	r2, [r3, #10]
 800507c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005080:	b29b      	uxth	r3, r3
 8005082:	f003 fea0 	bl	8008dc6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	b29b      	uxth	r3, r3
 8005098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a0:	82bb      	strh	r3, [r7, #20]
 80050a2:	8abb      	ldrh	r3, [r7, #20]
 80050a4:	f083 0310 	eor.w	r3, r3, #16
 80050a8:	82bb      	strh	r3, [r7, #20]
 80050aa:	8abb      	ldrh	r3, [r7, #20]
 80050ac:	f083 0320 	eor.w	r3, r3, #32
 80050b0:	82bb      	strh	r3, [r7, #20]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	8abb      	ldrh	r3, [r7, #20]
 80050c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3790      	adds	r7, #144	; 0x90
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	607b      	str	r3, [r7, #4]
 80050ea:	460b      	mov	r3, r1
 80050ec:	817b      	strh	r3, [r7, #10]
 80050ee:	4613      	mov	r3, r2
 80050f0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80050f2:	897b      	ldrh	r3, [r7, #10]
 80050f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00b      	beq.n	8005116 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050fe:	897b      	ldrh	r3, [r7, #10]
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e009      	b.n	800512a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005116:	897a      	ldrh	r2, [r7, #10]
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800512a:	893b      	ldrh	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d107      	bne.n	8005140 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2200      	movs	r2, #0
 8005134:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	b29a      	uxth	r2, r3
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	80da      	strh	r2, [r3, #6]
 800513e:	e00b      	b.n	8005158 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2201      	movs	r2, #1
 8005144:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	b29a      	uxth	r2, r3
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	b29a      	uxth	r2, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e272      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8087 	beq.w	8005292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005184:	4b92      	ldr	r3, [pc, #584]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b04      	cmp	r3, #4
 800518e:	d00c      	beq.n	80051aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005190:	4b8f      	ldr	r3, [pc, #572]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 030c 	and.w	r3, r3, #12
 8005198:	2b08      	cmp	r3, #8
 800519a:	d112      	bne.n	80051c2 <HAL_RCC_OscConfig+0x5e>
 800519c:	4b8c      	ldr	r3, [pc, #560]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a8:	d10b      	bne.n	80051c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051aa:	4b89      	ldr	r3, [pc, #548]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d06c      	beq.n	8005290 <HAL_RCC_OscConfig+0x12c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d168      	bne.n	8005290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e24c      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ca:	d106      	bne.n	80051da <HAL_RCC_OscConfig+0x76>
 80051cc:	4b80      	ldr	r3, [pc, #512]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a7f      	ldr	r2, [pc, #508]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80051d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	e02e      	b.n	8005238 <HAL_RCC_OscConfig+0xd4>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10c      	bne.n	80051fc <HAL_RCC_OscConfig+0x98>
 80051e2:	4b7b      	ldr	r3, [pc, #492]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a7a      	ldr	r2, [pc, #488]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80051e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	4b78      	ldr	r3, [pc, #480]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a77      	ldr	r2, [pc, #476]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80051f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	e01d      	b.n	8005238 <HAL_RCC_OscConfig+0xd4>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005204:	d10c      	bne.n	8005220 <HAL_RCC_OscConfig+0xbc>
 8005206:	4b72      	ldr	r3, [pc, #456]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a71      	ldr	r2, [pc, #452]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 800520c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	4b6f      	ldr	r3, [pc, #444]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a6e      	ldr	r2, [pc, #440]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 8005218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	e00b      	b.n	8005238 <HAL_RCC_OscConfig+0xd4>
 8005220:	4b6b      	ldr	r3, [pc, #428]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a6a      	ldr	r2, [pc, #424]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 8005226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	4b68      	ldr	r3, [pc, #416]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a67      	ldr	r2, [pc, #412]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 8005232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005236:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d013      	beq.n	8005268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005240:	f7fc fda4 	bl	8001d8c <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005248:	f7fc fda0 	bl	8001d8c <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b64      	cmp	r3, #100	; 0x64
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e200      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800525a:	4b5d      	ldr	r3, [pc, #372]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0f0      	beq.n	8005248 <HAL_RCC_OscConfig+0xe4>
 8005266:	e014      	b.n	8005292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005268:	f7fc fd90 	bl	8001d8c <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005270:	f7fc fd8c 	bl	8001d8c <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b64      	cmp	r3, #100	; 0x64
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e1ec      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005282:	4b53      	ldr	r3, [pc, #332]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f0      	bne.n	8005270 <HAL_RCC_OscConfig+0x10c>
 800528e:	e000      	b.n	8005292 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d063      	beq.n	8005366 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800529e:	4b4c      	ldr	r3, [pc, #304]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f003 030c 	and.w	r3, r3, #12
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00b      	beq.n	80052c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80052aa:	4b49      	ldr	r3, [pc, #292]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d11c      	bne.n	80052f0 <HAL_RCC_OscConfig+0x18c>
 80052b6:	4b46      	ldr	r3, [pc, #280]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d116      	bne.n	80052f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052c2:	4b43      	ldr	r3, [pc, #268]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_RCC_OscConfig+0x176>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d001      	beq.n	80052da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e1c0      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052da:	4b3d      	ldr	r3, [pc, #244]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4939      	ldr	r1, [pc, #228]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ee:	e03a      	b.n	8005366 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d020      	beq.n	800533a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052f8:	4b36      	ldr	r3, [pc, #216]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
 80052fa:	2201      	movs	r2, #1
 80052fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fe:	f7fc fd45 	bl	8001d8c <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005304:	e008      	b.n	8005318 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005306:	f7fc fd41 	bl	8001d8c <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e1a1      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005318:	4b2d      	ldr	r3, [pc, #180]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f0      	beq.n	8005306 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005324:	4b2a      	ldr	r3, [pc, #168]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	4927      	ldr	r1, [pc, #156]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 8005334:	4313      	orrs	r3, r2
 8005336:	600b      	str	r3, [r1, #0]
 8005338:	e015      	b.n	8005366 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800533a:	4b26      	ldr	r3, [pc, #152]	; (80053d4 <HAL_RCC_OscConfig+0x270>)
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005340:	f7fc fd24 	bl	8001d8c <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005348:	f7fc fd20 	bl	8001d8c <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e180      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800535a:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d03a      	beq.n	80053e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d019      	beq.n	80053ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800537a:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <HAL_RCC_OscConfig+0x274>)
 800537c:	2201      	movs	r2, #1
 800537e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005380:	f7fc fd04 	bl	8001d8c <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005388:	f7fc fd00 	bl	8001d8c <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e160      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800539a:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <HAL_RCC_OscConfig+0x26c>)
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80053a6:	2001      	movs	r0, #1
 80053a8:	f000 faba 	bl	8005920 <RCC_Delay>
 80053ac:	e01c      	b.n	80053e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053ae:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <HAL_RCC_OscConfig+0x274>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053b4:	f7fc fcea 	bl	8001d8c <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ba:	e00f      	b.n	80053dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053bc:	f7fc fce6 	bl	8001d8c <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d908      	bls.n	80053dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e146      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
 80053ce:	bf00      	nop
 80053d0:	40021000 	.word	0x40021000
 80053d4:	42420000 	.word	0x42420000
 80053d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053dc:	4b92      	ldr	r3, [pc, #584]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e9      	bne.n	80053bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80a6 	beq.w	8005542 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f6:	2300      	movs	r3, #0
 80053f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fa:	4b8b      	ldr	r3, [pc, #556]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10d      	bne.n	8005422 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005406:	4b88      	ldr	r3, [pc, #544]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	4a87      	ldr	r2, [pc, #540]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 800540c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005410:	61d3      	str	r3, [r2, #28]
 8005412:	4b85      	ldr	r3, [pc, #532]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800541e:	2301      	movs	r3, #1
 8005420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005422:	4b82      	ldr	r3, [pc, #520]	; (800562c <HAL_RCC_OscConfig+0x4c8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	2b00      	cmp	r3, #0
 800542c:	d118      	bne.n	8005460 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800542e:	4b7f      	ldr	r3, [pc, #508]	; (800562c <HAL_RCC_OscConfig+0x4c8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a7e      	ldr	r2, [pc, #504]	; (800562c <HAL_RCC_OscConfig+0x4c8>)
 8005434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800543a:	f7fc fca7 	bl	8001d8c <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005442:	f7fc fca3 	bl	8001d8c <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b64      	cmp	r3, #100	; 0x64
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e103      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005454:	4b75      	ldr	r3, [pc, #468]	; (800562c <HAL_RCC_OscConfig+0x4c8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0f0      	beq.n	8005442 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d106      	bne.n	8005476 <HAL_RCC_OscConfig+0x312>
 8005468:	4b6f      	ldr	r3, [pc, #444]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	4a6e      	ldr	r2, [pc, #440]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	6213      	str	r3, [r2, #32]
 8005474:	e02d      	b.n	80054d2 <HAL_RCC_OscConfig+0x36e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10c      	bne.n	8005498 <HAL_RCC_OscConfig+0x334>
 800547e:	4b6a      	ldr	r3, [pc, #424]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	4a69      	ldr	r2, [pc, #420]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	6213      	str	r3, [r2, #32]
 800548a:	4b67      	ldr	r3, [pc, #412]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	4a66      	ldr	r2, [pc, #408]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 8005490:	f023 0304 	bic.w	r3, r3, #4
 8005494:	6213      	str	r3, [r2, #32]
 8005496:	e01c      	b.n	80054d2 <HAL_RCC_OscConfig+0x36e>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2b05      	cmp	r3, #5
 800549e:	d10c      	bne.n	80054ba <HAL_RCC_OscConfig+0x356>
 80054a0:	4b61      	ldr	r3, [pc, #388]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	4a60      	ldr	r2, [pc, #384]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80054a6:	f043 0304 	orr.w	r3, r3, #4
 80054aa:	6213      	str	r3, [r2, #32]
 80054ac:	4b5e      	ldr	r3, [pc, #376]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	4a5d      	ldr	r2, [pc, #372]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	6213      	str	r3, [r2, #32]
 80054b8:	e00b      	b.n	80054d2 <HAL_RCC_OscConfig+0x36e>
 80054ba:	4b5b      	ldr	r3, [pc, #364]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	4a5a      	ldr	r2, [pc, #360]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	6213      	str	r3, [r2, #32]
 80054c6:	4b58      	ldr	r3, [pc, #352]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	4a57      	ldr	r2, [pc, #348]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80054cc:	f023 0304 	bic.w	r3, r3, #4
 80054d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d015      	beq.n	8005506 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054da:	f7fc fc57 	bl	8001d8c <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e0:	e00a      	b.n	80054f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e2:	f7fc fc53 	bl	8001d8c <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e0b1      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f8:	4b4b      	ldr	r3, [pc, #300]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0ee      	beq.n	80054e2 <HAL_RCC_OscConfig+0x37e>
 8005504:	e014      	b.n	8005530 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005506:	f7fc fc41 	bl	8001d8c <HAL_GetTick>
 800550a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800550c:	e00a      	b.n	8005524 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550e:	f7fc fc3d 	bl	8001d8c <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	f241 3288 	movw	r2, #5000	; 0x1388
 800551c:	4293      	cmp	r3, r2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e09b      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005524:	4b40      	ldr	r3, [pc, #256]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1ee      	bne.n	800550e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005530:	7dfb      	ldrb	r3, [r7, #23]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d105      	bne.n	8005542 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005536:	4b3c      	ldr	r3, [pc, #240]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	4a3b      	ldr	r2, [pc, #236]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 800553c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005540:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 8087 	beq.w	800565a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800554c:	4b36      	ldr	r3, [pc, #216]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f003 030c 	and.w	r3, r3, #12
 8005554:	2b08      	cmp	r3, #8
 8005556:	d061      	beq.n	800561c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	2b02      	cmp	r3, #2
 800555e:	d146      	bne.n	80055ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005560:	4b33      	ldr	r3, [pc, #204]	; (8005630 <HAL_RCC_OscConfig+0x4cc>)
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005566:	f7fc fc11 	bl	8001d8c <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800556e:	f7fc fc0d 	bl	8001d8c <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e06d      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005580:	4b29      	ldr	r3, [pc, #164]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1f0      	bne.n	800556e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005594:	d108      	bne.n	80055a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005596:	4b24      	ldr	r3, [pc, #144]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	4921      	ldr	r1, [pc, #132]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055a8:	4b1f      	ldr	r3, [pc, #124]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a19      	ldr	r1, [r3, #32]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	430b      	orrs	r3, r1
 80055ba:	491b      	ldr	r1, [pc, #108]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055c0:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <HAL_RCC_OscConfig+0x4cc>)
 80055c2:	2201      	movs	r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c6:	f7fc fbe1 	bl	8001d8c <HAL_GetTick>
 80055ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055cc:	e008      	b.n	80055e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ce:	f7fc fbdd 	bl	8001d8c <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e03d      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055e0:	4b11      	ldr	r3, [pc, #68]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0f0      	beq.n	80055ce <HAL_RCC_OscConfig+0x46a>
 80055ec:	e035      	b.n	800565a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ee:	4b10      	ldr	r3, [pc, #64]	; (8005630 <HAL_RCC_OscConfig+0x4cc>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f4:	f7fc fbca 	bl	8001d8c <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055fc:	f7fc fbc6 	bl	8001d8c <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e026      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <HAL_RCC_OscConfig+0x4c4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x498>
 800561a:	e01e      	b.n	800565a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d107      	bne.n	8005634 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e019      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
 8005628:	40021000 	.word	0x40021000
 800562c:	40007000 	.word	0x40007000
 8005630:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_RCC_OscConfig+0x500>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	429a      	cmp	r2, r3
 8005646:	d106      	bne.n	8005656 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005652:	429a      	cmp	r2, r3
 8005654:	d001      	beq.n	800565a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000

08005668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e0d0      	b.n	800581e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800567c:	4b6a      	ldr	r3, [pc, #424]	; (8005828 <HAL_RCC_ClockConfig+0x1c0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d910      	bls.n	80056ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568a:	4b67      	ldr	r3, [pc, #412]	; (8005828 <HAL_RCC_ClockConfig+0x1c0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 0207 	bic.w	r2, r3, #7
 8005692:	4965      	ldr	r1, [pc, #404]	; (8005828 <HAL_RCC_ClockConfig+0x1c0>)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	4313      	orrs	r3, r2
 8005698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	4b63      	ldr	r3, [pc, #396]	; (8005828 <HAL_RCC_ClockConfig+0x1c0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d001      	beq.n	80056ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0b8      	b.n	800581e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d020      	beq.n	80056fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c4:	4b59      	ldr	r3, [pc, #356]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	4a58      	ldr	r2, [pc, #352]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 80056ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056dc:	4b53      	ldr	r3, [pc, #332]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4a52      	ldr	r2, [pc, #328]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 80056e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80056e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e8:	4b50      	ldr	r3, [pc, #320]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	494d      	ldr	r1, [pc, #308]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d040      	beq.n	8005788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	4b47      	ldr	r3, [pc, #284]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d115      	bne.n	8005746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e07f      	b.n	800581e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d107      	bne.n	8005736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005726:	4b41      	ldr	r3, [pc, #260]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e073      	b.n	800581e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005736:	4b3d      	ldr	r3, [pc, #244]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e06b      	b.n	800581e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005746:	4b39      	ldr	r3, [pc, #228]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f023 0203 	bic.w	r2, r3, #3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	4936      	ldr	r1, [pc, #216]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005758:	f7fc fb18 	bl	8001d8c <HAL_GetTick>
 800575c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575e:	e00a      	b.n	8005776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005760:	f7fc fb14 	bl	8001d8c <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	f241 3288 	movw	r2, #5000	; 0x1388
 800576e:	4293      	cmp	r3, r2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e053      	b.n	800581e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005776:	4b2d      	ldr	r3, [pc, #180]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f003 020c 	and.w	r2, r3, #12
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	429a      	cmp	r2, r3
 8005786:	d1eb      	bne.n	8005760 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005788:	4b27      	ldr	r3, [pc, #156]	; (8005828 <HAL_RCC_ClockConfig+0x1c0>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	429a      	cmp	r2, r3
 8005794:	d210      	bcs.n	80057b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005796:	4b24      	ldr	r3, [pc, #144]	; (8005828 <HAL_RCC_ClockConfig+0x1c0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f023 0207 	bic.w	r2, r3, #7
 800579e:	4922      	ldr	r1, [pc, #136]	; (8005828 <HAL_RCC_ClockConfig+0x1c0>)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b20      	ldr	r3, [pc, #128]	; (8005828 <HAL_RCC_ClockConfig+0x1c0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e032      	b.n	800581e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c4:	4b19      	ldr	r3, [pc, #100]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	4916      	ldr	r1, [pc, #88]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057e2:	4b12      	ldr	r3, [pc, #72]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	490e      	ldr	r1, [pc, #56]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057f6:	f000 f821 	bl	800583c <HAL_RCC_GetSysClockFreq>
 80057fa:	4602      	mov	r2, r0
 80057fc:	4b0b      	ldr	r3, [pc, #44]	; (800582c <HAL_RCC_ClockConfig+0x1c4>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	490a      	ldr	r1, [pc, #40]	; (8005830 <HAL_RCC_ClockConfig+0x1c8>)
 8005808:	5ccb      	ldrb	r3, [r1, r3]
 800580a:	fa22 f303 	lsr.w	r3, r2, r3
 800580e:	4a09      	ldr	r2, [pc, #36]	; (8005834 <HAL_RCC_ClockConfig+0x1cc>)
 8005810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005812:	4b09      	ldr	r3, [pc, #36]	; (8005838 <HAL_RCC_ClockConfig+0x1d0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fc fa76 	bl	8001d08 <HAL_InitTick>

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40022000 	.word	0x40022000
 800582c:	40021000 	.word	0x40021000
 8005830:	0800bc3c 	.word	0x0800bc3c
 8005834:	20000020 	.word	0x20000020
 8005838:	20000024 	.word	0x20000024

0800583c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	2300      	movs	r3, #0
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	2300      	movs	r3, #0
 8005850:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005856:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 030c 	and.w	r3, r3, #12
 8005862:	2b04      	cmp	r3, #4
 8005864:	d002      	beq.n	800586c <HAL_RCC_GetSysClockFreq+0x30>
 8005866:	2b08      	cmp	r3, #8
 8005868:	d003      	beq.n	8005872 <HAL_RCC_GetSysClockFreq+0x36>
 800586a:	e027      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800586c:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800586e:	613b      	str	r3, [r7, #16]
      break;
 8005870:	e027      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	0c9b      	lsrs	r3, r3, #18
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800587c:	5cd3      	ldrb	r3, [r2, r3]
 800587e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d010      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800588a:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	0c5b      	lsrs	r3, r3, #17
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	4a11      	ldr	r2, [pc, #68]	; (80058dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005896:	5cd3      	ldrb	r3, [r2, r3]
 8005898:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a0d      	ldr	r2, [pc, #52]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800589e:	fb03 f202 	mul.w	r2, r3, r2
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	e004      	b.n	80058b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a0c      	ldr	r2, [pc, #48]	; (80058e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80058b0:	fb02 f303 	mul.w	r3, r2, r3
 80058b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	613b      	str	r3, [r7, #16]
      break;
 80058ba:	e002      	b.n	80058c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80058be:	613b      	str	r3, [r7, #16]
      break;
 80058c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058c2:	693b      	ldr	r3, [r7, #16]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40021000 	.word	0x40021000
 80058d4:	007a1200 	.word	0x007a1200
 80058d8:	0800bc54 	.word	0x0800bc54
 80058dc:	0800bc64 	.word	0x0800bc64
 80058e0:	003d0900 	.word	0x003d0900

080058e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e8:	4b02      	ldr	r3, [pc, #8]	; (80058f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80058ea:	681b      	ldr	r3, [r3, #0]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr
 80058f4:	20000020 	.word	0x20000020

080058f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058fc:	f7ff fff2 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 8005900:	4602      	mov	r2, r0
 8005902:	4b05      	ldr	r3, [pc, #20]	; (8005918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	0a1b      	lsrs	r3, r3, #8
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	4903      	ldr	r1, [pc, #12]	; (800591c <HAL_RCC_GetPCLK1Freq+0x24>)
 800590e:	5ccb      	ldrb	r3, [r1, r3]
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005914:	4618      	mov	r0, r3
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40021000 	.word	0x40021000
 800591c:	0800bc4c 	.word	0x0800bc4c

08005920 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005928:	4b0a      	ldr	r3, [pc, #40]	; (8005954 <RCC_Delay+0x34>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a0a      	ldr	r2, [pc, #40]	; (8005958 <RCC_Delay+0x38>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	0a5b      	lsrs	r3, r3, #9
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800593c:	bf00      	nop
  }
  while (Delay --);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1e5a      	subs	r2, r3, #1
 8005942:	60fa      	str	r2, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1f9      	bne.n	800593c <RCC_Delay+0x1c>
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr
 8005954:	20000020 	.word	0x20000020
 8005958:	10624dd3 	.word	0x10624dd3

0800595c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d07d      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005978:	2300      	movs	r3, #0
 800597a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800597c:	4b4f      	ldr	r3, [pc, #316]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10d      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005988:	4b4c      	ldr	r3, [pc, #304]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	4a4b      	ldr	r2, [pc, #300]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005992:	61d3      	str	r3, [r2, #28]
 8005994:	4b49      	ldr	r3, [pc, #292]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a0:	2301      	movs	r3, #1
 80059a2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a4:	4b46      	ldr	r3, [pc, #280]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d118      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059b0:	4b43      	ldr	r3, [pc, #268]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a42      	ldr	r2, [pc, #264]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059bc:	f7fc f9e6 	bl	8001d8c <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c2:	e008      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c4:	f7fc f9e2 	bl	8001d8c <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b64      	cmp	r3, #100	; 0x64
 80059d0:	d901      	bls.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e06d      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d6:	4b3a      	ldr	r3, [pc, #232]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d0f0      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059e2:	4b36      	ldr	r3, [pc, #216]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d02e      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d027      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a00:	4b2e      	ldr	r3, [pc, #184]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a0a:	4b2e      	ldr	r3, [pc, #184]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a10:	4b2c      	ldr	r3, [pc, #176]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a16:	4a29      	ldr	r2, [pc, #164]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d014      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a26:	f7fc f9b1 	bl	8001d8c <HAL_GetTick>
 8005a2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a2c:	e00a      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2e:	f7fc f9ad 	bl	8001d8c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e036      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a44:	4b1d      	ldr	r3, [pc, #116]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0ee      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a50:	4b1a      	ldr	r3, [pc, #104]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	4917      	ldr	r1, [pc, #92]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d105      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a68:	4b14      	ldr	r3, [pc, #80]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	4a13      	ldr	r2, [pc, #76]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a80:	4b0e      	ldr	r3, [pc, #56]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	490b      	ldr	r1, [pc, #44]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a9e:	4b07      	ldr	r3, [pc, #28]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	4904      	ldr	r1, [pc, #16]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	40007000 	.word	0x40007000
 8005ac4:	42420440 	.word	0x42420440

08005ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e076      	b.n	8005bc8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d108      	bne.n	8005af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aea:	d009      	beq.n	8005b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	61da      	str	r2, [r3, #28]
 8005af2:	e005      	b.n	8005b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fb ffb0 	bl	8001a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b84:	ea42 0103 	orr.w	r1, r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	0c1a      	lsrs	r2, r3, #16
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f002 0204 	and.w	r2, r2, #4
 8005ba6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69da      	ldr	r2, [r3, #28]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_SPI_Transmit+0x22>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e12d      	b.n	8005e4e <HAL_SPI_Transmit+0x27e>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bfa:	f7fc f8c7 	bl	8001d8c <HAL_GetTick>
 8005bfe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c00:	88fb      	ldrh	r3, [r7, #6]
 8005c02:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d002      	beq.n	8005c16 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c10:	2302      	movs	r3, #2
 8005c12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c14:	e116      	b.n	8005e44 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <HAL_SPI_Transmit+0x52>
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c26:	e10d      	b.n	8005e44 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	88fa      	ldrh	r2, [r7, #6]
 8005c40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	88fa      	ldrh	r2, [r7, #6]
 8005c46:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c6e:	d10f      	bne.n	8005c90 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d007      	beq.n	8005cae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cb6:	d14f      	bne.n	8005d58 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_SPI_Transmit+0xf6>
 8005cc0:	8afb      	ldrh	r3, [r7, #22]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d142      	bne.n	8005d4c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cca:	881a      	ldrh	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd6:	1c9a      	adds	r2, r3, #2
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cea:	e02f      	b.n	8005d4c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d112      	bne.n	8005d20 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	881a      	ldrh	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	1c9a      	adds	r2, r3, #2
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d1e:	e015      	b.n	8005d4c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d20:	f7fc f834 	bl	8001d8c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d803      	bhi.n	8005d38 <HAL_SPI_Transmit+0x168>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d36:	d102      	bne.n	8005d3e <HAL_SPI_Transmit+0x16e>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005d4a:	e07b      	b.n	8005e44 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1ca      	bne.n	8005cec <HAL_SPI_Transmit+0x11c>
 8005d56:	e050      	b.n	8005dfa <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_SPI_Transmit+0x196>
 8005d60:	8afb      	ldrh	r3, [r7, #22]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d144      	bne.n	8005df0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	330c      	adds	r3, #12
 8005d70:	7812      	ldrb	r2, [r2, #0]
 8005d72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d8c:	e030      	b.n	8005df0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d113      	bne.n	8005dc4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	330c      	adds	r3, #12
 8005da6:	7812      	ldrb	r2, [r2, #0]
 8005da8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dc2:	e015      	b.n	8005df0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc4:	f7fb ffe2 	bl	8001d8c <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d803      	bhi.n	8005ddc <HAL_SPI_Transmit+0x20c>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dda:	d102      	bne.n	8005de2 <HAL_SPI_Transmit+0x212>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005dee:	e029      	b.n	8005e44 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1c9      	bne.n	8005d8e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f8be 	bl	8005f80 <SPI_EndRxTxTransaction>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	77fb      	strb	r3, [r7, #31]
 8005e3a:	e003      	b.n	8005e44 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e64:	b2db      	uxtb	r3, r3
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e80:	f7fb ff84 	bl	8001d8c <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e90:	f7fb ff7c 	bl	8001d8c <HAL_GetTick>
 8005e94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e96:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	015b      	lsls	r3, r3, #5
 8005e9c:	0d1b      	lsrs	r3, r3, #20
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	fb02 f303 	mul.w	r3, r2, r3
 8005ea4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ea6:	e054      	b.n	8005f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eae:	d050      	beq.n	8005f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eb0:	f7fb ff6c 	bl	8001d8c <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d902      	bls.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d13d      	bne.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ede:	d111      	bne.n	8005f04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee8:	d004      	beq.n	8005ef4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef2:	d107      	bne.n	8005f04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f0c:	d10f      	bne.n	8005f2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e017      	b.n	8005f72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	bf0c      	ite	eq
 8005f62:	2301      	moveq	r3, #1
 8005f64:	2300      	movne	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d19b      	bne.n	8005ea8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3720      	adds	r7, #32
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000020 	.word	0x20000020

08005f80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2200      	movs	r2, #0
 8005f94:	2180      	movs	r1, #128	; 0x80
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff ff6a 	bl	8005e70 <SPI_WaitFlagStateUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d007      	beq.n	8005fb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	f043 0220 	orr.w	r2, r3, #32
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e000      	b.n	8005fb4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e041      	b.n	8006052 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fb fd8a 	bl	8001afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	f000 fa74 	bl	80064e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b01      	cmp	r3, #1
 800606e:	d001      	beq.n	8006074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e03a      	b.n	80060ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <HAL_TIM_Base_Start_IT+0x98>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00e      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x58>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609e:	d009      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x58>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a14      	ldr	r2, [pc, #80]	; (80060f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d004      	beq.n	80060b4 <HAL_TIM_Base_Start_IT+0x58>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a13      	ldr	r2, [pc, #76]	; (80060fc <HAL_TIM_Base_Start_IT+0xa0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d111      	bne.n	80060d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b06      	cmp	r3, #6
 80060c4:	d010      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d6:	e007      	b.n	80060e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bc80      	pop	{r7}
 80060f2:	4770      	bx	lr
 80060f4:	40012c00 	.word	0x40012c00
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800

08006100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b02      	cmp	r3, #2
 8006114:	d122      	bne.n	800615c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b02      	cmp	r3, #2
 8006122:	d11b      	bne.n	800615c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0202 	mvn.w	r2, #2
 800612c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f9b4 	bl	80064b0 <HAL_TIM_IC_CaptureCallback>
 8006148:	e005      	b.n	8006156 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f9a7 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f9b6 	bl	80064c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b04      	cmp	r3, #4
 8006168:	d122      	bne.n	80061b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b04      	cmp	r3, #4
 8006176:	d11b      	bne.n	80061b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0204 	mvn.w	r2, #4
 8006180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2202      	movs	r2, #2
 8006186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f98a 	bl	80064b0 <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f97d 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f98c 	bl	80064c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b08      	cmp	r3, #8
 80061bc:	d122      	bne.n	8006204 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d11b      	bne.n	8006204 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0208 	mvn.w	r2, #8
 80061d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2204      	movs	r2, #4
 80061da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f960 	bl	80064b0 <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f953 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f962 	bl	80064c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0310 	and.w	r3, r3, #16
 800620e:	2b10      	cmp	r3, #16
 8006210:	d122      	bne.n	8006258 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0310 	and.w	r3, r3, #16
 800621c:	2b10      	cmp	r3, #16
 800621e:	d11b      	bne.n	8006258 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0210 	mvn.w	r2, #16
 8006228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2208      	movs	r2, #8
 800622e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f936 	bl	80064b0 <HAL_TIM_IC_CaptureCallback>
 8006244:	e005      	b.n	8006252 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f929 	bl	800649e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f938 	bl	80064c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b01      	cmp	r3, #1
 8006264:	d10e      	bne.n	8006284 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b01      	cmp	r3, #1
 8006272:	d107      	bne.n	8006284 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0201 	mvn.w	r2, #1
 800627c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fa fda2 	bl	8000dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628e:	2b80      	cmp	r3, #128	; 0x80
 8006290:	d10e      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629c:	2b80      	cmp	r3, #128	; 0x80
 800629e:	d107      	bne.n	80062b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fa7b 	bl	80067a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b40      	cmp	r3, #64	; 0x40
 80062bc:	d10e      	bne.n	80062dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d107      	bne.n	80062dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f8fc 	bl	80064d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d10e      	bne.n	8006308 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d107      	bne.n	8006308 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0220 	mvn.w	r2, #32
 8006300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fa46 	bl	8006794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006308:	bf00      	nop
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006324:	2b01      	cmp	r3, #1
 8006326:	d101      	bne.n	800632c <HAL_TIM_ConfigClockSource+0x1c>
 8006328:	2302      	movs	r3, #2
 800632a:	e0b4      	b.n	8006496 <HAL_TIM_ConfigClockSource+0x186>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800634a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006364:	d03e      	beq.n	80063e4 <HAL_TIM_ConfigClockSource+0xd4>
 8006366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636a:	f200 8087 	bhi.w	800647c <HAL_TIM_ConfigClockSource+0x16c>
 800636e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006372:	f000 8086 	beq.w	8006482 <HAL_TIM_ConfigClockSource+0x172>
 8006376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637a:	d87f      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 800637c:	2b70      	cmp	r3, #112	; 0x70
 800637e:	d01a      	beq.n	80063b6 <HAL_TIM_ConfigClockSource+0xa6>
 8006380:	2b70      	cmp	r3, #112	; 0x70
 8006382:	d87b      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 8006384:	2b60      	cmp	r3, #96	; 0x60
 8006386:	d050      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x11a>
 8006388:	2b60      	cmp	r3, #96	; 0x60
 800638a:	d877      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 800638c:	2b50      	cmp	r3, #80	; 0x50
 800638e:	d03c      	beq.n	800640a <HAL_TIM_ConfigClockSource+0xfa>
 8006390:	2b50      	cmp	r3, #80	; 0x50
 8006392:	d873      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 8006394:	2b40      	cmp	r3, #64	; 0x40
 8006396:	d058      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x13a>
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d86f      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 800639c:	2b30      	cmp	r3, #48	; 0x30
 800639e:	d064      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x15a>
 80063a0:	2b30      	cmp	r3, #48	; 0x30
 80063a2:	d86b      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d060      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x15a>
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d867      	bhi.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d05c      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x15a>
 80063b0:	2b10      	cmp	r3, #16
 80063b2:	d05a      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x15a>
 80063b4:	e062      	b.n	800647c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063c6:	f000 f968 	bl	800669a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	609a      	str	r2, [r3, #8]
      break;
 80063e2:	e04f      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063f4:	f000 f951 	bl	800669a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006406:	609a      	str	r2, [r3, #8]
      break;
 8006408:	e03c      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006416:	461a      	mov	r2, r3
 8006418:	f000 f8c8 	bl	80065ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2150      	movs	r1, #80	; 0x50
 8006422:	4618      	mov	r0, r3
 8006424:	f000 f91f 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8006428:	e02c      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006436:	461a      	mov	r2, r3
 8006438:	f000 f8e6 	bl	8006608 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2160      	movs	r1, #96	; 0x60
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f90f 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8006448:	e01c      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006456:	461a      	mov	r2, r3
 8006458:	f000 f8a8 	bl	80065ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2140      	movs	r1, #64	; 0x40
 8006462:	4618      	mov	r0, r3
 8006464:	f000 f8ff 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 8006468:	e00c      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4619      	mov	r1, r3
 8006474:	4610      	mov	r0, r2
 8006476:	f000 f8f6 	bl	8006666 <TIM_ITRx_SetConfig>
      break;
 800647a:	e003      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	73fb      	strb	r3, [r7, #15]
      break;
 8006480:	e000      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006482:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr

080064c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr
	...

080064e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a29      	ldr	r2, [pc, #164]	; (80065a0 <TIM_Base_SetConfig+0xb8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00b      	beq.n	8006518 <TIM_Base_SetConfig+0x30>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006506:	d007      	beq.n	8006518 <TIM_Base_SetConfig+0x30>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a26      	ldr	r2, [pc, #152]	; (80065a4 <TIM_Base_SetConfig+0xbc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_Base_SetConfig+0x30>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <TIM_Base_SetConfig+0xc0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d108      	bne.n	800652a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a1c      	ldr	r2, [pc, #112]	; (80065a0 <TIM_Base_SetConfig+0xb8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00b      	beq.n	800654a <TIM_Base_SetConfig+0x62>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006538:	d007      	beq.n	800654a <TIM_Base_SetConfig+0x62>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a19      	ldr	r2, [pc, #100]	; (80065a4 <TIM_Base_SetConfig+0xbc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d003      	beq.n	800654a <TIM_Base_SetConfig+0x62>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a18      	ldr	r2, [pc, #96]	; (80065a8 <TIM_Base_SetConfig+0xc0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d108      	bne.n	800655c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a07      	ldr	r2, [pc, #28]	; (80065a0 <TIM_Base_SetConfig+0xb8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d103      	bne.n	8006590 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	615a      	str	r2, [r3, #20]
}
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr
 80065a0:	40012c00 	.word	0x40012c00
 80065a4:	40000400 	.word	0x40000400
 80065a8:	40000800 	.word	0x40000800

080065ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	f023 0201 	bic.w	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	4313      	orrs	r3, r2
 80065e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f023 030a 	bic.w	r3, r3, #10
 80065e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	621a      	str	r2, [r3, #32]
}
 80065fe:	bf00      	nop
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr

08006608 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f023 0210 	bic.w	r2, r3, #16
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	031b      	lsls	r3, r3, #12
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006644:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	621a      	str	r2, [r3, #32]
}
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr

08006666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	f043 0307 	orr.w	r3, r3, #7
 8006688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	609a      	str	r2, [r3, #8]
}
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800669a:	b480      	push	{r7}
 800669c:	b087      	sub	sp, #28
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	607a      	str	r2, [r7, #4]
 80066a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	021a      	lsls	r2, r3, #8
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	431a      	orrs	r2, r3
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	609a      	str	r2, [r3, #8]
}
 80066ce:	bf00      	nop
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e046      	b.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a16      	ldr	r2, [pc, #88]	; (8006788 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d00e      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673c:	d009      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a12      	ldr	r2, [pc, #72]	; (800678c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d004      	beq.n	8006752 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a10      	ldr	r2, [pc, #64]	; (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d10c      	bne.n	800676c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	4313      	orrs	r3, r2
 8006762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr
 8006788:	40012c00 	.word	0x40012c00
 800678c:	40000400 	.word	0x40000400
 8006790:	40000800 	.word	0x40000800

08006794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bc80      	pop	{r7}
 80067a4:	4770      	bx	lr

080067a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr

080067b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80067b8:	b084      	sub	sp, #16
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	f107 0014 	add.w	r0, r7, #20
 80067c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	b004      	add	sp, #16
 80067d6:	4770      	bx	lr

080067d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80067e8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80067ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr

08006804 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800680c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006810:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	b29b      	uxth	r3, r3
 800681e:	43db      	mvns	r3, r3
 8006820:	b29b      	uxth	r3, r3
 8006822:	4013      	ands	r3, r2
 8006824:	b29a      	uxth	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr

08006838 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006850:	b084      	sub	sp, #16
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	f107 0014 	add.w	r0, r7, #20
 800685e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	bc80      	pop	{r7}
 800688c:	b004      	add	sp, #16
 800688e:	4770      	bx	lr

08006890 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006890:	b480      	push	{r7}
 8006892:	b09d      	sub	sp, #116	; 0x74
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80068b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	78db      	ldrb	r3, [r3, #3]
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d81f      	bhi.n	8006902 <USB_ActivateEndpoint+0x72>
 80068c2:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <USB_ActivateEndpoint+0x38>)
 80068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c8:	080068d9 	.word	0x080068d9
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	0800690b 	.word	0x0800690b
 80068d4:	080068e7 	.word	0x080068e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80068d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80068dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80068e4:	e012      	b.n	800690c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80068e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80068ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80068ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80068f2:	e00b      	b.n	800690c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80068f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80068f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006900:	e004      	b.n	800690c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006908:	e000      	b.n	800690c <USB_ActivateEndpoint+0x7c>
      break;
 800690a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800691a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692a:	b29b      	uxth	r3, r3
 800692c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006944:	b29a      	uxth	r2, r3
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	4313      	orrs	r3, r2
 800694e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	441a      	add	r2, r3
 800695c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006970:	b29b      	uxth	r3, r3
 8006972:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	7b1b      	ldrb	r3, [r3, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	f040 8178 	bne.w	8006c6e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	785b      	ldrb	r3, [r3, #1]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 8084 	beq.w	8006a90 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006992:	b29b      	uxth	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	4413      	add	r3, r2
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	011a      	lsls	r2, r3, #4
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	88db      	ldrh	r3, [r3, #6]
 80069b0:	085b      	lsrs	r3, r3, #1
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	827b      	strh	r3, [r7, #18]
 80069ca:	8a7b      	ldrh	r3, [r7, #18]
 80069cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d01b      	beq.n	8006a0c <USB_ActivateEndpoint+0x17c>
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	823b      	strh	r3, [r7, #16]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	8a3b      	ldrh	r3, [r7, #16]
 80069f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	78db      	ldrb	r3, [r3, #3]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d020      	beq.n	8006a56 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a2a:	81bb      	strh	r3, [r7, #12]
 8006a2c:	89bb      	ldrh	r3, [r7, #12]
 8006a2e:	f083 0320 	eor.w	r3, r3, #32
 8006a32:	81bb      	strh	r3, [r7, #12]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	441a      	add	r2, r3
 8006a3e:	89bb      	ldrh	r3, [r7, #12]
 8006a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	8013      	strh	r3, [r2, #0]
 8006a54:	e2d5      	b.n	8007002 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a6c:	81fb      	strh	r3, [r7, #14]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	89fb      	ldrh	r3, [r7, #14]
 8006a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	8013      	strh	r3, [r2, #0]
 8006a8e:	e2b8      	b.n	8007002 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	633b      	str	r3, [r7, #48]	; 0x30
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	4413      	add	r3, r2
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	011a      	lsls	r2, r3, #4
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	88db      	ldrh	r3, [r3, #6]
 8006ab8:	085b      	lsrs	r3, r3, #1
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	4413      	add	r3, r2
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	011a      	lsls	r2, r3, #4
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	2b3e      	cmp	r3, #62	; 0x3e
 8006afe:	d91d      	bls.n	8006b3c <USB_ActivateEndpoint+0x2ac>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	095b      	lsrs	r3, r3, #5
 8006b06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f003 031f 	and.w	r3, r3, #31
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d102      	bne.n	8006b1a <USB_ActivateEndpoint+0x28a>
 8006b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b16:	3b01      	subs	r3, #1
 8006b18:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	029b      	lsls	r3, r3, #10
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	e026      	b.n	8006b8a <USB_ActivateEndpoint+0x2fa>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <USB_ActivateEndpoint+0x2ca>
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	801a      	strh	r2, [r3, #0]
 8006b58:	e017      	b.n	8006b8a <USB_ActivateEndpoint+0x2fa>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	085b      	lsrs	r3, r3, #1
 8006b60:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <USB_ActivateEndpoint+0x2e4>
 8006b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b70:	3301      	adds	r3, #1
 8006b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	029b      	lsls	r3, r3, #10
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	4313      	orrs	r3, r2
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d01b      	beq.n	8006bda <USB_ActivateEndpoint+0x34a>
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb8:	843b      	strh	r3, [r7, #32]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	441a      	add	r2, r3
 8006bc4:	8c3b      	ldrh	r3, [r7, #32]
 8006bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d124      	bne.n	8006c2c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf8:	83bb      	strh	r3, [r7, #28]
 8006bfa:	8bbb      	ldrh	r3, [r7, #28]
 8006bfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c00:	83bb      	strh	r3, [r7, #28]
 8006c02:	8bbb      	ldrh	r3, [r7, #28]
 8006c04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c08:	83bb      	strh	r3, [r7, #28]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	441a      	add	r2, r3
 8006c14:	8bbb      	ldrh	r3, [r7, #28]
 8006c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	8013      	strh	r3, [r2, #0]
 8006c2a:	e1ea      	b.n	8007002 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c42:	83fb      	strh	r3, [r7, #30]
 8006c44:	8bfb      	ldrh	r3, [r7, #30]
 8006c46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c4a:	83fb      	strh	r3, [r7, #30]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	8bfb      	ldrh	r3, [r7, #30]
 8006c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	8013      	strh	r3, [r2, #0]
 8006c6c:	e1c9      	b.n	8007002 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	78db      	ldrb	r3, [r3, #3]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d11e      	bne.n	8006cb4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	441a      	add	r2, r3
 8006c9a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ca6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	8013      	strh	r3, [r2, #0]
 8006cb2:	e01d      	b.n	8006cf0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	441a      	add	r2, r3
 8006cd8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d00:	4413      	add	r3, r2
 8006d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	011a      	lsls	r2, r3, #4
 8006d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d12:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	891b      	ldrh	r3, [r3, #8]
 8006d18:	085b      	lsrs	r3, r3, #1
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	657b      	str	r3, [r7, #84]	; 0x54
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d34:	4413      	add	r3, r2
 8006d36:	657b      	str	r3, [r7, #84]	; 0x54
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	011a      	lsls	r2, r3, #4
 8006d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006d46:	653b      	str	r3, [r7, #80]	; 0x50
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	895b      	ldrh	r3, [r3, #10]
 8006d4c:	085b      	lsrs	r3, r3, #1
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d56:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	785b      	ldrb	r3, [r3, #1]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f040 8093 	bne.w	8006e88 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006d72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d01b      	beq.n	8006db6 <USB_ActivateEndpoint+0x526>
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d94:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	441a      	add	r2, r3
 8006da0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006dc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d01b      	beq.n	8006e06 <USB_ActivateEndpoint+0x576>
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	441a      	add	r2, r3
 8006df0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1c:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e20:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e24:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	441a      	add	r2, r3
 8006e38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	441a      	add	r2, r3
 8006e70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	8013      	strh	r3, [r2, #0]
 8006e86:	e0bc      	b.n	8007002 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01d      	beq.n	8006ee0 <USB_ActivateEndpoint+0x650>
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	441a      	add	r2, r3
 8006ec8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006ef0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01d      	beq.n	8006f38 <USB_ActivateEndpoint+0x6a8>
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f12:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	441a      	add	r2, r3
 8006f20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	78db      	ldrb	r3, [r3, #3]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d024      	beq.n	8006f8a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f5e:	f083 0320 	eor.w	r3, r3, #32
 8006f62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	441a      	add	r2, r3
 8006f70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	8013      	strh	r3, [r2, #0]
 8006f88:	e01d      	b.n	8006fc6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	441a      	add	r2, r3
 8006fae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4413      	add	r3, r2
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fdc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	441a      	add	r2, r3
 8006fea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007002:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007006:	4618      	mov	r0, r3
 8007008:	3774      	adds	r7, #116	; 0x74
 800700a:	46bd      	mov	sp, r7
 800700c:	bc80      	pop	{r7}
 800700e:	4770      	bx	lr

08007010 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007010:	b480      	push	{r7}
 8007012:	b08d      	sub	sp, #52	; 0x34
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	7b1b      	ldrb	r3, [r3, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f040 808e 	bne.w	8007140 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	785b      	ldrb	r3, [r3, #1]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d044      	beq.n	80070b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	81bb      	strh	r3, [r7, #12]
 800703a:	89bb      	ldrh	r3, [r7, #12]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01b      	beq.n	800707c <USB_DeactivateEndpoint+0x6c>
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705a:	817b      	strh	r3, [r7, #10]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	897b      	ldrh	r3, [r7, #10]
 8007068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007074:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007078:	b29b      	uxth	r3, r3
 800707a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800708e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007092:	813b      	strh	r3, [r7, #8]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	441a      	add	r2, r3
 800709e:	893b      	ldrh	r3, [r7, #8]
 80070a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	8013      	strh	r3, [r2, #0]
 80070b4:	e192      	b.n	80073dc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	827b      	strh	r3, [r7, #18]
 80070c4:	8a7b      	ldrh	r3, [r7, #18]
 80070c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d01b      	beq.n	8007106 <USB_DeactivateEndpoint+0xf6>
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e4:	823b      	strh	r3, [r7, #16]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	441a      	add	r2, r3
 80070f0:	8a3b      	ldrh	r3, [r7, #16]
 80070f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007102:	b29b      	uxth	r3, r3
 8007104:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	b29b      	uxth	r3, r3
 8007114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711c:	81fb      	strh	r3, [r7, #14]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	441a      	add	r2, r3
 8007128:	89fb      	ldrh	r3, [r7, #14]
 800712a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800712e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713a:	b29b      	uxth	r3, r3
 800713c:	8013      	strh	r3, [r2, #0]
 800713e:	e14d      	b.n	80073dc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f040 80a5 	bne.w	8007294 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	843b      	strh	r3, [r7, #32]
 8007158:	8c3b      	ldrh	r3, [r7, #32]
 800715a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d01b      	beq.n	800719a <USB_DeactivateEndpoint+0x18a>
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007178:	83fb      	strh	r3, [r7, #30]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	441a      	add	r2, r3
 8007184:	8bfb      	ldrh	r3, [r7, #30]
 8007186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007196:	b29b      	uxth	r3, r3
 8007198:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	83bb      	strh	r3, [r7, #28]
 80071a8:	8bbb      	ldrh	r3, [r7, #28]
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d01b      	beq.n	80071ea <USB_DeactivateEndpoint+0x1da>
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c8:	837b      	strh	r3, [r7, #26]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	441a      	add	r2, r3
 80071d4:	8b7b      	ldrh	r3, [r7, #26]
 80071d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007200:	833b      	strh	r3, [r7, #24]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	441a      	add	r2, r3
 800720c:	8b3b      	ldrh	r3, [r7, #24]
 800720e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800721a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800721e:	b29b      	uxth	r3, r3
 8007220:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	b29b      	uxth	r3, r3
 8007230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007238:	82fb      	strh	r3, [r7, #22]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	441a      	add	r2, r3
 8007244:	8afb      	ldrh	r3, [r7, #22]
 8007246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800724a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800724e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007256:	b29b      	uxth	r3, r3
 8007258:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	b29b      	uxth	r3, r3
 8007268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800726c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007270:	82bb      	strh	r3, [r7, #20]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	441a      	add	r2, r3
 800727c:	8abb      	ldrh	r3, [r7, #20]
 800727e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800728a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728e:	b29b      	uxth	r3, r3
 8007290:	8013      	strh	r3, [r2, #0]
 8007292:	e0a3      	b.n	80073dc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80072a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80072a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d01b      	beq.n	80072e4 <USB_DeactivateEndpoint+0x2d4>
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	441a      	add	r2, r3
 80072ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80072d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80072f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80072f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d01b      	beq.n	8007334 <USB_DeactivateEndpoint+0x324>
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800730e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007312:	853b      	strh	r3, [r7, #40]	; 0x28
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	441a      	add	r2, r3
 800731e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800732c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007330:	b29b      	uxth	r3, r3
 8007332:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4413      	add	r3, r2
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	b29b      	uxth	r3, r3
 8007342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	441a      	add	r2, r3
 8007356:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800735c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007368:	b29b      	uxth	r3, r3
 800736a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800737e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007382:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	441a      	add	r2, r3
 800738e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800739c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	441a      	add	r2, r3
 80073c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d8:	b29b      	uxth	r3, r3
 80073da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3734      	adds	r7, #52	; 0x34
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr

080073e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b0c2      	sub	sp, #264	; 0x108
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073f6:	6018      	str	r0, [r3, #0]
 80073f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007400:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	2b01      	cmp	r3, #1
 8007410:	f040 86b7 	bne.w	8008182 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	699a      	ldr	r2, [r3, #24]
 8007420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	429a      	cmp	r2, r3
 800742e:	d908      	bls.n	8007442 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007440:	e007      	b.n	8007452 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	7b1b      	ldrb	r3, [r3, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d13a      	bne.n	80074d8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6959      	ldr	r1, [r3, #20]
 800746e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	88da      	ldrh	r2, [r3, #6]
 800747a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747e:	b29b      	uxth	r3, r3
 8007480:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007484:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007488:	6800      	ldr	r0, [r0, #0]
 800748a:	f001 fc9c 	bl	8008dc6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800748e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	4413      	add	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	011a      	lsls	r2, r3, #4
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	4413      	add	r3, r2
 80074c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	801a      	strh	r2, [r3, #0]
 80074d4:	f000 be1f 	b.w	8008116 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80074d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	78db      	ldrb	r3, [r3, #3]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	f040 8462 	bne.w	8007dae <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80074ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6a1a      	ldr	r2, [r3, #32]
 80074f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	429a      	cmp	r2, r3
 8007504:	f240 83df 	bls.w	8007cc6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	b29b      	uxth	r3, r3
 8007526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007536:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	441a      	add	r2, r3
 800754c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007558:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800755c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007560:	b29b      	uxth	r3, r3
 8007562:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a1a      	ldr	r2, [r3, #32]
 8007570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007574:	1ad2      	subs	r2, r2, r3
 8007576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 81c7 	beq.w	8007938 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80075aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	633b      	str	r3, [r7, #48]	; 0x30
 80075b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	785b      	ldrb	r3, [r3, #1]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d177      	bne.n	80076b6 <USB_EPStartXfer+0x2ce>
 80075c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	4413      	add	r3, r2
 80075e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	011a      	lsls	r2, r3, #4
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	4413      	add	r3, r2
 80075fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800760c:	b29a      	uxth	r2, r3
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	801a      	strh	r2, [r3, #0]
 8007612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007616:	2b3e      	cmp	r3, #62	; 0x3e
 8007618:	d921      	bls.n	800765e <USB_EPStartXfer+0x276>
 800761a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761e:	095b      	lsrs	r3, r3, #5
 8007620:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007628:	f003 031f 	and.w	r3, r3, #31
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <USB_EPStartXfer+0x252>
 8007630:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007634:	3b01      	subs	r3, #1
 8007636:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	b29a      	uxth	r2, r3
 8007640:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007644:	b29b      	uxth	r3, r3
 8007646:	029b      	lsls	r3, r3, #10
 8007648:	b29b      	uxth	r3, r3
 800764a:	4313      	orrs	r3, r2
 800764c:	b29b      	uxth	r3, r3
 800764e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007656:	b29a      	uxth	r2, r3
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	e050      	b.n	8007700 <USB_EPStartXfer+0x318>
 800765e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <USB_EPStartXfer+0x294>
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007674:	b29a      	uxth	r2, r3
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	e041      	b.n	8007700 <USB_EPStartXfer+0x318>
 800767c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007680:	085b      	lsrs	r3, r3, #1
 8007682:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d004      	beq.n	800769c <USB_EPStartXfer+0x2b4>
 8007692:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007696:	3301      	adds	r3, #1
 8007698:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	029b      	lsls	r3, r3, #10
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	4313      	orrs	r3, r2
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	801a      	strh	r2, [r3, #0]
 80076b4:	e024      	b.n	8007700 <USB_EPStartXfer+0x318>
 80076b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	785b      	ldrb	r3, [r3, #1]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d11c      	bne.n	8007700 <USB_EPStartXfer+0x318>
 80076c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	461a      	mov	r2, r3
 80076d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076da:	4413      	add	r3, r2
 80076dc:	633b      	str	r3, [r7, #48]	; 0x30
 80076de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	011a      	lsls	r2, r3, #4
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	4413      	add	r3, r2
 80076f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	895b      	ldrh	r3, [r3, #10]
 800770c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6959      	ldr	r1, [r3, #20]
 800771c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007720:	b29b      	uxth	r3, r3
 8007722:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007726:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800772a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800772e:	6800      	ldr	r0, [r0, #0]
 8007730:	f001 fb49 	bl	8008dc6 <USB_WritePMA>
            ep->xfer_buff += len;
 8007734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695a      	ldr	r2, [r3, #20]
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007744:	441a      	add	r2, r3
 8007746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800774a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6a1a      	ldr	r2, [r3, #32]
 800775e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	429a      	cmp	r2, r3
 800776c:	d90f      	bls.n	800778e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800776e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6a1a      	ldr	r2, [r3, #32]
 800777a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	621a      	str	r2, [r3, #32]
 800778c:	e00e      	b.n	80077ac <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800778e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800779e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2200      	movs	r2, #0
 80077aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	785b      	ldrb	r3, [r3, #1]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d177      	bne.n	80078ac <USB_EPStartXfer+0x4c4>
 80077bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	61bb      	str	r3, [r7, #24]
 80077c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	4413      	add	r3, r2
 80077de:	61bb      	str	r3, [r7, #24]
 80077e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	011a      	lsls	r2, r3, #4
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	4413      	add	r3, r2
 80077f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007802:	b29a      	uxth	r2, r3
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	801a      	strh	r2, [r3, #0]
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800780c:	2b3e      	cmp	r3, #62	; 0x3e
 800780e:	d921      	bls.n	8007854 <USB_EPStartXfer+0x46c>
 8007810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007814:	095b      	lsrs	r3, r3, #5
 8007816:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800781a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800781e:	f003 031f 	and.w	r3, r3, #31
 8007822:	2b00      	cmp	r3, #0
 8007824:	d104      	bne.n	8007830 <USB_EPStartXfer+0x448>
 8007826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800782a:	3b01      	subs	r3, #1
 800782c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	b29a      	uxth	r2, r3
 8007836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800783a:	b29b      	uxth	r3, r3
 800783c:	029b      	lsls	r3, r3, #10
 800783e:	b29b      	uxth	r3, r3
 8007840:	4313      	orrs	r3, r2
 8007842:	b29b      	uxth	r3, r3
 8007844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784c:	b29a      	uxth	r2, r3
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	801a      	strh	r2, [r3, #0]
 8007852:	e056      	b.n	8007902 <USB_EPStartXfer+0x51a>
 8007854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <USB_EPStartXfer+0x48a>
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786a:	b29a      	uxth	r2, r3
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	801a      	strh	r2, [r3, #0]
 8007870:	e047      	b.n	8007902 <USB_EPStartXfer+0x51a>
 8007872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007876:	085b      	lsrs	r3, r3, #1
 8007878:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800787c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d004      	beq.n	8007892 <USB_EPStartXfer+0x4aa>
 8007888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800788c:	3301      	adds	r3, #1
 800788e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	b29a      	uxth	r2, r3
 8007898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800789c:	b29b      	uxth	r3, r3
 800789e:	029b      	lsls	r3, r3, #10
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	4313      	orrs	r3, r2
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	e02a      	b.n	8007902 <USB_EPStartXfer+0x51a>
 80078ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d122      	bne.n	8007902 <USB_EPStartXfer+0x51a>
 80078bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	623b      	str	r3, [r7, #32]
 80078c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	4413      	add	r3, r2
 80078de:	623b      	str	r3, [r7, #32]
 80078e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	011a      	lsls	r2, r3, #4
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	4413      	add	r3, r2
 80078f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078f6:	61fb      	str	r3, [r7, #28]
 80078f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	891b      	ldrh	r3, [r3, #8]
 800790e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6959      	ldr	r1, [r3, #20]
 800791e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007922:	b29b      	uxth	r3, r3
 8007924:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007928:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800792c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007930:	6800      	ldr	r0, [r0, #0]
 8007932:	f001 fa48 	bl	8008dc6 <USB_WritePMA>
 8007936:	e3ee      	b.n	8008116 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	785b      	ldrb	r3, [r3, #1]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d177      	bne.n	8007a38 <USB_EPStartXfer+0x650>
 8007948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	64bb      	str	r3, [r7, #72]	; 0x48
 8007954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007958:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007962:	b29b      	uxth	r3, r3
 8007964:	461a      	mov	r2, r3
 8007966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007968:	4413      	add	r3, r2
 800796a:	64bb      	str	r3, [r7, #72]	; 0x48
 800796c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	011a      	lsls	r2, r3, #4
 800797a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800797c:	4413      	add	r3, r2
 800797e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007982:	647b      	str	r3, [r7, #68]	; 0x44
 8007984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	b29b      	uxth	r3, r3
 800798a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800798e:	b29a      	uxth	r2, r3
 8007990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007992:	801a      	strh	r2, [r3, #0]
 8007994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007998:	2b3e      	cmp	r3, #62	; 0x3e
 800799a:	d921      	bls.n	80079e0 <USB_EPStartXfer+0x5f8>
 800799c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079aa:	f003 031f 	and.w	r3, r3, #31
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d104      	bne.n	80079bc <USB_EPStartXfer+0x5d4>
 80079b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079b6:	3b01      	subs	r3, #1
 80079b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80079bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	029b      	lsls	r3, r3, #10
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	4313      	orrs	r3, r2
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d8:	b29a      	uxth	r2, r3
 80079da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079dc:	801a      	strh	r2, [r3, #0]
 80079de:	e056      	b.n	8007a8e <USB_EPStartXfer+0x6a6>
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10a      	bne.n	80079fe <USB_EPStartXfer+0x616>
 80079e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	e047      	b.n	8007a8e <USB_EPStartXfer+0x6a6>
 80079fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d004      	beq.n	8007a1e <USB_EPStartXfer+0x636>
 8007a14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a18:	3301      	adds	r3, #1
 8007a1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	029b      	lsls	r3, r3, #10
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	e02a      	b.n	8007a8e <USB_EPStartXfer+0x6a6>
 8007a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d122      	bne.n	8007a8e <USB_EPStartXfer+0x6a6>
 8007a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	653b      	str	r3, [r7, #80]	; 0x50
 8007a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a68:	4413      	add	r3, r2
 8007a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	011a      	lsls	r2, r3, #4
 8007a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	891b      	ldrh	r3, [r3, #8]
 8007a9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6959      	ldr	r1, [r3, #20]
 8007aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ab4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007ab8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007abc:	6800      	ldr	r0, [r0, #0]
 8007abe:	f001 f982 	bl	8008dc6 <USB_WritePMA>
            ep->xfer_buff += len;
 8007ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695a      	ldr	r2, [r3, #20]
 8007ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad2:	441a      	add	r2, r3
 8007ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6a1a      	ldr	r2, [r3, #32]
 8007aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d90f      	bls.n	8007b1c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6a1a      	ldr	r2, [r3, #32]
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0c:	1ad2      	subs	r2, r2, r3
 8007b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	621a      	str	r2, [r3, #32]
 8007b1a:	e00e      	b.n	8007b3a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2200      	movs	r2, #0
 8007b38:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	643b      	str	r3, [r7, #64]	; 0x40
 8007b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d177      	bne.n	8007c46 <USB_EPStartXfer+0x85e>
 8007b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	461a      	mov	r2, r3
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	4413      	add	r3, r2
 8007b78:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	011a      	lsls	r2, r3, #4
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
 8007b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba0:	801a      	strh	r2, [r3, #0]
 8007ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ba8:	d921      	bls.n	8007bee <USB_EPStartXfer+0x806>
 8007baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bae:	095b      	lsrs	r3, r3, #5
 8007bb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb8:	f003 031f 	and.w	r3, r3, #31
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <USB_EPStartXfer+0x7e2>
 8007bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	029b      	lsls	r3, r3, #10
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bea:	801a      	strh	r2, [r3, #0]
 8007bec:	e050      	b.n	8007c90 <USB_EPStartXfer+0x8a8>
 8007bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <USB_EPStartXfer+0x824>
 8007bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c08:	801a      	strh	r2, [r3, #0]
 8007c0a:	e041      	b.n	8007c90 <USB_EPStartXfer+0x8a8>
 8007c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c10:	085b      	lsrs	r3, r3, #1
 8007c12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d004      	beq.n	8007c2c <USB_EPStartXfer+0x844>
 8007c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c26:	3301      	adds	r3, #1
 8007c28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	029b      	lsls	r3, r3, #10
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	e024      	b.n	8007c90 <USB_EPStartXfer+0x8a8>
 8007c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	785b      	ldrb	r3, [r3, #1]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d11c      	bne.n	8007c90 <USB_EPStartXfer+0x8a8>
 8007c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	461a      	mov	r2, r3
 8007c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c6a:	4413      	add	r3, r2
 8007c6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	011a      	lsls	r2, r3, #4
 8007c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c7e:	4413      	add	r3, r2
 8007c80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	895b      	ldrh	r3, [r3, #10]
 8007c9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6959      	ldr	r1, [r3, #20]
 8007cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007cb6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007cba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007cbe:	6800      	ldr	r0, [r0, #0]
 8007cc0:	f001 f881 	bl	8008dc6 <USB_WritePMA>
 8007cc4:	e227      	b.n	8008116 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	441a      	add	r2, r3
 8007d1a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	461a      	mov	r2, r3
 8007d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d52:	4413      	add	r3, r2
 8007d54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	011a      	lsls	r2, r3, #4
 8007d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d66:	4413      	add	r3, r2
 8007d68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	891b      	ldrh	r3, [r3, #8]
 8007d84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6959      	ldr	r1, [r3, #20]
 8007d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007da2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007da6:	6800      	ldr	r0, [r0, #0]
 8007da8:	f001 f80d 	bl	8008dc6 <USB_WritePMA>
 8007dac:	e1b3      	b.n	8008116 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6a1a      	ldr	r2, [r3, #32]
 8007dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dbe:	1ad2      	subs	r2, r2, r3
 8007dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80c6 	beq.w	8007f80 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	673b      	str	r3, [r7, #112]	; 0x70
 8007e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	785b      	ldrb	r3, [r3, #1]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d177      	bne.n	8007f00 <USB_EPStartXfer+0xb18>
 8007e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e30:	4413      	add	r3, r2
 8007e32:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	011a      	lsls	r2, r3, #4
 8007e42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e44:	4413      	add	r3, r2
 8007e46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e4a:	667b      	str	r3, [r7, #100]	; 0x64
 8007e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e5a:	801a      	strh	r2, [r3, #0]
 8007e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e60:	2b3e      	cmp	r3, #62	; 0x3e
 8007e62:	d921      	bls.n	8007ea8 <USB_EPStartXfer+0xac0>
 8007e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e68:	095b      	lsrs	r3, r3, #5
 8007e6a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d104      	bne.n	8007e84 <USB_EPStartXfer+0xa9c>
 8007e7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	029b      	lsls	r3, r3, #10
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	4313      	orrs	r3, r2
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ea4:	801a      	strh	r2, [r3, #0]
 8007ea6:	e050      	b.n	8007f4a <USB_EPStartXfer+0xb62>
 8007ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10a      	bne.n	8007ec6 <USB_EPStartXfer+0xade>
 8007eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ec2:	801a      	strh	r2, [r3, #0]
 8007ec4:	e041      	b.n	8007f4a <USB_EPStartXfer+0xb62>
 8007ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eca:	085b      	lsrs	r3, r3, #1
 8007ecc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <USB_EPStartXfer+0xafe>
 8007edc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	029b      	lsls	r3, r3, #10
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efc:	801a      	strh	r2, [r3, #0]
 8007efe:	e024      	b.n	8007f4a <USB_EPStartXfer+0xb62>
 8007f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	785b      	ldrb	r3, [r3, #1]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d11c      	bne.n	8007f4a <USB_EPStartXfer+0xb62>
 8007f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f24:	4413      	add	r3, r2
 8007f26:	673b      	str	r3, [r7, #112]	; 0x70
 8007f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	011a      	lsls	r2, r3, #4
 8007f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f38:	4413      	add	r3, r2
 8007f3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007f4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	895b      	ldrh	r3, [r3, #10]
 8007f56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6959      	ldr	r1, [r3, #20]
 8007f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f78:	6800      	ldr	r0, [r0, #0]
 8007f7a:	f000 ff24 	bl	8008dc6 <USB_WritePMA>
 8007f7e:	e0ca      	b.n	8008116 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d177      	bne.n	8008080 <USB_EPStartXfer+0xc98>
 8007f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	461a      	mov	r2, r3
 8007fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fb0:	4413      	add	r3, r2
 8007fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	011a      	lsls	r2, r3, #4
 8007fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fca:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fda:	801a      	strh	r2, [r3, #0]
 8007fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe0:	2b3e      	cmp	r3, #62	; 0x3e
 8007fe2:	d921      	bls.n	8008028 <USB_EPStartXfer+0xc40>
 8007fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe8:	095b      	lsrs	r3, r3, #5
 8007fea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff2:	f003 031f 	and.w	r3, r3, #31
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <USB_EPStartXfer+0xc1c>
 8007ffa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ffe:	3b01      	subs	r3, #1
 8008000:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	b29a      	uxth	r2, r3
 800800a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800800e:	b29b      	uxth	r3, r3
 8008010:	029b      	lsls	r3, r3, #10
 8008012:	b29b      	uxth	r3, r3
 8008014:	4313      	orrs	r3, r2
 8008016:	b29b      	uxth	r3, r3
 8008018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800801c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008020:	b29a      	uxth	r2, r3
 8008022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008024:	801a      	strh	r2, [r3, #0]
 8008026:	e05c      	b.n	80080e2 <USB_EPStartXfer+0xcfa>
 8008028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10a      	bne.n	8008046 <USB_EPStartXfer+0xc5e>
 8008030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	b29b      	uxth	r3, r3
 8008036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800803a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800803e:	b29a      	uxth	r2, r3
 8008040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008042:	801a      	strh	r2, [r3, #0]
 8008044:	e04d      	b.n	80080e2 <USB_EPStartXfer+0xcfa>
 8008046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800804a:	085b      	lsrs	r3, r3, #1
 800804c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b00      	cmp	r3, #0
 800805a:	d004      	beq.n	8008066 <USB_EPStartXfer+0xc7e>
 800805c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008060:	3301      	adds	r3, #1
 8008062:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	b29a      	uxth	r2, r3
 800806c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008070:	b29b      	uxth	r3, r3
 8008072:	029b      	lsls	r3, r3, #10
 8008074:	b29b      	uxth	r3, r3
 8008076:	4313      	orrs	r3, r2
 8008078:	b29a      	uxth	r2, r3
 800807a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800807c:	801a      	strh	r2, [r3, #0]
 800807e:	e030      	b.n	80080e2 <USB_EPStartXfer+0xcfa>
 8008080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	785b      	ldrb	r3, [r3, #1]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d128      	bne.n	80080e2 <USB_EPStartXfer+0xcfa>
 8008090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800809e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	461a      	mov	r2, r3
 80080b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080b4:	4413      	add	r3, r2
 80080b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	011a      	lsls	r2, r3, #4
 80080c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080cc:	4413      	add	r3, r2
 80080ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080da:	b29a      	uxth	r2, r3
 80080dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80080e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	891b      	ldrh	r3, [r3, #8]
 80080ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6959      	ldr	r1, [r3, #20]
 80080fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008102:	b29b      	uxth	r3, r3
 8008104:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008108:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800810c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008110:	6800      	ldr	r0, [r0, #0]
 8008112:	f000 fe58 	bl	8008dc6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	881b      	ldrh	r3, [r3, #0]
 8008132:	b29b      	uxth	r3, r3
 8008134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800813c:	817b      	strh	r3, [r7, #10]
 800813e:	897b      	ldrh	r3, [r7, #10]
 8008140:	f083 0310 	eor.w	r3, r3, #16
 8008144:	817b      	strh	r3, [r7, #10]
 8008146:	897b      	ldrh	r3, [r7, #10]
 8008148:	f083 0320 	eor.w	r3, r3, #32
 800814c:	817b      	strh	r3, [r7, #10]
 800814e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800815c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	441a      	add	r2, r3
 8008168:	897b      	ldrh	r3, [r7, #10]
 800816a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800816e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817a:	b29b      	uxth	r3, r3
 800817c:	8013      	strh	r3, [r2, #0]
 800817e:	f000 bcde 	b.w	8008b3e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	7b1b      	ldrb	r3, [r3, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	f040 80bb 	bne.w	800830a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	699a      	ldr	r2, [r3, #24]
 80081a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d917      	bls.n	80081e0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80081b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80081c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	699a      	ldr	r2, [r3, #24]
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d0:	1ad2      	subs	r2, r2, r3
 80081d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	619a      	str	r2, [r3, #24]
 80081de:	e00e      	b.n	80081fe <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80081e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80081f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2200      	movs	r2, #0
 80081fc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80081fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800820c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800821a:	b29b      	uxth	r3, r3
 800821c:	461a      	mov	r2, r3
 800821e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008222:	4413      	add	r3, r2
 8008224:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800822c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	011a      	lsls	r2, r3, #4
 8008236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800823a:	4413      	add	r3, r2
 800823c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008240:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008244:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	b29b      	uxth	r3, r3
 800824c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008250:	b29a      	uxth	r2, r3
 8008252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800825c:	2b3e      	cmp	r3, #62	; 0x3e
 800825e:	d924      	bls.n	80082aa <USB_EPStartXfer+0xec2>
 8008260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800826a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800826e:	f003 031f 	and.w	r3, r3, #31
 8008272:	2b00      	cmp	r3, #0
 8008274:	d104      	bne.n	8008280 <USB_EPStartXfer+0xe98>
 8008276:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800827a:	3b01      	subs	r3, #1
 800827c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29a      	uxth	r2, r3
 8008288:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800828c:	b29b      	uxth	r3, r3
 800828e:	029b      	lsls	r3, r3, #10
 8008290:	b29b      	uxth	r3, r3
 8008292:	4313      	orrs	r3, r2
 8008294:	b29b      	uxth	r3, r3
 8008296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800829a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800829e:	b29a      	uxth	r2, r3
 80082a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082a4:	801a      	strh	r2, [r3, #0]
 80082a6:	f000 bc10 	b.w	8008aca <USB_EPStartXfer+0x16e2>
 80082aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10c      	bne.n	80082cc <USB_EPStartXfer+0xee4>
 80082b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082c8:	801a      	strh	r2, [r3, #0]
 80082ca:	e3fe      	b.n	8008aca <USB_EPStartXfer+0x16e2>
 80082cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082d0:	085b      	lsrs	r3, r3, #1
 80082d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <USB_EPStartXfer+0xf04>
 80082e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082e6:	3301      	adds	r3, #1
 80082e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	029b      	lsls	r3, r3, #10
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	4313      	orrs	r3, r2
 8008300:	b29a      	uxth	r2, r3
 8008302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008306:	801a      	strh	r2, [r3, #0]
 8008308:	e3df      	b.n	8008aca <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800830a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	78db      	ldrb	r3, [r3, #3]
 8008316:	2b02      	cmp	r3, #2
 8008318:	f040 8218 	bne.w	800874c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800831c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f040 809d 	bne.w	8008468 <USB_EPStartXfer+0x1080>
 800832e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800833c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008340:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800834a:	b29b      	uxth	r3, r3
 800834c:	461a      	mov	r2, r3
 800834e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008352:	4413      	add	r3, r2
 8008354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	011a      	lsls	r2, r3, #4
 8008366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800836a:	4413      	add	r3, r2
 800836c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008370:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	b29b      	uxth	r3, r3
 800837c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008380:	b29a      	uxth	r2, r3
 8008382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008386:	801a      	strh	r2, [r3, #0]
 8008388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b3e      	cmp	r3, #62	; 0x3e
 8008396:	d92b      	bls.n	80083f0 <USB_EPStartXfer+0x1008>
 8008398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	095b      	lsrs	r3, r3, #5
 80083a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	f003 031f 	and.w	r3, r3, #31
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d104      	bne.n	80083c8 <USB_EPStartXfer+0xfe0>
 80083be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c2:	3b01      	subs	r3, #1
 80083c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	029b      	lsls	r3, r3, #10
 80083d8:	b29b      	uxth	r3, r3
 80083da:	4313      	orrs	r3, r2
 80083dc:	b29b      	uxth	r3, r3
 80083de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083ec:	801a      	strh	r2, [r3, #0]
 80083ee:	e070      	b.n	80084d2 <USB_EPStartXfer+0x10ea>
 80083f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10c      	bne.n	800841a <USB_EPStartXfer+0x1032>
 8008400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	b29b      	uxth	r3, r3
 8008408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800840c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008410:	b29a      	uxth	r2, r3
 8008412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008416:	801a      	strh	r2, [r3, #0]
 8008418:	e05b      	b.n	80084d2 <USB_EPStartXfer+0x10ea>
 800841a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	085b      	lsrs	r3, r3, #1
 8008428:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800842c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d004      	beq.n	800844a <USB_EPStartXfer+0x1062>
 8008440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008444:	3301      	adds	r3, #1
 8008446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800844a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	b29a      	uxth	r2, r3
 8008452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008456:	b29b      	uxth	r3, r3
 8008458:	029b      	lsls	r3, r3, #10
 800845a:	b29b      	uxth	r3, r3
 800845c:	4313      	orrs	r3, r2
 800845e:	b29a      	uxth	r2, r3
 8008460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008464:	801a      	strh	r2, [r3, #0]
 8008466:	e034      	b.n	80084d2 <USB_EPStartXfer+0x10ea>
 8008468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d12c      	bne.n	80084d2 <USB_EPStartXfer+0x10ea>
 8008478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800847c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008494:	b29b      	uxth	r3, r3
 8008496:	461a      	mov	r2, r3
 8008498:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800849c:	4413      	add	r3, r2
 800849e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	011a      	lsls	r2, r3, #4
 80084b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084b4:	4413      	add	r3, r2
 80084b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084d0:	801a      	strh	r2, [r3, #0]
 80084d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80084e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f040 809d 	bne.w	800862c <USB_EPStartXfer+0x1244>
 80084f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800850e:	b29b      	uxth	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008516:	4413      	add	r3, r2
 8008518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800851c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	011a      	lsls	r2, r3, #4
 800852a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800852e:	4413      	add	r3, r2
 8008530:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	b29b      	uxth	r3, r3
 8008540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008544:	b29a      	uxth	r2, r3
 8008546:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800854a:	801a      	strh	r2, [r3, #0]
 800854c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	2b3e      	cmp	r3, #62	; 0x3e
 800855a:	d92b      	bls.n	80085b4 <USB_EPStartXfer+0x11cc>
 800855c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	095b      	lsrs	r3, r3, #5
 800856a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800856e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f003 031f 	and.w	r3, r3, #31
 800857e:	2b00      	cmp	r3, #0
 8008580:	d104      	bne.n	800858c <USB_EPStartXfer+0x11a4>
 8008582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008586:	3b01      	subs	r3, #1
 8008588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800858c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	b29a      	uxth	r2, r3
 8008594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008598:	b29b      	uxth	r3, r3
 800859a:	029b      	lsls	r3, r3, #10
 800859c:	b29b      	uxth	r3, r3
 800859e:	4313      	orrs	r3, r2
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085aa:	b29a      	uxth	r2, r3
 80085ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085b0:	801a      	strh	r2, [r3, #0]
 80085b2:	e069      	b.n	8008688 <USB_EPStartXfer+0x12a0>
 80085b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10c      	bne.n	80085de <USB_EPStartXfer+0x11f6>
 80085c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085da:	801a      	strh	r2, [r3, #0]
 80085dc:	e054      	b.n	8008688 <USB_EPStartXfer+0x12a0>
 80085de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	085b      	lsrs	r3, r3, #1
 80085ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d004      	beq.n	800860e <USB_EPStartXfer+0x1226>
 8008604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008608:	3301      	adds	r3, #1
 800860a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800860e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29a      	uxth	r2, r3
 8008616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800861a:	b29b      	uxth	r3, r3
 800861c:	029b      	lsls	r3, r3, #10
 800861e:	b29b      	uxth	r3, r3
 8008620:	4313      	orrs	r3, r2
 8008622:	b29a      	uxth	r2, r3
 8008624:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008628:	801a      	strh	r2, [r3, #0]
 800862a:	e02d      	b.n	8008688 <USB_EPStartXfer+0x12a0>
 800862c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	785b      	ldrb	r3, [r3, #1]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d125      	bne.n	8008688 <USB_EPStartXfer+0x12a0>
 800863c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008640:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800864a:	b29b      	uxth	r3, r3
 800864c:	461a      	mov	r2, r3
 800864e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008652:	4413      	add	r3, r2
 8008654:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800865c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	011a      	lsls	r2, r3, #4
 8008666:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800866a:	4413      	add	r3, r2
 800866c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008670:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	b29a      	uxth	r2, r3
 8008682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008686:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 8218 	beq.w	8008aca <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800869a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80086be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d005      	beq.n	80086d2 <USB_EPStartXfer+0x12ea>
 80086c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80086ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10d      	bne.n	80086ee <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80086d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f040 81f5 	bne.w	8008aca <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80086e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f040 81ee 	bne.w	8008aca <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80086ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	881b      	ldrh	r3, [r3, #0]
 800870a:	b29b      	uxth	r3, r3
 800870c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008714:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800871c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	441a      	add	r2, r3
 8008732:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800873a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800873e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008742:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008746:	b29b      	uxth	r3, r3
 8008748:	8013      	strh	r3, [r2, #0]
 800874a:	e1be      	b.n	8008aca <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800874c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	78db      	ldrb	r3, [r3, #3]
 8008758:	2b01      	cmp	r3, #1
 800875a:	f040 81b4 	bne.w	8008ac6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800875e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	699a      	ldr	r2, [r3, #24]
 800876a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800876e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	429a      	cmp	r2, r3
 8008778:	d917      	bls.n	80087aa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800877a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800878a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800879a:	1ad2      	subs	r2, r2, r3
 800879c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	619a      	str	r2, [r3, #24]
 80087a8:	e00e      	b.n	80087c8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80087aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80087ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2200      	movs	r2, #0
 80087c6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80087c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	785b      	ldrb	r3, [r3, #1]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f040 8085 	bne.w	80088e4 <USB_EPStartXfer+0x14fc>
 80087da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	461a      	mov	r2, r3
 80087fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087fe:	4413      	add	r3, r2
 8008800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	011a      	lsls	r2, r3, #4
 8008812:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008816:	4413      	add	r3, r2
 8008818:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800881c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008820:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	b29b      	uxth	r3, r3
 8008828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800882c:	b29a      	uxth	r2, r3
 800882e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008832:	801a      	strh	r2, [r3, #0]
 8008834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008838:	2b3e      	cmp	r3, #62	; 0x3e
 800883a:	d923      	bls.n	8008884 <USB_EPStartXfer+0x149c>
 800883c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008840:	095b      	lsrs	r3, r3, #5
 8008842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800884a:	f003 031f 	and.w	r3, r3, #31
 800884e:	2b00      	cmp	r3, #0
 8008850:	d104      	bne.n	800885c <USB_EPStartXfer+0x1474>
 8008852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008856:	3b01      	subs	r3, #1
 8008858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800885c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	b29a      	uxth	r2, r3
 8008864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008868:	b29b      	uxth	r3, r3
 800886a:	029b      	lsls	r3, r3, #10
 800886c:	b29b      	uxth	r3, r3
 800886e:	4313      	orrs	r3, r2
 8008870:	b29b      	uxth	r3, r3
 8008872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800887a:	b29a      	uxth	r2, r3
 800887c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008880:	801a      	strh	r2, [r3, #0]
 8008882:	e060      	b.n	8008946 <USB_EPStartXfer+0x155e>
 8008884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10c      	bne.n	80088a6 <USB_EPStartXfer+0x14be>
 800888c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	b29b      	uxth	r3, r3
 8008894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800889c:	b29a      	uxth	r2, r3
 800889e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088a2:	801a      	strh	r2, [r3, #0]
 80088a4:	e04f      	b.n	8008946 <USB_EPStartXfer+0x155e>
 80088a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088aa:	085b      	lsrs	r3, r3, #1
 80088ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80088b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d004      	beq.n	80088c6 <USB_EPStartXfer+0x14de>
 80088bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088c0:	3301      	adds	r3, #1
 80088c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80088c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	029b      	lsls	r3, r3, #10
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	4313      	orrs	r3, r2
 80088da:	b29a      	uxth	r2, r3
 80088dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088e0:	801a      	strh	r2, [r3, #0]
 80088e2:	e030      	b.n	8008946 <USB_EPStartXfer+0x155e>
 80088e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	785b      	ldrb	r3, [r3, #1]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d128      	bne.n	8008946 <USB_EPStartXfer+0x155e>
 80088f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008906:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008910:	b29b      	uxth	r3, r3
 8008912:	461a      	mov	r2, r3
 8008914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008918:	4413      	add	r3, r2
 800891a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800891e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	011a      	lsls	r2, r3, #4
 800892c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008930:	4413      	add	r3, r2
 8008932:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008936:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800893a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800893e:	b29a      	uxth	r2, r3
 8008940:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008944:	801a      	strh	r2, [r3, #0]
 8008946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	785b      	ldrb	r3, [r3, #1]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f040 8085 	bne.w	8008a70 <USB_EPStartXfer+0x1688>
 8008966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008982:	b29b      	uxth	r3, r3
 8008984:	461a      	mov	r2, r3
 8008986:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800898a:	4413      	add	r3, r2
 800898c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	011a      	lsls	r2, r3, #4
 800899e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80089a2:	4413      	add	r3, r2
 80089a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089b0:	881b      	ldrh	r3, [r3, #0]
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089be:	801a      	strh	r2, [r3, #0]
 80089c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089c4:	2b3e      	cmp	r3, #62	; 0x3e
 80089c6:	d923      	bls.n	8008a10 <USB_EPStartXfer+0x1628>
 80089c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089cc:	095b      	lsrs	r3, r3, #5
 80089ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d6:	f003 031f 	and.w	r3, r3, #31
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d104      	bne.n	80089e8 <USB_EPStartXfer+0x1600>
 80089de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089e2:	3b01      	subs	r3, #1
 80089e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	029b      	lsls	r3, r3, #10
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	4313      	orrs	r3, r2
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a0c:	801a      	strh	r2, [r3, #0]
 8008a0e:	e05c      	b.n	8008aca <USB_EPStartXfer+0x16e2>
 8008a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10c      	bne.n	8008a32 <USB_EPStartXfer+0x164a>
 8008a18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a2e:	801a      	strh	r2, [r3, #0]
 8008a30:	e04b      	b.n	8008aca <USB_EPStartXfer+0x16e2>
 8008a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a36:	085b      	lsrs	r3, r3, #1
 8008a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d004      	beq.n	8008a52 <USB_EPStartXfer+0x166a>
 8008a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a56:	881b      	ldrh	r3, [r3, #0]
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	029b      	lsls	r3, r3, #10
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	4313      	orrs	r3, r2
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a6c:	801a      	strh	r2, [r3, #0]
 8008a6e:	e02c      	b.n	8008aca <USB_EPStartXfer+0x16e2>
 8008a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	785b      	ldrb	r3, [r3, #1]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d124      	bne.n	8008aca <USB_EPStartXfer+0x16e2>
 8008a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a96:	4413      	add	r3, r2
 8008a98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	011a      	lsls	r2, r3, #4
 8008aaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008aae:	4413      	add	r3, r2
 8008ab0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ac2:	801a      	strh	r2, [r3, #0]
 8008ac4:	e001      	b.n	8008aca <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e03a      	b.n	8008b40 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008af4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008af8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008afc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008b00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008b04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	441a      	add	r2, r3
 8008b26:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b085      	sub	sp, #20
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	785b      	ldrb	r3, [r3, #1]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d020      	beq.n	8008b9e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b72:	81bb      	strh	r3, [r7, #12]
 8008b74:	89bb      	ldrh	r3, [r7, #12]
 8008b76:	f083 0310 	eor.w	r3, r3, #16
 8008b7a:	81bb      	strh	r3, [r7, #12]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	441a      	add	r2, r3
 8008b86:	89bb      	ldrh	r3, [r7, #12]
 8008b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	8013      	strh	r3, [r2, #0]
 8008b9c:	e01f      	b.n	8008bde <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb4:	81fb      	strh	r3, [r7, #14]
 8008bb6:	89fb      	ldrh	r3, [r7, #14]
 8008bb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bbc:	81fb      	strh	r3, [r7, #14]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	441a      	add	r2, r3
 8008bc8:	89fb      	ldrh	r3, [r7, #14]
 8008bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bc80      	pop	{r7}
 8008be8:	4770      	bx	lr

08008bea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b087      	sub	sp, #28
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	7b1b      	ldrb	r3, [r3, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f040 809d 	bne.w	8008d38 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	785b      	ldrb	r3, [r3, #1]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d04c      	beq.n	8008ca0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	823b      	strh	r3, [r7, #16]
 8008c14:	8a3b      	ldrh	r3, [r7, #16]
 8008c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d01b      	beq.n	8008c56 <USB_EPClearStall+0x6c>
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c34:	81fb      	strh	r3, [r7, #14]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	441a      	add	r2, r3
 8008c40:	89fb      	ldrh	r3, [r7, #14]
 8008c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	78db      	ldrb	r3, [r3, #3]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d06c      	beq.n	8008d38 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c74:	81bb      	strh	r3, [r7, #12]
 8008c76:	89bb      	ldrh	r3, [r7, #12]
 8008c78:	f083 0320 	eor.w	r3, r3, #32
 8008c7c:	81bb      	strh	r3, [r7, #12]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	441a      	add	r2, r3
 8008c88:	89bb      	ldrh	r3, [r7, #12]
 8008c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	8013      	strh	r3, [r2, #0]
 8008c9e:	e04b      	b.n	8008d38 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	82fb      	strh	r3, [r7, #22]
 8008cae:	8afb      	ldrh	r3, [r7, #22]
 8008cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01b      	beq.n	8008cf0 <USB_EPClearStall+0x106>
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cce:	82bb      	strh	r3, [r7, #20]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	441a      	add	r2, r3
 8008cda:	8abb      	ldrh	r3, [r7, #20]
 8008cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d06:	827b      	strh	r3, [r7, #18]
 8008d08:	8a7b      	ldrh	r3, [r7, #18]
 8008d0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d0e:	827b      	strh	r3, [r7, #18]
 8008d10:	8a7b      	ldrh	r3, [r7, #18]
 8008d12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d16:	827b      	strh	r3, [r7, #18]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	441a      	add	r2, r3
 8008d22:	8a7b      	ldrh	r3, [r7, #18]
 8008d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bc80      	pop	{r7}
 8008d42:	4770      	bx	lr

08008d44 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d50:	78fb      	ldrb	r3, [r7, #3]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d103      	bne.n	8008d5e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2280      	movs	r2, #128	; 0x80
 8008d5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bc80      	pop	{r7}
 8008d68:	4770      	bx	lr

08008d6a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bc80      	pop	{r7}
 8008d7c:	4770      	bx	lr

08008d7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b083      	sub	sp, #12
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bc80      	pop	{r7}
 8008d90:	4770      	bx	lr

08008d92 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b085      	sub	sp, #20
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008da4:	68fb      	ldr	r3, [r7, #12]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bc80      	pop	{r7}
 8008dae:	4770      	bx	lr

08008db0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bc80      	pop	{r7}
 8008dc4:	4770      	bx	lr

08008dc6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b08b      	sub	sp, #44	; 0x2c
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	80fb      	strh	r3, [r7, #6]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008ddc:	88bb      	ldrh	r3, [r7, #4]
 8008dde:	3301      	adds	r3, #1
 8008de0:	085b      	lsrs	r3, r3, #1
 8008de2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dec:	88fb      	ldrh	r3, [r7, #6]
 8008dee:	005a      	lsls	r2, r3, #1
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008df8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8008dfe:	e01e      	b.n	8008e3e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	021b      	lsls	r3, r3, #8
 8008e0e:	b21a      	sxth	r2, r3
 8008e10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	b21b      	sxth	r3, r3
 8008e18:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008e1a:	6a3b      	ldr	r3, [r7, #32]
 8008e1c:	8a7a      	ldrh	r2, [r7, #18]
 8008e1e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	3302      	adds	r3, #2
 8008e24:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	3302      	adds	r3, #2
 8008e2a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	3301      	adds	r3, #1
 8008e36:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1dd      	bne.n	8008e00 <USB_WritePMA+0x3a>
  }
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop
 8008e48:	372c      	adds	r7, #44	; 0x2c
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bc80      	pop	{r7}
 8008e4e:	4770      	bx	lr

08008e50 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b08b      	sub	sp, #44	; 0x2c
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	460b      	mov	r3, r1
 8008e60:	80fb      	strh	r3, [r7, #6]
 8008e62:	4613      	mov	r3, r2
 8008e64:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e66:	88bb      	ldrh	r3, [r7, #4]
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e76:	88fb      	ldrh	r3, [r7, #6]
 8008e78:	005a      	lsls	r2, r3, #1
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e82:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	627b      	str	r3, [r7, #36]	; 0x24
 8008e88:	e01b      	b.n	8008ec2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e92:	6a3b      	ldr	r3, [r7, #32]
 8008e94:	3302      	adds	r3, #2
 8008e96:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	0a1b      	lsrs	r3, r3, #8
 8008eaa:	b2da      	uxtb	r2, r3
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	3302      	adds	r3, #2
 8008eba:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e0      	bne.n	8008e8a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008ec8:	88bb      	ldrh	r3, [r7, #4]
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d007      	beq.n	8008ee4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	701a      	strb	r2, [r3, #0]
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	372c      	adds	r7, #44	; 0x2c
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr

08008eee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	7c1b      	ldrb	r3, [r3, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d115      	bne.n	8008f32 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	2181      	movs	r1, #129	; 0x81
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f001 fe9d 	bl	800ac4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f1e:	2202      	movs	r2, #2
 8008f20:	2101      	movs	r1, #1
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 fe93 	bl	800ac4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008f30:	e012      	b.n	8008f58 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f32:	2340      	movs	r3, #64	; 0x40
 8008f34:	2202      	movs	r2, #2
 8008f36:	2181      	movs	r1, #129	; 0x81
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f001 fe88 	bl	800ac4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f44:	2340      	movs	r3, #64	; 0x40
 8008f46:	2202      	movs	r2, #2
 8008f48:	2101      	movs	r1, #1
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 fe7f 	bl	800ac4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f58:	2308      	movs	r3, #8
 8008f5a:	2203      	movs	r2, #3
 8008f5c:	2182      	movs	r1, #130	; 0x82
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f001 fe75 	bl	800ac4e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f6a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f6e:	f001 ff95 	bl	800ae9c <USBD_static_malloc>
 8008f72:	4602      	mov	r2, r0
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d102      	bne.n	8008f8a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008f84:	2301      	movs	r3, #1
 8008f86:	73fb      	strb	r3, [r7, #15]
 8008f88:	e026      	b.n	8008fd8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f90:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	7c1b      	ldrb	r3, [r3, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d109      	bne.n	8008fc8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 ff35 	bl	800ae30 <USBD_LL_PrepareReceive>
 8008fc6:	e007      	b.n	8008fd8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fce:	2340      	movs	r3, #64	; 0x40
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f001 ff2c 	bl	800ae30 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	460b      	mov	r3, r1
 8008fec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ff2:	2181      	movs	r1, #129	; 0x81
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 fe50 	bl	800ac9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009000:	2101      	movs	r1, #1
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 fe49 	bl	800ac9a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009010:	2182      	movs	r1, #130	; 0x82
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f001 fe41 	bl	800ac9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00e      	beq.n	8009046 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009038:	4618      	mov	r0, r3
 800903a:	f001 ff3b 	bl	800aeb4 <USBD_static_free>
    pdev->pClassData = NULL;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009046:	7bfb      	ldrb	r3, [r7, #15]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009060:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009076:	2b00      	cmp	r3, #0
 8009078:	d039      	beq.n	80090ee <USBD_CDC_Setup+0x9e>
 800907a:	2b20      	cmp	r3, #32
 800907c:	d17f      	bne.n	800917e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	88db      	ldrh	r3, [r3, #6]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d029      	beq.n	80090da <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	b25b      	sxtb	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	da11      	bge.n	80090b4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800909c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	88d2      	ldrh	r2, [r2, #6]
 80090a2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090a4:	6939      	ldr	r1, [r7, #16]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	88db      	ldrh	r3, [r3, #6]
 80090aa:	461a      	mov	r2, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 fa0a 	bl	800a4c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80090b2:	e06b      	b.n	800918c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	785a      	ldrb	r2, [r3, #1]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	88db      	ldrh	r3, [r3, #6]
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090ca:	6939      	ldr	r1, [r7, #16]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	88db      	ldrh	r3, [r3, #6]
 80090d0:	461a      	mov	r2, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f001 fa25 	bl	800a522 <USBD_CtlPrepareRx>
      break;
 80090d8:	e058      	b.n	800918c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	7850      	ldrb	r0, [r2, #1]
 80090e6:	2200      	movs	r2, #0
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	4798      	blx	r3
      break;
 80090ec:	e04e      	b.n	800918c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	785b      	ldrb	r3, [r3, #1]
 80090f2:	2b0b      	cmp	r3, #11
 80090f4:	d02e      	beq.n	8009154 <USBD_CDC_Setup+0x104>
 80090f6:	2b0b      	cmp	r3, #11
 80090f8:	dc38      	bgt.n	800916c <USBD_CDC_Setup+0x11c>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d002      	beq.n	8009104 <USBD_CDC_Setup+0xb4>
 80090fe:	2b0a      	cmp	r3, #10
 8009100:	d014      	beq.n	800912c <USBD_CDC_Setup+0xdc>
 8009102:	e033      	b.n	800916c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800910a:	2b03      	cmp	r3, #3
 800910c:	d107      	bne.n	800911e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800910e:	f107 030c 	add.w	r3, r7, #12
 8009112:	2202      	movs	r2, #2
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f001 f9d5 	bl	800a4c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800911c:	e02e      	b.n	800917c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f001 f966 	bl	800a3f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009126:	2302      	movs	r3, #2
 8009128:	75fb      	strb	r3, [r7, #23]
          break;
 800912a:	e027      	b.n	800917c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009132:	2b03      	cmp	r3, #3
 8009134:	d107      	bne.n	8009146 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009136:	f107 030f 	add.w	r3, r7, #15
 800913a:	2201      	movs	r2, #1
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f001 f9c1 	bl	800a4c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009144:	e01a      	b.n	800917c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 f952 	bl	800a3f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800914e:	2302      	movs	r3, #2
 8009150:	75fb      	strb	r3, [r7, #23]
          break;
 8009152:	e013      	b.n	800917c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915a:	2b03      	cmp	r3, #3
 800915c:	d00d      	beq.n	800917a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 f946 	bl	800a3f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009166:	2302      	movs	r3, #2
 8009168:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800916a:	e006      	b.n	800917a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f001 f93f 	bl	800a3f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009174:	2302      	movs	r3, #2
 8009176:	75fb      	strb	r3, [r7, #23]
          break;
 8009178:	e000      	b.n	800917c <USBD_CDC_Setup+0x12c>
          break;
 800917a:	bf00      	nop
      }
      break;
 800917c:	e006      	b.n	800918c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 f936 	bl	800a3f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009186:	2302      	movs	r3, #2
 8009188:	75fb      	strb	r3, [r7, #23]
      break;
 800918a:	bf00      	nop
  }

  return ret;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3718      	adds	r7, #24
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	460b      	mov	r3, r1
 80091a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091b0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d03a      	beq.n	8009232 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80091bc:	78fa      	ldrb	r2, [r7, #3]
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	440b      	add	r3, r1
 80091ca:	331c      	adds	r3, #28
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d029      	beq.n	8009226 <USBD_CDC_DataIn+0x90>
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	6879      	ldr	r1, [r7, #4]
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	440b      	add	r3, r1
 80091e0:	331c      	adds	r3, #28
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	78f9      	ldrb	r1, [r7, #3]
 80091e6:	68b8      	ldr	r0, [r7, #8]
 80091e8:	460b      	mov	r3, r1
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	440b      	add	r3, r1
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	4403      	add	r3, r0
 80091f2:	3338      	adds	r3, #56	; 0x38
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	fbb2 f1f3 	udiv	r1, r2, r3
 80091fa:	fb01 f303 	mul.w	r3, r1, r3
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	d110      	bne.n	8009226 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009204:	78fa      	ldrb	r2, [r7, #3]
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	331c      	adds	r3, #28
 8009214:	2200      	movs	r2, #0
 8009216:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009218:	78f9      	ldrb	r1, [r7, #3]
 800921a:	2300      	movs	r3, #0
 800921c:	2200      	movs	r2, #0
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 fde3 	bl	800adea <USBD_LL_Transmit>
 8009224:	e003      	b.n	800922e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	e000      	b.n	8009234 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009232:	2302      	movs	r3, #2
  }
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800924e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 fe0e 	bl	800ae76 <USBD_LL_GetRxDataSize>
 800925a:	4602      	mov	r2, r0
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00d      	beq.n	8009288 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009280:	4611      	mov	r1, r2
 8009282:	4798      	blx	r3

    return USBD_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	e000      	b.n	800928a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009288:	2302      	movs	r3, #2
  }
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d015      	beq.n	80092d8 <USBD_CDC_EP0_RxReady+0x46>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80092b2:	2bff      	cmp	r3, #255	; 0xff
 80092b4:	d010      	beq.n	80092d8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80092c4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092cc:	b292      	uxth	r2, r2
 80092ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	22ff      	movs	r2, #255	; 0xff
 80092d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2243      	movs	r2, #67	; 0x43
 80092f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80092f2:	4b03      	ldr	r3, [pc, #12]	; (8009300 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bc80      	pop	{r7}
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	200000b4 	.word	0x200000b4

08009304 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2243      	movs	r2, #67	; 0x43
 8009310:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009312:	4b03      	ldr	r3, [pc, #12]	; (8009320 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009314:	4618      	mov	r0, r3
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	bc80      	pop	{r7}
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	20000070 	.word	0x20000070

08009324 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2243      	movs	r2, #67	; 0x43
 8009330:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009332:	4b03      	ldr	r3, [pc, #12]	; (8009340 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	bc80      	pop	{r7}
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	200000f8 	.word	0x200000f8

08009344 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	220a      	movs	r2, #10
 8009350:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009352:	4b03      	ldr	r3, [pc, #12]	; (8009360 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009354:	4618      	mov	r0, r3
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	bc80      	pop	{r7}
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	2000002c 	.word	0x2000002c

08009364 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800936e:	2302      	movs	r3, #2
 8009370:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d005      	beq.n	8009384 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009384:	7bfb      	ldrb	r3, [r7, #15]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	bc80      	pop	{r7}
 800938e:	4770      	bx	lr

08009390 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009390:	b480      	push	{r7}
 8009392:	b087      	sub	sp, #28
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	4613      	mov	r3, r2
 800939c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80093ae:	88fa      	ldrh	r2, [r7, #6]
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	371c      	adds	r7, #28
 80093bc:	46bd      	mov	sp, r7
 80093be:	bc80      	pop	{r7}
 80093c0:	4770      	bx	lr

080093c2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b085      	sub	sp, #20
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bc80      	pop	{r7}
 80093e6:	4770      	bx	lr

080093e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d01c      	beq.n	800943c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009408:	2b00      	cmp	r3, #0
 800940a:	d115      	bne.n	8009438 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2201      	movs	r2, #1
 8009410:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800942a:	b29b      	uxth	r3, r3
 800942c:	2181      	movs	r1, #129	; 0x81
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f001 fcdb 	bl	800adea <USBD_LL_Transmit>

      return USBD_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	e002      	b.n	800943e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009438:	2301      	movs	r3, #1
 800943a:	e000      	b.n	800943e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800943c:	2302      	movs	r3, #2
  }
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009454:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945c:	2b00      	cmp	r3, #0
 800945e:	d017      	beq.n	8009490 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	7c1b      	ldrb	r3, [r3, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d109      	bne.n	800947c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800946e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009472:	2101      	movs	r1, #1
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 fcdb 	bl	800ae30 <USBD_LL_PrepareReceive>
 800947a:	e007      	b.n	800948c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009482:	2340      	movs	r3, #64	; 0x40
 8009484:	2101      	movs	r1, #1
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 fcd2 	bl	800ae30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	e000      	b.n	8009492 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009490:	2302      	movs	r3, #2
  }
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	4613      	mov	r3, r2
 80094a6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80094ae:	2302      	movs	r3, #2
 80094b0:	e01a      	b.n	80094e8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	79fa      	ldrb	r2, [r7, #7]
 80094de:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f001 fb3f 	bl	800ab64 <USBD_LL_Init>

  return USBD_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d006      	beq.n	8009512 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
 8009510:	e001      	b.n	8009516 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009512:	2302      	movs	r3, #2
 8009514:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009516:	7bfb      	ldrb	r3, [r7, #15]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	bc80      	pop	{r7}
 8009520:	4770      	bx	lr

08009522 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 fb74 	bl	800ac18 <USBD_LL_Start>

  return USBD_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	bc80      	pop	{r7}
 800954c:	4770      	bx	lr

0800954e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800955a:	2302      	movs	r3, #2
 800955c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00c      	beq.n	8009582 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	78fa      	ldrb	r2, [r7, #3]
 8009572:	4611      	mov	r1, r2
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	4798      	blx	r3
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009582:	7bfb      	ldrb	r3, [r7, #15]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	78fa      	ldrb	r2, [r7, #3]
 80095a2:	4611      	mov	r1, r2
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	4798      	blx	r3

  return USBD_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 fed8 	bl	800a37a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80095d8:	461a      	mov	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095e6:	f003 031f 	and.w	r3, r3, #31
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d016      	beq.n	800961c <USBD_LL_SetupStage+0x6a>
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d81c      	bhi.n	800962c <USBD_LL_SetupStage+0x7a>
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d002      	beq.n	80095fc <USBD_LL_SetupStage+0x4a>
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d008      	beq.n	800960c <USBD_LL_SetupStage+0x5a>
 80095fa:	e017      	b.n	800962c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f9cb 	bl	80099a0 <USBD_StdDevReq>
      break;
 800960a:	e01a      	b.n	8009642 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fa2d 	bl	8009a74 <USBD_StdItfReq>
      break;
 800961a:	e012      	b.n	8009642 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fa6d 	bl	8009b04 <USBD_StdEPReq>
      break;
 800962a:	e00a      	b.n	8009642 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009632:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009636:	b2db      	uxtb	r3, r3
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f001 fb4c 	bl	800acd8 <USBD_LL_StallEP>
      break;
 8009640:	bf00      	nop
  }

  return USBD_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	460b      	mov	r3, r1
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800965a:	7afb      	ldrb	r3, [r7, #11]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d14b      	bne.n	80096f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009666:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800966e:	2b03      	cmp	r3, #3
 8009670:	d134      	bne.n	80096dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	68da      	ldr	r2, [r3, #12]
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	429a      	cmp	r2, r3
 800967c:	d919      	bls.n	80096b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	1ad2      	subs	r2, r2, r3
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009694:	429a      	cmp	r2, r3
 8009696:	d203      	bcs.n	80096a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800969c:	b29b      	uxth	r3, r3
 800969e:	e002      	b.n	80096a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 ff57 	bl	800a55e <USBD_CtlContinueRx>
 80096b0:	e038      	b.n	8009724 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00a      	beq.n	80096d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096c4:	2b03      	cmp	r3, #3
 80096c6:	d105      	bne.n	80096d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 ff54 	bl	800a582 <USBD_CtlSendStatus>
 80096da:	e023      	b.n	8009724 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096e2:	2b05      	cmp	r3, #5
 80096e4:	d11e      	bne.n	8009724 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80096ee:	2100      	movs	r1, #0
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f001 faf1 	bl	800acd8 <USBD_LL_StallEP>
 80096f6:	e015      	b.n	8009724 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00d      	beq.n	8009720 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800970a:	2b03      	cmp	r3, #3
 800970c:	d108      	bne.n	8009720 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	7afa      	ldrb	r2, [r7, #11]
 8009718:	4611      	mov	r1, r2
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	4798      	blx	r3
 800971e:	e001      	b.n	8009724 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009720:	2302      	movs	r3, #2
 8009722:	e000      	b.n	8009726 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b086      	sub	sp, #24
 8009732:	af00      	add	r7, sp, #0
 8009734:	60f8      	str	r0, [r7, #12]
 8009736:	460b      	mov	r3, r1
 8009738:	607a      	str	r2, [r7, #4]
 800973a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800973c:	7afb      	ldrb	r3, [r7, #11]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d17f      	bne.n	8009842 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3314      	adds	r3, #20
 8009746:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800974e:	2b02      	cmp	r3, #2
 8009750:	d15c      	bne.n	800980c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	68da      	ldr	r2, [r3, #12]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	429a      	cmp	r2, r3
 800975c:	d915      	bls.n	800978a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	68da      	ldr	r2, [r3, #12]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	1ad2      	subs	r2, r2, r3
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	b29b      	uxth	r3, r3
 8009772:	461a      	mov	r2, r3
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 fec1 	bl	800a4fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800977c:	2300      	movs	r3, #0
 800977e:	2200      	movs	r2, #0
 8009780:	2100      	movs	r1, #0
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f001 fb54 	bl	800ae30 <USBD_LL_PrepareReceive>
 8009788:	e04e      	b.n	8009828 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	6912      	ldr	r2, [r2, #16]
 8009792:	fbb3 f1f2 	udiv	r1, r3, r2
 8009796:	fb01 f202 	mul.w	r2, r1, r2
 800979a:	1a9b      	subs	r3, r3, r2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d11c      	bne.n	80097da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	689a      	ldr	r2, [r3, #8]
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d316      	bcc.n	80097da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	689a      	ldr	r2, [r3, #8]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d20f      	bcs.n	80097da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097ba:	2200      	movs	r2, #0
 80097bc:	2100      	movs	r1, #0
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 fe9d 	bl	800a4fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097cc:	2300      	movs	r3, #0
 80097ce:	2200      	movs	r2, #0
 80097d0:	2100      	movs	r1, #0
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f001 fb2c 	bl	800ae30 <USBD_LL_PrepareReceive>
 80097d8:	e026      	b.n	8009828 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00a      	beq.n	80097fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d105      	bne.n	80097fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80097fc:	2180      	movs	r1, #128	; 0x80
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f001 fa6a 	bl	800acd8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 fecf 	bl	800a5a8 <USBD_CtlReceiveStatus>
 800980a:	e00d      	b.n	8009828 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009812:	2b04      	cmp	r3, #4
 8009814:	d004      	beq.n	8009820 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800981c:	2b00      	cmp	r3, #0
 800981e:	d103      	bne.n	8009828 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009820:	2180      	movs	r1, #128	; 0x80
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f001 fa58 	bl	800acd8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800982e:	2b01      	cmp	r3, #1
 8009830:	d11d      	bne.n	800986e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f7ff fe81 	bl	800953a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009840:	e015      	b.n	800986e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00d      	beq.n	800986a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009854:	2b03      	cmp	r3, #3
 8009856:	d108      	bne.n	800986a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	7afa      	ldrb	r2, [r7, #11]
 8009862:	4611      	mov	r1, r2
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	4798      	blx	r3
 8009868:	e001      	b.n	800986e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800986a:	2302      	movs	r3, #2
 800986c:	e000      	b.n	8009870 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009880:	2340      	movs	r3, #64	; 0x40
 8009882:	2200      	movs	r2, #0
 8009884:	2100      	movs	r1, #0
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f001 f9e1 	bl	800ac4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2240      	movs	r2, #64	; 0x40
 8009898:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800989c:	2340      	movs	r3, #64	; 0x40
 800989e:	2200      	movs	r2, #0
 80098a0:	2180      	movs	r1, #128	; 0x80
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f001 f9d3 	bl	800ac4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2240      	movs	r2, #64	; 0x40
 80098b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d009      	beq.n	80098f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	6852      	ldr	r2, [r2, #4]
 80098e8:	b2d2      	uxtb	r2, r2
 80098ea:	4611      	mov	r1, r2
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	4798      	blx	r3
  }

  return USBD_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	bc80      	pop	{r7}
 8009916:	4770      	bx	lr

08009918 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2204      	movs	r2, #4
 8009930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	bc80      	pop	{r7}
 800993e:	4770      	bx	lr

08009940 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800994e:	2b04      	cmp	r3, #4
 8009950:	d105      	bne.n	800995e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	bc80      	pop	{r7}
 8009968:	4770      	bx	lr

0800996a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009978:	2b03      	cmp	r3, #3
 800997a:	d10b      	bne.n	8009994 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009982:	69db      	ldr	r3, [r3, #28]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d005      	beq.n	8009994 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099b6:	2b40      	cmp	r3, #64	; 0x40
 80099b8:	d005      	beq.n	80099c6 <USBD_StdDevReq+0x26>
 80099ba:	2b40      	cmp	r3, #64	; 0x40
 80099bc:	d84f      	bhi.n	8009a5e <USBD_StdDevReq+0xbe>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d009      	beq.n	80099d6 <USBD_StdDevReq+0x36>
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d14b      	bne.n	8009a5e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	4798      	blx	r3
      break;
 80099d4:	e048      	b.n	8009a68 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	785b      	ldrb	r3, [r3, #1]
 80099da:	2b09      	cmp	r3, #9
 80099dc:	d839      	bhi.n	8009a52 <USBD_StdDevReq+0xb2>
 80099de:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <USBD_StdDevReq+0x44>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	08009a35 	.word	0x08009a35
 80099e8:	08009a49 	.word	0x08009a49
 80099ec:	08009a53 	.word	0x08009a53
 80099f0:	08009a3f 	.word	0x08009a3f
 80099f4:	08009a53 	.word	0x08009a53
 80099f8:	08009a17 	.word	0x08009a17
 80099fc:	08009a0d 	.word	0x08009a0d
 8009a00:	08009a53 	.word	0x08009a53
 8009a04:	08009a2b 	.word	0x08009a2b
 8009a08:	08009a21 	.word	0x08009a21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f9dc 	bl	8009dcc <USBD_GetDescriptor>
          break;
 8009a14:	e022      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fb3f 	bl	800a09c <USBD_SetAddress>
          break;
 8009a1e:	e01d      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fb7e 	bl	800a124 <USBD_SetConfig>
          break;
 8009a28:	e018      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fc07 	bl	800a240 <USBD_GetConfig>
          break;
 8009a32:	e013      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fc37 	bl	800a2aa <USBD_GetStatus>
          break;
 8009a3c:	e00e      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fc65 	bl	800a310 <USBD_SetFeature>
          break;
 8009a46:	e009      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fc74 	bl	800a338 <USBD_ClrFeature>
          break;
 8009a50:	e004      	b.n	8009a5c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fccc 	bl	800a3f2 <USBD_CtlError>
          break;
 8009a5a:	bf00      	nop
      }
      break;
 8009a5c:	e004      	b.n	8009a68 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009a5e:	6839      	ldr	r1, [r7, #0]
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fcc6 	bl	800a3f2 <USBD_CtlError>
      break;
 8009a66:	bf00      	nop
  }

  return ret;
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop

08009a74 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a8a:	2b40      	cmp	r3, #64	; 0x40
 8009a8c:	d005      	beq.n	8009a9a <USBD_StdItfReq+0x26>
 8009a8e:	2b40      	cmp	r3, #64	; 0x40
 8009a90:	d82e      	bhi.n	8009af0 <USBD_StdItfReq+0x7c>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <USBD_StdItfReq+0x26>
 8009a96:	2b20      	cmp	r3, #32
 8009a98:	d12a      	bne.n	8009af0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d81d      	bhi.n	8009ae2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	889b      	ldrh	r3, [r3, #4]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d813      	bhi.n	8009ad8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	4798      	blx	r3
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	88db      	ldrh	r3, [r3, #6]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d110      	bne.n	8009aec <USBD_StdItfReq+0x78>
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10d      	bne.n	8009aec <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fd56 	bl	800a582 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ad6:	e009      	b.n	8009aec <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fc89 	bl	800a3f2 <USBD_CtlError>
          break;
 8009ae0:	e004      	b.n	8009aec <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fc84 	bl	800a3f2 <USBD_CtlError>
          break;
 8009aea:	e000      	b.n	8009aee <USBD_StdItfReq+0x7a>
          break;
 8009aec:	bf00      	nop
      }
      break;
 8009aee:	e004      	b.n	8009afa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fc7d 	bl	800a3f2 <USBD_CtlError>
      break;
 8009af8:	bf00      	nop
  }

  return USBD_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	889b      	ldrh	r3, [r3, #4]
 8009b16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b20:	2b40      	cmp	r3, #64	; 0x40
 8009b22:	d007      	beq.n	8009b34 <USBD_StdEPReq+0x30>
 8009b24:	2b40      	cmp	r3, #64	; 0x40
 8009b26:	f200 8146 	bhi.w	8009db6 <USBD_StdEPReq+0x2b2>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <USBD_StdEPReq+0x40>
 8009b2e:	2b20      	cmp	r3, #32
 8009b30:	f040 8141 	bne.w	8009db6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	4798      	blx	r3
      break;
 8009b42:	e13d      	b.n	8009dc0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b4c:	2b20      	cmp	r3, #32
 8009b4e:	d10a      	bne.n	8009b66 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	4798      	blx	r3
 8009b5e:	4603      	mov	r3, r0
 8009b60:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	e12d      	b.n	8009dc2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	785b      	ldrb	r3, [r3, #1]
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d007      	beq.n	8009b7e <USBD_StdEPReq+0x7a>
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	f300 811b 	bgt.w	8009daa <USBD_StdEPReq+0x2a6>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d072      	beq.n	8009c5e <USBD_StdEPReq+0x15a>
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d03a      	beq.n	8009bf2 <USBD_StdEPReq+0xee>
 8009b7c:	e115      	b.n	8009daa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d002      	beq.n	8009b8e <USBD_StdEPReq+0x8a>
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d015      	beq.n	8009bb8 <USBD_StdEPReq+0xb4>
 8009b8c:	e02b      	b.n	8009be6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00c      	beq.n	8009bae <USBD_StdEPReq+0xaa>
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	2b80      	cmp	r3, #128	; 0x80
 8009b98:	d009      	beq.n	8009bae <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f001 f89a 	bl	800acd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009ba4:	2180      	movs	r1, #128	; 0x80
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f001 f896 	bl	800acd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bac:	e020      	b.n	8009bf0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009bae:	6839      	ldr	r1, [r7, #0]
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 fc1e 	bl	800a3f2 <USBD_CtlError>
              break;
 8009bb6:	e01b      	b.n	8009bf0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	885b      	ldrh	r3, [r3, #2]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10e      	bne.n	8009bde <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00b      	beq.n	8009bde <USBD_StdEPReq+0xda>
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
 8009bc8:	2b80      	cmp	r3, #128	; 0x80
 8009bca:	d008      	beq.n	8009bde <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	88db      	ldrh	r3, [r3, #6]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d104      	bne.n	8009bde <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f001 f87d 	bl	800acd8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fccf 	bl	800a582 <USBD_CtlSendStatus>

              break;
 8009be4:	e004      	b.n	8009bf0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fc02 	bl	800a3f2 <USBD_CtlError>
              break;
 8009bee:	bf00      	nop
          }
          break;
 8009bf0:	e0e0      	b.n	8009db4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d002      	beq.n	8009c02 <USBD_StdEPReq+0xfe>
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d015      	beq.n	8009c2c <USBD_StdEPReq+0x128>
 8009c00:	e026      	b.n	8009c50 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00c      	beq.n	8009c22 <USBD_StdEPReq+0x11e>
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
 8009c0a:	2b80      	cmp	r3, #128	; 0x80
 8009c0c:	d009      	beq.n	8009c22 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f001 f860 	bl	800acd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c18:	2180      	movs	r1, #128	; 0x80
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f001 f85c 	bl	800acd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c20:	e01c      	b.n	8009c5c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fbe4 	bl	800a3f2 <USBD_CtlError>
              break;
 8009c2a:	e017      	b.n	8009c5c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	885b      	ldrh	r3, [r3, #2]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d112      	bne.n	8009c5a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f001 f867 	bl	800ad16 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fc9a 	bl	800a582 <USBD_CtlSendStatus>
              }
              break;
 8009c4e:	e004      	b.n	8009c5a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fbcd 	bl	800a3f2 <USBD_CtlError>
              break;
 8009c58:	e000      	b.n	8009c5c <USBD_StdEPReq+0x158>
              break;
 8009c5a:	bf00      	nop
          }
          break;
 8009c5c:	e0aa      	b.n	8009db4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d002      	beq.n	8009c6e <USBD_StdEPReq+0x16a>
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	d032      	beq.n	8009cd2 <USBD_StdEPReq+0x1ce>
 8009c6c:	e097      	b.n	8009d9e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c6e:	7bbb      	ldrb	r3, [r7, #14]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d007      	beq.n	8009c84 <USBD_StdEPReq+0x180>
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
 8009c76:	2b80      	cmp	r3, #128	; 0x80
 8009c78:	d004      	beq.n	8009c84 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fbb8 	bl	800a3f2 <USBD_CtlError>
                break;
 8009c82:	e091      	b.n	8009da8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	da0b      	bge.n	8009ca4 <USBD_StdEPReq+0x1a0>
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c92:	4613      	mov	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	3310      	adds	r3, #16
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	e00b      	b.n	8009cbc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009caa:	4613      	mov	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	4413      	add	r3, r2
 8009cba:	3304      	adds	r3, #4
 8009cbc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fbfb 	bl	800a4c6 <USBD_CtlSendData>
              break;
 8009cd0:	e06a      	b.n	8009da8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009cd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	da11      	bge.n	8009cfe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cda:	7bbb      	ldrb	r3, [r7, #14]
 8009cdc:	f003 020f 	and.w	r2, r3, #15
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	440b      	add	r3, r1
 8009cec:	3318      	adds	r3, #24
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d117      	bne.n	8009d24 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fb7b 	bl	800a3f2 <USBD_CtlError>
                  break;
 8009cfc:	e054      	b.n	8009da8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	f003 020f 	and.w	r2, r3, #15
 8009d04:	6879      	ldr	r1, [r7, #4]
 8009d06:	4613      	mov	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	440b      	add	r3, r1
 8009d10:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d104      	bne.n	8009d24 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fb68 	bl	800a3f2 <USBD_CtlError>
                  break;
 8009d22:	e041      	b.n	8009da8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	da0b      	bge.n	8009d44 <USBD_StdEPReq+0x240>
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
 8009d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	3310      	adds	r3, #16
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	4413      	add	r3, r2
 8009d40:	3304      	adds	r3, #4
 8009d42:	e00b      	b.n	8009d5c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	4413      	add	r3, r2
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <USBD_StdEPReq+0x266>
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	2b80      	cmp	r3, #128	; 0x80
 8009d68:	d103      	bne.n	8009d72 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	e00e      	b.n	8009d90 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 ffec 	bl	800ad54 <USBD_LL_IsStallEP>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2201      	movs	r2, #1
 8009d86:	601a      	str	r2, [r3, #0]
 8009d88:	e002      	b.n	8009d90 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2202      	movs	r2, #2
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fb95 	bl	800a4c6 <USBD_CtlSendData>
              break;
 8009d9c:	e004      	b.n	8009da8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fb26 	bl	800a3f2 <USBD_CtlError>
              break;
 8009da6:	bf00      	nop
          }
          break;
 8009da8:	e004      	b.n	8009db4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fb20 	bl	800a3f2 <USBD_CtlError>
          break;
 8009db2:	bf00      	nop
      }
      break;
 8009db4:	e004      	b.n	8009dc0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fb1a 	bl	800a3f2 <USBD_CtlError>
      break;
 8009dbe:	bf00      	nop
  }

  return ret;
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	885b      	ldrh	r3, [r3, #2]
 8009de6:	0a1b      	lsrs	r3, r3, #8
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	3b01      	subs	r3, #1
 8009dec:	2b06      	cmp	r3, #6
 8009dee:	f200 8128 	bhi.w	800a042 <USBD_GetDescriptor+0x276>
 8009df2:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <USBD_GetDescriptor+0x2c>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e15 	.word	0x08009e15
 8009dfc:	08009e2d 	.word	0x08009e2d
 8009e00:	08009e6d 	.word	0x08009e6d
 8009e04:	0800a043 	.word	0x0800a043
 8009e08:	0800a043 	.word	0x0800a043
 8009e0c:	08009fe3 	.word	0x08009fe3
 8009e10:	0800a00f 	.word	0x0800a00f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	7c12      	ldrb	r2, [r2, #16]
 8009e20:	f107 0108 	add.w	r1, r7, #8
 8009e24:	4610      	mov	r0, r2
 8009e26:	4798      	blx	r3
 8009e28:	60f8      	str	r0, [r7, #12]
      break;
 8009e2a:	e112      	b.n	800a052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	7c1b      	ldrb	r3, [r3, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10d      	bne.n	8009e50 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3c:	f107 0208 	add.w	r2, r7, #8
 8009e40:	4610      	mov	r0, r2
 8009e42:	4798      	blx	r3
 8009e44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e4e:	e100      	b.n	800a052 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	f107 0208 	add.w	r2, r7, #8
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	4798      	blx	r3
 8009e60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3301      	adds	r3, #1
 8009e66:	2202      	movs	r2, #2
 8009e68:	701a      	strb	r2, [r3, #0]
      break;
 8009e6a:	e0f2      	b.n	800a052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	885b      	ldrh	r3, [r3, #2]
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b05      	cmp	r3, #5
 8009e74:	f200 80ac 	bhi.w	8009fd0 <USBD_GetDescriptor+0x204>
 8009e78:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <USBD_GetDescriptor+0xb4>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009e99 	.word	0x08009e99
 8009e84:	08009ecd 	.word	0x08009ecd
 8009e88:	08009f01 	.word	0x08009f01
 8009e8c:	08009f35 	.word	0x08009f35
 8009e90:	08009f69 	.word	0x08009f69
 8009e94:	08009f9d 	.word	0x08009f9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00b      	beq.n	8009ebc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	7c12      	ldrb	r2, [r2, #16]
 8009eb0:	f107 0108 	add.w	r1, r7, #8
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4798      	blx	r3
 8009eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eba:	e091      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 fa97 	bl	800a3f2 <USBD_CtlError>
            err++;
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eca:	e089      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	7c12      	ldrb	r2, [r2, #16]
 8009ee4:	f107 0108 	add.w	r1, r7, #8
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4798      	blx	r3
 8009eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eee:	e077      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa7d 	bl	800a3f2 <USBD_CtlError>
            err++;
 8009ef8:	7afb      	ldrb	r3, [r7, #11]
 8009efa:	3301      	adds	r3, #1
 8009efc:	72fb      	strb	r3, [r7, #11]
          break;
 8009efe:	e06f      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00b      	beq.n	8009f24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	7c12      	ldrb	r2, [r2, #16]
 8009f18:	f107 0108 	add.w	r1, r7, #8
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	4798      	blx	r3
 8009f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f22:	e05d      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fa63 	bl	800a3f2 <USBD_CtlError>
            err++;
 8009f2c:	7afb      	ldrb	r3, [r7, #11]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	72fb      	strb	r3, [r7, #11]
          break;
 8009f32:	e055      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	7c12      	ldrb	r2, [r2, #16]
 8009f4c:	f107 0108 	add.w	r1, r7, #8
 8009f50:	4610      	mov	r0, r2
 8009f52:	4798      	blx	r3
 8009f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f56:	e043      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fa49 	bl	800a3f2 <USBD_CtlError>
            err++;
 8009f60:	7afb      	ldrb	r3, [r7, #11]
 8009f62:	3301      	adds	r3, #1
 8009f64:	72fb      	strb	r3, [r7, #11]
          break;
 8009f66:	e03b      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00b      	beq.n	8009f8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	7c12      	ldrb	r2, [r2, #16]
 8009f80:	f107 0108 	add.w	r1, r7, #8
 8009f84:	4610      	mov	r0, r2
 8009f86:	4798      	blx	r3
 8009f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f8a:	e029      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fa2f 	bl	800a3f2 <USBD_CtlError>
            err++;
 8009f94:	7afb      	ldrb	r3, [r7, #11]
 8009f96:	3301      	adds	r3, #1
 8009f98:	72fb      	strb	r3, [r7, #11]
          break;
 8009f9a:	e021      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00b      	beq.n	8009fc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	7c12      	ldrb	r2, [r2, #16]
 8009fb4:	f107 0108 	add.w	r1, r7, #8
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4798      	blx	r3
 8009fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fbe:	e00f      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fa15 	bl	800a3f2 <USBD_CtlError>
            err++;
 8009fc8:	7afb      	ldrb	r3, [r7, #11]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8009fce:	e007      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fa0d 	bl	800a3f2 <USBD_CtlError>
          err++;
 8009fd8:	7afb      	ldrb	r3, [r7, #11]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009fde:	e038      	b.n	800a052 <USBD_GetDescriptor+0x286>
 8009fe0:	e037      	b.n	800a052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	7c1b      	ldrb	r3, [r3, #16]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d109      	bne.n	8009ffe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff2:	f107 0208 	add.w	r2, r7, #8
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	4798      	blx	r3
 8009ffa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ffc:	e029      	b.n	800a052 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f9f6 	bl	800a3f2 <USBD_CtlError>
        err++;
 800a006:	7afb      	ldrb	r3, [r7, #11]
 800a008:	3301      	adds	r3, #1
 800a00a:	72fb      	strb	r3, [r7, #11]
      break;
 800a00c:	e021      	b.n	800a052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	7c1b      	ldrb	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10d      	bne.n	800a032 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	f107 0208 	add.w	r2, r7, #8
 800a022:	4610      	mov	r0, r2
 800a024:	4798      	blx	r3
 800a026:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3301      	adds	r3, #1
 800a02c:	2207      	movs	r2, #7
 800a02e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a030:	e00f      	b.n	800a052 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f9dc 	bl	800a3f2 <USBD_CtlError>
        err++;
 800a03a:	7afb      	ldrb	r3, [r7, #11]
 800a03c:	3301      	adds	r3, #1
 800a03e:	72fb      	strb	r3, [r7, #11]
      break;
 800a040:	e007      	b.n	800a052 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f9d4 	bl	800a3f2 <USBD_CtlError>
      err++;
 800a04a:	7afb      	ldrb	r3, [r7, #11]
 800a04c:	3301      	adds	r3, #1
 800a04e:	72fb      	strb	r3, [r7, #11]
      break;
 800a050:	bf00      	nop
  }

  if (err != 0U)
 800a052:	7afb      	ldrb	r3, [r7, #11]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d11c      	bne.n	800a092 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a058:	893b      	ldrh	r3, [r7, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d011      	beq.n	800a082 <USBD_GetDescriptor+0x2b6>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	88db      	ldrh	r3, [r3, #6]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00d      	beq.n	800a082 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	88da      	ldrh	r2, [r3, #6]
 800a06a:	893b      	ldrh	r3, [r7, #8]
 800a06c:	4293      	cmp	r3, r2
 800a06e:	bf28      	it	cs
 800a070:	4613      	movcs	r3, r2
 800a072:	b29b      	uxth	r3, r3
 800a074:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a076:	893b      	ldrh	r3, [r7, #8]
 800a078:	461a      	mov	r2, r3
 800a07a:	68f9      	ldr	r1, [r7, #12]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fa22 	bl	800a4c6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	88db      	ldrh	r3, [r3, #6]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d104      	bne.n	800a094 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fa79 	bl	800a582 <USBD_CtlSendStatus>
 800a090:	e000      	b.n	800a094 <USBD_GetDescriptor+0x2c8>
    return;
 800a092:	bf00      	nop
    }
  }
}
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop

0800a09c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	889b      	ldrh	r3, [r3, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d130      	bne.n	800a110 <USBD_SetAddress+0x74>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	88db      	ldrh	r3, [r3, #6]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d12c      	bne.n	800a110 <USBD_SetAddress+0x74>
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	885b      	ldrh	r3, [r3, #2]
 800a0ba:	2b7f      	cmp	r3, #127	; 0x7f
 800a0bc:	d828      	bhi.n	800a110 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	885b      	ldrh	r3, [r3, #2]
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d104      	bne.n	800a0de <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a0d4:	6839      	ldr	r1, [r7, #0]
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f98b 	bl	800a3f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0dc:	e01d      	b.n	800a11a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	7bfa      	ldrb	r2, [r7, #15]
 800a0e2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fe5e 	bl	800adac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fa46 	bl	800a582 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d004      	beq.n	800a106 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a104:	e009      	b.n	800a11a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a10e:	e004      	b.n	800a11a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f96d 	bl	800a3f2 <USBD_CtlError>
  }
}
 800a118:	bf00      	nop
 800a11a:	bf00      	nop
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
	...

0800a124 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	885b      	ldrh	r3, [r3, #2]
 800a132:	b2da      	uxtb	r2, r3
 800a134:	4b41      	ldr	r3, [pc, #260]	; (800a23c <USBD_SetConfig+0x118>)
 800a136:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a138:	4b40      	ldr	r3, [pc, #256]	; (800a23c <USBD_SetConfig+0x118>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d904      	bls.n	800a14a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f955 	bl	800a3f2 <USBD_CtlError>
 800a148:	e075      	b.n	800a236 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a150:	2b02      	cmp	r3, #2
 800a152:	d002      	beq.n	800a15a <USBD_SetConfig+0x36>
 800a154:	2b03      	cmp	r3, #3
 800a156:	d023      	beq.n	800a1a0 <USBD_SetConfig+0x7c>
 800a158:	e062      	b.n	800a220 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a15a:	4b38      	ldr	r3, [pc, #224]	; (800a23c <USBD_SetConfig+0x118>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d01a      	beq.n	800a198 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a162:	4b36      	ldr	r3, [pc, #216]	; (800a23c <USBD_SetConfig+0x118>)
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2203      	movs	r2, #3
 800a170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a174:	4b31      	ldr	r3, [pc, #196]	; (800a23c <USBD_SetConfig+0x118>)
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7ff f9e7 	bl	800954e <USBD_SetClassConfig>
 800a180:	4603      	mov	r3, r0
 800a182:	2b02      	cmp	r3, #2
 800a184:	d104      	bne.n	800a190 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f932 	bl	800a3f2 <USBD_CtlError>
            return;
 800a18e:	e052      	b.n	800a236 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f9f6 	bl	800a582 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a196:	e04e      	b.n	800a236 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f9f2 	bl	800a582 <USBD_CtlSendStatus>
        break;
 800a19e:	e04a      	b.n	800a236 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a1a0:	4b26      	ldr	r3, [pc, #152]	; (800a23c <USBD_SetConfig+0x118>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d112      	bne.n	800a1ce <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a1b0:	4b22      	ldr	r3, [pc, #136]	; (800a23c <USBD_SetConfig+0x118>)
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a1ba:	4b20      	ldr	r3, [pc, #128]	; (800a23c <USBD_SetConfig+0x118>)
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7ff f9e3 	bl	800958c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f9db 	bl	800a582 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1cc:	e033      	b.n	800a236 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a1ce:	4b1b      	ldr	r3, [pc, #108]	; (800a23c <USBD_SetConfig+0x118>)
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d01d      	beq.n	800a218 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7ff f9d1 	bl	800958c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a1ea:	4b14      	ldr	r3, [pc, #80]	; (800a23c <USBD_SetConfig+0x118>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a1f4:	4b11      	ldr	r3, [pc, #68]	; (800a23c <USBD_SetConfig+0x118>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff f9a7 	bl	800954e <USBD_SetClassConfig>
 800a200:	4603      	mov	r3, r0
 800a202:	2b02      	cmp	r3, #2
 800a204:	d104      	bne.n	800a210 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a206:	6839      	ldr	r1, [r7, #0]
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f8f2 	bl	800a3f2 <USBD_CtlError>
            return;
 800a20e:	e012      	b.n	800a236 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f9b6 	bl	800a582 <USBD_CtlSendStatus>
        break;
 800a216:	e00e      	b.n	800a236 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f9b2 	bl	800a582 <USBD_CtlSendStatus>
        break;
 800a21e:	e00a      	b.n	800a236 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f8e5 	bl	800a3f2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a228:	4b04      	ldr	r3, [pc, #16]	; (800a23c <USBD_SetConfig+0x118>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	4619      	mov	r1, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7ff f9ac 	bl	800958c <USBD_ClrClassConfig>
        break;
 800a234:	bf00      	nop
    }
  }
}
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	20000440 	.word	0x20000440

0800a240 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	88db      	ldrh	r3, [r3, #6]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d004      	beq.n	800a25c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f8cc 	bl	800a3f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a25a:	e022      	b.n	800a2a2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a262:	2b02      	cmp	r3, #2
 800a264:	dc02      	bgt.n	800a26c <USBD_GetConfig+0x2c>
 800a266:	2b00      	cmp	r3, #0
 800a268:	dc03      	bgt.n	800a272 <USBD_GetConfig+0x32>
 800a26a:	e015      	b.n	800a298 <USBD_GetConfig+0x58>
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d00b      	beq.n	800a288 <USBD_GetConfig+0x48>
 800a270:	e012      	b.n	800a298 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	3308      	adds	r3, #8
 800a27c:	2201      	movs	r2, #1
 800a27e:	4619      	mov	r1, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f920 	bl	800a4c6 <USBD_CtlSendData>
        break;
 800a286:	e00c      	b.n	800a2a2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3304      	adds	r3, #4
 800a28c:	2201      	movs	r2, #1
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f918 	bl	800a4c6 <USBD_CtlSendData>
        break;
 800a296:	e004      	b.n	800a2a2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f8a9 	bl	800a3f2 <USBD_CtlError>
        break;
 800a2a0:	bf00      	nop
}
 800a2a2:	bf00      	nop
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b082      	sub	sp, #8
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d81e      	bhi.n	800a2fe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	88db      	ldrh	r3, [r3, #6]
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d004      	beq.n	800a2d2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f891 	bl	800a3f2 <USBD_CtlError>
        break;
 800a2d0:	e01a      	b.n	800a308 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d005      	beq.n	800a2ee <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	f043 0202 	orr.w	r2, r3, #2
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f8e5 	bl	800a4c6 <USBD_CtlSendData>
      break;
 800a2fc:	e004      	b.n	800a308 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f876 	bl	800a3f2 <USBD_CtlError>
      break;
 800a306:	bf00      	nop
  }
}
 800a308:	bf00      	nop
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	885b      	ldrh	r3, [r3, #2]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d106      	bne.n	800a330 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f929 	bl	800a582 <USBD_CtlSendStatus>
  }
}
 800a330:	bf00      	nop
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a348:	3b01      	subs	r3, #1
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d80b      	bhi.n	800a366 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	885b      	ldrh	r3, [r3, #2]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d10c      	bne.n	800a370 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f90f 	bl	800a582 <USBD_CtlSendStatus>
      }
      break;
 800a364:	e004      	b.n	800a370 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a366:	6839      	ldr	r1, [r7, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f842 	bl	800a3f2 <USBD_CtlError>
      break;
 800a36e:	e000      	b.n	800a372 <USBD_ClrFeature+0x3a>
      break;
 800a370:	bf00      	nop
  }
}
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	781a      	ldrb	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	785a      	ldrb	r2, [r3, #1]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	3302      	adds	r3, #2
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	3303      	adds	r3, #3
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	021b      	lsls	r3, r3, #8
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	4413      	add	r3, r2
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	3305      	adds	r3, #5
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	021b      	lsls	r3, r3, #8
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	4413      	add	r3, r2
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	3306      	adds	r3, #6
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	3307      	adds	r3, #7
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	021b      	lsls	r3, r3, #8
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	80da      	strh	r2, [r3, #6]

}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bc80      	pop	{r7}
 800a3f0:	4770      	bx	lr

0800a3f2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a3fc:	2180      	movs	r1, #128	; 0x80
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fc6a 	bl	800acd8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a404:	2100      	movs	r1, #0
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fc66 	bl	800acd8 <USBD_LL_StallEP>
}
 800a40c:	bf00      	nop
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d032      	beq.n	800a490 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f000 f834 	bl	800a498 <USBD_GetLen>
 800a430:	4603      	mov	r3, r0
 800a432:	3301      	adds	r3, #1
 800a434:	b29b      	uxth	r3, r3
 800a436:	005b      	lsls	r3, r3, #1
 800a438:	b29a      	uxth	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	75fa      	strb	r2, [r7, #23]
 800a444:	461a      	mov	r2, r3
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	4413      	add	r3, r2
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	7812      	ldrb	r2, [r2, #0]
 800a44e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	1c5a      	adds	r2, r3, #1
 800a454:	75fa      	strb	r2, [r7, #23]
 800a456:	461a      	mov	r2, r3
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	4413      	add	r3, r2
 800a45c:	2203      	movs	r2, #3
 800a45e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a460:	e012      	b.n	800a488 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	60fa      	str	r2, [r7, #12]
 800a468:	7dfa      	ldrb	r2, [r7, #23]
 800a46a:	1c51      	adds	r1, r2, #1
 800a46c:	75f9      	strb	r1, [r7, #23]
 800a46e:	4611      	mov	r1, r2
 800a470:	68ba      	ldr	r2, [r7, #8]
 800a472:	440a      	add	r2, r1
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	75fa      	strb	r2, [r7, #23]
 800a47e:	461a      	mov	r2, r3
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	4413      	add	r3, r2
 800a484:	2200      	movs	r2, #0
 800a486:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1e8      	bne.n	800a462 <USBD_GetString+0x4e>
    }
  }
}
 800a490:	bf00      	nop
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a4a4:	e005      	b.n	800a4b2 <USBD_GetLen+0x1a>
  {
    len++;
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1f5      	bne.n	800a4a6 <USBD_GetLen+0xe>
  }

  return len;
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bc80      	pop	{r7}
 800a4c4:	4770      	bx	lr

0800a4c6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	60f8      	str	r0, [r7, #12]
 800a4ce:	60b9      	str	r1, [r7, #8]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a4dc:	88fa      	ldrh	r2, [r7, #6]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a4e2:	88fa      	ldrh	r2, [r7, #6]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4e8:	88fb      	ldrh	r3, [r7, #6]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f000 fc7b 	bl	800adea <USBD_LL_Transmit>

  return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	60f8      	str	r0, [r7, #12]
 800a506:	60b9      	str	r1, [r7, #8]
 800a508:	4613      	mov	r3, r2
 800a50a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a50c:	88fb      	ldrh	r3, [r7, #6]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	2100      	movs	r1, #0
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 fc69 	bl	800adea <USBD_LL_Transmit>

  return USBD_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	60f8      	str	r0, [r7, #12]
 800a52a:	60b9      	str	r1, [r7, #8]
 800a52c:	4613      	mov	r3, r2
 800a52e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2203      	movs	r2, #3
 800a534:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a538:	88fa      	ldrh	r2, [r7, #6]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a540:	88fa      	ldrh	r2, [r7, #6]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a548:	88fb      	ldrh	r3, [r7, #6]
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	2100      	movs	r1, #0
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f000 fc6e 	bl	800ae30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b084      	sub	sp, #16
 800a562:	af00      	add	r7, sp, #0
 800a564:	60f8      	str	r0, [r7, #12]
 800a566:	60b9      	str	r1, [r7, #8]
 800a568:	4613      	mov	r3, r2
 800a56a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a56c:	88fb      	ldrh	r3, [r7, #6]
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	2100      	movs	r1, #0
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fc5c 	bl	800ae30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b082      	sub	sp, #8
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2204      	movs	r2, #4
 800a58e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a592:	2300      	movs	r3, #0
 800a594:	2200      	movs	r2, #0
 800a596:	2100      	movs	r1, #0
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fc26 	bl	800adea <USBD_LL_Transmit>

  return USBD_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2205      	movs	r2, #5
 800a5b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	2100      	movs	r1, #0
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fc36 	bl	800ae30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	4912      	ldr	r1, [pc, #72]	; (800a620 <MX_USB_DEVICE_Init+0x50>)
 800a5d8:	4812      	ldr	r0, [pc, #72]	; (800a624 <MX_USB_DEVICE_Init+0x54>)
 800a5da:	f7fe ff5e 	bl	800949a <USBD_Init>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5e4:	f7f7 f96e 	bl	80018c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a5e8:	490f      	ldr	r1, [pc, #60]	; (800a628 <MX_USB_DEVICE_Init+0x58>)
 800a5ea:	480e      	ldr	r0, [pc, #56]	; (800a624 <MX_USB_DEVICE_Init+0x54>)
 800a5ec:	f7fe ff80 	bl	80094f0 <USBD_RegisterClass>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5f6:	f7f7 f965 	bl	80018c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5fa:	490c      	ldr	r1, [pc, #48]	; (800a62c <MX_USB_DEVICE_Init+0x5c>)
 800a5fc:	4809      	ldr	r0, [pc, #36]	; (800a624 <MX_USB_DEVICE_Init+0x54>)
 800a5fe:	f7fe feb1 	bl	8009364 <USBD_CDC_RegisterInterface>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a608:	f7f7 f95c 	bl	80018c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a60c:	4805      	ldr	r0, [pc, #20]	; (800a624 <MX_USB_DEVICE_Init+0x54>)
 800a60e:	f7fe ff88 	bl	8009522 <USBD_Start>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a618:	f7f7 f954 	bl	80018c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a61c:	bf00      	nop
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	2000014c 	.word	0x2000014c
 800a624:	20000444 	.word	0x20000444
 800a628:	20000038 	.word	0x20000038
 800a62c:	2000013c 	.word	0x2000013c

0800a630 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a634:	2200      	movs	r2, #0
 800a636:	4905      	ldr	r1, [pc, #20]	; (800a64c <CDC_Init_FS+0x1c>)
 800a638:	4805      	ldr	r0, [pc, #20]	; (800a650 <CDC_Init_FS+0x20>)
 800a63a:	f7fe fea9 	bl	8009390 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a63e:	4905      	ldr	r1, [pc, #20]	; (800a654 <CDC_Init_FS+0x24>)
 800a640:	4803      	ldr	r0, [pc, #12]	; (800a650 <CDC_Init_FS+0x20>)
 800a642:	f7fe febe 	bl	80093c2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a646:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a648:	4618      	mov	r0, r3
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20000b08 	.word	0x20000b08
 800a650:	20000444 	.word	0x20000444
 800a654:	20000708 	.word	0x20000708

0800a658 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a658:	b480      	push	{r7}
 800a65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a65c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a65e:	4618      	mov	r0, r3
 800a660:	46bd      	mov	sp, r7
 800a662:	bc80      	pop	{r7}
 800a664:	4770      	bx	lr
	...

0800a668 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	4603      	mov	r3, r0
 800a670:	6039      	str	r1, [r7, #0]
 800a672:	71fb      	strb	r3, [r7, #7]
 800a674:	4613      	mov	r3, r2
 800a676:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	2b23      	cmp	r3, #35	; 0x23
 800a67c:	d84a      	bhi.n	800a714 <CDC_Control_FS+0xac>
 800a67e:	a201      	add	r2, pc, #4	; (adr r2, 800a684 <CDC_Control_FS+0x1c>)
 800a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a684:	0800a715 	.word	0x0800a715
 800a688:	0800a715 	.word	0x0800a715
 800a68c:	0800a715 	.word	0x0800a715
 800a690:	0800a715 	.word	0x0800a715
 800a694:	0800a715 	.word	0x0800a715
 800a698:	0800a715 	.word	0x0800a715
 800a69c:	0800a715 	.word	0x0800a715
 800a6a0:	0800a715 	.word	0x0800a715
 800a6a4:	0800a715 	.word	0x0800a715
 800a6a8:	0800a715 	.word	0x0800a715
 800a6ac:	0800a715 	.word	0x0800a715
 800a6b0:	0800a715 	.word	0x0800a715
 800a6b4:	0800a715 	.word	0x0800a715
 800a6b8:	0800a715 	.word	0x0800a715
 800a6bc:	0800a715 	.word	0x0800a715
 800a6c0:	0800a715 	.word	0x0800a715
 800a6c4:	0800a715 	.word	0x0800a715
 800a6c8:	0800a715 	.word	0x0800a715
 800a6cc:	0800a715 	.word	0x0800a715
 800a6d0:	0800a715 	.word	0x0800a715
 800a6d4:	0800a715 	.word	0x0800a715
 800a6d8:	0800a715 	.word	0x0800a715
 800a6dc:	0800a715 	.word	0x0800a715
 800a6e0:	0800a715 	.word	0x0800a715
 800a6e4:	0800a715 	.word	0x0800a715
 800a6e8:	0800a715 	.word	0x0800a715
 800a6ec:	0800a715 	.word	0x0800a715
 800a6f0:	0800a715 	.word	0x0800a715
 800a6f4:	0800a715 	.word	0x0800a715
 800a6f8:	0800a715 	.word	0x0800a715
 800a6fc:	0800a715 	.word	0x0800a715
 800a700:	0800a715 	.word	0x0800a715
 800a704:	0800a715 	.word	0x0800a715
 800a708:	0800a715 	.word	0x0800a715
 800a70c:	0800a715 	.word	0x0800a715
 800a710:	0800a715 	.word	0x0800a715
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a714:	bf00      	nop
  }

  return (USBD_OK);
 800a716:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a718:	4618      	mov	r0, r3
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bc80      	pop	{r7}
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop

0800a724 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	480f      	ldr	r0, [pc, #60]	; (800a770 <CDC_Receive_FS+0x4c>)
 800a732:	f7fe fe46 	bl	80093c2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a736:	480e      	ldr	r0, [pc, #56]	; (800a770 <CDC_Receive_FS+0x4c>)
 800a738:	f7fe fe85 	bl	8009446 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	73fb      	strb	r3, [r7, #15]
  memset(buffer_usb, '\0',64);
 800a742:	2240      	movs	r2, #64	; 0x40
 800a744:	2100      	movs	r1, #0
 800a746:	480b      	ldr	r0, [pc, #44]	; (800a774 <CDC_Receive_FS+0x50>)
 800a748:	f000 fcd4 	bl	800b0f4 <memset>
  memcpy(buffer_usb, Buf, len);
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	461a      	mov	r2, r3
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	4808      	ldr	r0, [pc, #32]	; (800a774 <CDC_Receive_FS+0x50>)
 800a754:	f000 fd02 	bl	800b15c <memcpy>
  memset(Buf, '\0', len);
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	461a      	mov	r2, r3
 800a75c:	2100      	movs	r1, #0
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 fcc8 	bl	800b0f4 <memset>
  return (USBD_OK);
 800a764:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	20000444 	.word	0x20000444
 800a774:	200003d8 	.word	0x200003d8

0800a778 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	460b      	mov	r3, r1
 800a782:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a788:	4b0d      	ldr	r3, [pc, #52]	; (800a7c0 <CDC_Transmit_FS+0x48>)
 800a78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a78e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e00b      	b.n	800a7b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a79e:	887b      	ldrh	r3, [r7, #2]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	4806      	ldr	r0, [pc, #24]	; (800a7c0 <CDC_Transmit_FS+0x48>)
 800a7a6:	f7fe fdf3 	bl	8009390 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a7aa:	4805      	ldr	r0, [pc, #20]	; (800a7c0 <CDC_Transmit_FS+0x48>)
 800a7ac:	f7fe fe1c 	bl	80093e8 <USBD_CDC_TransmitPacket>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	20000444 	.word	0x20000444

0800a7c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	6039      	str	r1, [r7, #0]
 800a7ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2212      	movs	r2, #18
 800a7d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a7d6:	4b03      	ldr	r3, [pc, #12]	; (800a7e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bc80      	pop	{r7}
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	20000168 	.word	0x20000168

0800a7e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	6039      	str	r1, [r7, #0]
 800a7f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2204      	movs	r2, #4
 800a7f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7fa:	4b03      	ldr	r3, [pc, #12]	; (800a808 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	bc80      	pop	{r7}
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	2000017c 	.word	0x2000017c

0800a80c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	6039      	str	r1, [r7, #0]
 800a816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a818:	79fb      	ldrb	r3, [r7, #7]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d105      	bne.n	800a82a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	4907      	ldr	r1, [pc, #28]	; (800a840 <USBD_FS_ProductStrDescriptor+0x34>)
 800a822:	4808      	ldr	r0, [pc, #32]	; (800a844 <USBD_FS_ProductStrDescriptor+0x38>)
 800a824:	f7ff fdf6 	bl	800a414 <USBD_GetString>
 800a828:	e004      	b.n	800a834 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	4904      	ldr	r1, [pc, #16]	; (800a840 <USBD_FS_ProductStrDescriptor+0x34>)
 800a82e:	4805      	ldr	r0, [pc, #20]	; (800a844 <USBD_FS_ProductStrDescriptor+0x38>)
 800a830:	f7ff fdf0 	bl	800a414 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a834:	4b02      	ldr	r3, [pc, #8]	; (800a840 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20000f08 	.word	0x20000f08
 800a844:	0800bbf4 	.word	0x0800bbf4

0800a848 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	6039      	str	r1, [r7, #0]
 800a852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	4904      	ldr	r1, [pc, #16]	; (800a868 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a858:	4804      	ldr	r0, [pc, #16]	; (800a86c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a85a:	f7ff fddb 	bl	800a414 <USBD_GetString>
  return USBD_StrDesc;
 800a85e:	4b02      	ldr	r3, [pc, #8]	; (800a868 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	20000f08 	.word	0x20000f08
 800a86c:	0800bc0c 	.word	0x0800bc0c

0800a870 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	6039      	str	r1, [r7, #0]
 800a87a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	221a      	movs	r2, #26
 800a880:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a882:	f000 f843 	bl	800a90c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a886:	4b02      	ldr	r3, [pc, #8]	; (800a890 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	20000180 	.word	0x20000180

0800a894 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	6039      	str	r1, [r7, #0]
 800a89e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a8a0:	79fb      	ldrb	r3, [r7, #7]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d105      	bne.n	800a8b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	4907      	ldr	r1, [pc, #28]	; (800a8c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8aa:	4808      	ldr	r0, [pc, #32]	; (800a8cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8ac:	f7ff fdb2 	bl	800a414 <USBD_GetString>
 800a8b0:	e004      	b.n	800a8bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	4904      	ldr	r1, [pc, #16]	; (800a8c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8b6:	4805      	ldr	r0, [pc, #20]	; (800a8cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8b8:	f7ff fdac 	bl	800a414 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8bc:	4b02      	ldr	r3, [pc, #8]	; (800a8c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20000f08 	.word	0x20000f08
 800a8cc:	0800bc20 	.word	0x0800bc20

0800a8d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	6039      	str	r1, [r7, #0]
 800a8da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8dc:	79fb      	ldrb	r3, [r7, #7]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d105      	bne.n	800a8ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	4907      	ldr	r1, [pc, #28]	; (800a904 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8e6:	4808      	ldr	r0, [pc, #32]	; (800a908 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8e8:	f7ff fd94 	bl	800a414 <USBD_GetString>
 800a8ec:	e004      	b.n	800a8f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	4904      	ldr	r1, [pc, #16]	; (800a904 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8f2:	4805      	ldr	r0, [pc, #20]	; (800a908 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8f4:	f7ff fd8e 	bl	800a414 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8f8:	4b02      	ldr	r3, [pc, #8]	; (800a904 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	20000f08 	.word	0x20000f08
 800a908:	0800bc2c 	.word	0x0800bc2c

0800a90c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a912:	4b0f      	ldr	r3, [pc, #60]	; (800a950 <Get_SerialNum+0x44>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a918:	4b0e      	ldr	r3, [pc, #56]	; (800a954 <Get_SerialNum+0x48>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a91e:	4b0e      	ldr	r3, [pc, #56]	; (800a958 <Get_SerialNum+0x4c>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4413      	add	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d009      	beq.n	800a946 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a932:	2208      	movs	r2, #8
 800a934:	4909      	ldr	r1, [pc, #36]	; (800a95c <Get_SerialNum+0x50>)
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 f814 	bl	800a964 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a93c:	2204      	movs	r2, #4
 800a93e:	4908      	ldr	r1, [pc, #32]	; (800a960 <Get_SerialNum+0x54>)
 800a940:	68b8      	ldr	r0, [r7, #8]
 800a942:	f000 f80f 	bl	800a964 <IntToUnicode>
  }
}
 800a946:	bf00      	nop
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	1ffff7e8 	.word	0x1ffff7e8
 800a954:	1ffff7ec 	.word	0x1ffff7ec
 800a958:	1ffff7f0 	.word	0x1ffff7f0
 800a95c:	20000182 	.word	0x20000182
 800a960:	20000192 	.word	0x20000192

0800a964 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a964:	b480      	push	{r7}
 800a966:	b087      	sub	sp, #28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	4613      	mov	r3, r2
 800a970:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a976:	2300      	movs	r3, #0
 800a978:	75fb      	strb	r3, [r7, #23]
 800a97a:	e027      	b.n	800a9cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	0f1b      	lsrs	r3, r3, #28
 800a980:	2b09      	cmp	r3, #9
 800a982:	d80b      	bhi.n	800a99c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	0f1b      	lsrs	r3, r3, #28
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	4619      	mov	r1, r3
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	440b      	add	r3, r1
 800a994:	3230      	adds	r2, #48	; 0x30
 800a996:	b2d2      	uxtb	r2, r2
 800a998:	701a      	strb	r2, [r3, #0]
 800a99a:	e00a      	b.n	800a9b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	0f1b      	lsrs	r3, r3, #28
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	440b      	add	r3, r1
 800a9ac:	3237      	adds	r2, #55	; 0x37
 800a9ae:	b2d2      	uxtb	r2, r2
 800a9b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	011b      	lsls	r3, r3, #4
 800a9b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	3301      	adds	r3, #1
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	75fb      	strb	r3, [r7, #23]
 800a9cc:	7dfa      	ldrb	r2, [r7, #23]
 800a9ce:	79fb      	ldrb	r3, [r7, #7]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d3d3      	bcc.n	800a97c <IntToUnicode+0x18>
  }
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bc80      	pop	{r7}
 800a9de:	4770      	bx	lr

0800a9e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a0d      	ldr	r2, [pc, #52]	; (800aa24 <HAL_PCD_MspInit+0x44>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d113      	bne.n	800aa1a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a9f2:	4b0d      	ldr	r3, [pc, #52]	; (800aa28 <HAL_PCD_MspInit+0x48>)
 800a9f4:	69db      	ldr	r3, [r3, #28]
 800a9f6:	4a0c      	ldr	r2, [pc, #48]	; (800aa28 <HAL_PCD_MspInit+0x48>)
 800a9f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a9fc:	61d3      	str	r3, [r2, #28]
 800a9fe:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <HAL_PCD_MspInit+0x48>)
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	2014      	movs	r0, #20
 800aa10:	f7f7 fe8d 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800aa14:	2014      	movs	r0, #20
 800aa16:	f7f7 fea6 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa1a:	bf00      	nop
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	40005c00 	.word	0x40005c00
 800aa28:	40021000 	.word	0x40021000

0800aa2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800aa40:	4619      	mov	r1, r3
 800aa42:	4610      	mov	r0, r2
 800aa44:	f7fe fdb5 	bl	80095b2 <USBD_LL_SetupStage>
}
 800aa48:	bf00      	nop
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800aa62:	78fa      	ldrb	r2, [r7, #3]
 800aa64:	6879      	ldr	r1, [r7, #4]
 800aa66:	4613      	mov	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	440b      	add	r3, r1
 800aa70:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	4619      	mov	r1, r3
 800aa7a:	f7fe fde7 	bl	800964c <USBD_LL_DataOutStage>
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b082      	sub	sp, #8
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	6879      	ldr	r1, [r7, #4]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	440b      	add	r3, r1
 800aaa6:	333c      	adds	r3, #60	; 0x3c
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	78fb      	ldrb	r3, [r7, #3]
 800aaac:	4619      	mov	r1, r3
 800aaae:	f7fe fe3e 	bl	800972e <USBD_LL_DataInStage>
}
 800aab2:	bf00      	nop
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b082      	sub	sp, #8
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fe ff4e 	bl	800996a <USBD_LL_SOF>
}
 800aace:	bf00      	nop
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aade:	2301      	movs	r3, #1
 800aae0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d001      	beq.n	800aaee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aaea:	f7f6 feeb 	bl	80018c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aaf4:	7bfa      	ldrb	r2, [r7, #15]
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fe fefe 	bl	80098fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe feb7 	bl	8009878 <USBD_LL_Reset>
}
 800ab0a:	bf00      	nop
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe fef8 	bl	8009918 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d005      	beq.n	800ab3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab30:	4b04      	ldr	r3, [pc, #16]	; (800ab44 <HAL_PCD_SuspendCallback+0x30>)
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	4a03      	ldr	r2, [pc, #12]	; (800ab44 <HAL_PCD_SuspendCallback+0x30>)
 800ab36:	f043 0306 	orr.w	r3, r3, #6
 800ab3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab3c:	bf00      	nop
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	e000ed00 	.word	0xe000ed00

0800ab48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fe fef2 	bl	8009940 <USBD_LL_Resume>
}
 800ab5c:	bf00      	nop
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab6c:	4a28      	ldr	r2, [pc, #160]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a26      	ldr	r2, [pc, #152]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab7c:	4b24      	ldr	r3, [pc, #144]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab7e:	4a25      	ldr	r2, [pc, #148]	; (800ac14 <USBD_LL_Init+0xb0>)
 800ab80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab82:	4b23      	ldr	r3, [pc, #140]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab84:	2208      	movs	r2, #8
 800ab86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab88:	4b21      	ldr	r3, [pc, #132]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab8e:	4b20      	ldr	r3, [pc, #128]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab94:	4b1e      	ldr	r3, [pc, #120]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab9a:	4b1d      	ldr	r3, [pc, #116]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aba0:	481b      	ldr	r0, [pc, #108]	; (800ac10 <USBD_LL_Init+0xac>)
 800aba2:	f7f8 fd71 	bl	8003688 <HAL_PCD_Init>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800abac:	f7f6 fe8a 	bl	80018c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abb6:	2318      	movs	r3, #24
 800abb8:	2200      	movs	r2, #0
 800abba:	2100      	movs	r1, #0
 800abbc:	f7fa fa90 	bl	80050e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abc6:	2358      	movs	r3, #88	; 0x58
 800abc8:	2200      	movs	r2, #0
 800abca:	2180      	movs	r1, #128	; 0x80
 800abcc:	f7fa fa88 	bl	80050e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abd6:	23c0      	movs	r3, #192	; 0xc0
 800abd8:	2200      	movs	r2, #0
 800abda:	2181      	movs	r1, #129	; 0x81
 800abdc:	f7fa fa80 	bl	80050e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abe6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800abea:	2200      	movs	r2, #0
 800abec:	2101      	movs	r1, #1
 800abee:	f7fa fa77 	bl	80050e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abfc:	2200      	movs	r2, #0
 800abfe:	2182      	movs	r1, #130	; 0x82
 800ac00:	f7fa fa6e 	bl	80050e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	20001108 	.word	0x20001108
 800ac14:	40005c00 	.word	0x40005c00

0800ac18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f8 fe29 	bl	8003886 <HAL_PCD_Start>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 f94e 	bl	800aedc <USBD_Get_USB_Status>
 800ac40:	4603      	mov	r3, r0
 800ac42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b084      	sub	sp, #16
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	4608      	mov	r0, r1
 800ac58:	4611      	mov	r1, r2
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	70fb      	strb	r3, [r7, #3]
 800ac60:	460b      	mov	r3, r1
 800ac62:	70bb      	strb	r3, [r7, #2]
 800ac64:	4613      	mov	r3, r2
 800ac66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac76:	78bb      	ldrb	r3, [r7, #2]
 800ac78:	883a      	ldrh	r2, [r7, #0]
 800ac7a:	78f9      	ldrb	r1, [r7, #3]
 800ac7c:	f7f8 ff7e 	bl	8003b7c <HAL_PCD_EP_Open>
 800ac80:	4603      	mov	r3, r0
 800ac82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 f928 	bl	800aedc <USBD_Get_USB_Status>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	460b      	mov	r3, r1
 800aca4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acb4:	78fa      	ldrb	r2, [r7, #3]
 800acb6:	4611      	mov	r1, r2
 800acb8:	4618      	mov	r0, r3
 800acba:	f7f8 ffbc 	bl	8003c36 <HAL_PCD_EP_Close>
 800acbe:	4603      	mov	r3, r0
 800acc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 f909 	bl	800aedc <USBD_Get_USB_Status>
 800acca:	4603      	mov	r3, r0
 800accc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acce:	7bbb      	ldrb	r3, [r7, #14]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acf2:	78fa      	ldrb	r2, [r7, #3]
 800acf4:	4611      	mov	r1, r2
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7f9 f864 	bl	8003dc4 <HAL_PCD_EP_SetStall>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 f8ea 	bl	800aedc <USBD_Get_USB_Status>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	460b      	mov	r3, r1
 800ad20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad30:	78fa      	ldrb	r2, [r7, #3]
 800ad32:	4611      	mov	r1, r2
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7f9 f8a5 	bl	8003e84 <HAL_PCD_EP_ClrStall>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 f8cb 	bl	800aedc <USBD_Get_USB_Status>
 800ad46:	4603      	mov	r3, r0
 800ad48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	da0c      	bge.n	800ad8a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad76:	68f9      	ldr	r1, [r7, #12]
 800ad78:	1c5a      	adds	r2, r3, #1
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	440b      	add	r3, r1
 800ad84:	3302      	adds	r3, #2
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	e00b      	b.n	800ada2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad8a:	78fb      	ldrb	r3, [r7, #3]
 800ad8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad90:	68f9      	ldr	r1, [r7, #12]
 800ad92:	4613      	mov	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4413      	add	r3, r2
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	440b      	add	r3, r1
 800ad9c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ada0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bc80      	pop	{r7}
 800adaa:	4770      	bx	lr

0800adac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adc6:	78fa      	ldrb	r2, [r7, #3]
 800adc8:	4611      	mov	r1, r2
 800adca:	4618      	mov	r0, r3
 800adcc:	f7f8 feb1 	bl	8003b32 <HAL_PCD_SetAddress>
 800add0:	4603      	mov	r3, r0
 800add2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	4618      	mov	r0, r3
 800add8:	f000 f880 	bl	800aedc <USBD_Get_USB_Status>
 800addc:	4603      	mov	r3, r0
 800adde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b086      	sub	sp, #24
 800adee:	af00      	add	r7, sp, #0
 800adf0:	60f8      	str	r0, [r7, #12]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	461a      	mov	r2, r3
 800adf6:	460b      	mov	r3, r1
 800adf8:	72fb      	strb	r3, [r7, #11]
 800adfa:	4613      	mov	r3, r2
 800adfc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae0c:	893b      	ldrh	r3, [r7, #8]
 800ae0e:	7af9      	ldrb	r1, [r7, #11]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	f7f8 ffa0 	bl	8003d56 <HAL_PCD_EP_Transmit>
 800ae16:	4603      	mov	r3, r0
 800ae18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae1a:	7dfb      	ldrb	r3, [r7, #23]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f000 f85d 	bl	800aedc <USBD_Get_USB_Status>
 800ae22:	4603      	mov	r3, r0
 800ae24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae26:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	607a      	str	r2, [r7, #4]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	72fb      	strb	r3, [r7, #11]
 800ae40:	4613      	mov	r3, r2
 800ae42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae52:	893b      	ldrh	r3, [r7, #8]
 800ae54:	7af9      	ldrb	r1, [r7, #11]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	f7f8 ff35 	bl	8003cc6 <HAL_PCD_EP_Receive>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae60:	7dfb      	ldrb	r3, [r7, #23]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 f83a 	bl	800aedc <USBD_Get_USB_Status>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	460b      	mov	r3, r1
 800ae80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae88:	78fa      	ldrb	r2, [r7, #3]
 800ae8a:	4611      	mov	r1, r2
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7f8 ff4b 	bl	8003d28 <HAL_PCD_EP_GetRxCount>
 800ae92:	4603      	mov	r3, r0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aea4:	4b02      	ldr	r3, [pc, #8]	; (800aeb0 <USBD_static_malloc+0x14>)
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bc80      	pop	{r7}
 800aeae:	4770      	bx	lr
 800aeb0:	200013f8 	.word	0x200013f8

0800aeb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]

}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bc80      	pop	{r7}
 800aec4:	4770      	bx	lr

0800aec6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec6:	b480      	push	{r7}
 800aec8:	b083      	sub	sp, #12
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aed2:	bf00      	nop
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bc80      	pop	{r7}
 800aeda:	4770      	bx	lr

0800aedc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aeea:	79fb      	ldrb	r3, [r7, #7]
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d817      	bhi.n	800af20 <USBD_Get_USB_Status+0x44>
 800aef0:	a201      	add	r2, pc, #4	; (adr r2, 800aef8 <USBD_Get_USB_Status+0x1c>)
 800aef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef6:	bf00      	nop
 800aef8:	0800af09 	.word	0x0800af09
 800aefc:	0800af0f 	.word	0x0800af0f
 800af00:	0800af15 	.word	0x0800af15
 800af04:	0800af1b 	.word	0x0800af1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	73fb      	strb	r3, [r7, #15]
    break;
 800af0c:	e00b      	b.n	800af26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af0e:	2302      	movs	r3, #2
 800af10:	73fb      	strb	r3, [r7, #15]
    break;
 800af12:	e008      	b.n	800af26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af14:	2301      	movs	r3, #1
 800af16:	73fb      	strb	r3, [r7, #15]
    break;
 800af18:	e005      	b.n	800af26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af1a:	2302      	movs	r3, #2
 800af1c:	73fb      	strb	r3, [r7, #15]
    break;
 800af1e:	e002      	b.n	800af26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af20:	2302      	movs	r3, #2
 800af22:	73fb      	strb	r3, [r7, #15]
    break;
 800af24:	bf00      	nop
  }
  return usb_status;
 800af26:	7bfb      	ldrb	r3, [r7, #15]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bc80      	pop	{r7}
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop

0800af34 <atoi>:
 800af34:	220a      	movs	r2, #10
 800af36:	2100      	movs	r1, #0
 800af38:	f000 b87e 	b.w	800b038 <strtol>

0800af3c <_strtol_l.constprop.0>:
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af42:	4686      	mov	lr, r0
 800af44:	4690      	mov	r8, r2
 800af46:	d001      	beq.n	800af4c <_strtol_l.constprop.0+0x10>
 800af48:	2b24      	cmp	r3, #36	; 0x24
 800af4a:	d906      	bls.n	800af5a <_strtol_l.constprop.0+0x1e>
 800af4c:	f000 f8da 	bl	800b104 <__errno>
 800af50:	2316      	movs	r3, #22
 800af52:	6003      	str	r3, [r0, #0]
 800af54:	2000      	movs	r0, #0
 800af56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af5a:	460d      	mov	r5, r1
 800af5c:	4835      	ldr	r0, [pc, #212]	; (800b034 <_strtol_l.constprop.0+0xf8>)
 800af5e:	462a      	mov	r2, r5
 800af60:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af64:	5d06      	ldrb	r6, [r0, r4]
 800af66:	f016 0608 	ands.w	r6, r6, #8
 800af6a:	d1f8      	bne.n	800af5e <_strtol_l.constprop.0+0x22>
 800af6c:	2c2d      	cmp	r4, #45	; 0x2d
 800af6e:	d12e      	bne.n	800afce <_strtol_l.constprop.0+0x92>
 800af70:	2601      	movs	r6, #1
 800af72:	782c      	ldrb	r4, [r5, #0]
 800af74:	1c95      	adds	r5, r2, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d057      	beq.n	800b02a <_strtol_l.constprop.0+0xee>
 800af7a:	2b10      	cmp	r3, #16
 800af7c:	d109      	bne.n	800af92 <_strtol_l.constprop.0+0x56>
 800af7e:	2c30      	cmp	r4, #48	; 0x30
 800af80:	d107      	bne.n	800af92 <_strtol_l.constprop.0+0x56>
 800af82:	782a      	ldrb	r2, [r5, #0]
 800af84:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800af88:	2a58      	cmp	r2, #88	; 0x58
 800af8a:	d149      	bne.n	800b020 <_strtol_l.constprop.0+0xe4>
 800af8c:	2310      	movs	r3, #16
 800af8e:	786c      	ldrb	r4, [r5, #1]
 800af90:	3502      	adds	r5, #2
 800af92:	2200      	movs	r2, #0
 800af94:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800af98:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af9c:	fbbc f9f3 	udiv	r9, ip, r3
 800afa0:	4610      	mov	r0, r2
 800afa2:	fb03 ca19 	mls	sl, r3, r9, ip
 800afa6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800afaa:	2f09      	cmp	r7, #9
 800afac:	d814      	bhi.n	800afd8 <_strtol_l.constprop.0+0x9c>
 800afae:	463c      	mov	r4, r7
 800afb0:	42a3      	cmp	r3, r4
 800afb2:	dd20      	ble.n	800aff6 <_strtol_l.constprop.0+0xba>
 800afb4:	1c57      	adds	r7, r2, #1
 800afb6:	d007      	beq.n	800afc8 <_strtol_l.constprop.0+0x8c>
 800afb8:	4581      	cmp	r9, r0
 800afba:	d319      	bcc.n	800aff0 <_strtol_l.constprop.0+0xb4>
 800afbc:	d101      	bne.n	800afc2 <_strtol_l.constprop.0+0x86>
 800afbe:	45a2      	cmp	sl, r4
 800afc0:	db16      	blt.n	800aff0 <_strtol_l.constprop.0+0xb4>
 800afc2:	2201      	movs	r2, #1
 800afc4:	fb00 4003 	mla	r0, r0, r3, r4
 800afc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afcc:	e7eb      	b.n	800afa6 <_strtol_l.constprop.0+0x6a>
 800afce:	2c2b      	cmp	r4, #43	; 0x2b
 800afd0:	bf04      	itt	eq
 800afd2:	782c      	ldrbeq	r4, [r5, #0]
 800afd4:	1c95      	addeq	r5, r2, #2
 800afd6:	e7ce      	b.n	800af76 <_strtol_l.constprop.0+0x3a>
 800afd8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800afdc:	2f19      	cmp	r7, #25
 800afde:	d801      	bhi.n	800afe4 <_strtol_l.constprop.0+0xa8>
 800afe0:	3c37      	subs	r4, #55	; 0x37
 800afe2:	e7e5      	b.n	800afb0 <_strtol_l.constprop.0+0x74>
 800afe4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800afe8:	2f19      	cmp	r7, #25
 800afea:	d804      	bhi.n	800aff6 <_strtol_l.constprop.0+0xba>
 800afec:	3c57      	subs	r4, #87	; 0x57
 800afee:	e7df      	b.n	800afb0 <_strtol_l.constprop.0+0x74>
 800aff0:	f04f 32ff 	mov.w	r2, #4294967295
 800aff4:	e7e8      	b.n	800afc8 <_strtol_l.constprop.0+0x8c>
 800aff6:	1c53      	adds	r3, r2, #1
 800aff8:	d108      	bne.n	800b00c <_strtol_l.constprop.0+0xd0>
 800affa:	2322      	movs	r3, #34	; 0x22
 800affc:	4660      	mov	r0, ip
 800affe:	f8ce 3000 	str.w	r3, [lr]
 800b002:	f1b8 0f00 	cmp.w	r8, #0
 800b006:	d0a6      	beq.n	800af56 <_strtol_l.constprop.0+0x1a>
 800b008:	1e69      	subs	r1, r5, #1
 800b00a:	e006      	b.n	800b01a <_strtol_l.constprop.0+0xde>
 800b00c:	b106      	cbz	r6, 800b010 <_strtol_l.constprop.0+0xd4>
 800b00e:	4240      	negs	r0, r0
 800b010:	f1b8 0f00 	cmp.w	r8, #0
 800b014:	d09f      	beq.n	800af56 <_strtol_l.constprop.0+0x1a>
 800b016:	2a00      	cmp	r2, #0
 800b018:	d1f6      	bne.n	800b008 <_strtol_l.constprop.0+0xcc>
 800b01a:	f8c8 1000 	str.w	r1, [r8]
 800b01e:	e79a      	b.n	800af56 <_strtol_l.constprop.0+0x1a>
 800b020:	2430      	movs	r4, #48	; 0x30
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1b5      	bne.n	800af92 <_strtol_l.constprop.0+0x56>
 800b026:	2308      	movs	r3, #8
 800b028:	e7b3      	b.n	800af92 <_strtol_l.constprop.0+0x56>
 800b02a:	2c30      	cmp	r4, #48	; 0x30
 800b02c:	d0a9      	beq.n	800af82 <_strtol_l.constprop.0+0x46>
 800b02e:	230a      	movs	r3, #10
 800b030:	e7af      	b.n	800af92 <_strtol_l.constprop.0+0x56>
 800b032:	bf00      	nop
 800b034:	0800bc67 	.word	0x0800bc67

0800b038 <strtol>:
 800b038:	4613      	mov	r3, r2
 800b03a:	460a      	mov	r2, r1
 800b03c:	4601      	mov	r1, r0
 800b03e:	4802      	ldr	r0, [pc, #8]	; (800b048 <strtol+0x10>)
 800b040:	6800      	ldr	r0, [r0, #0]
 800b042:	f7ff bf7b 	b.w	800af3c <_strtol_l.constprop.0>
 800b046:	bf00      	nop
 800b048:	200001e8 	.word	0x200001e8

0800b04c <sniprintf>:
 800b04c:	b40c      	push	{r2, r3}
 800b04e:	b530      	push	{r4, r5, lr}
 800b050:	4b17      	ldr	r3, [pc, #92]	; (800b0b0 <sniprintf+0x64>)
 800b052:	1e0c      	subs	r4, r1, #0
 800b054:	681d      	ldr	r5, [r3, #0]
 800b056:	b09d      	sub	sp, #116	; 0x74
 800b058:	da08      	bge.n	800b06c <sniprintf+0x20>
 800b05a:	238b      	movs	r3, #139	; 0x8b
 800b05c:	f04f 30ff 	mov.w	r0, #4294967295
 800b060:	602b      	str	r3, [r5, #0]
 800b062:	b01d      	add	sp, #116	; 0x74
 800b064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b068:	b002      	add	sp, #8
 800b06a:	4770      	bx	lr
 800b06c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b070:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b074:	bf0c      	ite	eq
 800b076:	4623      	moveq	r3, r4
 800b078:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b07c:	9304      	str	r3, [sp, #16]
 800b07e:	9307      	str	r3, [sp, #28]
 800b080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b084:	9002      	str	r0, [sp, #8]
 800b086:	9006      	str	r0, [sp, #24]
 800b088:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b08c:	4628      	mov	r0, r5
 800b08e:	ab21      	add	r3, sp, #132	; 0x84
 800b090:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b092:	a902      	add	r1, sp, #8
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	f000 f9bd 	bl	800b414 <_svfiprintf_r>
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	bfbc      	itt	lt
 800b09e:	238b      	movlt	r3, #139	; 0x8b
 800b0a0:	602b      	strlt	r3, [r5, #0]
 800b0a2:	2c00      	cmp	r4, #0
 800b0a4:	d0dd      	beq.n	800b062 <sniprintf+0x16>
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	9b02      	ldr	r3, [sp, #8]
 800b0aa:	701a      	strb	r2, [r3, #0]
 800b0ac:	e7d9      	b.n	800b062 <sniprintf+0x16>
 800b0ae:	bf00      	nop
 800b0b0:	200001e8 	.word	0x200001e8

0800b0b4 <siprintf>:
 800b0b4:	b40e      	push	{r1, r2, r3}
 800b0b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0ba:	b500      	push	{lr}
 800b0bc:	b09c      	sub	sp, #112	; 0x70
 800b0be:	ab1d      	add	r3, sp, #116	; 0x74
 800b0c0:	9002      	str	r0, [sp, #8]
 800b0c2:	9006      	str	r0, [sp, #24]
 800b0c4:	9107      	str	r1, [sp, #28]
 800b0c6:	9104      	str	r1, [sp, #16]
 800b0c8:	4808      	ldr	r0, [pc, #32]	; (800b0ec <siprintf+0x38>)
 800b0ca:	4909      	ldr	r1, [pc, #36]	; (800b0f0 <siprintf+0x3c>)
 800b0cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d0:	9105      	str	r1, [sp, #20]
 800b0d2:	6800      	ldr	r0, [r0, #0]
 800b0d4:	a902      	add	r1, sp, #8
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	f000 f99c 	bl	800b414 <_svfiprintf_r>
 800b0dc:	2200      	movs	r2, #0
 800b0de:	9b02      	ldr	r3, [sp, #8]
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	b01c      	add	sp, #112	; 0x70
 800b0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0e8:	b003      	add	sp, #12
 800b0ea:	4770      	bx	lr
 800b0ec:	200001e8 	.word	0x200001e8
 800b0f0:	ffff0208 	.word	0xffff0208

0800b0f4 <memset>:
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	4402      	add	r2, r0
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d100      	bne.n	800b0fe <memset+0xa>
 800b0fc:	4770      	bx	lr
 800b0fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b102:	e7f9      	b.n	800b0f8 <memset+0x4>

0800b104 <__errno>:
 800b104:	4b01      	ldr	r3, [pc, #4]	; (800b10c <__errno+0x8>)
 800b106:	6818      	ldr	r0, [r3, #0]
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	200001e8 	.word	0x200001e8

0800b110 <__libc_init_array>:
 800b110:	b570      	push	{r4, r5, r6, lr}
 800b112:	2600      	movs	r6, #0
 800b114:	4d0c      	ldr	r5, [pc, #48]	; (800b148 <__libc_init_array+0x38>)
 800b116:	4c0d      	ldr	r4, [pc, #52]	; (800b14c <__libc_init_array+0x3c>)
 800b118:	1b64      	subs	r4, r4, r5
 800b11a:	10a4      	asrs	r4, r4, #2
 800b11c:	42a6      	cmp	r6, r4
 800b11e:	d109      	bne.n	800b134 <__libc_init_array+0x24>
 800b120:	f000 fc7a 	bl	800ba18 <_init>
 800b124:	2600      	movs	r6, #0
 800b126:	4d0a      	ldr	r5, [pc, #40]	; (800b150 <__libc_init_array+0x40>)
 800b128:	4c0a      	ldr	r4, [pc, #40]	; (800b154 <__libc_init_array+0x44>)
 800b12a:	1b64      	subs	r4, r4, r5
 800b12c:	10a4      	asrs	r4, r4, #2
 800b12e:	42a6      	cmp	r6, r4
 800b130:	d105      	bne.n	800b13e <__libc_init_array+0x2e>
 800b132:	bd70      	pop	{r4, r5, r6, pc}
 800b134:	f855 3b04 	ldr.w	r3, [r5], #4
 800b138:	4798      	blx	r3
 800b13a:	3601      	adds	r6, #1
 800b13c:	e7ee      	b.n	800b11c <__libc_init_array+0xc>
 800b13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b142:	4798      	blx	r3
 800b144:	3601      	adds	r6, #1
 800b146:	e7f2      	b.n	800b12e <__libc_init_array+0x1e>
 800b148:	0800bd9c 	.word	0x0800bd9c
 800b14c:	0800bd9c 	.word	0x0800bd9c
 800b150:	0800bd9c 	.word	0x0800bd9c
 800b154:	0800bda0 	.word	0x0800bda0

0800b158 <__retarget_lock_acquire_recursive>:
 800b158:	4770      	bx	lr

0800b15a <__retarget_lock_release_recursive>:
 800b15a:	4770      	bx	lr

0800b15c <memcpy>:
 800b15c:	440a      	add	r2, r1
 800b15e:	4291      	cmp	r1, r2
 800b160:	f100 33ff 	add.w	r3, r0, #4294967295
 800b164:	d100      	bne.n	800b168 <memcpy+0xc>
 800b166:	4770      	bx	lr
 800b168:	b510      	push	{r4, lr}
 800b16a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b16e:	4291      	cmp	r1, r2
 800b170:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b174:	d1f9      	bne.n	800b16a <memcpy+0xe>
 800b176:	bd10      	pop	{r4, pc}

0800b178 <_free_r>:
 800b178:	b538      	push	{r3, r4, r5, lr}
 800b17a:	4605      	mov	r5, r0
 800b17c:	2900      	cmp	r1, #0
 800b17e:	d040      	beq.n	800b202 <_free_r+0x8a>
 800b180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b184:	1f0c      	subs	r4, r1, #4
 800b186:	2b00      	cmp	r3, #0
 800b188:	bfb8      	it	lt
 800b18a:	18e4      	addlt	r4, r4, r3
 800b18c:	f000 f8dc 	bl	800b348 <__malloc_lock>
 800b190:	4a1c      	ldr	r2, [pc, #112]	; (800b204 <_free_r+0x8c>)
 800b192:	6813      	ldr	r3, [r2, #0]
 800b194:	b933      	cbnz	r3, 800b1a4 <_free_r+0x2c>
 800b196:	6063      	str	r3, [r4, #4]
 800b198:	6014      	str	r4, [r2, #0]
 800b19a:	4628      	mov	r0, r5
 800b19c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1a0:	f000 b8d8 	b.w	800b354 <__malloc_unlock>
 800b1a4:	42a3      	cmp	r3, r4
 800b1a6:	d908      	bls.n	800b1ba <_free_r+0x42>
 800b1a8:	6820      	ldr	r0, [r4, #0]
 800b1aa:	1821      	adds	r1, r4, r0
 800b1ac:	428b      	cmp	r3, r1
 800b1ae:	bf01      	itttt	eq
 800b1b0:	6819      	ldreq	r1, [r3, #0]
 800b1b2:	685b      	ldreq	r3, [r3, #4]
 800b1b4:	1809      	addeq	r1, r1, r0
 800b1b6:	6021      	streq	r1, [r4, #0]
 800b1b8:	e7ed      	b.n	800b196 <_free_r+0x1e>
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	b10b      	cbz	r3, 800b1c4 <_free_r+0x4c>
 800b1c0:	42a3      	cmp	r3, r4
 800b1c2:	d9fa      	bls.n	800b1ba <_free_r+0x42>
 800b1c4:	6811      	ldr	r1, [r2, #0]
 800b1c6:	1850      	adds	r0, r2, r1
 800b1c8:	42a0      	cmp	r0, r4
 800b1ca:	d10b      	bne.n	800b1e4 <_free_r+0x6c>
 800b1cc:	6820      	ldr	r0, [r4, #0]
 800b1ce:	4401      	add	r1, r0
 800b1d0:	1850      	adds	r0, r2, r1
 800b1d2:	4283      	cmp	r3, r0
 800b1d4:	6011      	str	r1, [r2, #0]
 800b1d6:	d1e0      	bne.n	800b19a <_free_r+0x22>
 800b1d8:	6818      	ldr	r0, [r3, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	4408      	add	r0, r1
 800b1de:	6010      	str	r0, [r2, #0]
 800b1e0:	6053      	str	r3, [r2, #4]
 800b1e2:	e7da      	b.n	800b19a <_free_r+0x22>
 800b1e4:	d902      	bls.n	800b1ec <_free_r+0x74>
 800b1e6:	230c      	movs	r3, #12
 800b1e8:	602b      	str	r3, [r5, #0]
 800b1ea:	e7d6      	b.n	800b19a <_free_r+0x22>
 800b1ec:	6820      	ldr	r0, [r4, #0]
 800b1ee:	1821      	adds	r1, r4, r0
 800b1f0:	428b      	cmp	r3, r1
 800b1f2:	bf01      	itttt	eq
 800b1f4:	6819      	ldreq	r1, [r3, #0]
 800b1f6:	685b      	ldreq	r3, [r3, #4]
 800b1f8:	1809      	addeq	r1, r1, r0
 800b1fa:	6021      	streq	r1, [r4, #0]
 800b1fc:	6063      	str	r3, [r4, #4]
 800b1fe:	6054      	str	r4, [r2, #4]
 800b200:	e7cb      	b.n	800b19a <_free_r+0x22>
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	20001758 	.word	0x20001758

0800b208 <sbrk_aligned>:
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	4e0e      	ldr	r6, [pc, #56]	; (800b244 <sbrk_aligned+0x3c>)
 800b20c:	460c      	mov	r4, r1
 800b20e:	6831      	ldr	r1, [r6, #0]
 800b210:	4605      	mov	r5, r0
 800b212:	b911      	cbnz	r1, 800b21a <sbrk_aligned+0x12>
 800b214:	f000 fbaa 	bl	800b96c <_sbrk_r>
 800b218:	6030      	str	r0, [r6, #0]
 800b21a:	4621      	mov	r1, r4
 800b21c:	4628      	mov	r0, r5
 800b21e:	f000 fba5 	bl	800b96c <_sbrk_r>
 800b222:	1c43      	adds	r3, r0, #1
 800b224:	d00a      	beq.n	800b23c <sbrk_aligned+0x34>
 800b226:	1cc4      	adds	r4, r0, #3
 800b228:	f024 0403 	bic.w	r4, r4, #3
 800b22c:	42a0      	cmp	r0, r4
 800b22e:	d007      	beq.n	800b240 <sbrk_aligned+0x38>
 800b230:	1a21      	subs	r1, r4, r0
 800b232:	4628      	mov	r0, r5
 800b234:	f000 fb9a 	bl	800b96c <_sbrk_r>
 800b238:	3001      	adds	r0, #1
 800b23a:	d101      	bne.n	800b240 <sbrk_aligned+0x38>
 800b23c:	f04f 34ff 	mov.w	r4, #4294967295
 800b240:	4620      	mov	r0, r4
 800b242:	bd70      	pop	{r4, r5, r6, pc}
 800b244:	2000175c 	.word	0x2000175c

0800b248 <_malloc_r>:
 800b248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b24c:	1ccd      	adds	r5, r1, #3
 800b24e:	f025 0503 	bic.w	r5, r5, #3
 800b252:	3508      	adds	r5, #8
 800b254:	2d0c      	cmp	r5, #12
 800b256:	bf38      	it	cc
 800b258:	250c      	movcc	r5, #12
 800b25a:	2d00      	cmp	r5, #0
 800b25c:	4607      	mov	r7, r0
 800b25e:	db01      	blt.n	800b264 <_malloc_r+0x1c>
 800b260:	42a9      	cmp	r1, r5
 800b262:	d905      	bls.n	800b270 <_malloc_r+0x28>
 800b264:	230c      	movs	r3, #12
 800b266:	2600      	movs	r6, #0
 800b268:	603b      	str	r3, [r7, #0]
 800b26a:	4630      	mov	r0, r6
 800b26c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b270:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b344 <_malloc_r+0xfc>
 800b274:	f000 f868 	bl	800b348 <__malloc_lock>
 800b278:	f8d8 3000 	ldr.w	r3, [r8]
 800b27c:	461c      	mov	r4, r3
 800b27e:	bb5c      	cbnz	r4, 800b2d8 <_malloc_r+0x90>
 800b280:	4629      	mov	r1, r5
 800b282:	4638      	mov	r0, r7
 800b284:	f7ff ffc0 	bl	800b208 <sbrk_aligned>
 800b288:	1c43      	adds	r3, r0, #1
 800b28a:	4604      	mov	r4, r0
 800b28c:	d155      	bne.n	800b33a <_malloc_r+0xf2>
 800b28e:	f8d8 4000 	ldr.w	r4, [r8]
 800b292:	4626      	mov	r6, r4
 800b294:	2e00      	cmp	r6, #0
 800b296:	d145      	bne.n	800b324 <_malloc_r+0xdc>
 800b298:	2c00      	cmp	r4, #0
 800b29a:	d048      	beq.n	800b32e <_malloc_r+0xe6>
 800b29c:	6823      	ldr	r3, [r4, #0]
 800b29e:	4631      	mov	r1, r6
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	eb04 0903 	add.w	r9, r4, r3
 800b2a6:	f000 fb61 	bl	800b96c <_sbrk_r>
 800b2aa:	4581      	cmp	r9, r0
 800b2ac:	d13f      	bne.n	800b32e <_malloc_r+0xe6>
 800b2ae:	6821      	ldr	r1, [r4, #0]
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	1a6d      	subs	r5, r5, r1
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	f7ff ffa7 	bl	800b208 <sbrk_aligned>
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	d037      	beq.n	800b32e <_malloc_r+0xe6>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	442b      	add	r3, r5
 800b2c2:	6023      	str	r3, [r4, #0]
 800b2c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d038      	beq.n	800b33e <_malloc_r+0xf6>
 800b2cc:	685a      	ldr	r2, [r3, #4]
 800b2ce:	42a2      	cmp	r2, r4
 800b2d0:	d12b      	bne.n	800b32a <_malloc_r+0xe2>
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	605a      	str	r2, [r3, #4]
 800b2d6:	e00f      	b.n	800b2f8 <_malloc_r+0xb0>
 800b2d8:	6822      	ldr	r2, [r4, #0]
 800b2da:	1b52      	subs	r2, r2, r5
 800b2dc:	d41f      	bmi.n	800b31e <_malloc_r+0xd6>
 800b2de:	2a0b      	cmp	r2, #11
 800b2e0:	d917      	bls.n	800b312 <_malloc_r+0xca>
 800b2e2:	1961      	adds	r1, r4, r5
 800b2e4:	42a3      	cmp	r3, r4
 800b2e6:	6025      	str	r5, [r4, #0]
 800b2e8:	bf18      	it	ne
 800b2ea:	6059      	strne	r1, [r3, #4]
 800b2ec:	6863      	ldr	r3, [r4, #4]
 800b2ee:	bf08      	it	eq
 800b2f0:	f8c8 1000 	streq.w	r1, [r8]
 800b2f4:	5162      	str	r2, [r4, r5]
 800b2f6:	604b      	str	r3, [r1, #4]
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	f104 060b 	add.w	r6, r4, #11
 800b2fe:	f000 f829 	bl	800b354 <__malloc_unlock>
 800b302:	f026 0607 	bic.w	r6, r6, #7
 800b306:	1d23      	adds	r3, r4, #4
 800b308:	1af2      	subs	r2, r6, r3
 800b30a:	d0ae      	beq.n	800b26a <_malloc_r+0x22>
 800b30c:	1b9b      	subs	r3, r3, r6
 800b30e:	50a3      	str	r3, [r4, r2]
 800b310:	e7ab      	b.n	800b26a <_malloc_r+0x22>
 800b312:	42a3      	cmp	r3, r4
 800b314:	6862      	ldr	r2, [r4, #4]
 800b316:	d1dd      	bne.n	800b2d4 <_malloc_r+0x8c>
 800b318:	f8c8 2000 	str.w	r2, [r8]
 800b31c:	e7ec      	b.n	800b2f8 <_malloc_r+0xb0>
 800b31e:	4623      	mov	r3, r4
 800b320:	6864      	ldr	r4, [r4, #4]
 800b322:	e7ac      	b.n	800b27e <_malloc_r+0x36>
 800b324:	4634      	mov	r4, r6
 800b326:	6876      	ldr	r6, [r6, #4]
 800b328:	e7b4      	b.n	800b294 <_malloc_r+0x4c>
 800b32a:	4613      	mov	r3, r2
 800b32c:	e7cc      	b.n	800b2c8 <_malloc_r+0x80>
 800b32e:	230c      	movs	r3, #12
 800b330:	4638      	mov	r0, r7
 800b332:	603b      	str	r3, [r7, #0]
 800b334:	f000 f80e 	bl	800b354 <__malloc_unlock>
 800b338:	e797      	b.n	800b26a <_malloc_r+0x22>
 800b33a:	6025      	str	r5, [r4, #0]
 800b33c:	e7dc      	b.n	800b2f8 <_malloc_r+0xb0>
 800b33e:	605b      	str	r3, [r3, #4]
 800b340:	deff      	udf	#255	; 0xff
 800b342:	bf00      	nop
 800b344:	20001758 	.word	0x20001758

0800b348 <__malloc_lock>:
 800b348:	4801      	ldr	r0, [pc, #4]	; (800b350 <__malloc_lock+0x8>)
 800b34a:	f7ff bf05 	b.w	800b158 <__retarget_lock_acquire_recursive>
 800b34e:	bf00      	nop
 800b350:	20001754 	.word	0x20001754

0800b354 <__malloc_unlock>:
 800b354:	4801      	ldr	r0, [pc, #4]	; (800b35c <__malloc_unlock+0x8>)
 800b356:	f7ff bf00 	b.w	800b15a <__retarget_lock_release_recursive>
 800b35a:	bf00      	nop
 800b35c:	20001754 	.word	0x20001754

0800b360 <__ssputs_r>:
 800b360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b364:	461f      	mov	r7, r3
 800b366:	688e      	ldr	r6, [r1, #8]
 800b368:	4682      	mov	sl, r0
 800b36a:	42be      	cmp	r6, r7
 800b36c:	460c      	mov	r4, r1
 800b36e:	4690      	mov	r8, r2
 800b370:	680b      	ldr	r3, [r1, #0]
 800b372:	d82c      	bhi.n	800b3ce <__ssputs_r+0x6e>
 800b374:	898a      	ldrh	r2, [r1, #12]
 800b376:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b37a:	d026      	beq.n	800b3ca <__ssputs_r+0x6a>
 800b37c:	6965      	ldr	r5, [r4, #20]
 800b37e:	6909      	ldr	r1, [r1, #16]
 800b380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b384:	eba3 0901 	sub.w	r9, r3, r1
 800b388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b38c:	1c7b      	adds	r3, r7, #1
 800b38e:	444b      	add	r3, r9
 800b390:	106d      	asrs	r5, r5, #1
 800b392:	429d      	cmp	r5, r3
 800b394:	bf38      	it	cc
 800b396:	461d      	movcc	r5, r3
 800b398:	0553      	lsls	r3, r2, #21
 800b39a:	d527      	bpl.n	800b3ec <__ssputs_r+0x8c>
 800b39c:	4629      	mov	r1, r5
 800b39e:	f7ff ff53 	bl	800b248 <_malloc_r>
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	b360      	cbz	r0, 800b400 <__ssputs_r+0xa0>
 800b3a6:	464a      	mov	r2, r9
 800b3a8:	6921      	ldr	r1, [r4, #16]
 800b3aa:	f7ff fed7 	bl	800b15c <memcpy>
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3b8:	81a3      	strh	r3, [r4, #12]
 800b3ba:	6126      	str	r6, [r4, #16]
 800b3bc:	444e      	add	r6, r9
 800b3be:	6026      	str	r6, [r4, #0]
 800b3c0:	463e      	mov	r6, r7
 800b3c2:	6165      	str	r5, [r4, #20]
 800b3c4:	eba5 0509 	sub.w	r5, r5, r9
 800b3c8:	60a5      	str	r5, [r4, #8]
 800b3ca:	42be      	cmp	r6, r7
 800b3cc:	d900      	bls.n	800b3d0 <__ssputs_r+0x70>
 800b3ce:	463e      	mov	r6, r7
 800b3d0:	4632      	mov	r2, r6
 800b3d2:	4641      	mov	r1, r8
 800b3d4:	6820      	ldr	r0, [r4, #0]
 800b3d6:	f000 faaf 	bl	800b938 <memmove>
 800b3da:	2000      	movs	r0, #0
 800b3dc:	68a3      	ldr	r3, [r4, #8]
 800b3de:	1b9b      	subs	r3, r3, r6
 800b3e0:	60a3      	str	r3, [r4, #8]
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	4433      	add	r3, r6
 800b3e6:	6023      	str	r3, [r4, #0]
 800b3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ec:	462a      	mov	r2, r5
 800b3ee:	f000 fadb 	bl	800b9a8 <_realloc_r>
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d1e0      	bne.n	800b3ba <__ssputs_r+0x5a>
 800b3f8:	4650      	mov	r0, sl
 800b3fa:	6921      	ldr	r1, [r4, #16]
 800b3fc:	f7ff febc 	bl	800b178 <_free_r>
 800b400:	230c      	movs	r3, #12
 800b402:	f8ca 3000 	str.w	r3, [sl]
 800b406:	89a3      	ldrh	r3, [r4, #12]
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b410:	81a3      	strh	r3, [r4, #12]
 800b412:	e7e9      	b.n	800b3e8 <__ssputs_r+0x88>

0800b414 <_svfiprintf_r>:
 800b414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b418:	4698      	mov	r8, r3
 800b41a:	898b      	ldrh	r3, [r1, #12]
 800b41c:	4607      	mov	r7, r0
 800b41e:	061b      	lsls	r3, r3, #24
 800b420:	460d      	mov	r5, r1
 800b422:	4614      	mov	r4, r2
 800b424:	b09d      	sub	sp, #116	; 0x74
 800b426:	d50e      	bpl.n	800b446 <_svfiprintf_r+0x32>
 800b428:	690b      	ldr	r3, [r1, #16]
 800b42a:	b963      	cbnz	r3, 800b446 <_svfiprintf_r+0x32>
 800b42c:	2140      	movs	r1, #64	; 0x40
 800b42e:	f7ff ff0b 	bl	800b248 <_malloc_r>
 800b432:	6028      	str	r0, [r5, #0]
 800b434:	6128      	str	r0, [r5, #16]
 800b436:	b920      	cbnz	r0, 800b442 <_svfiprintf_r+0x2e>
 800b438:	230c      	movs	r3, #12
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	e0d0      	b.n	800b5e4 <_svfiprintf_r+0x1d0>
 800b442:	2340      	movs	r3, #64	; 0x40
 800b444:	616b      	str	r3, [r5, #20]
 800b446:	2300      	movs	r3, #0
 800b448:	9309      	str	r3, [sp, #36]	; 0x24
 800b44a:	2320      	movs	r3, #32
 800b44c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b450:	2330      	movs	r3, #48	; 0x30
 800b452:	f04f 0901 	mov.w	r9, #1
 800b456:	f8cd 800c 	str.w	r8, [sp, #12]
 800b45a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b5fc <_svfiprintf_r+0x1e8>
 800b45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b462:	4623      	mov	r3, r4
 800b464:	469a      	mov	sl, r3
 800b466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b46a:	b10a      	cbz	r2, 800b470 <_svfiprintf_r+0x5c>
 800b46c:	2a25      	cmp	r2, #37	; 0x25
 800b46e:	d1f9      	bne.n	800b464 <_svfiprintf_r+0x50>
 800b470:	ebba 0b04 	subs.w	fp, sl, r4
 800b474:	d00b      	beq.n	800b48e <_svfiprintf_r+0x7a>
 800b476:	465b      	mov	r3, fp
 800b478:	4622      	mov	r2, r4
 800b47a:	4629      	mov	r1, r5
 800b47c:	4638      	mov	r0, r7
 800b47e:	f7ff ff6f 	bl	800b360 <__ssputs_r>
 800b482:	3001      	adds	r0, #1
 800b484:	f000 80a9 	beq.w	800b5da <_svfiprintf_r+0x1c6>
 800b488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b48a:	445a      	add	r2, fp
 800b48c:	9209      	str	r2, [sp, #36]	; 0x24
 800b48e:	f89a 3000 	ldrb.w	r3, [sl]
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 80a1 	beq.w	800b5da <_svfiprintf_r+0x1c6>
 800b498:	2300      	movs	r3, #0
 800b49a:	f04f 32ff 	mov.w	r2, #4294967295
 800b49e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a2:	f10a 0a01 	add.w	sl, sl, #1
 800b4a6:	9304      	str	r3, [sp, #16]
 800b4a8:	9307      	str	r3, [sp, #28]
 800b4aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4ae:	931a      	str	r3, [sp, #104]	; 0x68
 800b4b0:	4654      	mov	r4, sl
 800b4b2:	2205      	movs	r2, #5
 800b4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b8:	4850      	ldr	r0, [pc, #320]	; (800b5fc <_svfiprintf_r+0x1e8>)
 800b4ba:	f000 fa67 	bl	800b98c <memchr>
 800b4be:	9a04      	ldr	r2, [sp, #16]
 800b4c0:	b9d8      	cbnz	r0, 800b4fa <_svfiprintf_r+0xe6>
 800b4c2:	06d0      	lsls	r0, r2, #27
 800b4c4:	bf44      	itt	mi
 800b4c6:	2320      	movmi	r3, #32
 800b4c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4cc:	0711      	lsls	r1, r2, #28
 800b4ce:	bf44      	itt	mi
 800b4d0:	232b      	movmi	r3, #43	; 0x2b
 800b4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4da:	2b2a      	cmp	r3, #42	; 0x2a
 800b4dc:	d015      	beq.n	800b50a <_svfiprintf_r+0xf6>
 800b4de:	4654      	mov	r4, sl
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	f04f 0c0a 	mov.w	ip, #10
 800b4e6:	9a07      	ldr	r2, [sp, #28]
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ee:	3b30      	subs	r3, #48	; 0x30
 800b4f0:	2b09      	cmp	r3, #9
 800b4f2:	d94d      	bls.n	800b590 <_svfiprintf_r+0x17c>
 800b4f4:	b1b0      	cbz	r0, 800b524 <_svfiprintf_r+0x110>
 800b4f6:	9207      	str	r2, [sp, #28]
 800b4f8:	e014      	b.n	800b524 <_svfiprintf_r+0x110>
 800b4fa:	eba0 0308 	sub.w	r3, r0, r8
 800b4fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b502:	4313      	orrs	r3, r2
 800b504:	46a2      	mov	sl, r4
 800b506:	9304      	str	r3, [sp, #16]
 800b508:	e7d2      	b.n	800b4b0 <_svfiprintf_r+0x9c>
 800b50a:	9b03      	ldr	r3, [sp, #12]
 800b50c:	1d19      	adds	r1, r3, #4
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	9103      	str	r1, [sp, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	bfbb      	ittet	lt
 800b516:	425b      	neglt	r3, r3
 800b518:	f042 0202 	orrlt.w	r2, r2, #2
 800b51c:	9307      	strge	r3, [sp, #28]
 800b51e:	9307      	strlt	r3, [sp, #28]
 800b520:	bfb8      	it	lt
 800b522:	9204      	strlt	r2, [sp, #16]
 800b524:	7823      	ldrb	r3, [r4, #0]
 800b526:	2b2e      	cmp	r3, #46	; 0x2e
 800b528:	d10c      	bne.n	800b544 <_svfiprintf_r+0x130>
 800b52a:	7863      	ldrb	r3, [r4, #1]
 800b52c:	2b2a      	cmp	r3, #42	; 0x2a
 800b52e:	d134      	bne.n	800b59a <_svfiprintf_r+0x186>
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	3402      	adds	r4, #2
 800b534:	1d1a      	adds	r2, r3, #4
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	9203      	str	r2, [sp, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	bfb8      	it	lt
 800b53e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b542:	9305      	str	r3, [sp, #20]
 800b544:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b600 <_svfiprintf_r+0x1ec>
 800b548:	2203      	movs	r2, #3
 800b54a:	4650      	mov	r0, sl
 800b54c:	7821      	ldrb	r1, [r4, #0]
 800b54e:	f000 fa1d 	bl	800b98c <memchr>
 800b552:	b138      	cbz	r0, 800b564 <_svfiprintf_r+0x150>
 800b554:	2240      	movs	r2, #64	; 0x40
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	eba0 000a 	sub.w	r0, r0, sl
 800b55c:	4082      	lsls	r2, r0
 800b55e:	4313      	orrs	r3, r2
 800b560:	3401      	adds	r4, #1
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b568:	2206      	movs	r2, #6
 800b56a:	4826      	ldr	r0, [pc, #152]	; (800b604 <_svfiprintf_r+0x1f0>)
 800b56c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b570:	f000 fa0c 	bl	800b98c <memchr>
 800b574:	2800      	cmp	r0, #0
 800b576:	d038      	beq.n	800b5ea <_svfiprintf_r+0x1d6>
 800b578:	4b23      	ldr	r3, [pc, #140]	; (800b608 <_svfiprintf_r+0x1f4>)
 800b57a:	bb1b      	cbnz	r3, 800b5c4 <_svfiprintf_r+0x1b0>
 800b57c:	9b03      	ldr	r3, [sp, #12]
 800b57e:	3307      	adds	r3, #7
 800b580:	f023 0307 	bic.w	r3, r3, #7
 800b584:	3308      	adds	r3, #8
 800b586:	9303      	str	r3, [sp, #12]
 800b588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58a:	4433      	add	r3, r6
 800b58c:	9309      	str	r3, [sp, #36]	; 0x24
 800b58e:	e768      	b.n	800b462 <_svfiprintf_r+0x4e>
 800b590:	460c      	mov	r4, r1
 800b592:	2001      	movs	r0, #1
 800b594:	fb0c 3202 	mla	r2, ip, r2, r3
 800b598:	e7a6      	b.n	800b4e8 <_svfiprintf_r+0xd4>
 800b59a:	2300      	movs	r3, #0
 800b59c:	f04f 0c0a 	mov.w	ip, #10
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	3401      	adds	r4, #1
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ac:	3a30      	subs	r2, #48	; 0x30
 800b5ae:	2a09      	cmp	r2, #9
 800b5b0:	d903      	bls.n	800b5ba <_svfiprintf_r+0x1a6>
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d0c6      	beq.n	800b544 <_svfiprintf_r+0x130>
 800b5b6:	9105      	str	r1, [sp, #20]
 800b5b8:	e7c4      	b.n	800b544 <_svfiprintf_r+0x130>
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	2301      	movs	r3, #1
 800b5be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c2:	e7f0      	b.n	800b5a6 <_svfiprintf_r+0x192>
 800b5c4:	ab03      	add	r3, sp, #12
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	462a      	mov	r2, r5
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	4b0f      	ldr	r3, [pc, #60]	; (800b60c <_svfiprintf_r+0x1f8>)
 800b5ce:	a904      	add	r1, sp, #16
 800b5d0:	f3af 8000 	nop.w
 800b5d4:	1c42      	adds	r2, r0, #1
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	d1d6      	bne.n	800b588 <_svfiprintf_r+0x174>
 800b5da:	89ab      	ldrh	r3, [r5, #12]
 800b5dc:	065b      	lsls	r3, r3, #25
 800b5de:	f53f af2d 	bmi.w	800b43c <_svfiprintf_r+0x28>
 800b5e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5e4:	b01d      	add	sp, #116	; 0x74
 800b5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ea:	ab03      	add	r3, sp, #12
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	4b06      	ldr	r3, [pc, #24]	; (800b60c <_svfiprintf_r+0x1f8>)
 800b5f4:	a904      	add	r1, sp, #16
 800b5f6:	f000 f87d 	bl	800b6f4 <_printf_i>
 800b5fa:	e7eb      	b.n	800b5d4 <_svfiprintf_r+0x1c0>
 800b5fc:	0800bd67 	.word	0x0800bd67
 800b600:	0800bd6d 	.word	0x0800bd6d
 800b604:	0800bd71 	.word	0x0800bd71
 800b608:	00000000 	.word	0x00000000
 800b60c:	0800b361 	.word	0x0800b361

0800b610 <_printf_common>:
 800b610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b614:	4616      	mov	r6, r2
 800b616:	4699      	mov	r9, r3
 800b618:	688a      	ldr	r2, [r1, #8]
 800b61a:	690b      	ldr	r3, [r1, #16]
 800b61c:	4607      	mov	r7, r0
 800b61e:	4293      	cmp	r3, r2
 800b620:	bfb8      	it	lt
 800b622:	4613      	movlt	r3, r2
 800b624:	6033      	str	r3, [r6, #0]
 800b626:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b62a:	460c      	mov	r4, r1
 800b62c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b630:	b10a      	cbz	r2, 800b636 <_printf_common+0x26>
 800b632:	3301      	adds	r3, #1
 800b634:	6033      	str	r3, [r6, #0]
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	0699      	lsls	r1, r3, #26
 800b63a:	bf42      	ittt	mi
 800b63c:	6833      	ldrmi	r3, [r6, #0]
 800b63e:	3302      	addmi	r3, #2
 800b640:	6033      	strmi	r3, [r6, #0]
 800b642:	6825      	ldr	r5, [r4, #0]
 800b644:	f015 0506 	ands.w	r5, r5, #6
 800b648:	d106      	bne.n	800b658 <_printf_common+0x48>
 800b64a:	f104 0a19 	add.w	sl, r4, #25
 800b64e:	68e3      	ldr	r3, [r4, #12]
 800b650:	6832      	ldr	r2, [r6, #0]
 800b652:	1a9b      	subs	r3, r3, r2
 800b654:	42ab      	cmp	r3, r5
 800b656:	dc2b      	bgt.n	800b6b0 <_printf_common+0xa0>
 800b658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b65c:	1e13      	subs	r3, r2, #0
 800b65e:	6822      	ldr	r2, [r4, #0]
 800b660:	bf18      	it	ne
 800b662:	2301      	movne	r3, #1
 800b664:	0692      	lsls	r2, r2, #26
 800b666:	d430      	bmi.n	800b6ca <_printf_common+0xba>
 800b668:	4649      	mov	r1, r9
 800b66a:	4638      	mov	r0, r7
 800b66c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b670:	47c0      	blx	r8
 800b672:	3001      	adds	r0, #1
 800b674:	d023      	beq.n	800b6be <_printf_common+0xae>
 800b676:	6823      	ldr	r3, [r4, #0]
 800b678:	6922      	ldr	r2, [r4, #16]
 800b67a:	f003 0306 	and.w	r3, r3, #6
 800b67e:	2b04      	cmp	r3, #4
 800b680:	bf14      	ite	ne
 800b682:	2500      	movne	r5, #0
 800b684:	6833      	ldreq	r3, [r6, #0]
 800b686:	f04f 0600 	mov.w	r6, #0
 800b68a:	bf08      	it	eq
 800b68c:	68e5      	ldreq	r5, [r4, #12]
 800b68e:	f104 041a 	add.w	r4, r4, #26
 800b692:	bf08      	it	eq
 800b694:	1aed      	subeq	r5, r5, r3
 800b696:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b69a:	bf08      	it	eq
 800b69c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	bfc4      	itt	gt
 800b6a4:	1a9b      	subgt	r3, r3, r2
 800b6a6:	18ed      	addgt	r5, r5, r3
 800b6a8:	42b5      	cmp	r5, r6
 800b6aa:	d11a      	bne.n	800b6e2 <_printf_common+0xd2>
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	e008      	b.n	800b6c2 <_printf_common+0xb2>
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	4652      	mov	r2, sl
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	4638      	mov	r0, r7
 800b6b8:	47c0      	blx	r8
 800b6ba:	3001      	adds	r0, #1
 800b6bc:	d103      	bne.n	800b6c6 <_printf_common+0xb6>
 800b6be:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c6:	3501      	adds	r5, #1
 800b6c8:	e7c1      	b.n	800b64e <_printf_common+0x3e>
 800b6ca:	2030      	movs	r0, #48	; 0x30
 800b6cc:	18e1      	adds	r1, r4, r3
 800b6ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6d8:	4422      	add	r2, r4
 800b6da:	3302      	adds	r3, #2
 800b6dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6e0:	e7c2      	b.n	800b668 <_printf_common+0x58>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	4622      	mov	r2, r4
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	4638      	mov	r0, r7
 800b6ea:	47c0      	blx	r8
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d0e6      	beq.n	800b6be <_printf_common+0xae>
 800b6f0:	3601      	adds	r6, #1
 800b6f2:	e7d9      	b.n	800b6a8 <_printf_common+0x98>

0800b6f4 <_printf_i>:
 800b6f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f8:	7e0f      	ldrb	r7, [r1, #24]
 800b6fa:	4691      	mov	r9, r2
 800b6fc:	2f78      	cmp	r7, #120	; 0x78
 800b6fe:	4680      	mov	r8, r0
 800b700:	460c      	mov	r4, r1
 800b702:	469a      	mov	sl, r3
 800b704:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b70a:	d807      	bhi.n	800b71c <_printf_i+0x28>
 800b70c:	2f62      	cmp	r7, #98	; 0x62
 800b70e:	d80a      	bhi.n	800b726 <_printf_i+0x32>
 800b710:	2f00      	cmp	r7, #0
 800b712:	f000 80d5 	beq.w	800b8c0 <_printf_i+0x1cc>
 800b716:	2f58      	cmp	r7, #88	; 0x58
 800b718:	f000 80c1 	beq.w	800b89e <_printf_i+0x1aa>
 800b71c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b724:	e03a      	b.n	800b79c <_printf_i+0xa8>
 800b726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b72a:	2b15      	cmp	r3, #21
 800b72c:	d8f6      	bhi.n	800b71c <_printf_i+0x28>
 800b72e:	a101      	add	r1, pc, #4	; (adr r1, 800b734 <_printf_i+0x40>)
 800b730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b734:	0800b78d 	.word	0x0800b78d
 800b738:	0800b7a1 	.word	0x0800b7a1
 800b73c:	0800b71d 	.word	0x0800b71d
 800b740:	0800b71d 	.word	0x0800b71d
 800b744:	0800b71d 	.word	0x0800b71d
 800b748:	0800b71d 	.word	0x0800b71d
 800b74c:	0800b7a1 	.word	0x0800b7a1
 800b750:	0800b71d 	.word	0x0800b71d
 800b754:	0800b71d 	.word	0x0800b71d
 800b758:	0800b71d 	.word	0x0800b71d
 800b75c:	0800b71d 	.word	0x0800b71d
 800b760:	0800b8a7 	.word	0x0800b8a7
 800b764:	0800b7cd 	.word	0x0800b7cd
 800b768:	0800b861 	.word	0x0800b861
 800b76c:	0800b71d 	.word	0x0800b71d
 800b770:	0800b71d 	.word	0x0800b71d
 800b774:	0800b8c9 	.word	0x0800b8c9
 800b778:	0800b71d 	.word	0x0800b71d
 800b77c:	0800b7cd 	.word	0x0800b7cd
 800b780:	0800b71d 	.word	0x0800b71d
 800b784:	0800b71d 	.word	0x0800b71d
 800b788:	0800b869 	.word	0x0800b869
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	1d1a      	adds	r2, r3, #4
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	602a      	str	r2, [r5, #0]
 800b794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b79c:	2301      	movs	r3, #1
 800b79e:	e0a0      	b.n	800b8e2 <_printf_i+0x1ee>
 800b7a0:	6820      	ldr	r0, [r4, #0]
 800b7a2:	682b      	ldr	r3, [r5, #0]
 800b7a4:	0607      	lsls	r7, r0, #24
 800b7a6:	f103 0104 	add.w	r1, r3, #4
 800b7aa:	6029      	str	r1, [r5, #0]
 800b7ac:	d501      	bpl.n	800b7b2 <_printf_i+0xbe>
 800b7ae:	681e      	ldr	r6, [r3, #0]
 800b7b0:	e003      	b.n	800b7ba <_printf_i+0xc6>
 800b7b2:	0646      	lsls	r6, r0, #25
 800b7b4:	d5fb      	bpl.n	800b7ae <_printf_i+0xba>
 800b7b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b7ba:	2e00      	cmp	r6, #0
 800b7bc:	da03      	bge.n	800b7c6 <_printf_i+0xd2>
 800b7be:	232d      	movs	r3, #45	; 0x2d
 800b7c0:	4276      	negs	r6, r6
 800b7c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7c6:	230a      	movs	r3, #10
 800b7c8:	4859      	ldr	r0, [pc, #356]	; (800b930 <_printf_i+0x23c>)
 800b7ca:	e012      	b.n	800b7f2 <_printf_i+0xfe>
 800b7cc:	682b      	ldr	r3, [r5, #0]
 800b7ce:	6820      	ldr	r0, [r4, #0]
 800b7d0:	1d19      	adds	r1, r3, #4
 800b7d2:	6029      	str	r1, [r5, #0]
 800b7d4:	0605      	lsls	r5, r0, #24
 800b7d6:	d501      	bpl.n	800b7dc <_printf_i+0xe8>
 800b7d8:	681e      	ldr	r6, [r3, #0]
 800b7da:	e002      	b.n	800b7e2 <_printf_i+0xee>
 800b7dc:	0641      	lsls	r1, r0, #25
 800b7de:	d5fb      	bpl.n	800b7d8 <_printf_i+0xe4>
 800b7e0:	881e      	ldrh	r6, [r3, #0]
 800b7e2:	2f6f      	cmp	r7, #111	; 0x6f
 800b7e4:	bf0c      	ite	eq
 800b7e6:	2308      	moveq	r3, #8
 800b7e8:	230a      	movne	r3, #10
 800b7ea:	4851      	ldr	r0, [pc, #324]	; (800b930 <_printf_i+0x23c>)
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7f2:	6865      	ldr	r5, [r4, #4]
 800b7f4:	2d00      	cmp	r5, #0
 800b7f6:	bfa8      	it	ge
 800b7f8:	6821      	ldrge	r1, [r4, #0]
 800b7fa:	60a5      	str	r5, [r4, #8]
 800b7fc:	bfa4      	itt	ge
 800b7fe:	f021 0104 	bicge.w	r1, r1, #4
 800b802:	6021      	strge	r1, [r4, #0]
 800b804:	b90e      	cbnz	r6, 800b80a <_printf_i+0x116>
 800b806:	2d00      	cmp	r5, #0
 800b808:	d04b      	beq.n	800b8a2 <_printf_i+0x1ae>
 800b80a:	4615      	mov	r5, r2
 800b80c:	fbb6 f1f3 	udiv	r1, r6, r3
 800b810:	fb03 6711 	mls	r7, r3, r1, r6
 800b814:	5dc7      	ldrb	r7, [r0, r7]
 800b816:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b81a:	4637      	mov	r7, r6
 800b81c:	42bb      	cmp	r3, r7
 800b81e:	460e      	mov	r6, r1
 800b820:	d9f4      	bls.n	800b80c <_printf_i+0x118>
 800b822:	2b08      	cmp	r3, #8
 800b824:	d10b      	bne.n	800b83e <_printf_i+0x14a>
 800b826:	6823      	ldr	r3, [r4, #0]
 800b828:	07de      	lsls	r6, r3, #31
 800b82a:	d508      	bpl.n	800b83e <_printf_i+0x14a>
 800b82c:	6923      	ldr	r3, [r4, #16]
 800b82e:	6861      	ldr	r1, [r4, #4]
 800b830:	4299      	cmp	r1, r3
 800b832:	bfde      	ittt	le
 800b834:	2330      	movle	r3, #48	; 0x30
 800b836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b83a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b83e:	1b52      	subs	r2, r2, r5
 800b840:	6122      	str	r2, [r4, #16]
 800b842:	464b      	mov	r3, r9
 800b844:	4621      	mov	r1, r4
 800b846:	4640      	mov	r0, r8
 800b848:	f8cd a000 	str.w	sl, [sp]
 800b84c:	aa03      	add	r2, sp, #12
 800b84e:	f7ff fedf 	bl	800b610 <_printf_common>
 800b852:	3001      	adds	r0, #1
 800b854:	d14a      	bne.n	800b8ec <_printf_i+0x1f8>
 800b856:	f04f 30ff 	mov.w	r0, #4294967295
 800b85a:	b004      	add	sp, #16
 800b85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b860:	6823      	ldr	r3, [r4, #0]
 800b862:	f043 0320 	orr.w	r3, r3, #32
 800b866:	6023      	str	r3, [r4, #0]
 800b868:	2778      	movs	r7, #120	; 0x78
 800b86a:	4832      	ldr	r0, [pc, #200]	; (800b934 <_printf_i+0x240>)
 800b86c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	6829      	ldr	r1, [r5, #0]
 800b874:	061f      	lsls	r7, r3, #24
 800b876:	f851 6b04 	ldr.w	r6, [r1], #4
 800b87a:	d402      	bmi.n	800b882 <_printf_i+0x18e>
 800b87c:	065f      	lsls	r7, r3, #25
 800b87e:	bf48      	it	mi
 800b880:	b2b6      	uxthmi	r6, r6
 800b882:	07df      	lsls	r7, r3, #31
 800b884:	bf48      	it	mi
 800b886:	f043 0320 	orrmi.w	r3, r3, #32
 800b88a:	6029      	str	r1, [r5, #0]
 800b88c:	bf48      	it	mi
 800b88e:	6023      	strmi	r3, [r4, #0]
 800b890:	b91e      	cbnz	r6, 800b89a <_printf_i+0x1a6>
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	f023 0320 	bic.w	r3, r3, #32
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	2310      	movs	r3, #16
 800b89c:	e7a6      	b.n	800b7ec <_printf_i+0xf8>
 800b89e:	4824      	ldr	r0, [pc, #144]	; (800b930 <_printf_i+0x23c>)
 800b8a0:	e7e4      	b.n	800b86c <_printf_i+0x178>
 800b8a2:	4615      	mov	r5, r2
 800b8a4:	e7bd      	b.n	800b822 <_printf_i+0x12e>
 800b8a6:	682b      	ldr	r3, [r5, #0]
 800b8a8:	6826      	ldr	r6, [r4, #0]
 800b8aa:	1d18      	adds	r0, r3, #4
 800b8ac:	6961      	ldr	r1, [r4, #20]
 800b8ae:	6028      	str	r0, [r5, #0]
 800b8b0:	0635      	lsls	r5, r6, #24
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	d501      	bpl.n	800b8ba <_printf_i+0x1c6>
 800b8b6:	6019      	str	r1, [r3, #0]
 800b8b8:	e002      	b.n	800b8c0 <_printf_i+0x1cc>
 800b8ba:	0670      	lsls	r0, r6, #25
 800b8bc:	d5fb      	bpl.n	800b8b6 <_printf_i+0x1c2>
 800b8be:	8019      	strh	r1, [r3, #0]
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	4615      	mov	r5, r2
 800b8c4:	6123      	str	r3, [r4, #16]
 800b8c6:	e7bc      	b.n	800b842 <_printf_i+0x14e>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	1d1a      	adds	r2, r3, #4
 800b8ce:	602a      	str	r2, [r5, #0]
 800b8d0:	681d      	ldr	r5, [r3, #0]
 800b8d2:	6862      	ldr	r2, [r4, #4]
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f000 f859 	bl	800b98c <memchr>
 800b8da:	b108      	cbz	r0, 800b8e0 <_printf_i+0x1ec>
 800b8dc:	1b40      	subs	r0, r0, r5
 800b8de:	6060      	str	r0, [r4, #4]
 800b8e0:	6863      	ldr	r3, [r4, #4]
 800b8e2:	6123      	str	r3, [r4, #16]
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8ea:	e7aa      	b.n	800b842 <_printf_i+0x14e>
 800b8ec:	462a      	mov	r2, r5
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	4640      	mov	r0, r8
 800b8f2:	6923      	ldr	r3, [r4, #16]
 800b8f4:	47d0      	blx	sl
 800b8f6:	3001      	adds	r0, #1
 800b8f8:	d0ad      	beq.n	800b856 <_printf_i+0x162>
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	079b      	lsls	r3, r3, #30
 800b8fe:	d413      	bmi.n	800b928 <_printf_i+0x234>
 800b900:	68e0      	ldr	r0, [r4, #12]
 800b902:	9b03      	ldr	r3, [sp, #12]
 800b904:	4298      	cmp	r0, r3
 800b906:	bfb8      	it	lt
 800b908:	4618      	movlt	r0, r3
 800b90a:	e7a6      	b.n	800b85a <_printf_i+0x166>
 800b90c:	2301      	movs	r3, #1
 800b90e:	4632      	mov	r2, r6
 800b910:	4649      	mov	r1, r9
 800b912:	4640      	mov	r0, r8
 800b914:	47d0      	blx	sl
 800b916:	3001      	adds	r0, #1
 800b918:	d09d      	beq.n	800b856 <_printf_i+0x162>
 800b91a:	3501      	adds	r5, #1
 800b91c:	68e3      	ldr	r3, [r4, #12]
 800b91e:	9903      	ldr	r1, [sp, #12]
 800b920:	1a5b      	subs	r3, r3, r1
 800b922:	42ab      	cmp	r3, r5
 800b924:	dcf2      	bgt.n	800b90c <_printf_i+0x218>
 800b926:	e7eb      	b.n	800b900 <_printf_i+0x20c>
 800b928:	2500      	movs	r5, #0
 800b92a:	f104 0619 	add.w	r6, r4, #25
 800b92e:	e7f5      	b.n	800b91c <_printf_i+0x228>
 800b930:	0800bd78 	.word	0x0800bd78
 800b934:	0800bd89 	.word	0x0800bd89

0800b938 <memmove>:
 800b938:	4288      	cmp	r0, r1
 800b93a:	b510      	push	{r4, lr}
 800b93c:	eb01 0402 	add.w	r4, r1, r2
 800b940:	d902      	bls.n	800b948 <memmove+0x10>
 800b942:	4284      	cmp	r4, r0
 800b944:	4623      	mov	r3, r4
 800b946:	d807      	bhi.n	800b958 <memmove+0x20>
 800b948:	1e43      	subs	r3, r0, #1
 800b94a:	42a1      	cmp	r1, r4
 800b94c:	d008      	beq.n	800b960 <memmove+0x28>
 800b94e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b952:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b956:	e7f8      	b.n	800b94a <memmove+0x12>
 800b958:	4601      	mov	r1, r0
 800b95a:	4402      	add	r2, r0
 800b95c:	428a      	cmp	r2, r1
 800b95e:	d100      	bne.n	800b962 <memmove+0x2a>
 800b960:	bd10      	pop	{r4, pc}
 800b962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b96a:	e7f7      	b.n	800b95c <memmove+0x24>

0800b96c <_sbrk_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	2300      	movs	r3, #0
 800b970:	4d05      	ldr	r5, [pc, #20]	; (800b988 <_sbrk_r+0x1c>)
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	602b      	str	r3, [r5, #0]
 800b978:	f7f6 f94e 	bl	8001c18 <_sbrk>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_sbrk_r+0x1a>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_sbrk_r+0x1a>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	20001750 	.word	0x20001750

0800b98c <memchr>:
 800b98c:	4603      	mov	r3, r0
 800b98e:	b510      	push	{r4, lr}
 800b990:	b2c9      	uxtb	r1, r1
 800b992:	4402      	add	r2, r0
 800b994:	4293      	cmp	r3, r2
 800b996:	4618      	mov	r0, r3
 800b998:	d101      	bne.n	800b99e <memchr+0x12>
 800b99a:	2000      	movs	r0, #0
 800b99c:	e003      	b.n	800b9a6 <memchr+0x1a>
 800b99e:	7804      	ldrb	r4, [r0, #0]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	428c      	cmp	r4, r1
 800b9a4:	d1f6      	bne.n	800b994 <memchr+0x8>
 800b9a6:	bd10      	pop	{r4, pc}

0800b9a8 <_realloc_r>:
 800b9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ac:	4680      	mov	r8, r0
 800b9ae:	4614      	mov	r4, r2
 800b9b0:	460e      	mov	r6, r1
 800b9b2:	b921      	cbnz	r1, 800b9be <_realloc_r+0x16>
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ba:	f7ff bc45 	b.w	800b248 <_malloc_r>
 800b9be:	b92a      	cbnz	r2, 800b9cc <_realloc_r+0x24>
 800b9c0:	f7ff fbda 	bl	800b178 <_free_r>
 800b9c4:	4625      	mov	r5, r4
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9cc:	f000 f81b 	bl	800ba06 <_malloc_usable_size_r>
 800b9d0:	4284      	cmp	r4, r0
 800b9d2:	4607      	mov	r7, r0
 800b9d4:	d802      	bhi.n	800b9dc <_realloc_r+0x34>
 800b9d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9da:	d812      	bhi.n	800ba02 <_realloc_r+0x5a>
 800b9dc:	4621      	mov	r1, r4
 800b9de:	4640      	mov	r0, r8
 800b9e0:	f7ff fc32 	bl	800b248 <_malloc_r>
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d0ed      	beq.n	800b9c6 <_realloc_r+0x1e>
 800b9ea:	42bc      	cmp	r4, r7
 800b9ec:	4622      	mov	r2, r4
 800b9ee:	4631      	mov	r1, r6
 800b9f0:	bf28      	it	cs
 800b9f2:	463a      	movcs	r2, r7
 800b9f4:	f7ff fbb2 	bl	800b15c <memcpy>
 800b9f8:	4631      	mov	r1, r6
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	f7ff fbbc 	bl	800b178 <_free_r>
 800ba00:	e7e1      	b.n	800b9c6 <_realloc_r+0x1e>
 800ba02:	4635      	mov	r5, r6
 800ba04:	e7df      	b.n	800b9c6 <_realloc_r+0x1e>

0800ba06 <_malloc_usable_size_r>:
 800ba06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba0a:	1f18      	subs	r0, r3, #4
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	bfbc      	itt	lt
 800ba10:	580b      	ldrlt	r3, [r1, r0]
 800ba12:	18c0      	addlt	r0, r0, r3
 800ba14:	4770      	bx	lr
	...

0800ba18 <_init>:
 800ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1a:	bf00      	nop
 800ba1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba1e:	bc08      	pop	{r3}
 800ba20:	469e      	mov	lr, r3
 800ba22:	4770      	bx	lr

0800ba24 <_fini>:
 800ba24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba26:	bf00      	nop
 800ba28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba2a:	bc08      	pop	{r3}
 800ba2c:	469e      	mov	lr, r3
 800ba2e:	4770      	bx	lr
