
Carga_DC_desarrollo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080028ec  080028ec  000128ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002978  08002978  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002978  08002978  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002978  08002978  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  2000000c  0800298c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800298c  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b092  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d1a  00000000  00000000  0002b10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007eb  00000000  00000000  0002d888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d16  00000000  00000000  0002e073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d2db  00000000  00000000  00045d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a079  00000000  00000000  00053064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a64  00000000  00000000  000dd0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000dfb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028d4 	.word	0x080028d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028d4 	.word	0x080028d4

0800014c <LCD_I2C_cmd>:
#define SLAVE_ADDRESS_LCD  0x4e	//0x4E // change this according to ur setup 0x7e

/* Envia comando por LCD ---------------------------------------*/

void LCD_I2C_cmd(char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <LCD_I2C_cmd+0x60>)
 800019a:	f001 fa05 	bl	80015a8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800019e:	2001      	movs	r0, #1
 80001a0:	f000 fbc6 	bl	8000930 <HAL_Delay>
}
 80001a4:	bf00      	nop
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	20000058 	.word	0x20000058

080001b0 <LCD_I2C_char>:

/* Envia dato por LCD ------------------------------------------*/

void LCD_I2C_char(char data)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	f023 030f 	bic.w	r3, r3, #15
 80001c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	011b      	lsls	r3, r3, #4
 80001c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80001c8:	7bfb      	ldrb	r3, [r7, #15]
 80001ca:	f043 030d 	orr.w	r3, r3, #13
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80001d2:	7bfb      	ldrb	r3, [r7, #15]
 80001d4:	f043 0309 	orr.w	r3, r3, #9
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80001dc:	7bbb      	ldrb	r3, [r7, #14]
 80001de:	f043 030d 	orr.w	r3, r3, #13
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80001e6:	7bbb      	ldrb	r3, [r7, #14]
 80001e8:	f043 0309 	orr.w	r3, r3, #9
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001f0:	f107 0208 	add.w	r2, r7, #8
 80001f4:	2364      	movs	r3, #100	; 0x64
 80001f6:	9300      	str	r3, [sp, #0]
 80001f8:	2304      	movs	r3, #4
 80001fa:	214e      	movs	r1, #78	; 0x4e
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <LCD_I2C_char+0x60>)
 80001fe:	f001 f9d3 	bl	80015a8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f000 fb94 	bl	8000930 <HAL_Delay>
}
 8000208:	bf00      	nop
 800020a:	3710      	adds	r7, #16
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000058 	.word	0x20000058

08000214 <LCD_I2C_init>:

/* Inicializa LCD -----------------------------------------------*/

void LCD_I2C_init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	LCD_I2C_cmd(0x02);
 8000218:	2002      	movs	r0, #2
 800021a:	f7ff ff97 	bl	800014c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x28);
 800021e:	2028      	movs	r0, #40	; 0x28
 8000220:	f7ff ff94 	bl	800014c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x0c);
 8000224:	200c      	movs	r0, #12
 8000226:	f7ff ff91 	bl	800014c <LCD_I2C_cmd>
	LCD_I2C_cmd(0x80);
 800022a:	2080      	movs	r0, #128	; 0x80
 800022c:	f7ff ff8e 	bl	800014c <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_CLEAR);
 8000230:	2001      	movs	r0, #1
 8000232:	f7ff ff8b 	bl	800014c <LCD_I2C_cmd>
}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}

0800023a <LCD_I2C_write_text>:

/* Envia cadena de caracteres al LCD -----------------------------*/

void LCD_I2C_write_text(char *str)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b082      	sub	sp, #8
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
	while (*str) LCD_I2C_char(*str++);
 8000242:	e006      	b.n	8000252 <LCD_I2C_write_text+0x18>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	1c5a      	adds	r2, r3, #1
 8000248:	607a      	str	r2, [r7, #4]
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4618      	mov	r0, r3
 800024e:	f7ff ffaf 	bl	80001b0 <LCD_I2C_char>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d1f4      	bne.n	8000244 <LCD_I2C_write_text+0xa>
}
 800025a:	bf00      	nop
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 fb00 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f878 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f962 	bl	8000538 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000274:	f000 f8d2 	bl	800041c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000278:	f000 f90e 	bl	8000498 <MX_I2C1_Init>
  MX_USB_PCD_Init();
 800027c:	f000 f93a 	bl	80004f4 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  LCD_I2C_init();
 8000280:	f7ff ffc8 	bl	8000214 <LCD_I2C_init>
	//esto podria estar encapsulado
  	  LCD_I2C_cmd(LCD_LINEA1);
 8000284:	2000      	movs	r0, #0
 8000286:	f7ff ff61 	bl	800014c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   UTN FRP   ");
 800028a:	4829      	ldr	r0, [pc, #164]	; (8000330 <main+0xcc>)
 800028c:	f7ff ffd5 	bl	800023a <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA2);
 8000290:	20c0      	movs	r0, #192	; 0xc0
 8000292:	f7ff ff5b 	bl	800014c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   Carga DC   ");
 8000296:	4827      	ldr	r0, [pc, #156]	; (8000334 <main+0xd0>)
 8000298:	f7ff ffcf 	bl	800023a <LCD_I2C_write_text>
	  LCD_I2C_cmd(LCD_LINEA4);
 800029c:	20d4      	movs	r0, #212	; 0xd4
 800029e:	f7ff ff55 	bl	800014c <LCD_I2C_cmd>
	  LCD_I2C_write_text("   A.Gotte/A.Jose   ");
 80002a2:	4825      	ldr	r0, [pc, #148]	; (8000338 <main+0xd4>)
 80002a4:	f7ff ffc9 	bl	800023a <LCD_I2C_write_text>
	  HAL_Delay(5000);
 80002a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80002ac:	f000 fb40 	bl	8000930 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LCD_I2C_cmd(LCD_CLEAR);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f7ff ff4b 	bl	800014c <LCD_I2C_cmd>
	  if(input_keypad=="CC"||input_keypad=="CV"||input_keypad=="CR"||input_keypad=="CP"){
 80002b6:	4b21      	ldr	r3, [pc, #132]	; (800033c <main+0xd8>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b20      	ldr	r3, [pc, #128]	; (8000340 <main+0xdc>)
 80002be:	429a      	cmp	r2, r3
 80002c0:	d011      	beq.n	80002e6 <main+0x82>
 80002c2:	4b1e      	ldr	r3, [pc, #120]	; (800033c <main+0xd8>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	461a      	mov	r2, r3
 80002c8:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <main+0xe0>)
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d00b      	beq.n	80002e6 <main+0x82>
 80002ce:	4b1b      	ldr	r3, [pc, #108]	; (800033c <main+0xd8>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	461a      	mov	r2, r3
 80002d4:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <main+0xe4>)
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d005      	beq.n	80002e6 <main+0x82>
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <main+0xd8>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	461a      	mov	r2, r3
 80002e0:	4b1a      	ldr	r3, [pc, #104]	; (800034c <main+0xe8>)
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d110      	bne.n	8000308 <main+0xa4>
		  //ingresa a la configuracion de modo
		  flag_config=1;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <main+0xec>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	701a      	strb	r2, [r3, #0]
		  //guardar el modo que se selecciono
		  while(flag_config){
 80002ec:	e008      	b.n	8000300 <main+0x9c>
			  //hacer scan del teclado
			  //actualizar disp
			  //
			  if(input_keypad=="ok"){
 80002ee:	4b13      	ldr	r3, [pc, #76]	; (800033c <main+0xd8>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	461a      	mov	r2, r3
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <main+0xf0>)
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d102      	bne.n	8000300 <main+0x9c>
				  flag_config=0;//sale del while y vuelve al super loop
 80002fa:	4b15      	ldr	r3, [pc, #84]	; (8000350 <main+0xec>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	701a      	strb	r2, [r3, #0]
		  while(flag_config){
 8000300:	4b13      	ldr	r3, [pc, #76]	; (8000350 <main+0xec>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1f2      	bne.n	80002ee <main+0x8a>
			  }
		  }
	  }
	  if(flag_on_off){
 8000308:	4b13      	ldr	r3, [pc, #76]	; (8000358 <main+0xf4>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0cf      	beq.n	80002b0 <main+0x4c>
		  //switch con los cuatro case y los modos de control
		  while(flag_on_off){
 8000310:	e008      	b.n	8000324 <main+0xc0>
			  LCD_I2C_cmd(LCD_LINEA4);
 8000312:	20d4      	movs	r0, #212	; 0xd4
 8000314:	f7ff ff1a 	bl	800014c <LCD_I2C_cmd>
			  LCD_I2C_write_text("   flag_on_off   ");
 8000318:	4810      	ldr	r0, [pc, #64]	; (800035c <main+0xf8>)
 800031a:	f7ff ff8e 	bl	800023a <LCD_I2C_write_text>
			  HAL_Delay(100);
 800031e:	2064      	movs	r0, #100	; 0x64
 8000320:	f000 fb06 	bl	8000930 <HAL_Delay>
		  while(flag_on_off){
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <main+0xf4>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1f2      	bne.n	8000312 <main+0xae>
	  LCD_I2C_cmd(LCD_CLEAR);
 800032c:	e7c0      	b.n	80002b0 <main+0x4c>
 800032e:	bf00      	nop
 8000330:	080028ec 	.word	0x080028ec
 8000334:	080028fc 	.word	0x080028fc
 8000338:	0800290c 	.word	0x0800290c
 800033c:	2000039e 	.word	0x2000039e
 8000340:	08002924 	.word	0x08002924
 8000344:	08002928 	.word	0x08002928
 8000348:	0800292c 	.word	0x0800292c
 800034c:	08002930 	.word	0x08002930
 8000350:	2000039d 	.word	0x2000039d
 8000354:	08002934 	.word	0x08002934
 8000358:	2000039c 	.word	0x2000039c
 800035c:	08002938 	.word	0x08002938

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b094      	sub	sp, #80	; 0x50
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036a:	2228      	movs	r2, #40	; 0x28
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f002 fa84 	bl	800287c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	f107 0314 	add.w	r3, r7, #20
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000390:	2301      	movs	r3, #1
 8000392:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000394:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039e:	2301      	movs	r3, #1
 80003a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a2:	2302      	movs	r3, #2
 80003a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 fd4e 	bl	8001e58 <HAL_RCC_OscConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003c2:	f000 f927 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c6:	230f      	movs	r3, #15
 80003c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	2102      	movs	r1, #2
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 ffba 	bl	800235c <HAL_RCC_ClockConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003ee:	f000 f911 	bl	8000614 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80003f2:	2312      	movs	r3, #18
 80003f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003fc:	2300      	movs	r3, #0
 80003fe:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	4618      	mov	r0, r3
 8000404:	f002 f924 	bl	8002650 <HAL_RCCEx_PeriphCLKConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800040e:	f000 f901 	bl	8000614 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3750      	adds	r7, #80	; 0x50
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_ADC1_Init+0x74>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <MX_ADC1_Init+0x78>)
 8000430:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <MX_ADC1_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <MX_ADC1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800043e:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_ADC1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <MX_ADC1_Init+0x74>)
 8000446:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800044a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044c:	4b10      	ldr	r3, [pc, #64]	; (8000490 <MX_ADC1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_ADC1_Init+0x74>)
 8000454:	2201      	movs	r2, #1
 8000456:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000458:	480d      	ldr	r0, [pc, #52]	; (8000490 <MX_ADC1_Init+0x74>)
 800045a:	f000 fa8d 	bl	8000978 <HAL_ADC_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000464:	f000 f8d6 	bl	8000614 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000468:	2301      	movs	r3, #1
 800046a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800046c:	2301      	movs	r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	4619      	mov	r1, r3
 8000478:	4805      	ldr	r0, [pc, #20]	; (8000490 <MX_ADC1_Init+0x74>)
 800047a:	f000 fb55 	bl	8000b28 <HAL_ADC_ConfigChannel>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000484:	f000 f8c6 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000488:	bf00      	nop
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000028 	.word	0x20000028
 8000494:	40012400 	.word	0x40012400

08000498 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <MX_I2C1_Init+0x50>)
 800049e:	4a13      	ldr	r2, [pc, #76]	; (80004ec <MX_I2C1_Init+0x54>)
 80004a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004a2:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_I2C1_Init+0x50>)
 80004a4:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <MX_I2C1_Init+0x58>)
 80004a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_I2C1_Init+0x50>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_I2C1_Init+0x50>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_I2C1_Init+0x50>)
 80004b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <MX_I2C1_Init+0x50>)
 80004be:	2200      	movs	r2, #0
 80004c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_I2C1_Init+0x50>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <MX_I2C1_Init+0x50>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_I2C1_Init+0x50>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_I2C1_Init+0x50>)
 80004d6:	f000 ff23 	bl	8001320 <HAL_I2C_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004e0:	f000 f898 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000058 	.word	0x20000058
 80004ec:	40005400 	.word	0x40005400
 80004f0:	000186a0 	.word	0x000186a0

080004f4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <MX_USB_PCD_Init+0x3c>)
 80004fa:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <MX_USB_PCD_Init+0x40>)
 80004fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_USB_PCD_Init+0x3c>)
 8000500:	2208      	movs	r2, #8
 8000502:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <MX_USB_PCD_Init+0x3c>)
 8000506:	2202      	movs	r2, #2
 8000508:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_USB_PCD_Init+0x3c>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <MX_USB_PCD_Init+0x3c>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_USB_PCD_Init+0x3c>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800051c:	4804      	ldr	r0, [pc, #16]	; (8000530 <MX_USB_PCD_Init+0x3c>)
 800051e:	f001 fb9b 	bl	8001c58 <HAL_PCD_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000528:	f000 f874 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200000ac 	.word	0x200000ac
 8000534:	40005c00 	.word	0x40005c00

08000538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_GPIO_Init+0x90>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <MX_GPIO_Init+0x90>)
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_GPIO_Init+0x90>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0320 	and.w	r3, r3, #32
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_GPIO_Init+0x90>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <MX_GPIO_Init+0x90>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_GPIO_Init+0x90>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_GPIO_Init+0x90>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <MX_GPIO_Init+0x90>)
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_GPIO_Init+0x90>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_GPIO_Init+0x94>)
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <MX_GPIO_Init+0x98>)
 80005aa:	f000 fd05 	bl	8000fb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	2017      	movs	r0, #23
 80005b4:	f000 fcc9 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005b8:	2017      	movs	r0, #23
 80005ba:	f000 fce2 	bl	8000f82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005be:	bf00      	nop
 80005c0:	3720      	adds	r7, #32
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	10310000 	.word	0x10310000
 80005d0:	40010800 	.word	0x40010800

080005d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//definiciones de los callback y funciones
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9) // INT Source is pin A9
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005e4:	d10e      	bne.n	8000604 <HAL_GPIO_EXTI_Callback+0x30>
    {
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==GPIO_PIN_SET){
 80005e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ea:	4808      	ldr	r0, [pc, #32]	; (800060c <HAL_GPIO_EXTI_Callback+0x38>)
 80005ec:	f000 fe68 	bl	80012c0 <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d103      	bne.n	80005fe <HAL_GPIO_EXTI_Callback+0x2a>
    	flag_on_off=1;// conecta la carga
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
    }
    else flag_on_off=0;// desconecta la carga
    }
}
 80005fc:	e002      	b.n	8000604 <HAL_GPIO_EXTI_Callback+0x30>
    else flag_on_off=0;// desconecta la carga
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40010800 	.word	0x40010800
 8000610:	2000039c 	.word	0x2000039c

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_MspInit+0x5c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <HAL_MspInit+0x5c>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_MspInit+0x5c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x5c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_MspInit+0x5c>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x5c>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_MspInit+0x60>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_MspInit+0x60>)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	bf00      	nop
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	40021000 	.word	0x40021000
 8000680:	40010000 	.word	0x40010000

08000684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <HAL_ADC_MspInit+0x6c>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d121      	bne.n	80006e8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <HAL_ADC_MspInit+0x70>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <HAL_ADC_MspInit+0x70>)
 80006aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <HAL_ADC_MspInit+0x70>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <HAL_ADC_MspInit+0x70>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <HAL_ADC_MspInit+0x70>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_ADC_MspInit+0x70>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80006d4:	2306      	movs	r3, #6
 80006d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d8:	2303      	movs	r3, #3
 80006da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <HAL_ADC_MspInit+0x74>)
 80006e4:	f000 fc68 	bl	8000fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40012400 	.word	0x40012400
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010800 	.word	0x40010800

080006fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <HAL_I2C_MspInit+0x70>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d123      	bne.n	8000764 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_I2C_MspInit+0x74>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a13      	ldr	r2, [pc, #76]	; (8000770 <HAL_I2C_MspInit+0x74>)
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_I2C_MspInit+0x74>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0308 	and.w	r3, r3, #8
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000734:	23c0      	movs	r3, #192	; 0xc0
 8000736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000738:	2312      	movs	r3, #18
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <HAL_I2C_MspInit+0x78>)
 8000748:	f000 fc36 	bl	8000fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_I2C_MspInit+0x74>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_I2C_MspInit+0x74>)
 8000752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000756:	61d3      	str	r3, [r2, #28]
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_I2C_MspInit+0x74>)
 800075a:	69db      	ldr	r3, [r3, #28]
 800075c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40005400 	.word	0x40005400
 8000770:	40021000 	.word	0x40021000
 8000774:	40010c00 	.word	0x40010c00

08000778 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <HAL_PCD_MspInit+0x34>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d10b      	bne.n	80007a2 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_PCD_MspInit+0x38>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_PCD_MspInit+0x38>)
 8000790:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000794:	61d3      	str	r3, [r2, #28]
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_PCD_MspInit+0x38>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	40005c00 	.word	0x40005c00
 80007b0:	40021000 	.word	0x40021000

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fa:	f000 f87d 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}

08000802 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000806:	f44f 7000 	mov.w	r0, #512	; 0x200
 800080a:	f000 fd71 	bl	80012f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}

08000812 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
	...

08000820 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000820:	f7ff fff7 	bl	8000812 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000826:	490c      	ldr	r1, [pc, #48]	; (8000858 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <LoopFillZerobss+0x16>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a09      	ldr	r2, [pc, #36]	; (8000860 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800083c:	4c09      	ldr	r4, [pc, #36]	; (8000864 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800084a:	f002 f81f 	bl	800288c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084e:	f7ff fd09 	bl	8000264 <main>
  bx lr
 8000852:	4770      	bx	lr
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800085c:	08002980 	.word	0x08002980
  ldr r2, =_sbss
 8000860:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000864:	200003a4 	.word	0x200003a4

08000868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_2_IRQHandler>
	...

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_Init+0x28>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_Init+0x28>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087c:	2003      	movs	r0, #3
 800087e:	f000 fb59 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000882:	200f      	movs	r0, #15
 8000884:	f000 f808 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000888:	f7ff feca 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40022000 	.word	0x40022000

08000898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x54>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x58>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fb71 	bl	8000f9e <HAL_SYSTICK_Config>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00e      	b.n	80008e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d80a      	bhi.n	80008e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008cc:	2200      	movs	r2, #0
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f000 fb39 	bl	8000f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_InitTick+0x5c>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	e000      	b.n	80008e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x1c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x20>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a03      	ldr	r2, [pc, #12]	; (8000918 <HAL_IncTick+0x20>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	20000008 	.word	0x20000008
 8000918:	200003a0 	.word	0x200003a0

0800091c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	200003a0 	.word	0x200003a0

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff fff0 	bl	800091c <HAL_GetTick>
 800093c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000948:	d005      	beq.n	8000956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_Delay+0x44>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000956:	bf00      	nop
 8000958:	f7ff ffe0 	bl	800091c <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <HAL_Delay+0x28>
  {
  }
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008

08000978 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e0be      	b.n	8000b18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d109      	bne.n	80009bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fe64 	bl	8000684 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 f9ab 	bl	8000d18 <ADC_ConversionStop_Disable>
 80009c2:	4603      	mov	r3, r0
 80009c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f040 8099 	bne.w	8000b06 <HAL_ADC_Init+0x18e>
 80009d4:	7dfb      	ldrb	r3, [r7, #23]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f040 8095 	bne.w	8000b06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009e4:	f023 0302 	bic.w	r3, r3, #2
 80009e8:	f043 0202 	orr.w	r2, r3, #2
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7b1b      	ldrb	r3, [r3, #12]
 80009fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a10:	d003      	beq.n	8000a1a <HAL_ADC_Init+0xa2>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d102      	bne.n	8000a20 <HAL_ADC_Init+0xa8>
 8000a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1e:	e000      	b.n	8000a22 <HAL_ADC_Init+0xaa>
 8000a20:	2300      	movs	r3, #0
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7d1b      	ldrb	r3, [r3, #20]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d119      	bne.n	8000a64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7b1b      	ldrb	r3, [r3, #12]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d109      	bne.n	8000a4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	035a      	lsls	r2, r3, #13
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	e00b      	b.n	8000a64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a50:	f043 0220 	orr.w	r2, r3, #32
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5c:	f043 0201 	orr.w	r2, r3, #1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <HAL_ADC_Init+0x1a8>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	68b9      	ldr	r1, [r7, #8]
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a94:	d003      	beq.n	8000a9e <HAL_ADC_Init+0x126>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d104      	bne.n	8000aa8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	691b      	ldr	r3, [r3, #16]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	051b      	lsls	r3, r3, #20
 8000aa6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_ADC_Init+0x1ac>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d10b      	bne.n	8000ae4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad6:	f023 0303 	bic.w	r3, r3, #3
 8000ada:	f043 0201 	orr.w	r2, r3, #1
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ae2:	e018      	b.n	8000b16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae8:	f023 0312 	bic.w	r3, r3, #18
 8000aec:	f043 0210 	orr.w	r2, r3, #16
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af8:	f043 0201 	orr.w	r2, r3, #1
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b04:	e007      	b.n	8000b16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0a:	f043 0210 	orr.w	r2, r3, #16
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	ffe1f7fd 	.word	0xffe1f7fd
 8000b24:	ff1f0efe 	.word	0xff1f0efe

08000b28 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d101      	bne.n	8000b48 <HAL_ADC_ConfigChannel+0x20>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e0dc      	b.n	8000d02 <HAL_ADC_ConfigChannel+0x1da>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b06      	cmp	r3, #6
 8000b56:	d81c      	bhi.n	8000b92 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	3b05      	subs	r3, #5
 8000b6a:	221f      	movs	r2, #31
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4019      	ands	r1, r3
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	6818      	ldr	r0, [r3, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	3b05      	subs	r3, #5
 8000b84:	fa00 f203 	lsl.w	r2, r0, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	635a      	str	r2, [r3, #52]	; 0x34
 8000b90:	e03c      	b.n	8000c0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	2b0c      	cmp	r3, #12
 8000b98:	d81c      	bhi.n	8000bd4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	3b23      	subs	r3, #35	; 0x23
 8000bac:	221f      	movs	r2, #31
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	4019      	ands	r1, r3
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	6818      	ldr	r0, [r3, #0]
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	3b23      	subs	r3, #35	; 0x23
 8000bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8000bd2:	e01b      	b.n	8000c0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	3b41      	subs	r3, #65	; 0x41
 8000be6:	221f      	movs	r2, #31
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	4019      	ands	r1, r3
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	3b41      	subs	r3, #65	; 0x41
 8000c00:	fa00 f203 	lsl.w	r2, r0, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b09      	cmp	r3, #9
 8000c12:	d91c      	bls.n	8000c4e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	68d9      	ldr	r1, [r3, #12]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4413      	add	r3, r2
 8000c24:	3b1e      	subs	r3, #30
 8000c26:	2207      	movs	r2, #7
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4019      	ands	r1, r3
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	6898      	ldr	r0, [r3, #8]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	3b1e      	subs	r3, #30
 8000c40:	fa00 f203 	lsl.w	r2, r0, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	e019      	b.n	8000c82 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6919      	ldr	r1, [r3, #16]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	2207      	movs	r2, #7
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	4019      	ands	r1, r3
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	6898      	ldr	r0, [r3, #8]
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4613      	mov	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	4413      	add	r3, r2
 8000c76:	fa00 f203 	lsl.w	r2, r0, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b10      	cmp	r3, #16
 8000c88:	d003      	beq.n	8000c92 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c8e:	2b11      	cmp	r3, #17
 8000c90:	d132      	bne.n	8000cf8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <HAL_ADC_ConfigChannel+0x1e4>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d125      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d126      	bne.n	8000cf8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000cb8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b10      	cmp	r3, #16
 8000cc0:	d11a      	bne.n	8000cf8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <HAL_ADC_ConfigChannel+0x1e8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <HAL_ADC_ConfigChannel+0x1ec>)
 8000cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ccc:	0c9a      	lsrs	r2, r3, #18
 8000cce:	4613      	mov	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cd8:	e002      	b.n	8000ce0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f9      	bne.n	8000cda <HAL_ADC_ConfigChannel+0x1b2>
 8000ce6:	e007      	b.n	8000cf8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cec:	f043 0220 	orr.w	r2, r3, #32
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	40012400 	.word	0x40012400
 8000d10:	20000000 	.word	0x20000000
 8000d14:	431bde83 	.word	0x431bde83

08000d18 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d12e      	bne.n	8000d90 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0201 	bic.w	r2, r2, #1
 8000d40:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d42:	f7ff fdeb 	bl	800091c <HAL_GetTick>
 8000d46:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d48:	e01b      	b.n	8000d82 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d4a:	f7ff fde7 	bl	800091c <HAL_GetTick>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d914      	bls.n	8000d82 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d10d      	bne.n	8000d82 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6a:	f043 0210 	orr.w	r2, r3, #16
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d76:	f043 0201 	orr.w	r2, r3, #1
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e007      	b.n	8000d92 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d0dc      	beq.n	8000d4a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0b      	blt.n	8000e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f003 021f 	and.w	r2, r3, #31
 8000e18:	4906      	ldr	r1, [pc, #24]	; (8000e34 <__NVIC_EnableIRQ+0x34>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	2001      	movs	r0, #1
 8000e22:	fa00 f202 	lsl.w	r2, r0, r2
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	; (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f00:	d301      	bcc.n	8000f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00f      	b.n	8000f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <SysTick_Config+0x40>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0e:	210f      	movs	r1, #15
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f7ff ff90 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SysTick_Config+0x40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SysTick_Config+0x40>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff2d 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff42 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ff90 	bl	8000e8c <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff5f 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff35 	bl	8000e00 <__NVIC_EnableIRQ>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffa2 	bl	8000ef0 <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b08b      	sub	sp, #44	; 0x2c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fca:	e169      	b.n	80012a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 8158 	bne.w	800129a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4a9a      	ldr	r2, [pc, #616]	; (8001258 <HAL_GPIO_Init+0x2a0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d05e      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8000ff4:	4a98      	ldr	r2, [pc, #608]	; (8001258 <HAL_GPIO_Init+0x2a0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d875      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8000ffa:	4a98      	ldr	r2, [pc, #608]	; (800125c <HAL_GPIO_Init+0x2a4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d058      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8001000:	4a96      	ldr	r2, [pc, #600]	; (800125c <HAL_GPIO_Init+0x2a4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d86f      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8001006:	4a96      	ldr	r2, [pc, #600]	; (8001260 <HAL_GPIO_Init+0x2a8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d052      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 800100c:	4a94      	ldr	r2, [pc, #592]	; (8001260 <HAL_GPIO_Init+0x2a8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d869      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8001012:	4a94      	ldr	r2, [pc, #592]	; (8001264 <HAL_GPIO_Init+0x2ac>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d04c      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8001018:	4a92      	ldr	r2, [pc, #584]	; (8001264 <HAL_GPIO_Init+0x2ac>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d863      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 800101e:	4a92      	ldr	r2, [pc, #584]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d046      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8001024:	4a90      	ldr	r2, [pc, #576]	; (8001268 <HAL_GPIO_Init+0x2b0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d85d      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 800102a:	2b12      	cmp	r3, #18
 800102c:	d82a      	bhi.n	8001084 <HAL_GPIO_Init+0xcc>
 800102e:	2b12      	cmp	r3, #18
 8001030:	d859      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8001032:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <HAL_GPIO_Init+0x80>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	080010b3 	.word	0x080010b3
 800103c:	0800108d 	.word	0x0800108d
 8001040:	0800109f 	.word	0x0800109f
 8001044:	080010e1 	.word	0x080010e1
 8001048:	080010e7 	.word	0x080010e7
 800104c:	080010e7 	.word	0x080010e7
 8001050:	080010e7 	.word	0x080010e7
 8001054:	080010e7 	.word	0x080010e7
 8001058:	080010e7 	.word	0x080010e7
 800105c:	080010e7 	.word	0x080010e7
 8001060:	080010e7 	.word	0x080010e7
 8001064:	080010e7 	.word	0x080010e7
 8001068:	080010e7 	.word	0x080010e7
 800106c:	080010e7 	.word	0x080010e7
 8001070:	080010e7 	.word	0x080010e7
 8001074:	080010e7 	.word	0x080010e7
 8001078:	080010e7 	.word	0x080010e7
 800107c:	08001095 	.word	0x08001095
 8001080:	080010a9 	.word	0x080010a9
 8001084:	4a79      	ldr	r2, [pc, #484]	; (800126c <HAL_GPIO_Init+0x2b4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800108a:	e02c      	b.n	80010e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	623b      	str	r3, [r7, #32]
          break;
 8001092:	e029      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	3304      	adds	r3, #4
 800109a:	623b      	str	r3, [r7, #32]
          break;
 800109c:	e024      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	3308      	adds	r3, #8
 80010a4:	623b      	str	r3, [r7, #32]
          break;
 80010a6:	e01f      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	330c      	adds	r3, #12
 80010ae:	623b      	str	r3, [r7, #32]
          break;
 80010b0:	e01a      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ba:	2304      	movs	r3, #4
 80010bc:	623b      	str	r3, [r7, #32]
          break;
 80010be:	e013      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d105      	bne.n	80010d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c8:	2308      	movs	r3, #8
 80010ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	611a      	str	r2, [r3, #16]
          break;
 80010d2:	e009      	b.n	80010e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d4:	2308      	movs	r3, #8
 80010d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	615a      	str	r2, [r3, #20]
          break;
 80010de:	e003      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
          break;
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          break;
 80010e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	2bff      	cmp	r3, #255	; 0xff
 80010ec:	d801      	bhi.n	80010f2 <HAL_GPIO_Init+0x13a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	e001      	b.n	80010f6 <HAL_GPIO_Init+0x13e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3304      	adds	r3, #4
 80010f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	2bff      	cmp	r3, #255	; 0xff
 80010fc:	d802      	bhi.n	8001104 <HAL_GPIO_Init+0x14c>
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	e002      	b.n	800110a <HAL_GPIO_Init+0x152>
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	3b08      	subs	r3, #8
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	210f      	movs	r1, #15
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	401a      	ands	r2, r3
 800111c:	6a39      	ldr	r1, [r7, #32]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	431a      	orrs	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 80b1 	beq.w	800129a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001138:	4b4d      	ldr	r3, [pc, #308]	; (8001270 <HAL_GPIO_Init+0x2b8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a4c      	ldr	r2, [pc, #304]	; (8001270 <HAL_GPIO_Init+0x2b8>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <HAL_GPIO_Init+0x2b8>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001150:	4a48      	ldr	r2, [pc, #288]	; (8001274 <HAL_GPIO_Init+0x2bc>)
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a40      	ldr	r2, [pc, #256]	; (8001278 <HAL_GPIO_Init+0x2c0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d013      	beq.n	80011a4 <HAL_GPIO_Init+0x1ec>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a3f      	ldr	r2, [pc, #252]	; (800127c <HAL_GPIO_Init+0x2c4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d00d      	beq.n	80011a0 <HAL_GPIO_Init+0x1e8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a3e      	ldr	r2, [pc, #248]	; (8001280 <HAL_GPIO_Init+0x2c8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d007      	beq.n	800119c <HAL_GPIO_Init+0x1e4>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a3d      	ldr	r2, [pc, #244]	; (8001284 <HAL_GPIO_Init+0x2cc>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d101      	bne.n	8001198 <HAL_GPIO_Init+0x1e0>
 8001194:	2303      	movs	r3, #3
 8001196:	e006      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 8001198:	2304      	movs	r3, #4
 800119a:	e004      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 800119c:	2302      	movs	r3, #2
 800119e:	e002      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 80011a4:	2300      	movs	r3, #0
 80011a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a8:	f002 0203 	and.w	r2, r2, #3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4093      	lsls	r3, r2
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011b6:	492f      	ldr	r1, [pc, #188]	; (8001274 <HAL_GPIO_Init+0x2bc>)
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011d0:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	492c      	ldr	r1, [pc, #176]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	608b      	str	r3, [r1, #8]
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011de:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4928      	ldr	r1, [pc, #160]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	4922      	ldr	r1, [pc, #136]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	60cb      	str	r3, [r1, #12]
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	43db      	mvns	r3, r3
 800120e:	491e      	ldr	r1, [pc, #120]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001210:	4013      	ands	r3, r2
 8001212:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4918      	ldr	r1, [pc, #96]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	4914      	ldr	r1, [pc, #80]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 8001238:	4013      	ands	r3, r2
 800123a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d021      	beq.n	800128c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	490e      	ldr	r1, [pc, #56]	; (8001288 <HAL_GPIO_Init+0x2d0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e021      	b.n	800129a <HAL_GPIO_Init+0x2e2>
 8001256:	bf00      	nop
 8001258:	10320000 	.word	0x10320000
 800125c:	10310000 	.word	0x10310000
 8001260:	10220000 	.word	0x10220000
 8001264:	10210000 	.word	0x10210000
 8001268:	10120000 	.word	0x10120000
 800126c:	10110000 	.word	0x10110000
 8001270:	40021000 	.word	0x40021000
 8001274:	40010000 	.word	0x40010000
 8001278:	40010800 	.word	0x40010800
 800127c:	40010c00 	.word	0x40010c00
 8001280:	40011000 	.word	0x40011000
 8001284:	40011400 	.word	0x40011400
 8001288:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_GPIO_Init+0x304>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	43db      	mvns	r3, r3
 8001294:	4909      	ldr	r1, [pc, #36]	; (80012bc <HAL_GPIO_Init+0x304>)
 8001296:	4013      	ands	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	3301      	adds	r3, #1
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	fa22 f303 	lsr.w	r3, r2, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f47f ae8e 	bne.w	8000fcc <HAL_GPIO_Init+0x14>
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	372c      	adds	r7, #44	; 0x2c
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	40010400 	.word	0x40010400

080012c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d002      	beq.n	80012de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012d8:	2301      	movs	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e001      	b.n	80012e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	4013      	ands	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f960 	bl	80005d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e12b      	b.n	800158a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d106      	bne.n	800134c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff f9d8 	bl	80006fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2224      	movs	r2, #36	; 0x24
 8001350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0201 	bic.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001372:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001382:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001384:	f001 f932 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8001388:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a81      	ldr	r2, [pc, #516]	; (8001594 <HAL_I2C_Init+0x274>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d807      	bhi.n	80013a4 <HAL_I2C_Init+0x84>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4a80      	ldr	r2, [pc, #512]	; (8001598 <HAL_I2C_Init+0x278>)
 8001398:	4293      	cmp	r3, r2
 800139a:	bf94      	ite	ls
 800139c:	2301      	movls	r3, #1
 800139e:	2300      	movhi	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	e006      	b.n	80013b2 <HAL_I2C_Init+0x92>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4a7d      	ldr	r2, [pc, #500]	; (800159c <HAL_I2C_Init+0x27c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	bf94      	ite	ls
 80013ac:	2301      	movls	r3, #1
 80013ae:	2300      	movhi	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0e7      	b.n	800158a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4a78      	ldr	r2, [pc, #480]	; (80015a0 <HAL_I2C_Init+0x280>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0c9b      	lsrs	r3, r3, #18
 80013c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a6a      	ldr	r2, [pc, #424]	; (8001594 <HAL_I2C_Init+0x274>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d802      	bhi.n	80013f4 <HAL_I2C_Init+0xd4>
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3301      	adds	r3, #1
 80013f2:	e009      	b.n	8001408 <HAL_I2C_Init+0xe8>
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	4a69      	ldr	r2, [pc, #420]	; (80015a4 <HAL_I2C_Init+0x284>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	099b      	lsrs	r3, r3, #6
 8001406:	3301      	adds	r3, #1
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	430b      	orrs	r3, r1
 800140e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800141a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	495c      	ldr	r1, [pc, #368]	; (8001594 <HAL_I2C_Init+0x274>)
 8001424:	428b      	cmp	r3, r1
 8001426:	d819      	bhi.n	800145c <HAL_I2C_Init+0x13c>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1e59      	subs	r1, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fbb1 f3f3 	udiv	r3, r1, r3
 8001436:	1c59      	adds	r1, r3, #1
 8001438:	f640 73fc 	movw	r3, #4092	; 0xffc
 800143c:	400b      	ands	r3, r1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00a      	beq.n	8001458 <HAL_I2C_Init+0x138>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1e59      	subs	r1, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001450:	3301      	adds	r3, #1
 8001452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001456:	e051      	b.n	80014fc <HAL_I2C_Init+0x1dc>
 8001458:	2304      	movs	r3, #4
 800145a:	e04f      	b.n	80014fc <HAL_I2C_Init+0x1dc>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d111      	bne.n	8001488 <HAL_I2C_Init+0x168>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1e58      	subs	r0, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6859      	ldr	r1, [r3, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	440b      	add	r3, r1
 8001472:	fbb0 f3f3 	udiv	r3, r0, r3
 8001476:	3301      	adds	r3, #1
 8001478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	e012      	b.n	80014ae <HAL_I2C_Init+0x18e>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e58      	subs	r0, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	0099      	lsls	r1, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	fbb0 f3f3 	udiv	r3, r0, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_I2C_Init+0x196>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e022      	b.n	80014fc <HAL_I2C_Init+0x1dc>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10e      	bne.n	80014dc <HAL_I2C_Init+0x1bc>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1e58      	subs	r0, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6859      	ldr	r1, [r3, #4]
 80014c6:	460b      	mov	r3, r1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	440b      	add	r3, r1
 80014cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014da:	e00f      	b.n	80014fc <HAL_I2C_Init+0x1dc>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1e58      	subs	r0, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	0099      	lsls	r1, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f2:	3301      	adds	r3, #1
 80014f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	6809      	ldr	r1, [r1, #0]
 8001500:	4313      	orrs	r3, r2
 8001502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69da      	ldr	r2, [r3, #28]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800152a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6911      	ldr	r1, [r2, #16]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68d2      	ldr	r2, [r2, #12]
 8001536:	4311      	orrs	r1, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	430b      	orrs	r3, r1
 800153e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2220      	movs	r2, #32
 8001576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	000186a0 	.word	0x000186a0
 8001598:	001e847f 	.word	0x001e847f
 800159c:	003d08ff 	.word	0x003d08ff
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	10624dd3 	.word	0x10624dd3

080015a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	461a      	mov	r2, r3
 80015b4:	460b      	mov	r3, r1
 80015b6:	817b      	strh	r3, [r7, #10]
 80015b8:	4613      	mov	r3, r2
 80015ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff f9ae 	bl	800091c <HAL_GetTick>
 80015c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b20      	cmp	r3, #32
 80015cc:	f040 80e0 	bne.w	8001790 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2319      	movs	r3, #25
 80015d6:	2201      	movs	r2, #1
 80015d8:	4970      	ldr	r1, [pc, #448]	; (800179c <HAL_I2C_Master_Transmit+0x1f4>)
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f000 f964 	bl	80018a8 <I2C_WaitOnFlagUntilTimeout>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015e6:	2302      	movs	r3, #2
 80015e8:	e0d3      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_I2C_Master_Transmit+0x50>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e0cc      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ea>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b01      	cmp	r3, #1
 800160c:	d007      	beq.n	800161e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0201 	orr.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800162c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2221      	movs	r2, #33	; 0x21
 8001632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2210      	movs	r2, #16
 800163a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	893a      	ldrh	r2, [r7, #8]
 800164e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4a50      	ldr	r2, [pc, #320]	; (80017a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001660:	8979      	ldrh	r1, [r7, #10]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	6a3a      	ldr	r2, [r7, #32]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 f89c 	bl	80017a4 <I2C_MasterRequestWrite>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e08d      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800168c:	e066      	b.n	800175c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	6a39      	ldr	r1, [r7, #32]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fa22 	bl	8001adc <I2C_WaitOnTXEFlagUntilTimeout>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00d      	beq.n	80016ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d107      	bne.n	80016b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06b      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d11b      	bne.n	8001730 <HAL_I2C_Master_Transmit+0x188>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d017      	beq.n	8001730 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	6a39      	ldr	r1, [r7, #32]
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fa19 	bl	8001b6c <I2C_WaitOnBTFFlagUntilTimeout>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00d      	beq.n	800175c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	2b04      	cmp	r3, #4
 8001746:	d107      	bne.n	8001758 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001756:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e01a      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	d194      	bne.n	800168e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2220      	movs	r2, #32
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	e000      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001790:	2302      	movs	r3, #2
  }
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	00100002 	.word	0x00100002
 80017a0:	ffff0000 	.word	0xffff0000

080017a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	460b      	mov	r3, r1
 80017b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d006      	beq.n	80017ce <I2C_MasterRequestWrite+0x2a>
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d003      	beq.n	80017ce <I2C_MasterRequestWrite+0x2a>
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017cc:	d108      	bne.n	80017e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	e00b      	b.n	80017f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	2b12      	cmp	r3, #18
 80017e6:	d107      	bne.n	80017f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 f84f 	bl	80018a8 <I2C_WaitOnFlagUntilTimeout>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00d      	beq.n	800182c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800181e:	d103      	bne.n	8001828 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e035      	b.n	8001898 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001834:	d108      	bne.n	8001848 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001836:	897b      	ldrh	r3, [r7, #10]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	e01b      	b.n	8001880 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001848:	897b      	ldrh	r3, [r7, #10]
 800184a:	11db      	asrs	r3, r3, #7
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f003 0306 	and.w	r3, r3, #6
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f063 030f 	orn	r3, r3, #15
 8001858:	b2da      	uxtb	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	490e      	ldr	r1, [pc, #56]	; (80018a0 <I2C_MasterRequestWrite+0xfc>)
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f898 	bl	800199c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e010      	b.n	8001898 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4907      	ldr	r1, [pc, #28]	; (80018a4 <I2C_MasterRequestWrite+0x100>)
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 f888 	bl	800199c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	00010008 	.word	0x00010008
 80018a4:	00010002 	.word	0x00010002

080018a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b8:	e048      	b.n	800194c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c0:	d044      	beq.n	800194c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018c2:	f7ff f82b 	bl	800091c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d302      	bcc.n	80018d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d139      	bne.n	800194c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10d      	bne.n	80018fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	43da      	mvns	r2, r3
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	4013      	ands	r3, r2
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf0c      	ite	eq
 80018f4:	2301      	moveq	r3, #1
 80018f6:	2300      	movne	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	e00c      	b.n	8001918 <I2C_WaitOnFlagUntilTimeout+0x70>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	43da      	mvns	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	4013      	ands	r3, r2
 800190a:	b29b      	uxth	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	429a      	cmp	r2, r3
 800191c:	d116      	bne.n	800194c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2220      	movs	r2, #32
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f043 0220 	orr.w	r2, r3, #32
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e023      	b.n	8001994 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	0c1b      	lsrs	r3, r3, #16
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d10d      	bne.n	8001972 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	43da      	mvns	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	4013      	ands	r3, r2
 8001962:	b29b      	uxth	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	e00c      	b.n	800198c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	43da      	mvns	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	4013      	ands	r3, r2
 800197e:	b29b      	uxth	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	bf0c      	ite	eq
 8001984:	2301      	moveq	r3, #1
 8001986:	2300      	movne	r3, #0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	429a      	cmp	r2, r3
 8001990:	d093      	beq.n	80018ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019aa:	e071      	b.n	8001a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ba:	d123      	bne.n	8001a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f043 0204 	orr.w	r2, r3, #4
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e067      	b.n	8001ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0a:	d041      	beq.n	8001a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a0c:	f7fe ff86 	bl	800091c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d302      	bcc.n	8001a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d136      	bne.n	8001a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	0c1b      	lsrs	r3, r3, #16
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d10c      	bne.n	8001a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4013      	ands	r3, r2
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	bf14      	ite	ne
 8001a3e:	2301      	movne	r3, #1
 8001a40:	2300      	moveq	r3, #0
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	e00b      	b.n	8001a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	43da      	mvns	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	4013      	ands	r3, r2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d016      	beq.n	8001a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f043 0220 	orr.w	r2, r3, #32
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e021      	b.n	8001ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	0c1b      	lsrs	r3, r3, #16
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d10c      	bne.n	8001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e00b      	b.n	8001acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bf14      	ite	ne
 8001ac6:	2301      	movne	r3, #1
 8001ac8:	2300      	moveq	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f47f af6d 	bne.w	80019ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ae8:	e034      	b.n	8001b54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 f886 	bl	8001bfc <I2C_IsAcknowledgeFailed>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e034      	b.n	8001b64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d028      	beq.n	8001b54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b02:	f7fe ff0b 	bl	800091c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d302      	bcc.n	8001b18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d11d      	bne.n	8001b54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	2b80      	cmp	r3, #128	; 0x80
 8001b24:	d016      	beq.n	8001b54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e007      	b.n	8001b64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5e:	2b80      	cmp	r3, #128	; 0x80
 8001b60:	d1c3      	bne.n	8001aea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b78:	e034      	b.n	8001be4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f83e 	bl	8001bfc <I2C_IsAcknowledgeFailed>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e034      	b.n	8001bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d028      	beq.n	8001be4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b92:	f7fe fec3 	bl	800091c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d302      	bcc.n	8001ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d11d      	bne.n	8001be4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d016      	beq.n	8001be4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f043 0220 	orr.w	r2, r3, #32
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e007      	b.n	8001bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d1c3      	bne.n	8001b7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c12:	d11b      	bne.n	8001c4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f043 0204 	orr.w	r2, r3, #4
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5a:	b08b      	sub	sp, #44	; 0x2c
 8001c5c:	af06      	add	r7, sp, #24
 8001c5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0f1      	b.n	8001e4e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7fe fd7a 	bl	8000778 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2203      	movs	r2, #3
 8001c88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 fda3 	bl	80027dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	687e      	ldr	r6, [r7, #4]
 8001c9e:	466d      	mov	r5, sp
 8001ca0:	f106 0410 	add.w	r4, r6, #16
 8001ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	602b      	str	r3, [r5, #0]
 8001cac:	1d33      	adds	r3, r6, #4
 8001cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb0:	6838      	ldr	r0, [r7, #0]
 8001cb2:	f000 fd83 	bl	80027bc <USB_CoreInit>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0c2      	b.n	8001e4e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fd9e 	bl	8002810 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e040      	b.n	8001d5c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	440b      	add	r3, r1
 8001cea:	3301      	adds	r3, #1
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	7bfa      	ldrb	r2, [r7, #15]
 8001d02:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	3303      	adds	r3, #3
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	3338      	adds	r3, #56	; 0x38
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d2e:	7bfa      	ldrb	r2, [r7, #15]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	333c      	adds	r3, #60	; 0x3c
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	3340      	adds	r3, #64	; 0x40
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d3b9      	bcc.n	8001cda <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e044      	b.n	8001df6 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	440b      	add	r3, r1
 8001d7a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	440b      	add	r3, r1
 8001da6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dda:	7bfa      	ldrb	r2, [r7, #15]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	3301      	adds	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d3b5      	bcc.n	8001d6c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	687e      	ldr	r6, [r7, #4]
 8001e08:	466d      	mov	r5, sp
 8001e0a:	f106 0410 	add.w	r4, r6, #16
 8001e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	602b      	str	r3, [r5, #0]
 8001e16:	1d33      	adds	r3, r6, #4
 8001e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1a:	6838      	ldr	r0, [r7, #0]
 8001e1c:	f000 fd04 	bl	8002828 <USB_DevInit>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00d      	b.n	8001e4e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fd0e 	bl	8002868 <USB_DevDisconnect>

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e272      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8087 	beq.w	8001f86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e78:	4b92      	ldr	r3, [pc, #584]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d00c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e84:	4b8f      	ldr	r3, [pc, #572]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d112      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
 8001e90:	4b8c      	ldr	r3, [pc, #560]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	4b89      	ldr	r3, [pc, #548]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d06c      	beq.n	8001f84 <HAL_RCC_OscConfig+0x12c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d168      	bne.n	8001f84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e24c      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x76>
 8001ec0:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a7f      	ldr	r2, [pc, #508]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e02e      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x98>
 8001ed6:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a7a      	ldr	r2, [pc, #488]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b78      	ldr	r3, [pc, #480]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a77      	ldr	r2, [pc, #476]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01d      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0xbc>
 8001efa:	4b72      	ldr	r3, [pc, #456]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a71      	ldr	r2, [pc, #452]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001f14:	4b6b      	ldr	r3, [pc, #428]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6a      	ldr	r2, [pc, #424]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a67      	ldr	r2, [pc, #412]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe fcf2 	bl	800091c <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7fe fcee 	bl	800091c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e200      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0xe4>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fcde 	bl	800091c <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7fe fcda 	bl	800091c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1ec      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x10c>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d063      	beq.n	800205a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f92:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	4b43      	ldr	r3, [pc, #268]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1c0      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4939      	ldr	r1, [pc, #228]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	e03a      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fc93 	bl	800091c <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7fe fc8f 	bl	800091c <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1a1      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4927      	ldr	r1, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e015      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe fc72 	bl	800091c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203c:	f7fe fc6e 	bl	800091c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e180      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d03a      	beq.n	80020dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d019      	beq.n	80020a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7fe fc52 	bl	800091c <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207c:	f7fe fc4e 	bl	800091c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e160      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800209a:	2001      	movs	r0, #1
 800209c:	f000 faba 	bl	8002614 <RCC_Delay>
 80020a0:	e01c      	b.n	80020dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fc38 	bl	800091c <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ae:	e00f      	b.n	80020d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b0:	f7fe fc34 	bl	800091c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d908      	bls.n	80020d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e146      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	42420000 	.word	0x42420000
 80020cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	4b92      	ldr	r3, [pc, #584]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1e9      	bne.n	80020b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a6 	beq.w	8002236 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b8b      	ldr	r3, [pc, #556]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a87      	ldr	r2, [pc, #540]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b85      	ldr	r3, [pc, #532]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b82      	ldr	r3, [pc, #520]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b7f      	ldr	r3, [pc, #508]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7e      	ldr	r2, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7fe fbf5 	bl	800091c <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7fe fbf1 	bl	800091c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b64      	cmp	r3, #100	; 0x64
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e103      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b75      	ldr	r3, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x312>
 800215c:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a6e      	ldr	r2, [pc, #440]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e02d      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x334>
 8002172:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a69      	ldr	r2, [pc, #420]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b67      	ldr	r3, [pc, #412]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a66      	ldr	r2, [pc, #408]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	e01c      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x356>
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a60      	ldr	r2, [pc, #384]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	4b5e      	ldr	r3, [pc, #376]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a5d      	ldr	r2, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 80021ae:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a5a      	ldr	r2, [pc, #360]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4b58      	ldr	r3, [pc, #352]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a57      	ldr	r2, [pc, #348]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7fe fba5 	bl	800091c <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe fba1 	bl	800091c <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0b1      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ee      	beq.n	80021d6 <HAL_RCC_OscConfig+0x37e>
 80021f8:	e014      	b.n	8002224 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7fe fb8f 	bl	800091c <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe fb8b 	bl	800091c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e09b      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ee      	bne.n	8002202 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a3b      	ldr	r2, [pc, #236]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002234:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8087 	beq.w	800234e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d061      	beq.n	8002310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d146      	bne.n	80022e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fb5f 	bl	800091c <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe fb5b 	bl	800091c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e06d      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002274:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d108      	bne.n	800229c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4921      	ldr	r1, [pc, #132]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a19      	ldr	r1, [r3, #32]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	430b      	orrs	r3, r1
 80022ae:	491b      	ldr	r1, [pc, #108]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe fb2f 	bl	800091c <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7fe fb2b 	bl	800091c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e03d      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x46a>
 80022e0:	e035      	b.n	800234e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fb18 	bl	800091c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fb14 	bl	800091c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e026      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x498>
 800230e:	e01e      	b.n	800234e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d107      	bne.n	8002328 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e019      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	429a      	cmp	r2, r3
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0d0      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b6a      	ldr	r3, [pc, #424]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d910      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4965      	ldr	r1, [pc, #404]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d040      	beq.n	800247c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d115      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e073      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06b      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243a:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4936      	ldr	r1, [pc, #216]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800244c:	f7fe fa66 	bl	800091c <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7fe fa62 	bl	800091c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e053      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 020c 	and.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	429a      	cmp	r2, r3
 800247a:	d1eb      	bne.n	8002454 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d210      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4922      	ldr	r1, [pc, #136]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490a      	ldr	r1, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1cc>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1d0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f9c4 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000
 8002520:	40021000 	.word	0x40021000
 8002524:	0800294c 	.word	0x0800294c
 8002528:	20000000 	.word	0x20000000
 800252c:	20000004 	.word	0x20000004

08002530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d002      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x30>
 800255a:	2b08      	cmp	r3, #8
 800255c:	d003      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x36>
 800255e:	e027      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002562:	613b      	str	r3, [r7, #16]
      break;
 8002564:	e027      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	0c9b      	lsrs	r3, r3, #18
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d010      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	0c5b      	lsrs	r3, r3, #17
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002592:	fb03 f202 	mul.w	r2, r3, r2
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e004      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	613b      	str	r3, [r7, #16]
      break;
 80025ae:	e002      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025b2:	613b      	str	r3, [r7, #16]
      break;
 80025b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b6:	693b      	ldr	r3, [r7, #16]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	08002964 	.word	0x08002964
 80025d0:	08002974 	.word	0x08002974
 80025d4:	003d0900 	.word	0x003d0900

080025d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b02      	ldr	r3, [pc, #8]	; (80025e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	20000000 	.word	0x20000000

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f0:	f7ff fff2 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4903      	ldr	r1, [pc, #12]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002602:	5ccb      	ldrb	r3, [r1, r3]
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	0800295c 	.word	0x0800295c

08002614 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <RCC_Delay+0x34>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <RCC_Delay+0x38>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0a5b      	lsrs	r3, r3, #9
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002630:	bf00      	nop
  }
  while (Delay --);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1e5a      	subs	r2, r3, #1
 8002636:	60fa      	str	r2, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f9      	bne.n	8002630 <RCC_Delay+0x1c>
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	20000000 	.word	0x20000000
 800264c:	10624dd3 	.word	0x10624dd3

08002650 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d07d      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800266c:	2300      	movs	r3, #0
 800266e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002670:	4b4f      	ldr	r3, [pc, #316]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267c:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002686:	61d3      	str	r3, [r2, #28]
 8002688:	4b49      	ldr	r3, [pc, #292]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002694:	2301      	movs	r3, #1
 8002696:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d118      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b0:	f7fe f934 	bl	800091c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	e008      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b8:	f7fe f930 	bl	800091c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e06d      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026d6:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d02e      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d027      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026f4:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026fe:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002704:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800270a:	4a29      	ldr	r2, [pc, #164]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d014      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271a:	f7fe f8ff 	bl	800091c <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	e00a      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe f8fb 	bl	800091c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e036      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002738:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ee      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4917      	ldr	r1, [pc, #92]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002752:	4313      	orrs	r3, r2
 8002754:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002756:	7dfb      	ldrb	r3, [r7, #23]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d105      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275c:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002766:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	490b      	ldr	r1, [pc, #44]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4904      	ldr	r1, [pc, #16]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40007000 	.word	0x40007000
 80027b8:	42420440 	.word	0x42420440

080027bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80027bc:	b084      	sub	sp, #16
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	f107 0014 	add.w	r0, r7, #20
 80027ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	b004      	add	sp, #16
 80027da:	4770      	bx	lr

080027dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80027e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80027e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	4013      	ands	r3, r2
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002828:	b084      	sub	sp, #16
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	f107 0014 	add.w	r0, r7, #20
 8002836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	b004      	add	sp, #16
 8002866:	4770      	bx	lr

08002868 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <memset>:
 800287c:	4603      	mov	r3, r0
 800287e:	4402      	add	r2, r0
 8002880:	4293      	cmp	r3, r2
 8002882:	d100      	bne.n	8002886 <memset+0xa>
 8002884:	4770      	bx	lr
 8002886:	f803 1b01 	strb.w	r1, [r3], #1
 800288a:	e7f9      	b.n	8002880 <memset+0x4>

0800288c <__libc_init_array>:
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	2600      	movs	r6, #0
 8002890:	4d0c      	ldr	r5, [pc, #48]	; (80028c4 <__libc_init_array+0x38>)
 8002892:	4c0d      	ldr	r4, [pc, #52]	; (80028c8 <__libc_init_array+0x3c>)
 8002894:	1b64      	subs	r4, r4, r5
 8002896:	10a4      	asrs	r4, r4, #2
 8002898:	42a6      	cmp	r6, r4
 800289a:	d109      	bne.n	80028b0 <__libc_init_array+0x24>
 800289c:	f000 f81a 	bl	80028d4 <_init>
 80028a0:	2600      	movs	r6, #0
 80028a2:	4d0a      	ldr	r5, [pc, #40]	; (80028cc <__libc_init_array+0x40>)
 80028a4:	4c0a      	ldr	r4, [pc, #40]	; (80028d0 <__libc_init_array+0x44>)
 80028a6:	1b64      	subs	r4, r4, r5
 80028a8:	10a4      	asrs	r4, r4, #2
 80028aa:	42a6      	cmp	r6, r4
 80028ac:	d105      	bne.n	80028ba <__libc_init_array+0x2e>
 80028ae:	bd70      	pop	{r4, r5, r6, pc}
 80028b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b4:	4798      	blx	r3
 80028b6:	3601      	adds	r6, #1
 80028b8:	e7ee      	b.n	8002898 <__libc_init_array+0xc>
 80028ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80028be:	4798      	blx	r3
 80028c0:	3601      	adds	r6, #1
 80028c2:	e7f2      	b.n	80028aa <__libc_init_array+0x1e>
 80028c4:	08002978 	.word	0x08002978
 80028c8:	08002978 	.word	0x08002978
 80028cc:	08002978 	.word	0x08002978
 80028d0:	0800297c 	.word	0x0800297c

080028d4 <_init>:
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	bf00      	nop
 80028d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028da:	bc08      	pop	{r3}
 80028dc:	469e      	mov	lr, r3
 80028de:	4770      	bx	lr

080028e0 <_fini>:
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e2:	bf00      	nop
 80028e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e6:	bc08      	pop	{r3}
 80028e8:	469e      	mov	lr, r3
 80028ea:	4770      	bx	lr
