
lcd_teclado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003d84  08003d84  00013d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e20  08003e20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e20  08003e20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e20  08003e20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003e34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003e34  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b48b  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d4f  00000000  00000000  0002b503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  0002d258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ac  00000000  00000000  0002dec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c3e  00000000  00000000  0002e874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f63a  00000000  00000000  000464b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a208  00000000  00000000  00055aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033cc  00000000  00000000  000dfcf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e30c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d6c 	.word	0x08003d6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003d6c 	.word	0x08003d6c

0800014c <KEYPAD_Scan>:
}



void KEYPAD_Scan(uint16_t au16_Instance)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	uint8_t au8_ReadState[ROWS] = {0};
 8000156:	2300      	movs	r3, #0
 8000158:	60bb      	str	r3, [r7, #8]
	uint8_t au8_ReadSt;
	uint8_t i=0;
 800015a:	2300      	movs	r3, #0
 800015c:	73fb      	strb	r3, [r7, #15]

	/* Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 800015e:	2300      	movs	r3, #0
 8000160:	73fb      	strb	r3, [r7, #15]
 8000162:	e01c      	b.n	800019e <KEYPAD_Scan+0x52>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 8000164:	88fa      	ldrh	r2, [r7, #6]
 8000166:	7bf9      	ldrb	r1, [r7, #15]
 8000168:	48a7      	ldr	r0, [pc, #668]	; (8000408 <KEYPAD_Scan+0x2bc>)
 800016a:	4613      	mov	r3, r2
 800016c:	005b      	lsls	r3, r3, #1
 800016e:	4413      	add	r3, r2
 8000170:	009b      	lsls	r3, r3, #2
 8000172:	440b      	add	r3, r1
 8000174:	3306      	adds	r3, #6
 8000176:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800017a:	88fa      	ldrh	r2, [r7, #6]
 800017c:	7bf9      	ldrb	r1, [r7, #15]
 800017e:	4ca2      	ldr	r4, [pc, #648]	; (8000408 <KEYPAD_Scan+0x2bc>)
 8000180:	4613      	mov	r3, r2
 8000182:	005b      	lsls	r3, r3, #1
 8000184:	4413      	add	r3, r2
 8000186:	00db      	lsls	r3, r3, #3
 8000188:	440b      	add	r3, r1
 800018a:	3314      	adds	r3, #20
 800018c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8000190:	2201      	movs	r2, #1
 8000192:	4619      	mov	r1, r3
 8000194:	f001 ffe1 	bl	800215a <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 8000198:	7bfb      	ldrb	r3, [r7, #15]
 800019a:	3301      	adds	r3, #1
 800019c:	73fb      	strb	r3, [r7, #15]
 800019e:	7bfb      	ldrb	r3, [r7, #15]
 80001a0:	2b03      	cmp	r3, #3
 80001a2:	d9df      	bls.n	8000164 <KEYPAD_Scan+0x18>
	}
	/* Steady State: Read The ROW Pins To Know If Any Key Is Pressed At All or Not */
	for(i=0; i<ROWS; i++)
 80001a4:	2300      	movs	r3, #0
 80001a6:	73fb      	strb	r3, [r7, #15]
 80001a8:	e022      	b.n	80001f0 <KEYPAD_Scan+0xa4>
	{
		au8_ReadState[i] = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], KEYPAD_CfgParam[au16_Instance].ROW_PIN[i]);
 80001aa:	88fa      	ldrh	r2, [r7, #6]
 80001ac:	7bf9      	ldrb	r1, [r7, #15]
 80001ae:	4896      	ldr	r0, [pc, #600]	; (8000408 <KEYPAD_Scan+0x2bc>)
 80001b0:	4613      	mov	r3, r2
 80001b2:	005b      	lsls	r3, r3, #1
 80001b4:	4413      	add	r3, r2
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	440b      	add	r3, r1
 80001ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80001be:	88fa      	ldrh	r2, [r7, #6]
 80001c0:	7bf9      	ldrb	r1, [r7, #15]
 80001c2:	4c91      	ldr	r4, [pc, #580]	; (8000408 <KEYPAD_Scan+0x2bc>)
 80001c4:	4613      	mov	r3, r2
 80001c6:	005b      	lsls	r3, r3, #1
 80001c8:	4413      	add	r3, r2
 80001ca:	00db      	lsls	r3, r3, #3
 80001cc:	440b      	add	r3, r1
 80001ce:	3308      	adds	r3, #8
 80001d0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80001d4:	7bfc      	ldrb	r4, [r7, #15]
 80001d6:	4619      	mov	r1, r3
 80001d8:	f001 ffa8 	bl	800212c <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	461a      	mov	r2, r3
 80001e0:	f104 0310 	add.w	r3, r4, #16
 80001e4:	443b      	add	r3, r7
 80001e6:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<ROWS; i++)
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
 80001ec:	3301      	adds	r3, #1
 80001ee:	73fb      	strb	r3, [r7, #15]
 80001f0:	7bfb      	ldrb	r3, [r7, #15]
 80001f2:	2b03      	cmp	r3, #3
 80001f4:	d9d9      	bls.n	80001aa <KEYPAD_Scan+0x5e>
	}
	/* If Any member in array au8_ReadState is 1, we know that a key is pressed */
	/* And we'll keep changing the COL pins output pattern until we find the pressed key or keys */
	/* Else: We'll end the scan procedure at this point */
	if(au8_ReadState[0] | au8_ReadState[1] | au8_ReadState[2] | au8_ReadState[3])
 80001f6:	7a3a      	ldrb	r2, [r7, #8]
 80001f8:	7a7b      	ldrb	r3, [r7, #9]
 80001fa:	4313      	orrs	r3, r2
 80001fc:	b2da      	uxtb	r2, r3
 80001fe:	7abb      	ldrb	r3, [r7, #10]
 8000200:	4313      	orrs	r3, r2
 8000202:	b2da      	uxtb	r2, r3
 8000204:	7afb      	ldrb	r3, [r7, #11]
 8000206:	4313      	orrs	r3, r2
 8000208:	b2db      	uxtb	r3, r3
 800020a:	2b00      	cmp	r3, #0
 800020c:	f001 808d 	beq.w	800132a <KEYPAD_Scan+0x11de>
	{
		/*--[ First Row Check ]--*/
		if(au8_ReadState[0])
 8000210:	7a3b      	ldrb	r3, [r7, #8]
 8000212:	2b00      	cmp	r3, #0
 8000214:	f000 8200 	beq.w	8000618 <KEYPAD_Scan+0x4cc>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8000218:	88fa      	ldrh	r2, [r7, #6]
 800021a:	497b      	ldr	r1, [pc, #492]	; (8000408 <KEYPAD_Scan+0x2bc>)
 800021c:	4613      	mov	r3, r2
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	4413      	add	r3, r2
 8000222:	011b      	lsls	r3, r3, #4
 8000224:	440b      	add	r3, r1
 8000226:	3318      	adds	r3, #24
 8000228:	6818      	ldr	r0, [r3, #0]
 800022a:	88fa      	ldrh	r2, [r7, #6]
 800022c:	4976      	ldr	r1, [pc, #472]	; (8000408 <KEYPAD_Scan+0x2bc>)
 800022e:	4613      	mov	r3, r2
 8000230:	005b      	lsls	r3, r3, #1
 8000232:	4413      	add	r3, r2
 8000234:	011b      	lsls	r3, r3, #4
 8000236:	440b      	add	r3, r1
 8000238:	3328      	adds	r3, #40	; 0x28
 800023a:	881b      	ldrh	r3, [r3, #0]
 800023c:	2201      	movs	r2, #1
 800023e:	4619      	mov	r1, r3
 8000240:	f001 ff8b 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000244:	88fa      	ldrh	r2, [r7, #6]
 8000246:	4970      	ldr	r1, [pc, #448]	; (8000408 <KEYPAD_Scan+0x2bc>)
 8000248:	4613      	mov	r3, r2
 800024a:	005b      	lsls	r3, r3, #1
 800024c:	4413      	add	r3, r2
 800024e:	011b      	lsls	r3, r3, #4
 8000250:	440b      	add	r3, r1
 8000252:	331c      	adds	r3, #28
 8000254:	6818      	ldr	r0, [r3, #0]
 8000256:	88fa      	ldrh	r2, [r7, #6]
 8000258:	496b      	ldr	r1, [pc, #428]	; (8000408 <KEYPAD_Scan+0x2bc>)
 800025a:	4613      	mov	r3, r2
 800025c:	005b      	lsls	r3, r3, #1
 800025e:	4413      	add	r3, r2
 8000260:	011b      	lsls	r3, r3, #4
 8000262:	440b      	add	r3, r1
 8000264:	332a      	adds	r3, #42	; 0x2a
 8000266:	881b      	ldrh	r3, [r3, #0]
 8000268:	2200      	movs	r2, #0
 800026a:	4619      	mov	r1, r3
 800026c:	f001 ff75 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000270:	88fa      	ldrh	r2, [r7, #6]
 8000272:	4965      	ldr	r1, [pc, #404]	; (8000408 <KEYPAD_Scan+0x2bc>)
 8000274:	4613      	mov	r3, r2
 8000276:	005b      	lsls	r3, r3, #1
 8000278:	4413      	add	r3, r2
 800027a:	011b      	lsls	r3, r3, #4
 800027c:	440b      	add	r3, r1
 800027e:	3320      	adds	r3, #32
 8000280:	6818      	ldr	r0, [r3, #0]
 8000282:	88fa      	ldrh	r2, [r7, #6]
 8000284:	4960      	ldr	r1, [pc, #384]	; (8000408 <KEYPAD_Scan+0x2bc>)
 8000286:	4613      	mov	r3, r2
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	4413      	add	r3, r2
 800028c:	011b      	lsls	r3, r3, #4
 800028e:	440b      	add	r3, r1
 8000290:	332c      	adds	r3, #44	; 0x2c
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	2200      	movs	r2, #0
 8000296:	4619      	mov	r1, r3
 8000298:	f001 ff5f 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800029c:	88fa      	ldrh	r2, [r7, #6]
 800029e:	495a      	ldr	r1, [pc, #360]	; (8000408 <KEYPAD_Scan+0x2bc>)
 80002a0:	4613      	mov	r3, r2
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	4413      	add	r3, r2
 80002a6:	011b      	lsls	r3, r3, #4
 80002a8:	440b      	add	r3, r1
 80002aa:	3324      	adds	r3, #36	; 0x24
 80002ac:	6818      	ldr	r0, [r3, #0]
 80002ae:	88fa      	ldrh	r2, [r7, #6]
 80002b0:	4955      	ldr	r1, [pc, #340]	; (8000408 <KEYPAD_Scan+0x2bc>)
 80002b2:	4613      	mov	r3, r2
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	4413      	add	r3, r2
 80002b8:	011b      	lsls	r3, r3, #4
 80002ba:	440b      	add	r3, r1
 80002bc:	332e      	adds	r3, #46	; 0x2e
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	f001 ff49 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW0-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80002c8:	88fa      	ldrh	r2, [r7, #6]
 80002ca:	494f      	ldr	r1, [pc, #316]	; (8000408 <KEYPAD_Scan+0x2bc>)
 80002cc:	4613      	mov	r3, r2
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	4413      	add	r3, r2
 80002d2:	011b      	lsls	r3, r3, #4
 80002d4:	440b      	add	r3, r1
 80002d6:	6818      	ldr	r0, [r3, #0]
 80002d8:	88fa      	ldrh	r2, [r7, #6]
 80002da:	494b      	ldr	r1, [pc, #300]	; (8000408 <KEYPAD_Scan+0x2bc>)
 80002dc:	4613      	mov	r3, r2
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	4413      	add	r3, r2
 80002e2:	011b      	lsls	r3, r3, #4
 80002e4:	440b      	add	r3, r1
 80002e6:	3310      	adds	r3, #16
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	4619      	mov	r1, r3
 80002ec:	f001 ff1e 	bl	800212c <HAL_GPIO_ReadPin>
 80002f0:	4603      	mov	r3, r0
 80002f2:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80002f4:	7bbb      	ldrb	r3, [r7, #14]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d006      	beq.n	8000308 <KEYPAD_Scan+0x1bc>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 1;
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	4a43      	ldr	r2, [pc, #268]	; (800040c <KEYPAD_Scan+0x2c0>)
 80002fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000302:	2201      	movs	r2, #1
 8000304:	701a      	strb	r2, [r3, #0]
 8000306:	e005      	b.n	8000314 <KEYPAD_Scan+0x1c8>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	4a40      	ldr	r2, [pc, #256]	; (800040c <KEYPAD_Scan+0x2c0>)
 800030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8000314:	88fa      	ldrh	r2, [r7, #6]
 8000316:	493c      	ldr	r1, [pc, #240]	; (8000408 <KEYPAD_Scan+0x2bc>)
 8000318:	4613      	mov	r3, r2
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	4413      	add	r3, r2
 800031e:	011b      	lsls	r3, r3, #4
 8000320:	440b      	add	r3, r1
 8000322:	3318      	adds	r3, #24
 8000324:	6818      	ldr	r0, [r3, #0]
 8000326:	88fa      	ldrh	r2, [r7, #6]
 8000328:	4937      	ldr	r1, [pc, #220]	; (8000408 <KEYPAD_Scan+0x2bc>)
 800032a:	4613      	mov	r3, r2
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	4413      	add	r3, r2
 8000330:	011b      	lsls	r3, r3, #4
 8000332:	440b      	add	r3, r1
 8000334:	3328      	adds	r3, #40	; 0x28
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	2200      	movs	r2, #0
 800033a:	4619      	mov	r1, r3
 800033c:	f001 ff0d 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8000340:	88fa      	ldrh	r2, [r7, #6]
 8000342:	4931      	ldr	r1, [pc, #196]	; (8000408 <KEYPAD_Scan+0x2bc>)
 8000344:	4613      	mov	r3, r2
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	4413      	add	r3, r2
 800034a:	011b      	lsls	r3, r3, #4
 800034c:	440b      	add	r3, r1
 800034e:	331c      	adds	r3, #28
 8000350:	6818      	ldr	r0, [r3, #0]
 8000352:	88fa      	ldrh	r2, [r7, #6]
 8000354:	492c      	ldr	r1, [pc, #176]	; (8000408 <KEYPAD_Scan+0x2bc>)
 8000356:	4613      	mov	r3, r2
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	4413      	add	r3, r2
 800035c:	011b      	lsls	r3, r3, #4
 800035e:	440b      	add	r3, r1
 8000360:	332a      	adds	r3, #42	; 0x2a
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	2201      	movs	r2, #1
 8000366:	4619      	mov	r1, r3
 8000368:	f001 fef7 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800036c:	88fa      	ldrh	r2, [r7, #6]
 800036e:	4926      	ldr	r1, [pc, #152]	; (8000408 <KEYPAD_Scan+0x2bc>)
 8000370:	4613      	mov	r3, r2
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	4413      	add	r3, r2
 8000376:	011b      	lsls	r3, r3, #4
 8000378:	440b      	add	r3, r1
 800037a:	3320      	adds	r3, #32
 800037c:	6818      	ldr	r0, [r3, #0]
 800037e:	88fa      	ldrh	r2, [r7, #6]
 8000380:	4921      	ldr	r1, [pc, #132]	; (8000408 <KEYPAD_Scan+0x2bc>)
 8000382:	4613      	mov	r3, r2
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	4413      	add	r3, r2
 8000388:	011b      	lsls	r3, r3, #4
 800038a:	440b      	add	r3, r1
 800038c:	332c      	adds	r3, #44	; 0x2c
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	2200      	movs	r2, #0
 8000392:	4619      	mov	r1, r3
 8000394:	f001 fee1 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8000398:	88fa      	ldrh	r2, [r7, #6]
 800039a:	491b      	ldr	r1, [pc, #108]	; (8000408 <KEYPAD_Scan+0x2bc>)
 800039c:	4613      	mov	r3, r2
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	4413      	add	r3, r2
 80003a2:	011b      	lsls	r3, r3, #4
 80003a4:	440b      	add	r3, r1
 80003a6:	3324      	adds	r3, #36	; 0x24
 80003a8:	6818      	ldr	r0, [r3, #0]
 80003aa:	88fa      	ldrh	r2, [r7, #6]
 80003ac:	4916      	ldr	r1, [pc, #88]	; (8000408 <KEYPAD_Scan+0x2bc>)
 80003ae:	4613      	mov	r3, r2
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	4413      	add	r3, r2
 80003b4:	011b      	lsls	r3, r3, #4
 80003b6:	440b      	add	r3, r1
 80003b8:	332e      	adds	r3, #46	; 0x2e
 80003ba:	881b      	ldrh	r3, [r3, #0]
 80003bc:	2200      	movs	r2, #0
 80003be:	4619      	mov	r1, r3
 80003c0:	f001 fecb 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW0-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80003c4:	88fa      	ldrh	r2, [r7, #6]
 80003c6:	4910      	ldr	r1, [pc, #64]	; (8000408 <KEYPAD_Scan+0x2bc>)
 80003c8:	4613      	mov	r3, r2
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	4413      	add	r3, r2
 80003ce:	011b      	lsls	r3, r3, #4
 80003d0:	440b      	add	r3, r1
 80003d2:	6818      	ldr	r0, [r3, #0]
 80003d4:	88fa      	ldrh	r2, [r7, #6]
 80003d6:	490c      	ldr	r1, [pc, #48]	; (8000408 <KEYPAD_Scan+0x2bc>)
 80003d8:	4613      	mov	r3, r2
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	4413      	add	r3, r2
 80003de:	011b      	lsls	r3, r3, #4
 80003e0:	440b      	add	r3, r1
 80003e2:	3310      	adds	r3, #16
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	4619      	mov	r1, r3
 80003e8:	f001 fea0 	bl	800212c <HAL_GPIO_ReadPin>
 80003ec:	4603      	mov	r3, r0
 80003ee:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d00c      	beq.n	8000410 <KEYPAD_Scan+0x2c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 1;
 80003f6:	88fb      	ldrh	r3, [r7, #6]
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <KEYPAD_Scan+0x2c0>)
 80003fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003fe:	3301      	adds	r3, #1
 8000400:	2201      	movs	r2, #1
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	e00b      	b.n	800041e <KEYPAD_Scan+0x2d2>
 8000406:	bf00      	nop
 8000408:	08003dc4 	.word	0x08003dc4
 800040c:	20000028 	.word	0x20000028
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 8000410:	88fb      	ldrh	r3, [r7, #6]
 8000412:	4a7f      	ldr	r2, [pc, #508]	; (8000610 <KEYPAD_Scan+0x4c4>)
 8000414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000418:	3301      	adds	r3, #1
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800041e:	88fa      	ldrh	r2, [r7, #6]
 8000420:	497c      	ldr	r1, [pc, #496]	; (8000614 <KEYPAD_Scan+0x4c8>)
 8000422:	4613      	mov	r3, r2
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	4413      	add	r3, r2
 8000428:	011b      	lsls	r3, r3, #4
 800042a:	440b      	add	r3, r1
 800042c:	3318      	adds	r3, #24
 800042e:	6818      	ldr	r0, [r3, #0]
 8000430:	88fa      	ldrh	r2, [r7, #6]
 8000432:	4978      	ldr	r1, [pc, #480]	; (8000614 <KEYPAD_Scan+0x4c8>)
 8000434:	4613      	mov	r3, r2
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	4413      	add	r3, r2
 800043a:	011b      	lsls	r3, r3, #4
 800043c:	440b      	add	r3, r1
 800043e:	3328      	adds	r3, #40	; 0x28
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	2200      	movs	r2, #0
 8000444:	4619      	mov	r1, r3
 8000446:	f001 fe88 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 800044a:	88fa      	ldrh	r2, [r7, #6]
 800044c:	4971      	ldr	r1, [pc, #452]	; (8000614 <KEYPAD_Scan+0x4c8>)
 800044e:	4613      	mov	r3, r2
 8000450:	005b      	lsls	r3, r3, #1
 8000452:	4413      	add	r3, r2
 8000454:	011b      	lsls	r3, r3, #4
 8000456:	440b      	add	r3, r1
 8000458:	331c      	adds	r3, #28
 800045a:	6818      	ldr	r0, [r3, #0]
 800045c:	88fa      	ldrh	r2, [r7, #6]
 800045e:	496d      	ldr	r1, [pc, #436]	; (8000614 <KEYPAD_Scan+0x4c8>)
 8000460:	4613      	mov	r3, r2
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	4413      	add	r3, r2
 8000466:	011b      	lsls	r3, r3, #4
 8000468:	440b      	add	r3, r1
 800046a:	332a      	adds	r3, #42	; 0x2a
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	2200      	movs	r2, #0
 8000470:	4619      	mov	r1, r3
 8000472:	f001 fe72 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8000476:	88fa      	ldrh	r2, [r7, #6]
 8000478:	4966      	ldr	r1, [pc, #408]	; (8000614 <KEYPAD_Scan+0x4c8>)
 800047a:	4613      	mov	r3, r2
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	4413      	add	r3, r2
 8000480:	011b      	lsls	r3, r3, #4
 8000482:	440b      	add	r3, r1
 8000484:	3320      	adds	r3, #32
 8000486:	6818      	ldr	r0, [r3, #0]
 8000488:	88fa      	ldrh	r2, [r7, #6]
 800048a:	4962      	ldr	r1, [pc, #392]	; (8000614 <KEYPAD_Scan+0x4c8>)
 800048c:	4613      	mov	r3, r2
 800048e:	005b      	lsls	r3, r3, #1
 8000490:	4413      	add	r3, r2
 8000492:	011b      	lsls	r3, r3, #4
 8000494:	440b      	add	r3, r1
 8000496:	332c      	adds	r3, #44	; 0x2c
 8000498:	881b      	ldrh	r3, [r3, #0]
 800049a:	2201      	movs	r2, #1
 800049c:	4619      	mov	r1, r3
 800049e:	f001 fe5c 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80004a2:	88fa      	ldrh	r2, [r7, #6]
 80004a4:	495b      	ldr	r1, [pc, #364]	; (8000614 <KEYPAD_Scan+0x4c8>)
 80004a6:	4613      	mov	r3, r2
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	4413      	add	r3, r2
 80004ac:	011b      	lsls	r3, r3, #4
 80004ae:	440b      	add	r3, r1
 80004b0:	3324      	adds	r3, #36	; 0x24
 80004b2:	6818      	ldr	r0, [r3, #0]
 80004b4:	88fa      	ldrh	r2, [r7, #6]
 80004b6:	4957      	ldr	r1, [pc, #348]	; (8000614 <KEYPAD_Scan+0x4c8>)
 80004b8:	4613      	mov	r3, r2
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	4413      	add	r3, r2
 80004be:	011b      	lsls	r3, r3, #4
 80004c0:	440b      	add	r3, r1
 80004c2:	332e      	adds	r3, #46	; 0x2e
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	2200      	movs	r2, #0
 80004c8:	4619      	mov	r1, r3
 80004ca:	f001 fe46 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW0-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80004ce:	88fa      	ldrh	r2, [r7, #6]
 80004d0:	4950      	ldr	r1, [pc, #320]	; (8000614 <KEYPAD_Scan+0x4c8>)
 80004d2:	4613      	mov	r3, r2
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	4413      	add	r3, r2
 80004d8:	011b      	lsls	r3, r3, #4
 80004da:	440b      	add	r3, r1
 80004dc:	6818      	ldr	r0, [r3, #0]
 80004de:	88fa      	ldrh	r2, [r7, #6]
 80004e0:	494c      	ldr	r1, [pc, #304]	; (8000614 <KEYPAD_Scan+0x4c8>)
 80004e2:	4613      	mov	r3, r2
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	4413      	add	r3, r2
 80004e8:	011b      	lsls	r3, r3, #4
 80004ea:	440b      	add	r3, r1
 80004ec:	3310      	adds	r3, #16
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	4619      	mov	r1, r3
 80004f2:	f001 fe1b 	bl	800212c <HAL_GPIO_ReadPin>
 80004f6:	4603      	mov	r3, r0
 80004f8:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80004fa:	7bbb      	ldrb	r3, [r7, #14]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d007      	beq.n	8000510 <KEYPAD_Scan+0x3c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 1;
 8000500:	88fb      	ldrh	r3, [r7, #6]
 8000502:	4a43      	ldr	r2, [pc, #268]	; (8000610 <KEYPAD_Scan+0x4c4>)
 8000504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000508:	3302      	adds	r3, #2
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	e006      	b.n	800051e <KEYPAD_Scan+0x3d2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	4a3f      	ldr	r2, [pc, #252]	; (8000610 <KEYPAD_Scan+0x4c4>)
 8000514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000518:	3302      	adds	r3, #2
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800051e:	88fa      	ldrh	r2, [r7, #6]
 8000520:	493c      	ldr	r1, [pc, #240]	; (8000614 <KEYPAD_Scan+0x4c8>)
 8000522:	4613      	mov	r3, r2
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	4413      	add	r3, r2
 8000528:	011b      	lsls	r3, r3, #4
 800052a:	440b      	add	r3, r1
 800052c:	3318      	adds	r3, #24
 800052e:	6818      	ldr	r0, [r3, #0]
 8000530:	88fa      	ldrh	r2, [r7, #6]
 8000532:	4938      	ldr	r1, [pc, #224]	; (8000614 <KEYPAD_Scan+0x4c8>)
 8000534:	4613      	mov	r3, r2
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	4413      	add	r3, r2
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	440b      	add	r3, r1
 800053e:	3328      	adds	r3, #40	; 0x28
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	2200      	movs	r2, #0
 8000544:	4619      	mov	r1, r3
 8000546:	f001 fe08 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 800054a:	88fa      	ldrh	r2, [r7, #6]
 800054c:	4931      	ldr	r1, [pc, #196]	; (8000614 <KEYPAD_Scan+0x4c8>)
 800054e:	4613      	mov	r3, r2
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	4413      	add	r3, r2
 8000554:	011b      	lsls	r3, r3, #4
 8000556:	440b      	add	r3, r1
 8000558:	331c      	adds	r3, #28
 800055a:	6818      	ldr	r0, [r3, #0]
 800055c:	88fa      	ldrh	r2, [r7, #6]
 800055e:	492d      	ldr	r1, [pc, #180]	; (8000614 <KEYPAD_Scan+0x4c8>)
 8000560:	4613      	mov	r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	4413      	add	r3, r2
 8000566:	011b      	lsls	r3, r3, #4
 8000568:	440b      	add	r3, r1
 800056a:	332a      	adds	r3, #42	; 0x2a
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	2200      	movs	r2, #0
 8000570:	4619      	mov	r1, r3
 8000572:	f001 fdf2 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000576:	88fa      	ldrh	r2, [r7, #6]
 8000578:	4926      	ldr	r1, [pc, #152]	; (8000614 <KEYPAD_Scan+0x4c8>)
 800057a:	4613      	mov	r3, r2
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	4413      	add	r3, r2
 8000580:	011b      	lsls	r3, r3, #4
 8000582:	440b      	add	r3, r1
 8000584:	3320      	adds	r3, #32
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	4922      	ldr	r1, [pc, #136]	; (8000614 <KEYPAD_Scan+0x4c8>)
 800058c:	4613      	mov	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	011b      	lsls	r3, r3, #4
 8000594:	440b      	add	r3, r1
 8000596:	332c      	adds	r3, #44	; 0x2c
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	2200      	movs	r2, #0
 800059c:	4619      	mov	r1, r3
 800059e:	f001 fddc 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 80005a2:	88fa      	ldrh	r2, [r7, #6]
 80005a4:	491b      	ldr	r1, [pc, #108]	; (8000614 <KEYPAD_Scan+0x4c8>)
 80005a6:	4613      	mov	r3, r2
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	4413      	add	r3, r2
 80005ac:	011b      	lsls	r3, r3, #4
 80005ae:	440b      	add	r3, r1
 80005b0:	3324      	adds	r3, #36	; 0x24
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	88fa      	ldrh	r2, [r7, #6]
 80005b6:	4917      	ldr	r1, [pc, #92]	; (8000614 <KEYPAD_Scan+0x4c8>)
 80005b8:	4613      	mov	r3, r2
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	4413      	add	r3, r2
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	440b      	add	r3, r1
 80005c2:	332e      	adds	r3, #46	; 0x2e
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	f001 fdc6 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW0-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80005ce:	88fa      	ldrh	r2, [r7, #6]
 80005d0:	4910      	ldr	r1, [pc, #64]	; (8000614 <KEYPAD_Scan+0x4c8>)
 80005d2:	4613      	mov	r3, r2
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	440b      	add	r3, r1
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	88fa      	ldrh	r2, [r7, #6]
 80005e0:	490c      	ldr	r1, [pc, #48]	; (8000614 <KEYPAD_Scan+0x4c8>)
 80005e2:	4613      	mov	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	4413      	add	r3, r2
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	440b      	add	r3, r1
 80005ec:	3310      	adds	r3, #16
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	f001 fd9b 	bl	800212c <HAL_GPIO_ReadPin>
 80005f6:	4603      	mov	r3, r0
 80005f8:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d026      	beq.n	800064e <KEYPAD_Scan+0x502>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[3] = 1;
 8000600:	88fb      	ldrh	r3, [r7, #6]
 8000602:	4a03      	ldr	r2, [pc, #12]	; (8000610 <KEYPAD_Scan+0x4c4>)
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	3303      	adds	r3, #3
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	e01e      	b.n	800064e <KEYPAD_Scan+0x502>
 8000610:	20000028 	.word	0x20000028
 8000614:	08003dc4 	.word	0x08003dc4
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	4a8c      	ldr	r2, [pc, #560]	; (800084c <KEYPAD_Scan+0x700>)
 800061c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	4a89      	ldr	r2, [pc, #548]	; (800084c <KEYPAD_Scan+0x700>)
 8000628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062c:	3301      	adds	r3, #1
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	4a85      	ldr	r2, [pc, #532]	; (800084c <KEYPAD_Scan+0x700>)
 8000636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063a:	3302      	adds	r3, #2
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[3] = 0;
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	4a82      	ldr	r2, [pc, #520]	; (800084c <KEYPAD_Scan+0x700>)
 8000644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000648:	3303      	adds	r3, #3
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 1st ROW Check ]--------------------*/
		/*--[ Second Row Check ]--*/
		if(au8_ReadState[1])
 800064e:	7a7b      	ldrb	r3, [r7, #9]
 8000650:	2b00      	cmp	r3, #0
 8000652:	f000 8205 	beq.w	8000a60 <KEYPAD_Scan+0x914>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8000656:	88fa      	ldrh	r2, [r7, #6]
 8000658:	497d      	ldr	r1, [pc, #500]	; (8000850 <KEYPAD_Scan+0x704>)
 800065a:	4613      	mov	r3, r2
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	4413      	add	r3, r2
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	440b      	add	r3, r1
 8000664:	3318      	adds	r3, #24
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	88fa      	ldrh	r2, [r7, #6]
 800066a:	4979      	ldr	r1, [pc, #484]	; (8000850 <KEYPAD_Scan+0x704>)
 800066c:	4613      	mov	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4413      	add	r3, r2
 8000672:	011b      	lsls	r3, r3, #4
 8000674:	440b      	add	r3, r1
 8000676:	3328      	adds	r3, #40	; 0x28
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	2201      	movs	r2, #1
 800067c:	4619      	mov	r1, r3
 800067e:	f001 fd6c 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000682:	88fa      	ldrh	r2, [r7, #6]
 8000684:	4972      	ldr	r1, [pc, #456]	; (8000850 <KEYPAD_Scan+0x704>)
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	011b      	lsls	r3, r3, #4
 800068e:	440b      	add	r3, r1
 8000690:	331c      	adds	r3, #28
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	88fa      	ldrh	r2, [r7, #6]
 8000696:	496e      	ldr	r1, [pc, #440]	; (8000850 <KEYPAD_Scan+0x704>)
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	440b      	add	r3, r1
 80006a2:	332a      	adds	r3, #42	; 0x2a
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	f001 fd56 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80006ae:	88fa      	ldrh	r2, [r7, #6]
 80006b0:	4967      	ldr	r1, [pc, #412]	; (8000850 <KEYPAD_Scan+0x704>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	440b      	add	r3, r1
 80006bc:	3320      	adds	r3, #32
 80006be:	6818      	ldr	r0, [r3, #0]
 80006c0:	88fa      	ldrh	r2, [r7, #6]
 80006c2:	4963      	ldr	r1, [pc, #396]	; (8000850 <KEYPAD_Scan+0x704>)
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	011b      	lsls	r3, r3, #4
 80006cc:	440b      	add	r3, r1
 80006ce:	332c      	adds	r3, #44	; 0x2c
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	2200      	movs	r2, #0
 80006d4:	4619      	mov	r1, r3
 80006d6:	f001 fd40 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80006da:	88fa      	ldrh	r2, [r7, #6]
 80006dc:	495c      	ldr	r1, [pc, #368]	; (8000850 <KEYPAD_Scan+0x704>)
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	440b      	add	r3, r1
 80006e8:	3324      	adds	r3, #36	; 0x24
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	88fa      	ldrh	r2, [r7, #6]
 80006ee:	4958      	ldr	r1, [pc, #352]	; (8000850 <KEYPAD_Scan+0x704>)
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	440b      	add	r3, r1
 80006fa:	332e      	adds	r3, #46	; 0x2e
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	2200      	movs	r2, #0
 8000700:	4619      	mov	r1, r3
 8000702:	f001 fd2a 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW1-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8000706:	88fa      	ldrh	r2, [r7, #6]
 8000708:	4951      	ldr	r1, [pc, #324]	; (8000850 <KEYPAD_Scan+0x704>)
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	011b      	lsls	r3, r3, #4
 8000712:	440b      	add	r3, r1
 8000714:	3304      	adds	r3, #4
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	88fa      	ldrh	r2, [r7, #6]
 800071a:	494d      	ldr	r1, [pc, #308]	; (8000850 <KEYPAD_Scan+0x704>)
 800071c:	4613      	mov	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	440b      	add	r3, r1
 8000726:	3312      	adds	r3, #18
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	4619      	mov	r1, r3
 800072c:	f001 fcfe 	bl	800212c <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000734:	7bbb      	ldrb	r3, [r7, #14]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d007      	beq.n	800074a <KEYPAD_Scan+0x5fe>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 1;
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	4a43      	ldr	r2, [pc, #268]	; (800084c <KEYPAD_Scan+0x700>)
 800073e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000742:	3304      	adds	r3, #4
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
 8000748:	e006      	b.n	8000758 <KEYPAD_Scan+0x60c>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	4a3f      	ldr	r2, [pc, #252]	; (800084c <KEYPAD_Scan+0x700>)
 800074e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000752:	3304      	adds	r3, #4
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8000758:	88fa      	ldrh	r2, [r7, #6]
 800075a:	493d      	ldr	r1, [pc, #244]	; (8000850 <KEYPAD_Scan+0x704>)
 800075c:	4613      	mov	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4413      	add	r3, r2
 8000762:	011b      	lsls	r3, r3, #4
 8000764:	440b      	add	r3, r1
 8000766:	3318      	adds	r3, #24
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	88fa      	ldrh	r2, [r7, #6]
 800076c:	4938      	ldr	r1, [pc, #224]	; (8000850 <KEYPAD_Scan+0x704>)
 800076e:	4613      	mov	r3, r2
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	4413      	add	r3, r2
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	440b      	add	r3, r1
 8000778:	3328      	adds	r3, #40	; 0x28
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	2200      	movs	r2, #0
 800077e:	4619      	mov	r1, r3
 8000780:	f001 fceb 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8000784:	88fa      	ldrh	r2, [r7, #6]
 8000786:	4932      	ldr	r1, [pc, #200]	; (8000850 <KEYPAD_Scan+0x704>)
 8000788:	4613      	mov	r3, r2
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	4413      	add	r3, r2
 800078e:	011b      	lsls	r3, r3, #4
 8000790:	440b      	add	r3, r1
 8000792:	331c      	adds	r3, #28
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	492d      	ldr	r1, [pc, #180]	; (8000850 <KEYPAD_Scan+0x704>)
 800079a:	4613      	mov	r3, r2
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	4413      	add	r3, r2
 80007a0:	011b      	lsls	r3, r3, #4
 80007a2:	440b      	add	r3, r1
 80007a4:	332a      	adds	r3, #42	; 0x2a
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	2201      	movs	r2, #1
 80007aa:	4619      	mov	r1, r3
 80007ac:	f001 fcd5 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80007b0:	88fa      	ldrh	r2, [r7, #6]
 80007b2:	4927      	ldr	r1, [pc, #156]	; (8000850 <KEYPAD_Scan+0x704>)
 80007b4:	4613      	mov	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	4413      	add	r3, r2
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	440b      	add	r3, r1
 80007be:	3320      	adds	r3, #32
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	88fa      	ldrh	r2, [r7, #6]
 80007c4:	4922      	ldr	r1, [pc, #136]	; (8000850 <KEYPAD_Scan+0x704>)
 80007c6:	4613      	mov	r3, r2
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	4413      	add	r3, r2
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	440b      	add	r3, r1
 80007d0:	332c      	adds	r3, #44	; 0x2c
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2200      	movs	r2, #0
 80007d6:	4619      	mov	r1, r3
 80007d8:	f001 fcbf 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80007dc:	88fa      	ldrh	r2, [r7, #6]
 80007de:	491c      	ldr	r1, [pc, #112]	; (8000850 <KEYPAD_Scan+0x704>)
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	440b      	add	r3, r1
 80007ea:	3324      	adds	r3, #36	; 0x24
 80007ec:	6818      	ldr	r0, [r3, #0]
 80007ee:	88fa      	ldrh	r2, [r7, #6]
 80007f0:	4917      	ldr	r1, [pc, #92]	; (8000850 <KEYPAD_Scan+0x704>)
 80007f2:	4613      	mov	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	440b      	add	r3, r1
 80007fc:	332e      	adds	r3, #46	; 0x2e
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	2200      	movs	r2, #0
 8000802:	4619      	mov	r1, r3
 8000804:	f001 fca9 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW1-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8000808:	88fa      	ldrh	r2, [r7, #6]
 800080a:	4911      	ldr	r1, [pc, #68]	; (8000850 <KEYPAD_Scan+0x704>)
 800080c:	4613      	mov	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	4413      	add	r3, r2
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	440b      	add	r3, r1
 8000816:	3304      	adds	r3, #4
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	88fa      	ldrh	r2, [r7, #6]
 800081c:	490c      	ldr	r1, [pc, #48]	; (8000850 <KEYPAD_Scan+0x704>)
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	440b      	add	r3, r1
 8000828:	3312      	adds	r3, #18
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	f001 fc7d 	bl	800212c <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00b      	beq.n	8000854 <KEYPAD_Scan+0x708>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 1;
 800083c:	88fb      	ldrh	r3, [r7, #6]
 800083e:	4a03      	ldr	r2, [pc, #12]	; (800084c <KEYPAD_Scan+0x700>)
 8000840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000844:	3305      	adds	r3, #5
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	e00a      	b.n	8000862 <KEYPAD_Scan+0x716>
 800084c:	20000028 	.word	0x20000028
 8000850:	08003dc4 	.word	0x08003dc4
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	4a80      	ldr	r2, [pc, #512]	; (8000a58 <KEYPAD_Scan+0x90c>)
 8000858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800085c:	3305      	adds	r3, #5
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8000862:	88fa      	ldrh	r2, [r7, #6]
 8000864:	497d      	ldr	r1, [pc, #500]	; (8000a5c <KEYPAD_Scan+0x910>)
 8000866:	4613      	mov	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	4413      	add	r3, r2
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	440b      	add	r3, r1
 8000870:	3318      	adds	r3, #24
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	88fa      	ldrh	r2, [r7, #6]
 8000876:	4979      	ldr	r1, [pc, #484]	; (8000a5c <KEYPAD_Scan+0x910>)
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	440b      	add	r3, r1
 8000882:	3328      	adds	r3, #40	; 0x28
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	f001 fc66 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 800088e:	88fa      	ldrh	r2, [r7, #6]
 8000890:	4972      	ldr	r1, [pc, #456]	; (8000a5c <KEYPAD_Scan+0x910>)
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	011b      	lsls	r3, r3, #4
 800089a:	440b      	add	r3, r1
 800089c:	331c      	adds	r3, #28
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	88fa      	ldrh	r2, [r7, #6]
 80008a2:	496e      	ldr	r1, [pc, #440]	; (8000a5c <KEYPAD_Scan+0x910>)
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	440b      	add	r3, r1
 80008ae:	332a      	adds	r3, #42	; 0x2a
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	2200      	movs	r2, #0
 80008b4:	4619      	mov	r1, r3
 80008b6:	f001 fc50 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 80008ba:	88fa      	ldrh	r2, [r7, #6]
 80008bc:	4967      	ldr	r1, [pc, #412]	; (8000a5c <KEYPAD_Scan+0x910>)
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	011b      	lsls	r3, r3, #4
 80008c6:	440b      	add	r3, r1
 80008c8:	3320      	adds	r3, #32
 80008ca:	6818      	ldr	r0, [r3, #0]
 80008cc:	88fa      	ldrh	r2, [r7, #6]
 80008ce:	4963      	ldr	r1, [pc, #396]	; (8000a5c <KEYPAD_Scan+0x910>)
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	440b      	add	r3, r1
 80008da:	332c      	adds	r3, #44	; 0x2c
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	2201      	movs	r2, #1
 80008e0:	4619      	mov	r1, r3
 80008e2:	f001 fc3a 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80008e6:	88fa      	ldrh	r2, [r7, #6]
 80008e8:	495c      	ldr	r1, [pc, #368]	; (8000a5c <KEYPAD_Scan+0x910>)
 80008ea:	4613      	mov	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	440b      	add	r3, r1
 80008f4:	3324      	adds	r3, #36	; 0x24
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	88fa      	ldrh	r2, [r7, #6]
 80008fa:	4958      	ldr	r1, [pc, #352]	; (8000a5c <KEYPAD_Scan+0x910>)
 80008fc:	4613      	mov	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4413      	add	r3, r2
 8000902:	011b      	lsls	r3, r3, #4
 8000904:	440b      	add	r3, r1
 8000906:	332e      	adds	r3, #46	; 0x2e
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	f001 fc24 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW1-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8000912:	88fa      	ldrh	r2, [r7, #6]
 8000914:	4951      	ldr	r1, [pc, #324]	; (8000a5c <KEYPAD_Scan+0x910>)
 8000916:	4613      	mov	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	440b      	add	r3, r1
 8000920:	3304      	adds	r3, #4
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	88fa      	ldrh	r2, [r7, #6]
 8000926:	494d      	ldr	r1, [pc, #308]	; (8000a5c <KEYPAD_Scan+0x910>)
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	011b      	lsls	r3, r3, #4
 8000930:	440b      	add	r3, r1
 8000932:	3312      	adds	r3, #18
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	4619      	mov	r1, r3
 8000938:	f001 fbf8 	bl	800212c <HAL_GPIO_ReadPin>
 800093c:	4603      	mov	r3, r0
 800093e:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000940:	7bbb      	ldrb	r3, [r7, #14]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d007      	beq.n	8000956 <KEYPAD_Scan+0x80a>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 1;
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	4a43      	ldr	r2, [pc, #268]	; (8000a58 <KEYPAD_Scan+0x90c>)
 800094a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094e:	3306      	adds	r3, #6
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	e006      	b.n	8000964 <KEYPAD_Scan+0x818>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	4a3f      	ldr	r2, [pc, #252]	; (8000a58 <KEYPAD_Scan+0x90c>)
 800095a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095e:	3306      	adds	r3, #6
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8000964:	88fa      	ldrh	r2, [r7, #6]
 8000966:	493d      	ldr	r1, [pc, #244]	; (8000a5c <KEYPAD_Scan+0x910>)
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	011b      	lsls	r3, r3, #4
 8000970:	440b      	add	r3, r1
 8000972:	3318      	adds	r3, #24
 8000974:	6818      	ldr	r0, [r3, #0]
 8000976:	88fa      	ldrh	r2, [r7, #6]
 8000978:	4938      	ldr	r1, [pc, #224]	; (8000a5c <KEYPAD_Scan+0x910>)
 800097a:	4613      	mov	r3, r2
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	4413      	add	r3, r2
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	440b      	add	r3, r1
 8000984:	3328      	adds	r3, #40	; 0x28
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	2200      	movs	r2, #0
 800098a:	4619      	mov	r1, r3
 800098c:	f001 fbe5 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000990:	88fa      	ldrh	r2, [r7, #6]
 8000992:	4932      	ldr	r1, [pc, #200]	; (8000a5c <KEYPAD_Scan+0x910>)
 8000994:	4613      	mov	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	4413      	add	r3, r2
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	440b      	add	r3, r1
 800099e:	331c      	adds	r3, #28
 80009a0:	6818      	ldr	r0, [r3, #0]
 80009a2:	88fa      	ldrh	r2, [r7, #6]
 80009a4:	492d      	ldr	r1, [pc, #180]	; (8000a5c <KEYPAD_Scan+0x910>)
 80009a6:	4613      	mov	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	4413      	add	r3, r2
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	440b      	add	r3, r1
 80009b0:	332a      	adds	r3, #42	; 0x2a
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	2200      	movs	r2, #0
 80009b6:	4619      	mov	r1, r3
 80009b8:	f001 fbcf 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 80009bc:	88fa      	ldrh	r2, [r7, #6]
 80009be:	4927      	ldr	r1, [pc, #156]	; (8000a5c <KEYPAD_Scan+0x910>)
 80009c0:	4613      	mov	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4413      	add	r3, r2
 80009c6:	011b      	lsls	r3, r3, #4
 80009c8:	440b      	add	r3, r1
 80009ca:	3320      	adds	r3, #32
 80009cc:	6818      	ldr	r0, [r3, #0]
 80009ce:	88fa      	ldrh	r2, [r7, #6]
 80009d0:	4922      	ldr	r1, [pc, #136]	; (8000a5c <KEYPAD_Scan+0x910>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	011b      	lsls	r3, r3, #4
 80009da:	440b      	add	r3, r1
 80009dc:	332c      	adds	r3, #44	; 0x2c
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	2200      	movs	r2, #0
 80009e2:	4619      	mov	r1, r3
 80009e4:	f001 fbb9 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 80009e8:	88fa      	ldrh	r2, [r7, #6]
 80009ea:	491c      	ldr	r1, [pc, #112]	; (8000a5c <KEYPAD_Scan+0x910>)
 80009ec:	4613      	mov	r3, r2
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	4413      	add	r3, r2
 80009f2:	011b      	lsls	r3, r3, #4
 80009f4:	440b      	add	r3, r1
 80009f6:	3324      	adds	r3, #36	; 0x24
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	88fa      	ldrh	r2, [r7, #6]
 80009fc:	4917      	ldr	r1, [pc, #92]	; (8000a5c <KEYPAD_Scan+0x910>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	011b      	lsls	r3, r3, #4
 8000a06:	440b      	add	r3, r1
 8000a08:	332e      	adds	r3, #46	; 0x2e
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f001 fba3 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW1-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8000a14:	88fa      	ldrh	r2, [r7, #6]
 8000a16:	4911      	ldr	r1, [pc, #68]	; (8000a5c <KEYPAD_Scan+0x910>)
 8000a18:	4613      	mov	r3, r2
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	4413      	add	r3, r2
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	440b      	add	r3, r1
 8000a22:	3304      	adds	r3, #4
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	88fa      	ldrh	r2, [r7, #6]
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <KEYPAD_Scan+0x910>)
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	011b      	lsls	r3, r3, #4
 8000a32:	440b      	add	r3, r1
 8000a34:	3312      	adds	r3, #18
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f001 fb77 	bl	800212c <HAL_GPIO_ReadPin>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d027      	beq.n	8000a98 <KEYPAD_Scan+0x94c>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[7] = 1;
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <KEYPAD_Scan+0x90c>)
 8000a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a50:	3307      	adds	r3, #7
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
 8000a56:	e01f      	b.n	8000a98 <KEYPAD_Scan+0x94c>
 8000a58:	20000028 	.word	0x20000028
 8000a5c:	08003dc4 	.word	0x08003dc4
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	4a8d      	ldr	r2, [pc, #564]	; (8000c98 <KEYPAD_Scan+0xb4c>)
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	4a89      	ldr	r2, [pc, #548]	; (8000c98 <KEYPAD_Scan+0xb4c>)
 8000a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a76:	3305      	adds	r3, #5
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	4a86      	ldr	r2, [pc, #536]	; (8000c98 <KEYPAD_Scan+0xb4c>)
 8000a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a84:	3306      	adds	r3, #6
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[7] = 0;
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	4a82      	ldr	r2, [pc, #520]	; (8000c98 <KEYPAD_Scan+0xb4c>)
 8000a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a92:	3307      	adds	r3, #7
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 2nd ROW Check ]--------------------*/
		/*--[ Third Row Check ]--*/
		if(au8_ReadState[2])
 8000a98:	7abb      	ldrb	r3, [r7, #10]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 8206 	beq.w	8000eac <KEYPAD_Scan+0xd60>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8000aa0:	88fa      	ldrh	r2, [r7, #6]
 8000aa2:	497e      	ldr	r1, [pc, #504]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	4413      	add	r3, r2
 8000aaa:	011b      	lsls	r3, r3, #4
 8000aac:	440b      	add	r3, r1
 8000aae:	3318      	adds	r3, #24
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	88fa      	ldrh	r2, [r7, #6]
 8000ab4:	4979      	ldr	r1, [pc, #484]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	440b      	add	r3, r1
 8000ac0:	3328      	adds	r3, #40	; 0x28
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f001 fb47 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000acc:	88fa      	ldrh	r2, [r7, #6]
 8000ace:	4973      	ldr	r1, [pc, #460]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	440b      	add	r3, r1
 8000ada:	331c      	adds	r3, #28
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	88fa      	ldrh	r2, [r7, #6]
 8000ae0:	496e      	ldr	r1, [pc, #440]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	011b      	lsls	r3, r3, #4
 8000aea:	440b      	add	r3, r1
 8000aec:	332a      	adds	r3, #42	; 0x2a
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	2200      	movs	r2, #0
 8000af2:	4619      	mov	r1, r3
 8000af4:	f001 fb31 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000af8:	88fa      	ldrh	r2, [r7, #6]
 8000afa:	4968      	ldr	r1, [pc, #416]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000afc:	4613      	mov	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	4413      	add	r3, r2
 8000b02:	011b      	lsls	r3, r3, #4
 8000b04:	440b      	add	r3, r1
 8000b06:	3320      	adds	r3, #32
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	88fa      	ldrh	r2, [r7, #6]
 8000b0c:	4963      	ldr	r1, [pc, #396]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000b0e:	4613      	mov	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	440b      	add	r3, r1
 8000b18:	332c      	adds	r3, #44	; 0x2c
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f001 fb1b 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8000b24:	88fa      	ldrh	r2, [r7, #6]
 8000b26:	495d      	ldr	r1, [pc, #372]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	011b      	lsls	r3, r3, #4
 8000b30:	440b      	add	r3, r1
 8000b32:	3324      	adds	r3, #36	; 0x24
 8000b34:	6818      	ldr	r0, [r3, #0]
 8000b36:	88fa      	ldrh	r2, [r7, #6]
 8000b38:	4958      	ldr	r1, [pc, #352]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	011b      	lsls	r3, r3, #4
 8000b42:	440b      	add	r3, r1
 8000b44:	332e      	adds	r3, #46	; 0x2e
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f001 fb05 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW2-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8000b50:	88fa      	ldrh	r2, [r7, #6]
 8000b52:	4952      	ldr	r1, [pc, #328]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3308      	adds	r3, #8
 8000b60:	6818      	ldr	r0, [r3, #0]
 8000b62:	88fa      	ldrh	r2, [r7, #6]
 8000b64:	494d      	ldr	r1, [pc, #308]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	011b      	lsls	r3, r3, #4
 8000b6e:	440b      	add	r3, r1
 8000b70:	3314      	adds	r3, #20
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f001 fad9 	bl	800212c <HAL_GPIO_ReadPin>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000b7e:	7bbb      	ldrb	r3, [r7, #14]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d007      	beq.n	8000b94 <KEYPAD_Scan+0xa48>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 1;
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	4a44      	ldr	r2, [pc, #272]	; (8000c98 <KEYPAD_Scan+0xb4c>)
 8000b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8c:	3308      	adds	r3, #8
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	e006      	b.n	8000ba2 <KEYPAD_Scan+0xa56>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	4a40      	ldr	r2, [pc, #256]	; (8000c98 <KEYPAD_Scan+0xb4c>)
 8000b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9c:	3308      	adds	r3, #8
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8000ba2:	88fa      	ldrh	r2, [r7, #6]
 8000ba4:	493d      	ldr	r1, [pc, #244]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	440b      	add	r3, r1
 8000bb0:	3318      	adds	r3, #24
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	88fa      	ldrh	r2, [r7, #6]
 8000bb6:	4939      	ldr	r1, [pc, #228]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3328      	adds	r3, #40	; 0x28
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f001 fac6 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8000bce:	88fa      	ldrh	r2, [r7, #6]
 8000bd0:	4932      	ldr	r1, [pc, #200]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	440b      	add	r3, r1
 8000bdc:	331c      	adds	r3, #28
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	88fa      	ldrh	r2, [r7, #6]
 8000be2:	492e      	ldr	r1, [pc, #184]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	440b      	add	r3, r1
 8000bee:	332a      	adds	r3, #42	; 0x2a
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f001 fab0 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000bfa:	88fa      	ldrh	r2, [r7, #6]
 8000bfc:	4927      	ldr	r1, [pc, #156]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	011b      	lsls	r3, r3, #4
 8000c06:	440b      	add	r3, r1
 8000c08:	3320      	adds	r3, #32
 8000c0a:	6818      	ldr	r0, [r3, #0]
 8000c0c:	88fa      	ldrh	r2, [r7, #6]
 8000c0e:	4923      	ldr	r1, [pc, #140]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000c10:	4613      	mov	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	4413      	add	r3, r2
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	440b      	add	r3, r1
 8000c1a:	332c      	adds	r3, #44	; 0x2c
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	f001 fa9a 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8000c26:	88fa      	ldrh	r2, [r7, #6]
 8000c28:	491c      	ldr	r1, [pc, #112]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	4413      	add	r3, r2
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	440b      	add	r3, r1
 8000c34:	3324      	adds	r3, #36	; 0x24
 8000c36:	6818      	ldr	r0, [r3, #0]
 8000c38:	88fa      	ldrh	r2, [r7, #6]
 8000c3a:	4918      	ldr	r1, [pc, #96]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	440b      	add	r3, r1
 8000c46:	332e      	adds	r3, #46	; 0x2e
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f001 fa84 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW2-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8000c52:	88fa      	ldrh	r2, [r7, #6]
 8000c54:	4911      	ldr	r1, [pc, #68]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	88fa      	ldrh	r2, [r7, #6]
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <KEYPAD_Scan+0xb50>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	440b      	add	r3, r1
 8000c72:	3314      	adds	r3, #20
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	4619      	mov	r1, r3
 8000c78:	f001 fa58 	bl	800212c <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000c80:	7bbb      	ldrb	r3, [r7, #14]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00c      	beq.n	8000ca0 <KEYPAD_Scan+0xb54>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 1;
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	4a03      	ldr	r2, [pc, #12]	; (8000c98 <KEYPAD_Scan+0xb4c>)
 8000c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8e:	3309      	adds	r3, #9
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e00b      	b.n	8000cae <KEYPAD_Scan+0xb62>
 8000c96:	bf00      	nop
 8000c98:	20000028 	.word	0x20000028
 8000c9c:	08003dc4 	.word	0x08003dc4
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	4a80      	ldr	r2, [pc, #512]	; (8000ea4 <KEYPAD_Scan+0xd58>)
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	3309      	adds	r3, #9
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8000cae:	88fa      	ldrh	r2, [r7, #6]
 8000cb0:	497d      	ldr	r1, [pc, #500]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	440b      	add	r3, r1
 8000cbc:	3318      	adds	r3, #24
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	88fa      	ldrh	r2, [r7, #6]
 8000cc2:	4979      	ldr	r1, [pc, #484]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	440b      	add	r3, r1
 8000cce:	3328      	adds	r3, #40	; 0x28
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f001 fa40 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000cda:	88fa      	ldrh	r2, [r7, #6]
 8000cdc:	4972      	ldr	r1, [pc, #456]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	440b      	add	r3, r1
 8000ce8:	331c      	adds	r3, #28
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	496e      	ldr	r1, [pc, #440]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	440b      	add	r3, r1
 8000cfa:	332a      	adds	r3, #42	; 0x2a
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	4619      	mov	r1, r3
 8000d02:	f001 fa2a 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8000d06:	88fa      	ldrh	r2, [r7, #6]
 8000d08:	4967      	ldr	r1, [pc, #412]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	440b      	add	r3, r1
 8000d14:	3320      	adds	r3, #32
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	88fa      	ldrh	r2, [r7, #6]
 8000d1a:	4963      	ldr	r1, [pc, #396]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	011b      	lsls	r3, r3, #4
 8000d24:	440b      	add	r3, r1
 8000d26:	332c      	adds	r3, #44	; 0x2c
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f001 fa14 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8000d32:	88fa      	ldrh	r2, [r7, #6]
 8000d34:	495c      	ldr	r1, [pc, #368]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	440b      	add	r3, r1
 8000d40:	3324      	adds	r3, #36	; 0x24
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	88fa      	ldrh	r2, [r7, #6]
 8000d46:	4958      	ldr	r1, [pc, #352]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	440b      	add	r3, r1
 8000d52:	332e      	adds	r3, #46	; 0x2e
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	2200      	movs	r2, #0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f001 f9fe 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW2-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8000d5e:	88fa      	ldrh	r2, [r7, #6]
 8000d60:	4951      	ldr	r1, [pc, #324]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000d62:	4613      	mov	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	440b      	add	r3, r1
 8000d6c:	3308      	adds	r3, #8
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	88fa      	ldrh	r2, [r7, #6]
 8000d72:	494d      	ldr	r1, [pc, #308]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	440b      	add	r3, r1
 8000d7e:	3314      	adds	r3, #20
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	f001 f9d2 	bl	800212c <HAL_GPIO_ReadPin>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d007      	beq.n	8000da2 <KEYPAD_Scan+0xc56>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 1;
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	4a43      	ldr	r2, [pc, #268]	; (8000ea4 <KEYPAD_Scan+0xd58>)
 8000d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9a:	330a      	adds	r3, #10
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e006      	b.n	8000db0 <KEYPAD_Scan+0xc64>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	4a3f      	ldr	r2, [pc, #252]	; (8000ea4 <KEYPAD_Scan+0xd58>)
 8000da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000daa:	330a      	adds	r3, #10
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8000db0:	88fa      	ldrh	r2, [r7, #6]
 8000db2:	493d      	ldr	r1, [pc, #244]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3318      	adds	r3, #24
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	88fa      	ldrh	r2, [r7, #6]
 8000dc4:	4938      	ldr	r1, [pc, #224]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	440b      	add	r3, r1
 8000dd0:	3328      	adds	r3, #40	; 0x28
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f001 f9bf 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000ddc:	88fa      	ldrh	r2, [r7, #6]
 8000dde:	4932      	ldr	r1, [pc, #200]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	440b      	add	r3, r1
 8000dea:	331c      	adds	r3, #28
 8000dec:	6818      	ldr	r0, [r3, #0]
 8000dee:	88fa      	ldrh	r2, [r7, #6]
 8000df0:	492d      	ldr	r1, [pc, #180]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	440b      	add	r3, r1
 8000dfc:	332a      	adds	r3, #42	; 0x2a
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	f001 f9a9 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000e08:	88fa      	ldrh	r2, [r7, #6]
 8000e0a:	4927      	ldr	r1, [pc, #156]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	440b      	add	r3, r1
 8000e16:	3320      	adds	r3, #32
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	88fa      	ldrh	r2, [r7, #6]
 8000e1c:	4922      	ldr	r1, [pc, #136]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000e1e:	4613      	mov	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	440b      	add	r3, r1
 8000e28:	332c      	adds	r3, #44	; 0x2c
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f001 f993 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8000e34:	88fa      	ldrh	r2, [r7, #6]
 8000e36:	491c      	ldr	r1, [pc, #112]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000e38:	4613      	mov	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	440b      	add	r3, r1
 8000e42:	3324      	adds	r3, #36	; 0x24
 8000e44:	6818      	ldr	r0, [r3, #0]
 8000e46:	88fa      	ldrh	r2, [r7, #6]
 8000e48:	4917      	ldr	r1, [pc, #92]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	440b      	add	r3, r1
 8000e54:	332e      	adds	r3, #46	; 0x2e
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f001 f97d 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW2-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8000e60:	88fa      	ldrh	r2, [r7, #6]
 8000e62:	4911      	ldr	r1, [pc, #68]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	440b      	add	r3, r1
 8000e6e:	3308      	adds	r3, #8
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	88fa      	ldrh	r2, [r7, #6]
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <KEYPAD_Scan+0xd5c>)
 8000e76:	4613      	mov	r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	440b      	add	r3, r1
 8000e80:	3314      	adds	r3, #20
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f001 f951 	bl	800212c <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d027      	beq.n	8000ee4 <KEYPAD_Scan+0xd98>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[11] = 1;
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	4a03      	ldr	r2, [pc, #12]	; (8000ea4 <KEYPAD_Scan+0xd58>)
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	330b      	adds	r3, #11
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	e01f      	b.n	8000ee4 <KEYPAD_Scan+0xd98>
 8000ea4:	20000028 	.word	0x20000028
 8000ea8:	08003dc4 	.word	0x08003dc4
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	4a8d      	ldr	r2, [pc, #564]	; (80010e4 <KEYPAD_Scan+0xf98>)
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	3308      	adds	r3, #8
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	4a89      	ldr	r2, [pc, #548]	; (80010e4 <KEYPAD_Scan+0xf98>)
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	3309      	adds	r3, #9
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	4a86      	ldr	r2, [pc, #536]	; (80010e4 <KEYPAD_Scan+0xf98>)
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	330a      	adds	r3, #10
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[11] = 0;
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	4a82      	ldr	r2, [pc, #520]	; (80010e4 <KEYPAD_Scan+0xf98>)
 8000eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ede:	330b      	adds	r3, #11
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 3rd ROW Check ]--------------------*/
		/*--[ Fourth Row Check ]--*/
		if(au8_ReadState[3])
 8000ee4:	7afb      	ldrb	r3, [r7, #11]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 8202 	beq.w	80012f0 <KEYPAD_Scan+0x11a4>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	497e      	ldr	r1, [pc, #504]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	440b      	add	r3, r1
 8000efa:	3318      	adds	r3, #24
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	88fa      	ldrh	r2, [r7, #6]
 8000f00:	4979      	ldr	r1, [pc, #484]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3328      	adds	r3, #40	; 0x28
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	2201      	movs	r2, #1
 8000f12:	4619      	mov	r1, r3
 8000f14:	f001 f921 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8000f18:	88fa      	ldrh	r2, [r7, #6]
 8000f1a:	4973      	ldr	r1, [pc, #460]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	440b      	add	r3, r1
 8000f26:	331c      	adds	r3, #28
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	88fa      	ldrh	r2, [r7, #6]
 8000f2c:	496e      	ldr	r1, [pc, #440]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	440b      	add	r3, r1
 8000f38:	332a      	adds	r3, #42	; 0x2a
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f001 f90b 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8000f44:	88fa      	ldrh	r2, [r7, #6]
 8000f46:	4968      	ldr	r1, [pc, #416]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	440b      	add	r3, r1
 8000f52:	3320      	adds	r3, #32
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	4963      	ldr	r1, [pc, #396]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	440b      	add	r3, r1
 8000f64:	332c      	adds	r3, #44	; 0x2c
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f001 f8f5 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8000f70:	88fa      	ldrh	r2, [r7, #6]
 8000f72:	495d      	ldr	r1, [pc, #372]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3324      	adds	r3, #36	; 0x24
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	88fa      	ldrh	r2, [r7, #6]
 8000f84:	4958      	ldr	r1, [pc, #352]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	440b      	add	r3, r1
 8000f90:	332e      	adds	r3, #46	; 0x2e
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	4619      	mov	r1, r3
 8000f98:	f001 f8df 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW3-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	4952      	ldr	r1, [pc, #328]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	440b      	add	r3, r1
 8000faa:	330c      	adds	r3, #12
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	88fa      	ldrh	r2, [r7, #6]
 8000fb0:	494d      	ldr	r1, [pc, #308]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	440b      	add	r3, r1
 8000fbc:	3316      	adds	r3, #22
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f001 f8b3 	bl	800212c <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d007      	beq.n	8000fe0 <KEYPAD_Scan+0xe94>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 1;
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	4a44      	ldr	r2, [pc, #272]	; (80010e4 <KEYPAD_Scan+0xf98>)
 8000fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd8:	330c      	adds	r3, #12
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	e006      	b.n	8000fee <KEYPAD_Scan+0xea2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	4a40      	ldr	r2, [pc, #256]	; (80010e4 <KEYPAD_Scan+0xf98>)
 8000fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe8:	330c      	adds	r3, #12
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8000fee:	88fa      	ldrh	r2, [r7, #6]
 8000ff0:	493d      	ldr	r1, [pc, #244]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3318      	adds	r3, #24
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	88fa      	ldrh	r2, [r7, #6]
 8001002:	4939      	ldr	r1, [pc, #228]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	440b      	add	r3, r1
 800100e:	3328      	adds	r3, #40	; 0x28
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	f001 f8a0 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 800101a:	88fa      	ldrh	r2, [r7, #6]
 800101c:	4932      	ldr	r1, [pc, #200]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	440b      	add	r3, r1
 8001028:	331c      	adds	r3, #28
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	88fa      	ldrh	r2, [r7, #6]
 800102e:	492e      	ldr	r1, [pc, #184]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	440b      	add	r3, r1
 800103a:	332a      	adds	r3, #42	; 0x2a
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	2201      	movs	r2, #1
 8001040:	4619      	mov	r1, r3
 8001042:	f001 f88a 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001046:	88fa      	ldrh	r2, [r7, #6]
 8001048:	4927      	ldr	r1, [pc, #156]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 800104a:	4613      	mov	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	440b      	add	r3, r1
 8001054:	3320      	adds	r3, #32
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	88fa      	ldrh	r2, [r7, #6]
 800105a:	4923      	ldr	r1, [pc, #140]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	440b      	add	r3, r1
 8001066:	332c      	adds	r3, #44	; 0x2c
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	f001 f874 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001072:	88fa      	ldrh	r2, [r7, #6]
 8001074:	491c      	ldr	r1, [pc, #112]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	440b      	add	r3, r1
 8001080:	3324      	adds	r3, #36	; 0x24
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	88fa      	ldrh	r2, [r7, #6]
 8001086:	4918      	ldr	r1, [pc, #96]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	440b      	add	r3, r1
 8001092:	332e      	adds	r3, #46	; 0x2e
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	f001 f85e 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW3-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 800109e:	88fa      	ldrh	r2, [r7, #6]
 80010a0:	4911      	ldr	r1, [pc, #68]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	440b      	add	r3, r1
 80010ac:	330c      	adds	r3, #12
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	88fa      	ldrh	r2, [r7, #6]
 80010b2:	490d      	ldr	r1, [pc, #52]	; (80010e8 <KEYPAD_Scan+0xf9c>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	440b      	add	r3, r1
 80010be:	3316      	adds	r3, #22
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	f001 f832 	bl	800212c <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00c      	beq.n	80010ec <KEYPAD_Scan+0xfa0>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 1;
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <KEYPAD_Scan+0xf98>)
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	330d      	adds	r3, #13
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e00b      	b.n	80010fa <KEYPAD_Scan+0xfae>
 80010e2:	bf00      	nop
 80010e4:	20000028 	.word	0x20000028
 80010e8:	08003dc4 	.word	0x08003dc4
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	4aab      	ldr	r2, [pc, #684]	; (800139c <KEYPAD_Scan+0x1250>)
 80010f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f4:	330d      	adds	r3, #13
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80010fa:	88fa      	ldrh	r2, [r7, #6]
 80010fc:	49a8      	ldr	r1, [pc, #672]	; (80013a0 <KEYPAD_Scan+0x1254>)
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	440b      	add	r3, r1
 8001108:	3318      	adds	r3, #24
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	88fa      	ldrh	r2, [r7, #6]
 800110e:	49a4      	ldr	r1, [pc, #656]	; (80013a0 <KEYPAD_Scan+0x1254>)
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	440b      	add	r3, r1
 800111a:	3328      	adds	r3, #40	; 0x28
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	f001 f81a 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001126:	88fa      	ldrh	r2, [r7, #6]
 8001128:	499d      	ldr	r1, [pc, #628]	; (80013a0 <KEYPAD_Scan+0x1254>)
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	440b      	add	r3, r1
 8001134:	331c      	adds	r3, #28
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	4999      	ldr	r1, [pc, #612]	; (80013a0 <KEYPAD_Scan+0x1254>)
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	440b      	add	r3, r1
 8001146:	332a      	adds	r3, #42	; 0x2a
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	f001 f804 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001152:	88fa      	ldrh	r2, [r7, #6]
 8001154:	4992      	ldr	r1, [pc, #584]	; (80013a0 <KEYPAD_Scan+0x1254>)
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	440b      	add	r3, r1
 8001160:	3320      	adds	r3, #32
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	88fa      	ldrh	r2, [r7, #6]
 8001166:	498e      	ldr	r1, [pc, #568]	; (80013a0 <KEYPAD_Scan+0x1254>)
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	440b      	add	r3, r1
 8001172:	332c      	adds	r3, #44	; 0x2c
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	f000 ffee 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800117e:	88fa      	ldrh	r2, [r7, #6]
 8001180:	4987      	ldr	r1, [pc, #540]	; (80013a0 <KEYPAD_Scan+0x1254>)
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	440b      	add	r3, r1
 800118c:	3324      	adds	r3, #36	; 0x24
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	88fa      	ldrh	r2, [r7, #6]
 8001192:	4983      	ldr	r1, [pc, #524]	; (80013a0 <KEYPAD_Scan+0x1254>)
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	440b      	add	r3, r1
 800119e:	332e      	adds	r3, #46	; 0x2e
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	4619      	mov	r1, r3
 80011a6:	f000 ffd8 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW3-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80011aa:	88fa      	ldrh	r2, [r7, #6]
 80011ac:	497c      	ldr	r1, [pc, #496]	; (80013a0 <KEYPAD_Scan+0x1254>)
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	440b      	add	r3, r1
 80011b8:	330c      	adds	r3, #12
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	88fa      	ldrh	r2, [r7, #6]
 80011be:	4978      	ldr	r1, [pc, #480]	; (80013a0 <KEYPAD_Scan+0x1254>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	440b      	add	r3, r1
 80011ca:	3316      	adds	r3, #22
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	f000 ffac 	bl	800212c <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <KEYPAD_Scan+0x10a2>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 1;
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	4a6e      	ldr	r2, [pc, #440]	; (800139c <KEYPAD_Scan+0x1250>)
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	330e      	adds	r3, #14
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	e006      	b.n	80011fc <KEYPAD_Scan+0x10b0>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	4a6a      	ldr	r2, [pc, #424]	; (800139c <KEYPAD_Scan+0x1250>)
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	330e      	adds	r3, #14
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80011fc:	88fa      	ldrh	r2, [r7, #6]
 80011fe:	4968      	ldr	r1, [pc, #416]	; (80013a0 <KEYPAD_Scan+0x1254>)
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	440b      	add	r3, r1
 800120a:	3318      	adds	r3, #24
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	88fa      	ldrh	r2, [r7, #6]
 8001210:	4963      	ldr	r1, [pc, #396]	; (80013a0 <KEYPAD_Scan+0x1254>)
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	440b      	add	r3, r1
 800121c:	3328      	adds	r3, #40	; 0x28
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	2200      	movs	r2, #0
 8001222:	4619      	mov	r1, r3
 8001224:	f000 ff99 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001228:	88fa      	ldrh	r2, [r7, #6]
 800122a:	495d      	ldr	r1, [pc, #372]	; (80013a0 <KEYPAD_Scan+0x1254>)
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	440b      	add	r3, r1
 8001236:	331c      	adds	r3, #28
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	88fa      	ldrh	r2, [r7, #6]
 800123c:	4958      	ldr	r1, [pc, #352]	; (80013a0 <KEYPAD_Scan+0x1254>)
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	440b      	add	r3, r1
 8001248:	332a      	adds	r3, #42	; 0x2a
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	f000 ff83 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001254:	88fa      	ldrh	r2, [r7, #6]
 8001256:	4952      	ldr	r1, [pc, #328]	; (80013a0 <KEYPAD_Scan+0x1254>)
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	440b      	add	r3, r1
 8001262:	3320      	adds	r3, #32
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	88fa      	ldrh	r2, [r7, #6]
 8001268:	494d      	ldr	r1, [pc, #308]	; (80013a0 <KEYPAD_Scan+0x1254>)
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	440b      	add	r3, r1
 8001274:	332c      	adds	r3, #44	; 0x2c
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	f000 ff6d 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8001280:	88fa      	ldrh	r2, [r7, #6]
 8001282:	4947      	ldr	r1, [pc, #284]	; (80013a0 <KEYPAD_Scan+0x1254>)
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	440b      	add	r3, r1
 800128e:	3324      	adds	r3, #36	; 0x24
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	88fa      	ldrh	r2, [r7, #6]
 8001294:	4942      	ldr	r1, [pc, #264]	; (80013a0 <KEYPAD_Scan+0x1254>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	440b      	add	r3, r1
 80012a0:	332e      	adds	r3, #46	; 0x2e
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	f000 ff57 	bl	800215a <HAL_GPIO_WritePin>
			/* Read ROW3-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	493c      	ldr	r1, [pc, #240]	; (80013a0 <KEYPAD_Scan+0x1254>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	440b      	add	r3, r1
 80012ba:	330c      	adds	r3, #12
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	88fa      	ldrh	r2, [r7, #6]
 80012c0:	4937      	ldr	r1, [pc, #220]	; (80013a0 <KEYPAD_Scan+0x1254>)
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	440b      	add	r3, r1
 80012cc:	3316      	adds	r3, #22
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f000 ff2b 	bl	800212c <HAL_GPIO_ReadPin>
 80012d6:	4603      	mov	r3, r0
 80012d8:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80012da:	7bbb      	ldrb	r3, [r7, #14]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d035      	beq.n	800134c <KEYPAD_Scan+0x1200>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[15] = 1;
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	4a2e      	ldr	r2, [pc, #184]	; (800139c <KEYPAD_Scan+0x1250>)
 80012e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e8:	330f      	adds	r3, #15
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e02d      	b.n	800134c <KEYPAD_Scan+0x1200>
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	4a2a      	ldr	r2, [pc, #168]	; (800139c <KEYPAD_Scan+0x1250>)
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	330c      	adds	r3, #12
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	4a26      	ldr	r2, [pc, #152]	; (800139c <KEYPAD_Scan+0x1250>)
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	330d      	adds	r3, #13
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	4a23      	ldr	r2, [pc, #140]	; (800139c <KEYPAD_Scan+0x1250>)
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	330e      	adds	r3, #14
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[15] = 0;
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4a1f      	ldr	r2, [pc, #124]	; (800139c <KEYPAD_Scan+0x1250>)
 800131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001322:	330f      	adds	r3, #15
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
 8001328:	e010      	b.n	800134c <KEYPAD_Scan+0x1200>
	}
	/* Else If No Key Is Pressed */
	else
	{
		/* Fill The Keys States With 0s */
		for(i=0; i<KEYS; i++)
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e00a      	b.n	8001346 <KEYPAD_Scan+0x11fa>
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[i] = 0;
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	4a1a      	ldr	r2, [pc, #104]	; (800139c <KEYPAD_Scan+0x1250>)
 8001334:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	4413      	add	r3, r2
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
		for(i=0; i<KEYS; i++)
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	3301      	adds	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d9f1      	bls.n	8001330 <KEYPAD_Scan+0x11e4>
		}
	}
	/* Back To Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e01c      	b.n	800138c <KEYPAD_Scan+0x1240>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 8001352:	88fa      	ldrh	r2, [r7, #6]
 8001354:	7bf9      	ldrb	r1, [r7, #15]
 8001356:	4812      	ldr	r0, [pc, #72]	; (80013a0 <KEYPAD_Scan+0x1254>)
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	3306      	adds	r3, #6
 8001364:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001368:	88fa      	ldrh	r2, [r7, #6]
 800136a:	7bf9      	ldrb	r1, [r7, #15]
 800136c:	4c0c      	ldr	r4, [pc, #48]	; (80013a0 <KEYPAD_Scan+0x1254>)
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	440b      	add	r3, r1
 8001378:	3314      	adds	r3, #20
 800137a:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800137e:	2201      	movs	r2, #1
 8001380:	4619      	mov	r1, r3
 8001382:	f000 feea 	bl	800215a <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	3301      	adds	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d9df      	bls.n	8001352 <KEYPAD_Scan+0x1206>
	}
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	20000028 	.word	0x20000028
 80013a0:	08003dc4 	.word	0x08003dc4

080013a4 <LCD_I2C_cmd>:
#define SLAVE_ADDRESS_LCD 0x4e //change this according to ur setup 0x7e o 0x4e

/* Envia comando por LCD ---------------------------------------*/

void LCD_I2C_cmd(char cmd)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f023 030f 	bic.w	r3, r3, #15
 80013b4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	f043 030c 	orr.w	r3, r3, #12
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	f043 030c 	orr.w	r3, r3, #12
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80013e4:	f107 0208 	add.w	r2, r7, #8
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2304      	movs	r3, #4
 80013ee:	214e      	movs	r1, #78	; 0x4e
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <LCD_I2C_cmd+0x60>)
 80013f2:	f001 f80f 	bl	8002414 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80013f6:	2001      	movs	r0, #1
 80013f8:	f000 fbe2 	bl	8001bc0 <HAL_Delay>
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000002c 	.word	0x2000002c

08001408 <LCD_I2C_char>:

/* Envia dato por LCD ------------------------------------------*/

void LCD_I2C_char(char data)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af02      	add	r7, sp, #8
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f023 030f 	bic.w	r3, r3, #15
 8001418:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	011b      	lsls	r3, r3, #4
 800141e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	f043 030d 	orr.w	r3, r3, #13
 8001426:	b2db      	uxtb	r3, r3
 8001428:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	f043 0309 	orr.w	r3, r3, #9
 8001430:	b2db      	uxtb	r3, r3
 8001432:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	f043 030d 	orr.w	r3, r3, #13
 800143a:	b2db      	uxtb	r3, r3
 800143c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800143e:	7bbb      	ldrb	r3, [r7, #14]
 8001440:	f043 0309 	orr.w	r3, r3, #9
 8001444:	b2db      	uxtb	r3, r3
 8001446:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001448:	f107 0208 	add.w	r2, r7, #8
 800144c:	2364      	movs	r3, #100	; 0x64
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2304      	movs	r3, #4
 8001452:	214e      	movs	r1, #78	; 0x4e
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <LCD_I2C_char+0x60>)
 8001456:	f000 ffdd 	bl	8002414 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f000 fbb0 	bl	8001bc0 <HAL_Delay>
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000002c 	.word	0x2000002c

0800146c <LCD_I2C_init>:

/* Inicializa LCD -----------------------------------------------*/

void LCD_I2C_init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	LCD_I2C_cmd(0x02);
 8001470:	2002      	movs	r0, #2
 8001472:	f7ff ff97 	bl	80013a4 <LCD_I2C_cmd>
	LCD_I2C_cmd(0x28);
 8001476:	2028      	movs	r0, #40	; 0x28
 8001478:	f7ff ff94 	bl	80013a4 <LCD_I2C_cmd>
	LCD_I2C_cmd(0x0c);
 800147c:	200c      	movs	r0, #12
 800147e:	f7ff ff91 	bl	80013a4 <LCD_I2C_cmd>
	LCD_I2C_cmd(0x80);
 8001482:	2080      	movs	r0, #128	; 0x80
 8001484:	f7ff ff8e 	bl	80013a4 <LCD_I2C_cmd>
	LCD_I2C_cmd(LCD_CLEAR);
 8001488:	2001      	movs	r0, #1
 800148a:	f7ff ff8b 	bl	80013a4 <LCD_I2C_cmd>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}

08001492 <LCD_I2C_write_text>:

/* Envia cadena de caracteres al LCD -----------------------------*/

void LCD_I2C_write_text(char *str)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
	while (*str) LCD_I2C_char(*str++);
 800149a:	e006      	b.n	80014aa <LCD_I2C_write_text+0x18>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ffaf 	bl	8001408 <LCD_I2C_char>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f4      	bne.n	800149c <LCD_I2C_write_text+0xa>
}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c0:	f000 fb1c 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c4:	f000 f83c 	bl	8001540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c8:	f000 f8fc 	bl	80016c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014cc:	f000 f87e 	bl	80015cc <MX_I2C1_Init>
  MX_TIM2_Init();
 80014d0:	f000 f8aa 	bl	8001628 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80014d4:	4816      	ldr	r0, [pc, #88]	; (8001530 <main+0x74>)
 80014d6:	f002 f86f 	bl	80035b8 <HAL_TIM_Base_Start_IT>

  ack = HAL_I2C_IsDeviceReady(&hi2c1, 0x27, 3, 6);
 80014da:	2306      	movs	r3, #6
 80014dc:	2203      	movs	r2, #3
 80014de:	2127      	movs	r1, #39	; 0x27
 80014e0:	4814      	ldr	r0, [pc, #80]	; (8001534 <main+0x78>)
 80014e2:	f001 f895 	bl	8002610 <HAL_I2C_IsDeviceReady>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <main+0x7c>)
 80014ec:	701a      	strb	r2, [r3, #0]
  if(ack == HAL_OK){
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <main+0x7c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d113      	bne.n	800151e <main+0x62>
  		HAL_Delay(5000);
 80014f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80014fa:	f000 fb61 	bl	8001bc0 <HAL_Delay>
  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <main+0x80>)
 8001506:	f000 fe28 	bl	800215a <HAL_GPIO_WritePin>
  		HAL_Delay(5000);
 800150a:	f241 3088 	movw	r0, #5000	; 0x1388
 800150e:	f000 fb57 	bl	8001bc0 <HAL_Delay>
  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001518:	4808      	ldr	r0, [pc, #32]	; (800153c <main+0x80>)
 800151a:	f000 fe1e 	bl	800215a <HAL_GPIO_WritePin>
  	  }

  LCD_I2C_init();
 800151e:	f7ff ffa5 	bl	800146c <LCD_I2C_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Display_Handler();
 8001522:	f000 f90d 	bl	8001740 <Display_Handler>
	  HAL_Delay(10);
 8001526:	200a      	movs	r0, #10
 8001528:	f000 fb4a 	bl	8001bc0 <HAL_Delay>
	  Display_Handler();
 800152c:	e7f9      	b.n	8001522 <main+0x66>
 800152e:	bf00      	nop
 8001530:	20000080 	.word	0x20000080
 8001534:	2000002c 	.word	0x2000002c
 8001538:	200000c8 	.word	0x200000c8
 800153c:	40011000 	.word	0x40011000

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b090      	sub	sp, #64	; 0x40
 8001544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001546:	f107 0318 	add.w	r3, r7, #24
 800154a:	2228      	movs	r2, #40	; 0x28
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fbe0 	bl	8003d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001570:	2301      	movs	r3, #1
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001574:	2302      	movs	r3, #2
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800157c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800157e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	4618      	mov	r0, r3
 800158a:	f001 fbc9 	bl	8002d20 <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001594:	f000 f9ba 	bl	800190c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001598:	230f      	movs	r3, #15
 800159a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159c:	2302      	movs	r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2102      	movs	r1, #2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 fe36 	bl	8003224 <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015be:	f000 f9a5 	bl	800190c <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3740      	adds	r7, #64	; 0x40
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_I2C1_Init+0x50>)
 80015d2:	4a13      	ldr	r2, [pc, #76]	; (8001620 <MX_I2C1_Init+0x54>)
 80015d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_I2C1_Init+0x50>)
 80015d8:	4a12      	ldr	r2, [pc, #72]	; (8001624 <MX_I2C1_Init+0x58>)
 80015da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_I2C1_Init+0x50>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_I2C1_Init+0x50>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_I2C1_Init+0x50>)
 80015ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_I2C1_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_I2C1_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_I2C1_Init+0x50>)
 800160a:	f000 fdbf 	bl	800218c <HAL_I2C_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001614:	f000 f97a 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000002c 	.word	0x2000002c
 8001620:	40005400 	.word	0x40005400
 8001624:	000186a0 	.word	0x000186a0

08001628 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	463b      	mov	r3, r7
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <MX_TIM2_Init+0x98>)
 8001646:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_TIM2_Init+0x98>)
 800164e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001652:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_TIM2_Init+0x98>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_TIM2_Init+0x98>)
 800165c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001660:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_TIM2_Init+0x98>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_TIM2_Init+0x98>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800166e:	4814      	ldr	r0, [pc, #80]	; (80016c0 <MX_TIM2_Init+0x98>)
 8001670:	f001 ff52 	bl	8003518 <HAL_TIM_Base_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800167a:	f000 f947 	bl	800190c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4619      	mov	r1, r3
 800168a:	480d      	ldr	r0, [pc, #52]	; (80016c0 <MX_TIM2_Init+0x98>)
 800168c:	f002 f8ee 	bl	800386c <HAL_TIM_ConfigClockSource>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001696:	f000 f939 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016a2:	463b      	mov	r3, r7
 80016a4:	4619      	mov	r1, r3
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <MX_TIM2_Init+0x98>)
 80016a8:	f002 fac4 	bl	8003c34 <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016b2:	f000 f92b 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000080 	.word	0x20000080

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_GPIO_Init+0x58>)
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	4a13      	ldr	r2, [pc, #76]	; (800171c <MX_GPIO_Init+0x58>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	6193      	str	r3, [r2, #24]
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_GPIO_Init+0x58>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_GPIO_Init+0x58>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	4a0d      	ldr	r2, [pc, #52]	; (800171c <MX_GPIO_Init+0x58>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6193      	str	r3, [r2, #24]
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_GPIO_Init+0x58>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_GPIO_Init+0x58>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4a07      	ldr	r2, [pc, #28]	; (800171c <MX_GPIO_Init+0x58>)
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6193      	str	r3, [r2, #24]
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <MX_GPIO_Init+0x58>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	40021000 	.word	0x40021000

08001720 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001730:	d102      	bne.n	8001738 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  KEYPAD_Scan(0);
 8001732:	2000      	movs	r0, #0
 8001734:	f7fe fd0a 	bl	800014c <KEYPAD_Scan>
	  //se puede sumar aca el sensor de temp
  }
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <Display_Handler>:

void Display_Handler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
    if(gu8_KeyStatesArr[KEY_1] == KEY_PRESSED)
 8001744:	4b60      	ldr	r3, [pc, #384]	; (80018c8 <Display_Handler+0x188>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d107      	bne.n	800175c <Display_Handler+0x1c>
    {
    	LCD_I2C_write_text("1");
 800174c:	485f      	ldr	r0, [pc, #380]	; (80018cc <Display_Handler+0x18c>)
 800174e:	f7ff fea0 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_1] == KEY_PRESSED);
 8001752:	bf00      	nop
 8001754:	4b5c      	ldr	r3, [pc, #368]	; (80018c8 <Display_Handler+0x188>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d0fb      	beq.n	8001754 <Display_Handler+0x14>
    }
    if(gu8_KeyStatesArr[KEY_2] == KEY_PRESSED)
 800175c:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <Display_Handler+0x188>)
 800175e:	785b      	ldrb	r3, [r3, #1]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d107      	bne.n	8001774 <Display_Handler+0x34>
    {
    	LCD_I2C_write_text("2");
 8001764:	485a      	ldr	r0, [pc, #360]	; (80018d0 <Display_Handler+0x190>)
 8001766:	f7ff fe94 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_2] == KEY_PRESSED);
 800176a:	bf00      	nop
 800176c:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <Display_Handler+0x188>)
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d0fb      	beq.n	800176c <Display_Handler+0x2c>
    }
    if(gu8_KeyStatesArr[KEY_3] == KEY_PRESSED)
 8001774:	4b54      	ldr	r3, [pc, #336]	; (80018c8 <Display_Handler+0x188>)
 8001776:	789b      	ldrb	r3, [r3, #2]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d107      	bne.n	800178c <Display_Handler+0x4c>
    {
    	LCD_I2C_write_text("3");
 800177c:	4855      	ldr	r0, [pc, #340]	; (80018d4 <Display_Handler+0x194>)
 800177e:	f7ff fe88 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_3] == KEY_PRESSED);
 8001782:	bf00      	nop
 8001784:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <Display_Handler+0x188>)
 8001786:	789b      	ldrb	r3, [r3, #2]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d0fb      	beq.n	8001784 <Display_Handler+0x44>
    }
    if(gu8_KeyStatesArr[KEY_4] == KEY_PRESSED)
 800178c:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <Display_Handler+0x188>)
 800178e:	791b      	ldrb	r3, [r3, #4]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d107      	bne.n	80017a4 <Display_Handler+0x64>
    {
    	LCD_I2C_write_text("4");
 8001794:	4850      	ldr	r0, [pc, #320]	; (80018d8 <Display_Handler+0x198>)
 8001796:	f7ff fe7c 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_4] == KEY_PRESSED);
 800179a:	bf00      	nop
 800179c:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <Display_Handler+0x188>)
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d0fb      	beq.n	800179c <Display_Handler+0x5c>
    }
    if(gu8_KeyStatesArr[KEY_5] == KEY_PRESSED)
 80017a4:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <Display_Handler+0x188>)
 80017a6:	795b      	ldrb	r3, [r3, #5]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d107      	bne.n	80017bc <Display_Handler+0x7c>
    {
    	LCD_I2C_write_text("5");
 80017ac:	484b      	ldr	r0, [pc, #300]	; (80018dc <Display_Handler+0x19c>)
 80017ae:	f7ff fe70 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_5] == KEY_PRESSED);
 80017b2:	bf00      	nop
 80017b4:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <Display_Handler+0x188>)
 80017b6:	795b      	ldrb	r3, [r3, #5]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d0fb      	beq.n	80017b4 <Display_Handler+0x74>
    }
    if(gu8_KeyStatesArr[KEY_6] == KEY_PRESSED)
 80017bc:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <Display_Handler+0x188>)
 80017be:	799b      	ldrb	r3, [r3, #6]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <Display_Handler+0x94>
    {
    	LCD_I2C_write_text("6");
 80017c4:	4846      	ldr	r0, [pc, #280]	; (80018e0 <Display_Handler+0x1a0>)
 80017c6:	f7ff fe64 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_6] == KEY_PRESSED);
 80017ca:	bf00      	nop
 80017cc:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <Display_Handler+0x188>)
 80017ce:	799b      	ldrb	r3, [r3, #6]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d0fb      	beq.n	80017cc <Display_Handler+0x8c>
    }
    if(gu8_KeyStatesArr[KEY_7] == KEY_PRESSED)
 80017d4:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <Display_Handler+0x188>)
 80017d6:	7a1b      	ldrb	r3, [r3, #8]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d107      	bne.n	80017ec <Display_Handler+0xac>
    {
    	LCD_I2C_write_text("7");
 80017dc:	4841      	ldr	r0, [pc, #260]	; (80018e4 <Display_Handler+0x1a4>)
 80017de:	f7ff fe58 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_7] == KEY_PRESSED);
 80017e2:	bf00      	nop
 80017e4:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <Display_Handler+0x188>)
 80017e6:	7a1b      	ldrb	r3, [r3, #8]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d0fb      	beq.n	80017e4 <Display_Handler+0xa4>
    }
    if(gu8_KeyStatesArr[KEY_8] == KEY_PRESSED)
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <Display_Handler+0x188>)
 80017ee:	7a5b      	ldrb	r3, [r3, #9]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d107      	bne.n	8001804 <Display_Handler+0xc4>
    {
    	LCD_I2C_write_text("8");
 80017f4:	483c      	ldr	r0, [pc, #240]	; (80018e8 <Display_Handler+0x1a8>)
 80017f6:	f7ff fe4c 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_8] == KEY_PRESSED);
 80017fa:	bf00      	nop
 80017fc:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <Display_Handler+0x188>)
 80017fe:	7a5b      	ldrb	r3, [r3, #9]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d0fb      	beq.n	80017fc <Display_Handler+0xbc>
    }
    if(gu8_KeyStatesArr[KEY_9] == KEY_PRESSED)
 8001804:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <Display_Handler+0x188>)
 8001806:	7a9b      	ldrb	r3, [r3, #10]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d107      	bne.n	800181c <Display_Handler+0xdc>
    {
    	LCD_I2C_write_text("9");
 800180c:	4837      	ldr	r0, [pc, #220]	; (80018ec <Display_Handler+0x1ac>)
 800180e:	f7ff fe40 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_9] == KEY_PRESSED);
 8001812:	bf00      	nop
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <Display_Handler+0x188>)
 8001816:	7a9b      	ldrb	r3, [r3, #10]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d0fb      	beq.n	8001814 <Display_Handler+0xd4>
    }
    if(gu8_KeyStatesArr[KEY_0] == KEY_PRESSED)
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <Display_Handler+0x188>)
 800181e:	7b5b      	ldrb	r3, [r3, #13]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d107      	bne.n	8001834 <Display_Handler+0xf4>
    {
    	LCD_I2C_write_text("0");
 8001824:	4832      	ldr	r0, [pc, #200]	; (80018f0 <Display_Handler+0x1b0>)
 8001826:	f7ff fe34 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_0] == KEY_PRESSED);
 800182a:	bf00      	nop
 800182c:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <Display_Handler+0x188>)
 800182e:	7b5b      	ldrb	r3, [r3, #13]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d0fb      	beq.n	800182c <Display_Handler+0xec>
    }
    if(gu8_KeyStatesArr[KEY_A] == KEY_PRESSED)
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <Display_Handler+0x188>)
 8001836:	7b1b      	ldrb	r3, [r3, #12]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d107      	bne.n	800184c <Display_Handler+0x10c>
    {
    	LCD_I2C_write_text("*");
 800183c:	482d      	ldr	r0, [pc, #180]	; (80018f4 <Display_Handler+0x1b4>)
 800183e:	f7ff fe28 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_A] == KEY_PRESSED);
 8001842:	bf00      	nop
 8001844:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <Display_Handler+0x188>)
 8001846:	7b1b      	ldrb	r3, [r3, #12]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d0fb      	beq.n	8001844 <Display_Handler+0x104>
    }
    if(gu8_KeyStatesArr[KEY_H] == KEY_PRESSED)
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <Display_Handler+0x188>)
 800184e:	7b9b      	ldrb	r3, [r3, #14]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d107      	bne.n	8001864 <Display_Handler+0x124>
    {
    	LCD_I2C_write_text("#");
 8001854:	4828      	ldr	r0, [pc, #160]	; (80018f8 <Display_Handler+0x1b8>)
 8001856:	f7ff fe1c 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_H] == KEY_PRESSED);
 800185a:	bf00      	nop
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <Display_Handler+0x188>)
 800185e:	7b9b      	ldrb	r3, [r3, #14]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d0fb      	beq.n	800185c <Display_Handler+0x11c>
    }
    if(gu8_KeyStatesArr[KEY_F1] == KEY_PRESSED)
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <Display_Handler+0x188>)
 8001866:	78db      	ldrb	r3, [r3, #3]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d107      	bne.n	800187c <Display_Handler+0x13c>
    {
    	LCD_I2C_write_text("CP");
 800186c:	4823      	ldr	r0, [pc, #140]	; (80018fc <Display_Handler+0x1bc>)
 800186e:	f7ff fe10 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_F1] == KEY_PRESSED);
 8001872:	bf00      	nop
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <Display_Handler+0x188>)
 8001876:	78db      	ldrb	r3, [r3, #3]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d0fb      	beq.n	8001874 <Display_Handler+0x134>
    }
    if(gu8_KeyStatesArr[KEY_F2] == KEY_PRESSED)
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <Display_Handler+0x188>)
 800187e:	79db      	ldrb	r3, [r3, #7]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d107      	bne.n	8001894 <Display_Handler+0x154>
    {
    	LCD_I2C_write_text("CR");
 8001884:	481e      	ldr	r0, [pc, #120]	; (8001900 <Display_Handler+0x1c0>)
 8001886:	f7ff fe04 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_F2] == KEY_PRESSED);
 800188a:	bf00      	nop
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <Display_Handler+0x188>)
 800188e:	79db      	ldrb	r3, [r3, #7]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d0fb      	beq.n	800188c <Display_Handler+0x14c>
    }
    if(gu8_KeyStatesArr[KEY_F3] == KEY_PRESSED)
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <Display_Handler+0x188>)
 8001896:	7adb      	ldrb	r3, [r3, #11]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d107      	bne.n	80018ac <Display_Handler+0x16c>
       {
       	LCD_I2C_write_text("CC");
 800189c:	4819      	ldr	r0, [pc, #100]	; (8001904 <Display_Handler+0x1c4>)
 800189e:	f7ff fdf8 	bl	8001492 <LCD_I2C_write_text>
       while(gu8_KeyStatesArr[KEY_F3] == KEY_PRESSED);
 80018a2:	bf00      	nop
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <Display_Handler+0x188>)
 80018a6:	7adb      	ldrb	r3, [r3, #11]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d0fb      	beq.n	80018a4 <Display_Handler+0x164>
       }
    if(gu8_KeyStatesArr[KEY_F4] == KEY_PRESSED)
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <Display_Handler+0x188>)
 80018ae:	7bdb      	ldrb	r3, [r3, #15]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d107      	bne.n	80018c4 <Display_Handler+0x184>
    {
    	LCD_I2C_write_text("CV");
 80018b4:	4814      	ldr	r0, [pc, #80]	; (8001908 <Display_Handler+0x1c8>)
 80018b6:	f7ff fdec 	bl	8001492 <LCD_I2C_write_text>
    while(gu8_KeyStatesArr[KEY_F4] == KEY_PRESSED);
 80018ba:	bf00      	nop
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <Display_Handler+0x188>)
 80018be:	7bdb      	ldrb	r3, [r3, #15]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d0fb      	beq.n	80018bc <Display_Handler+0x17c>
    }
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200000cc 	.word	0x200000cc
 80018cc:	08003d84 	.word	0x08003d84
 80018d0:	08003d88 	.word	0x08003d88
 80018d4:	08003d8c 	.word	0x08003d8c
 80018d8:	08003d90 	.word	0x08003d90
 80018dc:	08003d94 	.word	0x08003d94
 80018e0:	08003d98 	.word	0x08003d98
 80018e4:	08003d9c 	.word	0x08003d9c
 80018e8:	08003da0 	.word	0x08003da0
 80018ec:	08003da4 	.word	0x08003da4
 80018f0:	08003da8 	.word	0x08003da8
 80018f4:	08003dac 	.word	0x08003dac
 80018f8:	08003db0 	.word	0x08003db0
 80018fc:	08003db4 	.word	0x08003db4
 8001900:	08003db8 	.word	0x08003db8
 8001904:	08003dbc 	.word	0x08003dbc
 8001908:	08003dc0 	.word	0x08003dc0

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001914:	e7fe      	b.n	8001914 <Error_Handler+0x8>
	...

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_MspInit+0x5c>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	4a14      	ldr	r2, [pc, #80]	; (8001974 <HAL_MspInit+0x5c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6193      	str	r3, [r2, #24]
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_MspInit+0x5c>)
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <HAL_MspInit+0x5c>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <HAL_MspInit+0x5c>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <HAL_MspInit+0x5c>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_MspInit+0x60>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_MspInit+0x60>)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000

0800197c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <HAL_I2C_MspInit+0x70>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d123      	bne.n	80019e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_I2C_MspInit+0x74>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <HAL_I2C_MspInit+0x74>)
 80019a2:	f043 0308 	orr.w	r3, r3, #8
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_I2C_MspInit+0x74>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019b4:	23c0      	movs	r3, #192	; 0xc0
 80019b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b8:	2312      	movs	r3, #18
 80019ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	4619      	mov	r1, r3
 80019c6:	480b      	ldr	r0, [pc, #44]	; (80019f4 <HAL_I2C_MspInit+0x78>)
 80019c8:	f000 fa2c 	bl	8001e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_I2C_MspInit+0x74>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <HAL_I2C_MspInit+0x74>)
 80019d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d6:	61d3      	str	r3, [r2, #28]
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_I2C_MspInit+0x74>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40005400 	.word	0x40005400
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010c00 	.word	0x40010c00

080019f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a08:	d113      	bne.n	8001a32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_TIM_Base_MspInit+0x44>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <HAL_TIM_Base_MspInit+0x44>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	61d3      	str	r3, [r2, #28]
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_TIM_Base_MspInit+0x44>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	201c      	movs	r0, #28
 8001a28:	f000 f9c5 	bl	8001db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a2c:	201c      	movs	r0, #28
 8001a2e:	f000 f9de 	bl	8001dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a86:	f000 f87f 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <TIM2_IRQHandler+0x10>)
 8001a96:	f001 fde1 	bl	800365c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000080 	.word	0x20000080

08001aa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab0:	f7ff fff8 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab4:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ab6:	490c      	ldr	r1, [pc, #48]	; (8001ae8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ab8:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001abc:	e002      	b.n	8001ac4 <LoopCopyDataInit>

08001abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac2:	3304      	adds	r3, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac8:	d3f9      	bcc.n	8001abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001acc:	4c09      	ldr	r4, [pc, #36]	; (8001af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad0:	e001      	b.n	8001ad6 <LoopFillZerobss>

08001ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad4:	3204      	adds	r2, #4

08001ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad8:	d3fb      	bcc.n	8001ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ada:	f002 f923 	bl	8003d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ade:	f7ff fced 	bl	80014bc <main>
  bx lr
 8001ae2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001aec:	08003e28 	.word	0x08003e28
  ldr r2, =_sbss
 8001af0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001af4:	200000e0 	.word	0x200000e0

08001af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC1_2_IRQHandler>
	...

08001afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_Init+0x28>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_Init+0x28>)
 8001b06:	f043 0310 	orr.w	r3, r3, #16
 8001b0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f947 	bl	8001da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	200f      	movs	r0, #15
 8001b14:	f000 f808 	bl	8001b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7ff fefe 	bl	8001918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40022000 	.word	0x40022000

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f95f 	bl	8001e0a <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f927 	bl	8001db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000008 	.word	0x20000008
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_IncTick+0x1c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a03      	ldr	r2, [pc, #12]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	200000dc 	.word	0x200000dc

08001bac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b02      	ldr	r3, [pc, #8]	; (8001bbc <HAL_GetTick+0x10>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	200000dc 	.word	0x200000dc

08001bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff fff0 	bl	8001bac <HAL_GetTick>
 8001bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d005      	beq.n	8001be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_Delay+0x44>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001be6:	bf00      	nop
 8001be8:	f7ff ffe0 	bl	8001bac <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d8f7      	bhi.n	8001be8 <HAL_Delay+0x28>
  {
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000008 	.word	0x20000008

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	db0b      	blt.n	8001c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	f003 021f 	and.w	r2, r3, #31
 8001c84:	4906      	ldr	r1, [pc, #24]	; (8001ca0 <__NVIC_EnableIRQ+0x34>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	; (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d6c:	d301      	bcc.n	8001d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00f      	b.n	8001d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <SysTick_Config+0x40>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	f7ff ff90 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <SysTick_Config+0x40>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <SysTick_Config+0x40>)
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ff2d 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc8:	f7ff ff42 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	6978      	ldr	r0, [r7, #20]
 8001dd4:	f7ff ff90 	bl	8001cf8 <NVIC_EncodePriority>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff5f 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001de6:	bf00      	nop
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff35 	bl	8001c6c <__NVIC_EnableIRQ>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ffa2 	bl	8001d5c <SysTick_Config>
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b08b      	sub	sp, #44	; 0x2c
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e36:	e169      	b.n	800210c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f040 8158 	bne.w	8002106 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4a9a      	ldr	r2, [pc, #616]	; (80020c4 <HAL_GPIO_Init+0x2a0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d05e      	beq.n	8001f1e <HAL_GPIO_Init+0xfa>
 8001e60:	4a98      	ldr	r2, [pc, #608]	; (80020c4 <HAL_GPIO_Init+0x2a0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d875      	bhi.n	8001f52 <HAL_GPIO_Init+0x12e>
 8001e66:	4a98      	ldr	r2, [pc, #608]	; (80020c8 <HAL_GPIO_Init+0x2a4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d058      	beq.n	8001f1e <HAL_GPIO_Init+0xfa>
 8001e6c:	4a96      	ldr	r2, [pc, #600]	; (80020c8 <HAL_GPIO_Init+0x2a4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d86f      	bhi.n	8001f52 <HAL_GPIO_Init+0x12e>
 8001e72:	4a96      	ldr	r2, [pc, #600]	; (80020cc <HAL_GPIO_Init+0x2a8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d052      	beq.n	8001f1e <HAL_GPIO_Init+0xfa>
 8001e78:	4a94      	ldr	r2, [pc, #592]	; (80020cc <HAL_GPIO_Init+0x2a8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d869      	bhi.n	8001f52 <HAL_GPIO_Init+0x12e>
 8001e7e:	4a94      	ldr	r2, [pc, #592]	; (80020d0 <HAL_GPIO_Init+0x2ac>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d04c      	beq.n	8001f1e <HAL_GPIO_Init+0xfa>
 8001e84:	4a92      	ldr	r2, [pc, #584]	; (80020d0 <HAL_GPIO_Init+0x2ac>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d863      	bhi.n	8001f52 <HAL_GPIO_Init+0x12e>
 8001e8a:	4a92      	ldr	r2, [pc, #584]	; (80020d4 <HAL_GPIO_Init+0x2b0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d046      	beq.n	8001f1e <HAL_GPIO_Init+0xfa>
 8001e90:	4a90      	ldr	r2, [pc, #576]	; (80020d4 <HAL_GPIO_Init+0x2b0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d85d      	bhi.n	8001f52 <HAL_GPIO_Init+0x12e>
 8001e96:	2b12      	cmp	r3, #18
 8001e98:	d82a      	bhi.n	8001ef0 <HAL_GPIO_Init+0xcc>
 8001e9a:	2b12      	cmp	r3, #18
 8001e9c:	d859      	bhi.n	8001f52 <HAL_GPIO_Init+0x12e>
 8001e9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ea4 <HAL_GPIO_Init+0x80>)
 8001ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea4:	08001f1f 	.word	0x08001f1f
 8001ea8:	08001ef9 	.word	0x08001ef9
 8001eac:	08001f0b 	.word	0x08001f0b
 8001eb0:	08001f4d 	.word	0x08001f4d
 8001eb4:	08001f53 	.word	0x08001f53
 8001eb8:	08001f53 	.word	0x08001f53
 8001ebc:	08001f53 	.word	0x08001f53
 8001ec0:	08001f53 	.word	0x08001f53
 8001ec4:	08001f53 	.word	0x08001f53
 8001ec8:	08001f53 	.word	0x08001f53
 8001ecc:	08001f53 	.word	0x08001f53
 8001ed0:	08001f53 	.word	0x08001f53
 8001ed4:	08001f53 	.word	0x08001f53
 8001ed8:	08001f53 	.word	0x08001f53
 8001edc:	08001f53 	.word	0x08001f53
 8001ee0:	08001f53 	.word	0x08001f53
 8001ee4:	08001f53 	.word	0x08001f53
 8001ee8:	08001f01 	.word	0x08001f01
 8001eec:	08001f15 	.word	0x08001f15
 8001ef0:	4a79      	ldr	r2, [pc, #484]	; (80020d8 <HAL_GPIO_Init+0x2b4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ef6:	e02c      	b.n	8001f52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	623b      	str	r3, [r7, #32]
          break;
 8001efe:	e029      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	3304      	adds	r3, #4
 8001f06:	623b      	str	r3, [r7, #32]
          break;
 8001f08:	e024      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	3308      	adds	r3, #8
 8001f10:	623b      	str	r3, [r7, #32]
          break;
 8001f12:	e01f      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	330c      	adds	r3, #12
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e01a      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d102      	bne.n	8001f2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f26:	2304      	movs	r3, #4
 8001f28:	623b      	str	r3, [r7, #32]
          break;
 8001f2a:	e013      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d105      	bne.n	8001f40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f34:	2308      	movs	r3, #8
 8001f36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	611a      	str	r2, [r3, #16]
          break;
 8001f3e:	e009      	b.n	8001f54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f40:	2308      	movs	r3, #8
 8001f42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	615a      	str	r2, [r3, #20]
          break;
 8001f4a:	e003      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
          break;
 8001f50:	e000      	b.n	8001f54 <HAL_GPIO_Init+0x130>
          break;
 8001f52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2bff      	cmp	r3, #255	; 0xff
 8001f58:	d801      	bhi.n	8001f5e <HAL_GPIO_Init+0x13a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	e001      	b.n	8001f62 <HAL_GPIO_Init+0x13e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2bff      	cmp	r3, #255	; 0xff
 8001f68:	d802      	bhi.n	8001f70 <HAL_GPIO_Init+0x14c>
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	e002      	b.n	8001f76 <HAL_GPIO_Init+0x152>
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	3b08      	subs	r3, #8
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	210f      	movs	r1, #15
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	401a      	ands	r2, r3
 8001f88:	6a39      	ldr	r1, [r7, #32]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	431a      	orrs	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80b1 	beq.w	8002106 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fa4:	4b4d      	ldr	r3, [pc, #308]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a4c      	ldr	r2, [pc, #304]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fbc:	4a48      	ldr	r2, [pc, #288]	; (80020e0 <HAL_GPIO_Init+0x2bc>)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a40      	ldr	r2, [pc, #256]	; (80020e4 <HAL_GPIO_Init+0x2c0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <HAL_GPIO_Init+0x1ec>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3f      	ldr	r2, [pc, #252]	; (80020e8 <HAL_GPIO_Init+0x2c4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00d      	beq.n	800200c <HAL_GPIO_Init+0x1e8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3e      	ldr	r2, [pc, #248]	; (80020ec <HAL_GPIO_Init+0x2c8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d007      	beq.n	8002008 <HAL_GPIO_Init+0x1e4>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3d      	ldr	r2, [pc, #244]	; (80020f0 <HAL_GPIO_Init+0x2cc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d101      	bne.n	8002004 <HAL_GPIO_Init+0x1e0>
 8002000:	2303      	movs	r3, #3
 8002002:	e006      	b.n	8002012 <HAL_GPIO_Init+0x1ee>
 8002004:	2304      	movs	r3, #4
 8002006:	e004      	b.n	8002012 <HAL_GPIO_Init+0x1ee>
 8002008:	2302      	movs	r3, #2
 800200a:	e002      	b.n	8002012 <HAL_GPIO_Init+0x1ee>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_GPIO_Init+0x1ee>
 8002010:	2300      	movs	r3, #0
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	f002 0203 	and.w	r2, r2, #3
 8002018:	0092      	lsls	r2, r2, #2
 800201a:	4093      	lsls	r3, r2
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002022:	492f      	ldr	r1, [pc, #188]	; (80020e0 <HAL_GPIO_Init+0x2bc>)
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	492c      	ldr	r1, [pc, #176]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	43db      	mvns	r3, r3
 8002052:	4928      	ldr	r1, [pc, #160]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 8002054:	4013      	ands	r3, r2
 8002056:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002064:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	4922      	ldr	r1, [pc, #136]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	43db      	mvns	r3, r3
 800207a:	491e      	ldr	r1, [pc, #120]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 800207c:	4013      	ands	r3, r2
 800207e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d006      	beq.n	800209a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4918      	ldr	r1, [pc, #96]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800209a:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	4914      	ldr	r1, [pc, #80]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d021      	beq.n	80020f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	490e      	ldr	r1, [pc, #56]	; (80020f4 <HAL_GPIO_Init+0x2d0>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	600b      	str	r3, [r1, #0]
 80020c0:	e021      	b.n	8002106 <HAL_GPIO_Init+0x2e2>
 80020c2:	bf00      	nop
 80020c4:	10320000 	.word	0x10320000
 80020c8:	10310000 	.word	0x10310000
 80020cc:	10220000 	.word	0x10220000
 80020d0:	10210000 	.word	0x10210000
 80020d4:	10120000 	.word	0x10120000
 80020d8:	10110000 	.word	0x10110000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010000 	.word	0x40010000
 80020e4:	40010800 	.word	0x40010800
 80020e8:	40010c00 	.word	0x40010c00
 80020ec:	40011000 	.word	0x40011000
 80020f0:	40011400 	.word	0x40011400
 80020f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_GPIO_Init+0x304>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	43db      	mvns	r3, r3
 8002100:	4909      	ldr	r1, [pc, #36]	; (8002128 <HAL_GPIO_Init+0x304>)
 8002102:	4013      	ands	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	3301      	adds	r3, #1
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	f47f ae8e 	bne.w	8001e38 <HAL_GPIO_Init+0x14>
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	372c      	adds	r7, #44	; 0x2c
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	40010400 	.word	0x40010400

0800212c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e001      	b.n	800214e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	460b      	mov	r3, r1
 8002164:	807b      	strh	r3, [r7, #2]
 8002166:	4613      	mov	r3, r2
 8002168:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800216a:	787b      	ldrb	r3, [r7, #1]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002170:	887a      	ldrh	r2, [r7, #2]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002176:	e003      	b.n	8002180 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	041a      	lsls	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	611a      	str	r2, [r3, #16]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
	...

0800218c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e12b      	b.n	80023f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fbe2 	bl	800197c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2224      	movs	r2, #36	; 0x24
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021f0:	f001 f960 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 80021f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4a81      	ldr	r2, [pc, #516]	; (8002400 <HAL_I2C_Init+0x274>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d807      	bhi.n	8002210 <HAL_I2C_Init+0x84>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4a80      	ldr	r2, [pc, #512]	; (8002404 <HAL_I2C_Init+0x278>)
 8002204:	4293      	cmp	r3, r2
 8002206:	bf94      	ite	ls
 8002208:	2301      	movls	r3, #1
 800220a:	2300      	movhi	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	e006      	b.n	800221e <HAL_I2C_Init+0x92>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a7d      	ldr	r2, [pc, #500]	; (8002408 <HAL_I2C_Init+0x27c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	bf94      	ite	ls
 8002218:	2301      	movls	r3, #1
 800221a:	2300      	movhi	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0e7      	b.n	80023f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4a78      	ldr	r2, [pc, #480]	; (800240c <HAL_I2C_Init+0x280>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0c9b      	lsrs	r3, r3, #18
 8002230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	430a      	orrs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4a6a      	ldr	r2, [pc, #424]	; (8002400 <HAL_I2C_Init+0x274>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d802      	bhi.n	8002260 <HAL_I2C_Init+0xd4>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	3301      	adds	r3, #1
 800225e:	e009      	b.n	8002274 <HAL_I2C_Init+0xe8>
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002266:	fb02 f303 	mul.w	r3, r2, r3
 800226a:	4a69      	ldr	r2, [pc, #420]	; (8002410 <HAL_I2C_Init+0x284>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	3301      	adds	r3, #1
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	430b      	orrs	r3, r1
 800227a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	495c      	ldr	r1, [pc, #368]	; (8002400 <HAL_I2C_Init+0x274>)
 8002290:	428b      	cmp	r3, r1
 8002292:	d819      	bhi.n	80022c8 <HAL_I2C_Init+0x13c>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1e59      	subs	r1, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022a8:	400b      	ands	r3, r1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_I2C_Init+0x138>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1e59      	subs	r1, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c2:	e051      	b.n	8002368 <HAL_I2C_Init+0x1dc>
 80022c4:	2304      	movs	r3, #4
 80022c6:	e04f      	b.n	8002368 <HAL_I2C_Init+0x1dc>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d111      	bne.n	80022f4 <HAL_I2C_Init+0x168>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1e58      	subs	r0, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	440b      	add	r3, r1
 80022de:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	e012      	b.n	800231a <HAL_I2C_Init+0x18e>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1e58      	subs	r0, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	0099      	lsls	r1, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	fbb0 f3f3 	udiv	r3, r0, r3
 800230a:	3301      	adds	r3, #1
 800230c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Init+0x196>
 800231e:	2301      	movs	r3, #1
 8002320:	e022      	b.n	8002368 <HAL_I2C_Init+0x1dc>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10e      	bne.n	8002348 <HAL_I2C_Init+0x1bc>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1e58      	subs	r0, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	440b      	add	r3, r1
 8002338:	fbb0 f3f3 	udiv	r3, r0, r3
 800233c:	3301      	adds	r3, #1
 800233e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002346:	e00f      	b.n	8002368 <HAL_I2C_Init+0x1dc>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e58      	subs	r0, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	0099      	lsls	r1, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	fbb0 f3f3 	udiv	r3, r0, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	6809      	ldr	r1, [r1, #0]
 800236c:	4313      	orrs	r3, r2
 800236e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6911      	ldr	r1, [r2, #16]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68d2      	ldr	r2, [r2, #12]
 80023a2:	4311      	orrs	r1, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	430b      	orrs	r3, r1
 80023aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	000186a0 	.word	0x000186a0
 8002404:	001e847f 	.word	0x001e847f
 8002408:	003d08ff 	.word	0x003d08ff
 800240c:	431bde83 	.word	0x431bde83
 8002410:	10624dd3 	.word	0x10624dd3

08002414 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	461a      	mov	r2, r3
 8002420:	460b      	mov	r3, r1
 8002422:	817b      	strh	r3, [r7, #10]
 8002424:	4613      	mov	r3, r2
 8002426:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff fbc0 	bl	8001bac <HAL_GetTick>
 800242c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b20      	cmp	r3, #32
 8002438:	f040 80e0 	bne.w	80025fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2319      	movs	r3, #25
 8002442:	2201      	movs	r2, #1
 8002444:	4970      	ldr	r1, [pc, #448]	; (8002608 <HAL_I2C_Master_Transmit+0x1f4>)
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 fa92 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002452:	2302      	movs	r3, #2
 8002454:	e0d3      	b.n	80025fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_I2C_Master_Transmit+0x50>
 8002460:	2302      	movs	r3, #2
 8002462:	e0cc      	b.n	80025fe <HAL_I2C_Master_Transmit+0x1ea>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d007      	beq.n	800248a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002498:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2221      	movs	r2, #33	; 0x21
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2210      	movs	r2, #16
 80024a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	893a      	ldrh	r2, [r7, #8]
 80024ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a50      	ldr	r2, [pc, #320]	; (800260c <HAL_I2C_Master_Transmit+0x1f8>)
 80024ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024cc:	8979      	ldrh	r1, [r7, #10]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	6a3a      	ldr	r2, [r7, #32]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f9ca 	bl	800286c <I2C_MasterRequestWrite>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e08d      	b.n	80025fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024f8:	e066      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	6a39      	ldr	r1, [r7, #32]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fb50 	bl	8002ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00d      	beq.n	8002526 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2b04      	cmp	r3, #4
 8002510:	d107      	bne.n	8002522 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002520:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e06b      	b.n	80025fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b04      	cmp	r3, #4
 8002562:	d11b      	bne.n	800259c <HAL_I2C_Master_Transmit+0x188>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	2b00      	cmp	r3, #0
 800256a:	d017      	beq.n	800259c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	6a39      	ldr	r1, [r7, #32]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fb47 	bl	8002c34 <I2C_WaitOnBTFFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00d      	beq.n	80025c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d107      	bne.n	80025c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e01a      	b.n	80025fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d194      	bne.n	80024fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	00100002 	.word	0x00100002
 800260c:	ffff0000 	.word	0xffff0000

08002610 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	460b      	mov	r3, r1
 800261e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff fac4 	bl	8001bac <HAL_GetTick>
 8002624:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b20      	cmp	r3, #32
 8002634:	f040 8111 	bne.w	800285a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2319      	movs	r3, #25
 800263e:	2201      	movs	r2, #1
 8002640:	4988      	ldr	r1, [pc, #544]	; (8002864 <HAL_I2C_IsDeviceReady+0x254>)
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f994 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800264e:	2302      	movs	r3, #2
 8002650:	e104      	b.n	800285c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_I2C_IsDeviceReady+0x50>
 800265c:	2302      	movs	r3, #2
 800265e:	e0fd      	b.n	800285c <HAL_I2C_IsDeviceReady+0x24c>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d007      	beq.n	8002686 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002694:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2224      	movs	r2, #36	; 0x24
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4a70      	ldr	r2, [pc, #448]	; (8002868 <HAL_I2C_IsDeviceReady+0x258>)
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f952 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e0:	d103      	bne.n	80026ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0b6      	b.n	800285c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026ee:	897b      	ldrh	r3, [r7, #10]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80026fe:	f7ff fa55 	bl	8001bac <HAL_GetTick>
 8002702:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b02      	cmp	r3, #2
 8002710:	bf0c      	ite	eq
 8002712:	2301      	moveq	r3, #1
 8002714:	2300      	movne	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002728:	bf0c      	ite	eq
 800272a:	2301      	moveq	r3, #1
 800272c:	2300      	movne	r3, #0
 800272e:	b2db      	uxtb	r3, r3
 8002730:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002732:	e025      	b.n	8002780 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002734:	f7ff fa3a 	bl	8001bac <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d302      	bcc.n	800274a <HAL_I2C_IsDeviceReady+0x13a>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d103      	bne.n	8002752 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	22a0      	movs	r2, #160	; 0xa0
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b02      	cmp	r3, #2
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2ba0      	cmp	r3, #160	; 0xa0
 800278a:	d005      	beq.n	8002798 <HAL_I2C_IsDeviceReady+0x188>
 800278c:	7dfb      	ldrb	r3, [r7, #23]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <HAL_I2C_IsDeviceReady+0x188>
 8002792:	7dbb      	ldrb	r3, [r7, #22]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0cd      	beq.n	8002734 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d129      	bne.n	8002802 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2319      	movs	r3, #25
 80027da:	2201      	movs	r2, #1
 80027dc:	4921      	ldr	r1, [pc, #132]	; (8002864 <HAL_I2C_IsDeviceReady+0x254>)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f8c6 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e036      	b.n	800285c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e02c      	b.n	800285c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002810:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800281a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	2319      	movs	r3, #25
 8002822:	2201      	movs	r2, #1
 8002824:	490f      	ldr	r1, [pc, #60]	; (8002864 <HAL_I2C_IsDeviceReady+0x254>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f8a2 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e012      	b.n	800285c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	3301      	adds	r3, #1
 800283a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	f4ff af32 	bcc.w	80026aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
  }
}
 800285c:	4618      	mov	r0, r3
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	00100002 	.word	0x00100002
 8002868:	ffff0000 	.word	0xffff0000

0800286c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	460b      	mov	r3, r1
 800287a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d006      	beq.n	8002896 <I2C_MasterRequestWrite+0x2a>
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d003      	beq.n	8002896 <I2C_MasterRequestWrite+0x2a>
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002894:	d108      	bne.n	80028a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e00b      	b.n	80028c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	2b12      	cmp	r3, #18
 80028ae:	d107      	bne.n	80028c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f84f 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00d      	beq.n	80028f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e6:	d103      	bne.n	80028f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e035      	b.n	8002960 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028fc:	d108      	bne.n	8002910 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800290c:	611a      	str	r2, [r3, #16]
 800290e:	e01b      	b.n	8002948 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002910:	897b      	ldrh	r3, [r7, #10]
 8002912:	11db      	asrs	r3, r3, #7
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f003 0306 	and.w	r3, r3, #6
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f063 030f 	orn	r3, r3, #15
 8002920:	b2da      	uxtb	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	490e      	ldr	r1, [pc, #56]	; (8002968 <I2C_MasterRequestWrite+0xfc>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f898 	bl	8002a64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e010      	b.n	8002960 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4907      	ldr	r1, [pc, #28]	; (800296c <I2C_MasterRequestWrite+0x100>)
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f888 	bl	8002a64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	00010008 	.word	0x00010008
 800296c:	00010002 	.word	0x00010002

08002970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002980:	e048      	b.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d044      	beq.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7ff f90f 	bl	8001bac <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d139      	bne.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	0c1b      	lsrs	r3, r3, #16
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d10d      	bne.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	43da      	mvns	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4013      	ands	r3, r2
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	e00c      	b.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	43da      	mvns	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4013      	ands	r3, r2
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d116      	bne.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e023      	b.n	8002a5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	0c1b      	lsrs	r3, r3, #16
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10d      	bne.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	43da      	mvns	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	e00c      	b.n	8002a54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	43da      	mvns	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4013      	ands	r3, r2
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d093      	beq.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a72:	e071      	b.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a82:	d123      	bne.n	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f043 0204 	orr.w	r2, r3, #4
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e067      	b.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad2:	d041      	beq.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad4:	f7ff f86a 	bl	8001bac <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d302      	bcc.n	8002aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d136      	bne.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d10c      	bne.n	8002b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4013      	ands	r3, r2
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf14      	ite	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	2300      	moveq	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	e00b      	b.n	8002b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	43da      	mvns	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e021      	b.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	0c1b      	lsrs	r3, r3, #16
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d10c      	bne.n	8002b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	43da      	mvns	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e00b      	b.n	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	43da      	mvns	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4013      	ands	r3, r2
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f47f af6d 	bne.w	8002a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb0:	e034      	b.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f886 	bl	8002cc4 <I2C_IsAcknowledgeFailed>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e034      	b.n	8002c2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d028      	beq.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bca:	f7fe ffef 	bl	8001bac <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d11d      	bne.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d016      	beq.n	8002c1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e007      	b.n	8002c2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d1c3      	bne.n	8002bb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c40:	e034      	b.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f83e 	bl	8002cc4 <I2C_IsAcknowledgeFailed>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e034      	b.n	8002cbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d028      	beq.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5a:	f7fe ffa7 	bl	8001bac <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d11d      	bne.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d016      	beq.n	8002cac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e007      	b.n	8002cbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d1c3      	bne.n	8002c42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cda:	d11b      	bne.n	8002d14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ce4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e272      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8087 	beq.w	8002e4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d40:	4b92      	ldr	r3, [pc, #584]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d00c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d4c:	4b8f      	ldr	r3, [pc, #572]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d112      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5e>
 8002d58:	4b8c      	ldr	r3, [pc, #560]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d64:	d10b      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d66:	4b89      	ldr	r3, [pc, #548]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d06c      	beq.n	8002e4c <HAL_RCC_OscConfig+0x12c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d168      	bne.n	8002e4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e24c      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x76>
 8002d88:	4b80      	ldr	r3, [pc, #512]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a7f      	ldr	r2, [pc, #508]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	e02e      	b.n	8002df4 <HAL_RCC_OscConfig+0xd4>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x98>
 8002d9e:	4b7b      	ldr	r3, [pc, #492]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a7a      	ldr	r2, [pc, #488]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b78      	ldr	r3, [pc, #480]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a77      	ldr	r2, [pc, #476]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e01d      	b.n	8002df4 <HAL_RCC_OscConfig+0xd4>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0xbc>
 8002dc2:	4b72      	ldr	r3, [pc, #456]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a71      	ldr	r2, [pc, #452]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b6f      	ldr	r3, [pc, #444]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6e      	ldr	r2, [pc, #440]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0xd4>
 8002ddc:	4b6b      	ldr	r3, [pc, #428]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6a      	ldr	r2, [pc, #424]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b68      	ldr	r3, [pc, #416]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a67      	ldr	r2, [pc, #412]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fed6 	bl	8001bac <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e04:	f7fe fed2 	bl	8001bac <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e200      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b5d      	ldr	r3, [pc, #372]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0xe4>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe fec2 	bl	8001bac <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe febe 	bl	8001bac <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1ec      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x10c>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d063      	beq.n	8002f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e5a:	4b4c      	ldr	r3, [pc, #304]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e66:	4b49      	ldr	r3, [pc, #292]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d11c      	bne.n	8002eac <HAL_RCC_OscConfig+0x18c>
 8002e72:	4b46      	ldr	r3, [pc, #280]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d116      	bne.n	8002eac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	4b43      	ldr	r3, [pc, #268]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_RCC_OscConfig+0x176>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e1c0      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4939      	ldr	r1, [pc, #228]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	e03a      	b.n	8002f22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb4:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <HAL_RCC_OscConfig+0x270>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fe fe77 	bl	8001bac <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec2:	f7fe fe73 	bl	8001bac <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e1a1      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4927      	ldr	r1, [pc, #156]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
 8002ef4:	e015      	b.n	8002f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef6:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe fe56 	bl	8001bac <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f04:	f7fe fe52 	bl	8001bac <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e180      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03a      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d019      	beq.n	8002f6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_RCC_OscConfig+0x274>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fe36 	bl	8001bac <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fe fe32 	bl	8001bac <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e160      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f62:	2001      	movs	r0, #1
 8002f64:	f000 faba 	bl	80034dc <RCC_Delay>
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7fe fe1c 	bl	8001bac <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f76:	e00f      	b.n	8002f98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe fe18 	bl	8001bac <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d908      	bls.n	8002f98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e146      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	42420000 	.word	0x42420000
 8002f94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f98:	4b92      	ldr	r3, [pc, #584]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e9      	bne.n	8002f78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a6 	beq.w	80030fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb6:	4b8b      	ldr	r3, [pc, #556]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	4b88      	ldr	r3, [pc, #544]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4a87      	ldr	r2, [pc, #540]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	61d3      	str	r3, [r2, #28]
 8002fce:	4b85      	ldr	r3, [pc, #532]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fde:	4b82      	ldr	r3, [pc, #520]	; (80031e8 <HAL_RCC_OscConfig+0x4c8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d118      	bne.n	800301c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fea:	4b7f      	ldr	r3, [pc, #508]	; (80031e8 <HAL_RCC_OscConfig+0x4c8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a7e      	ldr	r2, [pc, #504]	; (80031e8 <HAL_RCC_OscConfig+0x4c8>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fdd9 	bl	8001bac <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffe:	f7fe fdd5 	bl	8001bac <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b64      	cmp	r3, #100	; 0x64
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e103      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	4b75      	ldr	r3, [pc, #468]	; (80031e8 <HAL_RCC_OscConfig+0x4c8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d106      	bne.n	8003032 <HAL_RCC_OscConfig+0x312>
 8003024:	4b6f      	ldr	r3, [pc, #444]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4a6e      	ldr	r2, [pc, #440]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6213      	str	r3, [r2, #32]
 8003030:	e02d      	b.n	800308e <HAL_RCC_OscConfig+0x36e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x334>
 800303a:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4a69      	ldr	r2, [pc, #420]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6213      	str	r3, [r2, #32]
 8003046:	4b67      	ldr	r3, [pc, #412]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	4a66      	ldr	r2, [pc, #408]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	6213      	str	r3, [r2, #32]
 8003052:	e01c      	b.n	800308e <HAL_RCC_OscConfig+0x36e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d10c      	bne.n	8003076 <HAL_RCC_OscConfig+0x356>
 800305c:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a60      	ldr	r2, [pc, #384]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	f043 0304 	orr.w	r3, r3, #4
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	4b5e      	ldr	r3, [pc, #376]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4a5d      	ldr	r2, [pc, #372]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6213      	str	r3, [r2, #32]
 8003074:	e00b      	b.n	800308e <HAL_RCC_OscConfig+0x36e>
 8003076:	4b5b      	ldr	r3, [pc, #364]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a5a      	ldr	r2, [pc, #360]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6213      	str	r3, [r2, #32]
 8003082:	4b58      	ldr	r3, [pc, #352]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4a57      	ldr	r2, [pc, #348]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d015      	beq.n	80030c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7fe fd89 	bl	8001bac <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fe fd85 	bl	8001bac <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0b1      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	4b4b      	ldr	r3, [pc, #300]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0ee      	beq.n	800309e <HAL_RCC_OscConfig+0x37e>
 80030c0:	e014      	b.n	80030ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fe fd73 	bl	8001bac <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fe fd6f 	bl	8001bac <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e09b      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e0:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ee      	bne.n	80030ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f2:	4b3c      	ldr	r3, [pc, #240]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	4a3b      	ldr	r2, [pc, #236]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8087 	beq.w	8003216 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d061      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d146      	bne.n	80031aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311c:	4b33      	ldr	r3, [pc, #204]	; (80031ec <HAL_RCC_OscConfig+0x4cc>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003122:	f7fe fd43 	bl	8001bac <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312a:	f7fe fd3f 	bl	8001bac <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e06d      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313c:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003150:	d108      	bne.n	8003164 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4921      	ldr	r1, [pc, #132]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003164:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a19      	ldr	r1, [r3, #32]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	430b      	orrs	r3, r1
 8003176:	491b      	ldr	r1, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_RCC_OscConfig+0x4cc>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fe fd13 	bl	8001bac <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318a:	f7fe fd0f 	bl	8001bac <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e03d      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x46a>
 80031a8:	e035      	b.n	8003216 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <HAL_RCC_OscConfig+0x4cc>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe fcfc 	bl	8001bac <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe fcf8 	bl	8001bac <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e026      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x498>
 80031d6:	e01e      	b.n	8003216 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e019      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
 80031ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_OscConfig+0x500>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	429a      	cmp	r2, r3
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40021000 	.word	0x40021000

08003224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0d0      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d910      	bls.n	8003268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b67      	ldr	r3, [pc, #412]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 0207 	bic.w	r2, r3, #7
 800324e:	4965      	ldr	r1, [pc, #404]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0b8      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003280:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4a58      	ldr	r2, [pc, #352]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800328a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003298:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a52      	ldr	r2, [pc, #328]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a4:	4b50      	ldr	r3, [pc, #320]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	494d      	ldr	r1, [pc, #308]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d040      	beq.n	8003344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ca:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d115      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e07f      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e073      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f2:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e06b      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003302:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4936      	ldr	r1, [pc, #216]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	4313      	orrs	r3, r2
 8003312:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003314:	f7fe fc4a 	bl	8001bac <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	e00a      	b.n	8003332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f7fe fc46 	bl	8001bac <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e053      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 020c 	and.w	r2, r3, #12
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	429a      	cmp	r2, r3
 8003342:	d1eb      	bne.n	800331c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d210      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0207 	bic.w	r2, r3, #7
 800335a:	4922      	ldr	r1, [pc, #136]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e032      	b.n	80033da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003380:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4916      	ldr	r1, [pc, #88]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800339e:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	490e      	ldr	r1, [pc, #56]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033b2:	f000 f821 	bl	80033f8 <HAL_RCC_GetSysClockFreq>
 80033b6:	4602      	mov	r2, r0
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	490a      	ldr	r1, [pc, #40]	; (80033ec <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	5ccb      	ldrb	r3, [r1, r3]
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <HAL_RCC_ClockConfig+0x1cc>)
 80033cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_RCC_ClockConfig+0x1d0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fba8 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40022000 	.word	0x40022000
 80033e8:	40021000 	.word	0x40021000
 80033ec:	08003df4 	.word	0x08003df4
 80033f0:	20000000 	.word	0x20000000
 80033f4:	20000004 	.word	0x20000004

080033f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003412:	4b1e      	ldr	r3, [pc, #120]	; (800348c <HAL_RCC_GetSysClockFreq+0x94>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b04      	cmp	r3, #4
 8003420:	d002      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x30>
 8003422:	2b08      	cmp	r3, #8
 8003424:	d003      	beq.n	800342e <HAL_RCC_GetSysClockFreq+0x36>
 8003426:	e027      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_RCC_GetSysClockFreq+0x98>)
 800342a:	613b      	str	r3, [r7, #16]
      break;
 800342c:	e027      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	0c9b      	lsrs	r3, r3, #18
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	4a17      	ldr	r2, [pc, #92]	; (8003494 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003438:	5cd3      	ldrb	r3, [r2, r3]
 800343a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d010      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_RCC_GetSysClockFreq+0x94>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	0c5b      	lsrs	r3, r3, #17
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	4a11      	ldr	r2, [pc, #68]	; (8003498 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003452:	5cd3      	ldrb	r3, [r2, r3]
 8003454:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a0d      	ldr	r2, [pc, #52]	; (8003490 <HAL_RCC_GetSysClockFreq+0x98>)
 800345a:	fb03 f202 	mul.w	r2, r3, r2
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	e004      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a0c      	ldr	r2, [pc, #48]	; (800349c <HAL_RCC_GetSysClockFreq+0xa4>)
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	613b      	str	r3, [r7, #16]
      break;
 8003476:	e002      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCC_GetSysClockFreq+0x98>)
 800347a:	613b      	str	r3, [r7, #16]
      break;
 800347c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347e:	693b      	ldr	r3, [r7, #16]
}
 8003480:	4618      	mov	r0, r3
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	007a1200 	.word	0x007a1200
 8003494:	08003e0c 	.word	0x08003e0c
 8003498:	08003e1c 	.word	0x08003e1c
 800349c:	003d0900 	.word	0x003d0900

080034a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a4:	4b02      	ldr	r3, [pc, #8]	; (80034b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	20000000 	.word	0x20000000

080034b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034b8:	f7ff fff2 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4903      	ldr	r1, [pc, #12]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000
 80034d8:	08003e04 	.word	0x08003e04

080034dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <RCC_Delay+0x34>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <RCC_Delay+0x38>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	0a5b      	lsrs	r3, r3, #9
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034f8:	bf00      	nop
  }
  while (Delay --);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1e5a      	subs	r2, r3, #1
 80034fe:	60fa      	str	r2, [r7, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f9      	bne.n	80034f8 <RCC_Delay+0x1c>
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	20000000 	.word	0x20000000
 8003514:	10624dd3 	.word	0x10624dd3

08003518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e041      	b.n	80035ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fe fa5a 	bl	80019f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f000 fa74 	bl	8003a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d001      	beq.n	80035d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e03a      	b.n	8003646 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a18      	ldr	r2, [pc, #96]	; (8003650 <HAL_TIM_Base_Start_IT+0x98>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00e      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0x58>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fa:	d009      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0x58>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a14      	ldr	r2, [pc, #80]	; (8003654 <HAL_TIM_Base_Start_IT+0x9c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0x58>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a13      	ldr	r2, [pc, #76]	; (8003658 <HAL_TIM_Base_Start_IT+0xa0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d111      	bne.n	8003634 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b06      	cmp	r3, #6
 8003620:	d010      	beq.n	8003644 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003632:	e007      	b.n	8003644 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800

0800365c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b02      	cmp	r3, #2
 8003670:	d122      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b02      	cmp	r3, #2
 800367e:	d11b      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0202 	mvn.w	r2, #2
 8003688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f9b4 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 80036a4:	e005      	b.n	80036b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f9a7 	bl	80039fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f9b6 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d122      	bne.n	800370c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d11b      	bne.n	800370c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0204 	mvn.w	r2, #4
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f98a 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f97d 	bl	80039fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f98c 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b08      	cmp	r3, #8
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b08      	cmp	r3, #8
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0208 	mvn.w	r2, #8
 8003730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2204      	movs	r2, #4
 8003736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f960 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f953 	bl	80039fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f962 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b10      	cmp	r3, #16
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0210 	mvn.w	r2, #16
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2208      	movs	r2, #8
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f936 	bl	8003a0c <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f929 	bl	80039fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f938 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0201 	mvn.w	r2, #1
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd ffa0 	bl	8001720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d10e      	bne.n	800380c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d107      	bne.n	800380c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa7b 	bl	8003d02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b40      	cmp	r3, #64	; 0x40
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8fc 	bl	8003a30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b20      	cmp	r3, #32
 8003844:	d10e      	bne.n	8003864 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b20      	cmp	r3, #32
 8003852:	d107      	bne.n	8003864 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0220 	mvn.w	r2, #32
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa46 	bl	8003cf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_TIM_ConfigClockSource+0x1c>
 8003884:	2302      	movs	r3, #2
 8003886:	e0b4      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x186>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c0:	d03e      	beq.n	8003940 <HAL_TIM_ConfigClockSource+0xd4>
 80038c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c6:	f200 8087 	bhi.w	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ce:	f000 8086 	beq.w	80039de <HAL_TIM_ConfigClockSource+0x172>
 80038d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d6:	d87f      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b70      	cmp	r3, #112	; 0x70
 80038da:	d01a      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0xa6>
 80038dc:	2b70      	cmp	r3, #112	; 0x70
 80038de:	d87b      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b60      	cmp	r3, #96	; 0x60
 80038e2:	d050      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x11a>
 80038e4:	2b60      	cmp	r3, #96	; 0x60
 80038e6:	d877      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b50      	cmp	r3, #80	; 0x50
 80038ea:	d03c      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0xfa>
 80038ec:	2b50      	cmp	r3, #80	; 0x50
 80038ee:	d873      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d058      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x13a>
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d86f      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 80038f8:	2b30      	cmp	r3, #48	; 0x30
 80038fa:	d064      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x15a>
 80038fc:	2b30      	cmp	r3, #48	; 0x30
 80038fe:	d86b      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b20      	cmp	r3, #32
 8003902:	d060      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003904:	2b20      	cmp	r3, #32
 8003906:	d867      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d05c      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x15a>
 800390c:	2b10      	cmp	r3, #16
 800390e:	d05a      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003910:	e062      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003922:	f000 f968 	bl	8003bf6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	609a      	str	r2, [r3, #8]
      break;
 800393e:	e04f      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003950:	f000 f951 	bl	8003bf6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003962:	609a      	str	r2, [r3, #8]
      break;
 8003964:	e03c      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003972:	461a      	mov	r2, r3
 8003974:	f000 f8c8 	bl	8003b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2150      	movs	r1, #80	; 0x50
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f91f 	bl	8003bc2 <TIM_ITRx_SetConfig>
      break;
 8003984:	e02c      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003992:	461a      	mov	r2, r3
 8003994:	f000 f8e6 	bl	8003b64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2160      	movs	r1, #96	; 0x60
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f90f 	bl	8003bc2 <TIM_ITRx_SetConfig>
      break;
 80039a4:	e01c      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b2:	461a      	mov	r2, r3
 80039b4:	f000 f8a8 	bl	8003b08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2140      	movs	r1, #64	; 0x40
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f8ff 	bl	8003bc2 <TIM_ITRx_SetConfig>
      break;
 80039c4:	e00c      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f000 f8f6 	bl	8003bc2 <TIM_ITRx_SetConfig>
      break;
 80039d6:	e003      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      break;
 80039dc:	e000      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
	...

08003a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a29      	ldr	r2, [pc, #164]	; (8003afc <TIM_Base_SetConfig+0xb8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00b      	beq.n	8003a74 <TIM_Base_SetConfig+0x30>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a62:	d007      	beq.n	8003a74 <TIM_Base_SetConfig+0x30>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a26      	ldr	r2, [pc, #152]	; (8003b00 <TIM_Base_SetConfig+0xbc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_Base_SetConfig+0x30>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a25      	ldr	r2, [pc, #148]	; (8003b04 <TIM_Base_SetConfig+0xc0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d108      	bne.n	8003a86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a1c      	ldr	r2, [pc, #112]	; (8003afc <TIM_Base_SetConfig+0xb8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00b      	beq.n	8003aa6 <TIM_Base_SetConfig+0x62>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d007      	beq.n	8003aa6 <TIM_Base_SetConfig+0x62>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a19      	ldr	r2, [pc, #100]	; (8003b00 <TIM_Base_SetConfig+0xbc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_Base_SetConfig+0x62>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <TIM_Base_SetConfig+0xc0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d108      	bne.n	8003ab8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a07      	ldr	r2, [pc, #28]	; (8003afc <TIM_Base_SetConfig+0xb8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d103      	bne.n	8003aec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	615a      	str	r2, [r3, #20]
}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800

08003b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f023 0201 	bic.w	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f023 030a 	bic.w	r3, r3, #10
 8003b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f023 0210 	bic.w	r2, r3, #16
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	031b      	lsls	r3, r3, #12
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	621a      	str	r2, [r3, #32]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b085      	sub	sp, #20
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f043 0307 	orr.w	r3, r3, #7
 8003be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	609a      	str	r2, [r3, #8]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b087      	sub	sp, #28
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	021a      	lsls	r2, r3, #8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	609a      	str	r2, [r3, #8]
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e046      	b.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a16      	ldr	r2, [pc, #88]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00e      	beq.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c98:	d009      	beq.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a10      	ldr	r2, [pc, #64]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10c      	bne.n	8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	40012c00 	.word	0x40012c00
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40000800 	.word	0x40000800

08003cf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr

08003d02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <memset>:
 8003d14:	4603      	mov	r3, r0
 8003d16:	4402      	add	r2, r0
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d100      	bne.n	8003d1e <memset+0xa>
 8003d1c:	4770      	bx	lr
 8003d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d22:	e7f9      	b.n	8003d18 <memset+0x4>

08003d24 <__libc_init_array>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	2600      	movs	r6, #0
 8003d28:	4d0c      	ldr	r5, [pc, #48]	; (8003d5c <__libc_init_array+0x38>)
 8003d2a:	4c0d      	ldr	r4, [pc, #52]	; (8003d60 <__libc_init_array+0x3c>)
 8003d2c:	1b64      	subs	r4, r4, r5
 8003d2e:	10a4      	asrs	r4, r4, #2
 8003d30:	42a6      	cmp	r6, r4
 8003d32:	d109      	bne.n	8003d48 <__libc_init_array+0x24>
 8003d34:	f000 f81a 	bl	8003d6c <_init>
 8003d38:	2600      	movs	r6, #0
 8003d3a:	4d0a      	ldr	r5, [pc, #40]	; (8003d64 <__libc_init_array+0x40>)
 8003d3c:	4c0a      	ldr	r4, [pc, #40]	; (8003d68 <__libc_init_array+0x44>)
 8003d3e:	1b64      	subs	r4, r4, r5
 8003d40:	10a4      	asrs	r4, r4, #2
 8003d42:	42a6      	cmp	r6, r4
 8003d44:	d105      	bne.n	8003d52 <__libc_init_array+0x2e>
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4c:	4798      	blx	r3
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7ee      	b.n	8003d30 <__libc_init_array+0xc>
 8003d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d56:	4798      	blx	r3
 8003d58:	3601      	adds	r6, #1
 8003d5a:	e7f2      	b.n	8003d42 <__libc_init_array+0x1e>
 8003d5c:	08003e20 	.word	0x08003e20
 8003d60:	08003e20 	.word	0x08003e20
 8003d64:	08003e20 	.word	0x08003e20
 8003d68:	08003e24 	.word	0x08003e24

08003d6c <_init>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	bf00      	nop
 8003d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d72:	bc08      	pop	{r3}
 8003d74:	469e      	mov	lr, r3
 8003d76:	4770      	bx	lr

08003d78 <_fini>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	bf00      	nop
 8003d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7e:	bc08      	pop	{r3}
 8003d80:	469e      	mov	lr, r3
 8003d82:	4770      	bx	lr
